shadow$provide.module$node_modules$$pedrouid$iso_crypto$dist$cjs$hmac$async=function(global,require,module,exports){var __awaiter=this&&this.__awaiter||function(thisArg,_arguments,P,generator){function adopt(value){return value instanceof P?value:new P(function(resolve){resolve(value)})}return new (P||(P=Promise))(function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator["throw"](value))}catch(e){reject(e)}}function step(result){result.done?
resolve(result.value):adopt(result.value).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())})};Object.defineProperty(exports,"__esModule",{value:!0});exports.hmacSha512Verify=exports.hmacSha512Sign=exports.hmacSha256Verify=exports.hmacSha256Sign=void 0;const helpers_1=require("module$node_modules$$pedrouid$iso_crypto$dist$cjs$helpers$index");exports.hmacSha256Sign=function(key,msg){return __awaiter(this,void 0,void 0,function*(){return helpers_1.isBrowser()?
yield helpers_1.browserHmacSha256Sign(key,msg):helpers_1.isNode()?helpers_1.nodeHmacSha256Sign(key,msg):helpers_1.fallbackHmacSha256Sign(key,msg)})};exports.hmacSha256Verify=function(key,msg,sig){return __awaiter(this,void 0,void 0,function*(){if(helpers_1.isBrowser()){var result=yield helpers_1.browserHmacSha256Sign(key,msg);result=helpers_1.isConstantTime(result,sig)}else helpers_1.isNode()?(result=helpers_1.nodeHmacSha256Sign(key,msg),result=helpers_1.isConstantTime(result,sig)):(result=helpers_1.fallbackHmacSha256Sign(key,
msg),result=helpers_1.isConstantTime(result,sig));return result})};exports.hmacSha512Sign=function(key,msg){return __awaiter(this,void 0,void 0,function*(){return helpers_1.isBrowser()?yield helpers_1.browserHmacSha512Sign(key,msg):helpers_1.isNode()?helpers_1.nodeHmacSha512Sign(key,msg):helpers_1.fallbackHmacSha512Sign(key,msg)})};exports.hmacSha512Verify=function(key,msg,sig){return __awaiter(this,void 0,void 0,function*(){if(helpers_1.isNode()){var result=helpers_1.nodeHmacSha512Sign(key,msg);
result=helpers_1.isConstantTime(result,sig)}else result=helpers_1.fallbackHmacSha512Sign(key,msg),result=helpers_1.isConstantTime(result,sig);return result})}}
//# sourceMappingURL=module$node_modules$$pedrouid$iso_crypto$dist$cjs$hmac$async.js.map
