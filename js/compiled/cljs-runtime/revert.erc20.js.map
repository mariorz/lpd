{"version":3,"sources":["revert/erc20.cljs"],"mappings":"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","names":["revert.erc20/<uniswap-infos","token-addresses","c__52208__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__52209__auto__","switch__52185__auto__","state_67144","state_val_67145","inst_67136","cljs.core.async.impl.ioc-helpers/take!","inst_67138","inst_67139","inst_67140","inst_67141","inst_67142","cljs.core.async.impl.ioc-helpers/return-chan","statearr-67166","state-machine__52186__auto__","ret-value__52187__auto__","result__52188__auto__","cljs.core/keyword-identical?","ex__52189__auto__","e67168","statearr-67169","cljs.core/seq","statearr-67170","cljs.core/first","state__52210__auto__","statearr-67173","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","revert.thegraph/<token-days-uni","cljs.core/count","cljs.core.distinct","cljs.core.map","cljs.core.take","revert.erc20/<sushiswap-infos","state_67189","state_val_67190","inst_67180","inst_67182","inst_67184","inst_67185","inst_67186","inst_67187","statearr-67196","e67198","statearr-67199","statearr-67200","statearr-67202","revert.thegraph/<token-days-sushi","revert.erc20/<infos","state_67252","state_val_67257","inst_67221","inst_67222","inst_67223","statearr-67265","inst_67233","inst_67226","inst_67230","inst_67231","inst_67232","inst_67234","inst_67235","statearr-67269","statearr-67274","statearr-67276","inst_67237","inst_67241","cljs.core/PersistentVector","statearr-67282","inst_67243","inst_67244","inst_67239","statearr-67283","statearr-67286","e67291","statearr-67292","statearr-67295","statearr-67297","cljs.core/set","cljs.core/vec","clojure.set.difference","cljs.core.concat"],"sourcesContent":["(ns revert.erc20\n  (:require\n   [clojure.string :as string]\n   [cljs.core.async :refer [go]]\n   [cljs.core.async.interop :refer-macros [<p!]]\n   [bignumber.core :as bn]\n   [revert.utils :as u]\n   [revert.ethereum :as ethereum]\n   [revert.thegraph :as thegraph]))\n\n\n\n(defn <uniswap-infos\n  [token-addresses]\n  (go (let [infos (<! (thegraph/<token-days-uni token-addresses))\n            unique-count (count (distinct (map :address infos)))]\n        (take unique-count infos))))\n\n\n(defn <sushiswap-infos\n  [token-addresses]\n  (go (let [infos (<! (thegraph/<token-days-sushi token-addresses))\n            unique-count (count (distinct (map :address infos)))]\n        (take unique-count infos))))\n\n\n\n(defn <infos\n  [token-addresses]\n  (go (let [token-addresses' (set token-addresses)\n            uni-infos (<! (<uniswap-infos (vec token-addresses')))\n            uni-found (set (map :address uni-infos))\n            uni-missing (vec (clojure.set/difference token-addresses' uni-found))\n            sushi-infos (if (> (count uni-missing) 0)\n                          (<! (<sushiswap-infos uni-missing))\n                          [])]\n        (concat uni-infos sushi-infos))))\n\n\n\n\n#_(go (def a1 (<! (<infos [\"0x1f9840a85d5af5bf1d1762f925bdaddc4201f984\", \"0x6b3595068778dd592e39a122f4f5a5cf09c90fe2\"]))))\n\n"]}