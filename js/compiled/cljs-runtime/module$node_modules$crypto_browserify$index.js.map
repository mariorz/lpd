{
"version":3,
"file":"module$node_modules$crypto_browserify$index.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/crypto-browserify/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$crypto_browserify$index\"] = function(global,require,module,exports) {\n'use strict'\n\nexports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = require('randombytes')\nexports.createHash = exports.Hash = require('create-hash')\nexports.createHmac = exports.Hmac = require('create-hmac')\n\nvar algos = require('browserify-sign/algos')\nvar algoKeys = Object.keys(algos)\nvar hashes = ['sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'md5', 'rmd160'].concat(algoKeys)\nexports.getHashes = function () {\n  return hashes\n}\n\nvar p = require('pbkdf2')\nexports.pbkdf2 = p.pbkdf2\nexports.pbkdf2Sync = p.pbkdf2Sync\n\nvar aes = require('browserify-cipher')\n\nexports.Cipher = aes.Cipher\nexports.createCipher = aes.createCipher\nexports.Cipheriv = aes.Cipheriv\nexports.createCipheriv = aes.createCipheriv\nexports.Decipher = aes.Decipher\nexports.createDecipher = aes.createDecipher\nexports.Decipheriv = aes.Decipheriv\nexports.createDecipheriv = aes.createDecipheriv\nexports.getCiphers = aes.getCiphers\nexports.listCiphers = aes.listCiphers\n\nvar dh = require('diffie-hellman')\n\nexports.DiffieHellmanGroup = dh.DiffieHellmanGroup\nexports.createDiffieHellmanGroup = dh.createDiffieHellmanGroup\nexports.getDiffieHellman = dh.getDiffieHellman\nexports.createDiffieHellman = dh.createDiffieHellman\nexports.DiffieHellman = dh.DiffieHellman\n\nvar sign = require('browserify-sign')\n\nexports.createSign = sign.createSign\nexports.Sign = sign.Sign\nexports.createVerify = sign.createVerify\nexports.Verify = sign.Verify\n\nexports.createECDH = require('create-ecdh')\n\nvar publicEncrypt = require('public-encrypt')\n\nexports.publicEncrypt = publicEncrypt.publicEncrypt\nexports.privateEncrypt = publicEncrypt.privateEncrypt\nexports.publicDecrypt = publicEncrypt.publicDecrypt\nexports.privateDecrypt = publicEncrypt.privateDecrypt\n\n// the least I can do is make error messages for the rest of the node.js/crypto api.\n// ;[\n//   'createCredentials'\n// ].forEach(function (name) {\n//   exports[name] = function () {\n//     throw new Error([\n//       'sorry, ' + name + ' is not implemented yet',\n//       'we accept pull requests',\n//       'https://github.com/crypto-browserify/crypto-browserify'\n//     ].join('\\n'))\n//   }\n// })\n\nvar rf = require('randomfill')\n\nexports.randomFill = rf.randomFill\nexports.randomFillSync = rf.randomFillSync\n\nexports.createCredentials = function () {\n  throw new Error([\n    'sorry, createCredentials is not implemented yet',\n    'we accept pull requests',\n    'https://github.com/crypto-browserify/crypto-browserify'\n  ].join('\\n'))\n}\n\nexports.constants = {\n  'DH_CHECK_P_NOT_SAFE_PRIME': 2,\n  'DH_CHECK_P_NOT_PRIME': 1,\n  'DH_UNABLE_TO_CHECK_GENERATOR': 4,\n  'DH_NOT_SUITABLE_GENERATOR': 8,\n  'NPN_ENABLED': 1,\n  'ALPN_ENABLED': 1,\n  'RSA_PKCS1_PADDING': 1,\n  'RSA_SSLV23_PADDING': 2,\n  'RSA_NO_PADDING': 3,\n  'RSA_PKCS1_OAEP_PADDING': 4,\n  'RSA_X931_PADDING': 5,\n  'RSA_PKCS1_PSS_PADDING': 6,\n  'POINT_CONVERSION_COMPRESSED': 2,\n  'POINT_CONVERSION_UNCOMPRESSED': 4,\n  'POINT_CONVERSION_HYBRID': 6\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","randomBytes","rng","pseudoRandomBytes","prng","createHash","Hash","createHmac","Hmac","algos","algoKeys","Object","keys","hashes","concat","getHashes","exports.getHashes","p","pbkdf2","pbkdf2Sync","aes","Cipher","createCipher","Cipheriv","createCipheriv","Decipher","createDecipher","Decipheriv","createDecipheriv","getCiphers","listCiphers","dh","DiffieHellmanGroup","createDiffieHellmanGroup","getDiffieHellman","createDiffieHellman","DiffieHellman","sign","createSign","Sign","createVerify","Verify","createECDH","publicEncrypt","privateEncrypt","publicDecrypt","privateDecrypt","rf","randomFill","randomFillSync","createCredentials","exports.createCredentials","Error","constants"]
}
