{"version":3,"sources":["re_graph/core.cljc"],"mappings":"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","names":["re_frame.core.reg_event_fx","re-graph.internals/interceptors","p__39677","p__39678","map__39680","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","vec__39684","cljs.core.nth","db","dispatchable-event","instance-name","query-id","query","variables","callback-event","event","clojure.string/replace","websocket-supported?","cljs.core/contains?","cljs.core.get_in","or__4126__auto__","cljs.core/assoc-in","cljs.core.update_in","cljs.core/conj","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","re-graph.core/mutate","seq39754","self__4724__auto__","cljs.core/seq","args","callback-fn","cljs.core/last","G__39755","re-frame.core/dispatch","cljs.core.into","cljs.core.conj","cljs.core/vec","cljs.core/butlast","p__39762","p__39763","map__39764","vec__39765","re-graph.core/query","seq39769","G__39772","p__39798","p__39799","map__39800","vec__39801","cljs.core.merge","cljs.core.update","cljs.core/dissoc","temp__5735__auto__","abort-fn","G__39821","re-graph.core/abort","js/Error","re_graph.core.abort","re-graph.internals/default-instance-name","G__39832","p__39839","p__39840","map__39842","vec__39844","cofx","subscription-id","cljs.core/name","re_graph.logging.error","G__39861","re-graph.core/subscribe","re_graph.core.subscribe","G__39865","p__39868","p__39869","map__39872","vec__39874","G__39889","re-graph.core/unsubscribe","re_graph.core.unsubscribe","G__39894","re-frame.core/trim-v","re-graph.internals/re-graph-instance","p__39898","p__39899","map__39902","vec__39903","opts","new-db","re-graph.internals/deep-merge","G__39916","re-graph.core/re-init","re_graph.core.re_init","G__39924","p__39927","p__39928","map__39931","vec__39932","_","vec__39942","cljs.core/map?","ws-options","re-graph.internals/ws-options","http-options","re-graph.internals/http-options","p__39950","map__39951","temp__5733__auto__","subscription-ids","cljs.core/not-empty","cljs.core/keys","iter__4529__auto__","s__39972","cljs.core/LazySeq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__39975","cljs.core/chunk-buffer","i__39974","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__39971","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","cljs.core.assoc","ws","G__40006","re-graph.core/init","re_graph.core.init","G__40010","G__40013","re-graph.core/destroy","re_graph.core.destroy","G__40019","cljs.core/chunk-first"],"sourcesContent":["(ns re-graph.core\n  (:require [re-frame.core :as re-frame]\n            [re-graph.internals :as internals\n             :refer [interceptors default-instance-name]]\n            [re-graph.logging :as log]\n            [clojure.string :as string]))\n\n(re-frame/reg-event-fx\n ::mutate\n interceptors\n (fn [{:keys [db dispatchable-event instance-name]} [query-id query variables callback-event :as event]]\n   (let [query (str \"mutation \" (string/replace query #\"^mutation\\s?\" \"\"))\n         websocket-supported? (contains? (get-in db [:ws :supported-operations]) :mutate)]\n     (cond\n       (or (get-in db [:http :requests query-id])\n           (get-in db [:subscriptions query-id]))\n       {} ;; duplicate in-flight mutation\n\n       (and websocket-supported? (get-in db [:ws :ready?]))\n       {:db (assoc-in db [:subscriptions query-id] {:callback callback-event})\n        ::internals/send-ws [(get-in db [:ws :connection])\n                             {:id query-id\n                              :type \"start\"\n                              :payload {:query query\n                                        :variables variables}}]}\n\n       (and websocket-supported? (:ws db))\n       {:db (update-in db [:ws :queue] conj dispatchable-event)}\n\n       :else\n       {:db (assoc-in db [:http :requests query-id] {:callback callback-event})\n        ::internals/send-http [instance-name\n                               query-id\n                               (get-in db [:http :url])\n                               {:request (get-in db [:http :impl])\n                                :payload {:query query\n                                          :variables variables}}]}))))\n\n(defn mutate\n  \"Execute a GraphQL mutation. The arguments are:\n\n  [instance-name query-string variables callback]\n\n  If the optional `instance-name` is not provided, the default instance is\n  used. The callback function will receive the result of the mutation as its\n  sole argument.\"\n  [& args]\n  (let [callback-fn (last args)]\n    (re-frame/dispatch (into [::mutate] (conj (vec (butlast args)) [::internals/callback callback-fn])))))\n\n#?(:clj\n   (def\n     ^{:doc \"Executes a mutation synchronously. The arguments are:\n\n             [instance-name query-string variables timeout]\n\n             The `instance-name` and `timeout` are optional. The `timeout` is\n             specified in milliseconds.\"}\n     mutate-sync\n     (partial internals/sync-wrapper mutate)))\n\n(re-frame/reg-event-fx\n ::query\n interceptors\n (fn [{:keys [db dispatchable-event instance-name]} [query-id query variables callback-event :as event]]\n   (let [query (str \"query \" (string/replace query #\"^query\\s?\" \"\"))\n         websocket-supported? (contains? (get-in db [:ws :supported-operations]) :query)]\n     (cond\n       (or (get-in db [:http :requests query-id])\n           (get-in db [:subscriptions query-id]))\n       {} ;; duplicate in-flight query\n\n       (and websocket-supported? (get-in db [:ws :ready?]))\n       {:db (assoc-in db [:subscriptions query-id] {:callback callback-event})\n        ::internals/send-ws [(get-in db [:ws :connection])\n                             {:id query-id\n                              :type \"start\"\n                              :payload {:query query\n                                        :variables variables}}]}\n\n       (and websocket-supported? (:ws db))\n       {:db (update-in db [:ws :queue] conj dispatchable-event)}\n\n       :else\n       {:db (assoc-in db [:http :requests query-id] {:callback callback-event})\n        ::internals/send-http [instance-name\n                               query-id\n                               (get-in db [:http :url])\n                               {:request (get-in db [:http :impl])\n                                :payload {:query query\n                                          :variables variables}}]}))))\n\n(defn query\n  \"Execute a GraphQL query. The arguments are:\n\n  [instance-name query-string variables callback]\n\n  If the optional `instance-name` is not provided, the default instance is\n  used. The callback function will receive the result of the query as its\n  sole argument.\"\n  [& args]\n  (let [callback-fn (last args)]\n    (re-frame/dispatch (into [::query] (conj (vec (butlast args)) [::internals/callback callback-fn])))))\n\n#?(:clj\n   (def\n     ^{:doc \"Executes a query synchronously. The arguments are:\n\n             [instance-name query-string variables timeout]\n\n             The `instance-name` and `timeout` are optional. The `timeout` is\n             specified in milliseconds.\"}\n     query-sync\n     (partial internals/sync-wrapper query)))\n\n(re-frame/reg-event-fx\n ::abort\n interceptors\n (fn [{:keys [db]} [query-id]]\n   (merge\n     {:db (-> db\n              (update :subscriptions dissoc query-id)\n              (update-in [:http :requests] dissoc query-id))}\n    (when-let [abort-fn (get-in db [:http :requests query-id :abort])]\n      {::internals/call-abort abort-fn}) )))\n\n(defn abort\n  ([query-id] (abort default-instance-name query-id))\n  ([instance-name query-id]\n   (re-frame/dispatch [::abort instance-name query-id])))\n\n(re-frame/reg-event-fx\n ::subscribe\n interceptors\n (fn [{:keys [db instance-name dispatchable-event] :as cofx} [subscription-id query variables callback-event :as event]]\n   (cond\n     (get-in db [:subscriptions (name subscription-id) :active?])\n     {} ;; duplicate subscription\n\n     (get-in db [:ws :ready?])\n     {:db (assoc-in db [:subscriptions (name subscription-id)] {:callback callback-event\n                                                                :event dispatchable-event\n                                                                :active? true})\n      ::internals/send-ws [(get-in db [:ws :connection])\n                           {:id (name subscription-id)\n                            :type \"start\"\n                            :payload {:query (str \"subscription \" (string/replace query #\"^subscription\\s?\" \"\"))\n                                      :variables variables}}]}\n\n     (:ws db)\n     {:db (update-in db [:ws :queue] conj dispatchable-event)}\n\n     :else\n     (log/error\n       (str\n        \"Error creating subscription \" subscription-id\n        \" on instance \" instance-name\n         \": Websocket is not enabled, subscriptions are not possible. Please check your re-graph configuration\")))))\n\n(defn subscribe\n  ([subscription-id query variables callback-fn] (subscribe default-instance-name subscription-id query variables callback-fn))\n  ([instance-name subscription-id query variables callback-fn]\n   (re-frame/dispatch [::subscribe instance-name subscription-id query variables [::internals/callback callback-fn]])))\n\n(re-frame/reg-event-fx\n ::unsubscribe\n interceptors\n (fn [{:keys [db instance-name]} [subscription-id :as event]]\n   (if (get-in db [:ws :ready?])\n     {:db (update db :subscriptions dissoc (name subscription-id))\n      ::internals/send-ws [(get-in db [:ws :connection])\n                           {:id (name subscription-id)\n                            :type \"stop\"}]}\n\n     {:db (update-in db [:ws :queue] conj [::unsubscribe instance-name subscription-id])})))\n\n(defn unsubscribe\n  ([subscription-id] (unsubscribe default-instance-name subscription-id))\n  ([instance-name subscription-id]\n   (re-frame/dispatch [::unsubscribe instance-name subscription-id])))\n\n(re-frame/reg-event-fx\n ::re-init\n [re-frame/trim-v internals/re-graph-instance]\n (fn [{:keys [db instance-name]} [opts]]\n   (let [new-db (internals/deep-merge db opts)]\n     (merge {:db new-db}\n            (when (get-in new-db [:ws :ready?])\n              {:dispatch [::internals/connection-init instance-name]})))))\n\n(defn re-init\n  ([opts] (re-init default-instance-name opts))\n  ([instance-name opts]\n   (re-frame/dispatch [::re-init instance-name opts])))\n\n(re-frame/reg-event-fx\n ::init\n (fn [{:keys [db]} [_ instance-name opts]]\n   (let [[instance-name opts] (cond\n                                (and (nil? instance-name) (nil? opts))\n                                [default-instance-name {}]\n\n                                (map? instance-name)\n                                [default-instance-name instance-name]\n\n                                (nil? instance-name)\n                                [default-instance-name opts]\n\n                                :else\n                                [instance-name opts])\n         ws-options (internals/ws-options opts)\n         http-options (internals/http-options opts)]\n\n     (merge\n      {:db (assoc-in db [:re-graph instance-name]\n                     (merge ws-options http-options))}\n      (when ws-options\n        {::internals/connect-ws [instance-name ws-options]})))))\n\n(re-frame/reg-event-fx\n ::destroy\n interceptors\n (fn [{:keys [db instance-name]} _]\n   (if-let [subscription-ids (not-empty (-> db :subscriptions keys))]\n     {:dispatch-n (for [subscription-id subscription-ids]\n                    [::unsubscribe instance-name subscription-id])\n      :dispatch [::destroy instance-name]}\n\n     (merge\n      {:db (assoc db :destroyed? true)}\n      (when-let [ws (get-in db [:ws :connection])]\n        {::internals/disconnect-ws [ws]})))))\n\n(defn init\n  ([opts] (init default-instance-name opts))\n  ([instance-name opts]\n   (re-frame/dispatch [::init instance-name opts])))\n\n(defn destroy\n  ([] (destroy default-instance-name))\n  ([instance-name]\n   (re-frame/dispatch [::destroy instance-name])))\n"]}