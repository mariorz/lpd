shadow$provide.module$node_modules$ws$lib$event_target=function(global,require,module,exports){class Event{constructor(type,target){this.target=target;this.type=type}}class MessageEvent extends Event{constructor(data,target){super("message",target);this.data=data}}class CloseEvent extends Event{constructor(code,reason,target){super("close",target);this.wasClean=target._closeFrameReceived&&target._closeFrameSent;this.reason=reason;this.code=code}}class OpenEvent extends Event{constructor(target){super("open",
target)}}class ErrorEvent extends Event{constructor(error,target){super("error",target);this.message=error.message;this.error=error}}module.exports={addEventListener(method,listener){function onMessage(data){listener.call(this,new MessageEvent(data,this))}function onClose(code,message){listener.call(this,new CloseEvent(code,message,this))}function onError(error){listener.call(this,new ErrorEvent(error,this))}function onOpen(){listener.call(this,new OpenEvent(this))}if("function"===typeof listener)if("message"===
method)onMessage._listener=listener,this.on(method,onMessage);else if("close"===method)onClose._listener=listener,this.on(method,onClose);else if("error"===method)onError._listener=listener,this.on(method,onError);else if("open"===method)onOpen._listener=listener,this.on(method,onOpen);else this.on(method,listener)},removeEventListener(method,listener){const listeners=this.listeners(method);for(var i=0;i<listeners.length;i++)listeners[i]!==listener&&listeners[i]._listener!==listener||this.removeListener(method,
listeners[i])}}}
//# sourceMappingURL=module$node_modules$ws$lib$event_target.js.map
