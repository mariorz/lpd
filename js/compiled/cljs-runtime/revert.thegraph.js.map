{"version":3,"sources":["revert/thegraph.cljs"],"mappings":";;AAUA,AAAA,AAAKA;AACL,AAAA,AAAKC;AACL,AAAA,AAAKC;AACL,AAAA,AAAKC;AAIL,AAAA,AAAMC,AACHC;AADH,AAEE,AAAA,AAAA,AAGmCA;;AAYrC,AAAA,AAAMC,AACHD,AAAaE,AAAeC;AAD/B,AAEE,AAAA,AAAA,AAAA,AAAA,AAGmCH,AAgCKE,AAAwBC;;AAWlE,AAAA,AAAMC,AACHC;AADH,AAEE,AAAA,AAAA,AAE2B,AAACC,AAA0BD;;AAqDxD,AAAA,AAAME,AACHF;AADH,AAEE,AAAA,AAAA,AAE2B,AAACC,AAA0BD;;AA8CxD,AAAA,AAAMG,AACHC;AADH,AAEE,AAAA,AAAA,AAGiD,AAACH,AAA0BG;;AAmC9E,AAAA,AAAKC;AAEL,AAAA,AAAMC,AACHC;AADH,AAEE,AAAA,AAAA,AACK,AAAA,AAACC,AAAwBD;;AAMhC,AAAA,AAAME,AACHC,AAAKC;AADR,AAEE,AAAA,AAEK,AAACC,AAAMC,AACA,AAAA,AAAAC,AAACC;AAAD,AAAM,AAAA,AAAA,AAAA,AACK,AAAAD,AAACb,AAED,AAACA,AAA0BS;AANlD,AASiBC;;AAmCnB,AAAA,AAAMK,AACHL;AADH,AAEE,AAAA,AAEK,AAACC,AAAMC,AACA,AAAA,AAAAI,AAACF;AAAD,AAAM,AAAA,AAAA,AAAU,AAAAE,AAAChB;AAH7B,AAIiBU;;AA8BnB,AAAA,AAAMO,AACHC;AADH,AAEE,AAAA,AAAA,AAC0BA;;AAmC5B,AAAA,AAAMC,AACHC;AADH,AAEE,AAAA,AAAA,AAG0CA;;AAgC5C,AAAA,AAAMC,AACHD;AADH,AAEE,AAAA,AAAA,AAGmCA;;AAiCrC,AAAA,AAAME,AACHC;AADH,AAEE,AAAA,AAIqC,AAACZ,AAAMC,AAAI,AAAA,AAAAY,AAACV;AAAD,AAAM,AAAA,AAAA,AAAU,AAAAU,AAACxB;AAJjE,AAKqDuB;;AAWvD,AAAA,AAAME,AACHtB,AAAauB;AADhB,AAEE,AAAAC,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;AAAAC,AAAA,AAAA;AAAAC,AAAA,AAO0B5B,AAAuBL,AAAauB;AAP9DW,AAAA,AAAAD;AAAAE,AAAA,AAAAC,AAAAJ,AAAAE;AAAAG,AAAA,AAAAF,AAKwBuC;AALxBpC,AAAA,AAAAD,AAIuBoC;AAJvBlC,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAAJ,AAAAL,AAAAQ;AAAAE,AAAA,AAAAD,AACegC,AACAtF;AAFf2C,AAAAA;AAAA,AAAA,AAAAa,AAAAb,AAAA,AAAAY;;AAAA,AAAA,AAAAX,AAAA;AAAA,AAAAa,AAAA,AAAAd,AAAA;AAAAe,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAAC;AAAAC,AAAA,AAAA;AAAAC,AAAA,AAAAF,AAAA,AAAA,AAAA,AAAAD,AAAAE,AAAA;AAAAE,AAAA,AAAAR,AAAU4B;AAAVzB,AAQU6B;AARVzB,AASU0B;AATV,AAAA,AAAAxB;AAAA,AAUwB,AAAAA,AAAA,AAAC0B;;;AAVzBzB,AAAA,AAAAV,AAAU4B;AAAVzB,AAQU6B;AARVzB,AASU0B;AATVzB,AAUU0B;AAVV,AAW0B,AAAKE;AAAL,AAAQ,AAAMC,AAAK,AAAA,AAAOD;AAEZE,AAAG,AAACJ,AAAa,AAAA,AAAWG;AAC5BE,AAAG,AAACL,AAAa,AAAA,AAAWG;AAC5BG,AAAG,AAACN,AAAa,AAAA,AAAcG;AAE/BI,AAAO,AAACP,AAAa,AAAA,AAAaG;AAClCK,AAAO,AAACR,AAAa,AAAA,AAAaG;AAClCM,AAAO,AAACT,AAAa,AAAA,AAAYG;AACjCO,AAAI,AAACV,AAAa,AAAA,AAAwBE;AAC1CS,AAAM,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AACAT,AACUC,AACAC,AACGC,AACDC,AACDE;AAClBI,AAAG,AAAA,AAAA,AAAA,AAAA,AAACD,AAAMV,AACMS,AAEiBD;AApBvC,AAqBEG;;;AAhCpCpC,AAAA,AAAAD,AAAAP,AAWsBnC;AAXtBkB,AAAAA;AAAA,AAAA,AAAA0B,AAAA1B,AAAAyB;;AAAA;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAC;;AAAA,AAAAD,AAAA,AAAA;;AAAAA;;AAAA3B;;AAAA,AAAA,AAAA6B,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA/B,AAAAC;AAAA,AAAA,AAAA,AAAA+B,AAAAD,AAAA;AAAA;;AAAAA;;;;AAAA,AAAAE,AAAAC;AAAA,AAAA,AAAAC,AAAAlC;AAAA,AAAA,AAAAkC,AAAA,AAAAF;;AAAAE;AAAA,AAAA,AAAAC,AAAA,AAAAnC,AAAA;AAAA,AAAAoC,AAAApC;AAAA,AAAA,AAAAoC,AAAA,AAAA,AAAAC,AAAA,AAAArC,AAAA;;AAAAoC;AAAA,AAAAJ;;;AAAA;;AAAA,AAAA,AAAA,AAAAD,AAAAF,AAAA;AAAA,AAAA7B;;;;AAAA6B;;;;;AAAA7B;;;;;AAAAA;;;;;;;;;AAAAsC,AAAA,AAAAC,AAAA,AAAAzC;AAAA,AAAA,AAAAyC,AAAAC,AAAA,AAAA7C;;AAAA4C;;AAAA,AAAA,AAAAE,AAAAH;;;AAAA3C;;AAoCF,AAAA,AAAMmE,AACH3F,AAAauB;AADhB,AAEE,AAAAC,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAgE;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;AAAAC,AAAA,AAAA;AAAAC,AAAA,AAO0B3F,AAAuBL,AAAauB;AAP9D0E,AAAA,AAAAD;AAAAE,AAAA,AAAA9D,AAAA2D,AAAAE;AAAAE,AAAA,AAAAD,AAKwBxB;AALxB0B,AAAA,AAAAD,AAIuB1B;AAJvB4B,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAAlE,AAAA0D,AAAAO;AAAAE,AAAA,AAAAD,AACe9B,AACArF;AAFfyG,AAAAA;AAAA,AAAA,AAAAlD,AAAAkD,AAAA,AAAAW;;AAAA,AAAA,AAAAV,AAAA;AAAA,AAAAW,AAAA,AAAAZ,AAAA;AAAAa,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAA5D;AAAA6D,AAAA,AAAA;AAAAC,AAAA,AAAA9D,AAAA,AAAA,AAAA,AAAA4D,AAAAC,AAAA;AAAAE,AAAA,AAAAP,AAAUjC;AAAVoC,AAQUhC;AARVmC,AASUlC;AATV,AAAA,AAAAoC;AAAA,AAUwB,AAAAA,AAAA,AAAClC;;;AAVzBmC,AAAA,AAAAT,AAAUjC;AAAVoC,AAQUhC;AARVmC,AASUlC;AATVmC,AAUUlC;AAVV,AAW0B,AAAKE;AAAL,AAAQ,AAAMC,AAAK,AAAA,AAAOD;AAEZE,AAAG,AAACJ,AAAa,AAAA,AAAWG;AAC5BE,AAAG,AAACL,AAAa,AAAA,AAAWG;AAC5BG,AAAG,AAACN,AAAa,AAAA,AAAcG;AAC/BI,AAAO,AAACP,AAAa,AAAA,AAAaG;AAClCK,AAAO,AAACR,AAAa,AAAA,AAAaG;AAClCM,AAAO,AAACT,AAAa,AAAA,AAAYG;AACjCO,AAAI,AAACV,AAAa,AAAA,AAAwBE;AAC1CS,AAAM,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AACAT,AACUC,AACAC,AACGC,AACDC,AACDE;AAClBI,AAAG,AAAA,AAAA,AAAA,AAAA,AAACD,AAAMV,AACMS,AAEiBD;AAnBvC,AAoBEG;;;AA/BpCwB,AAAA,AAAAD,AAAAN,AAWsBhG;AAXtBiF,AAAAA;AAAA,AAAA,AAAArC,AAAAqC,AAAAsB;;AAAA;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAA1D;;AAAA,AAAA0D,AAAA,AAAA;;AAAAA;;AAAAvB;;AAAA,AAAA,AAAAlC,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA/B,AAAAgE;AAAA,AAAA,AAAA,AAAAhC,AAAAD,AAAA;AAAA;;AAAAA;;;;AAAA,AAAAE,AAAAuD;AAAA,AAAA,AAAAC,AAAAzB;AAAA,AAAA,AAAAyB,AAAA,AAAAxD;;AAAAwD;AAAA,AAAA,AAAArD,AAAA,AAAA4B,AAAA;AAAA,AAAA0B,AAAA1B;AAAA,AAAA,AAAA0B,AAAA,AAAA,AAAApD,AAAA,AAAA0B,AAAA;;AAAA0B;AAAA,AAAAzD;;;AAAA;;AAAA,AAAA,AAAA,AAAAD,AAAAF,AAAA;AAAA,AAAAkC;;;;AAAAlC;;;;;AAAAkC;;;;;AAAAA;;;;;;;;;AAAAzB,AAAA,AAAAoD,AAAA,AAAA5F;AAAA,AAAA,AAAA4F,AAAAlD,AAAA,AAAA7C;;AAAA+F;;AAAA,AAAA,AAAAjD,AAAAH;;;AAAA3C;;AAmCF,AAAA,AAAMgG,AACHxH,AAAauB;AADhB,AAEE,AAAAC,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA6F;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAC,AAAA,AAAoBrG,AAActB,AAAauB;AAA/CkG,AAAAA;AAAA,AAAA,AAAA/E,AAAA+E,AAAA,AAAAE;;AAAA,AAAA,AAAAD,AAAA;AAAA,AAAAE,AAAA,AAAAH,AAAA;AAAAI,AAAA,AACsBlC,AAAgB3F,AAAauB;AADnDkG,AAAA,AAAAK,AAAAL;AAAA,AAAA,AAAAK,AAAA,AAAAF;;AAAAE;;AAAA,AAAA,AAAApF,AAAA+E,AAAA,AAAAI;;AAAA,AAAA,AAAAH,AAAA;AAAA,AAAAE,AAAA,AAAAH,AAAA;AAAAM,AAAA,AAAAN,AAAA;AAAAO,AAAA,AAAAJ,AAAAG,AAEOO;AAFPb,AAAAA;AAAA,AAAA,AAAAlE,AAAAkE,AAAAO;;AAAA;;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAxE;;AAAA,AAAAwE,AAAA,AAAA;;AAAAA;;AAAAR;;AAAA,AAAA,AAAA/D,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA/B,AAAA6F;AAAA,AAAA,AAAA,AAAA7D,AAAAD,AAAA;AAAA;;AAAAA;;;;AAAA,AAAAE,AAAAqE;AAAA,AAAA,AAAAC,AAAAV;AAAA,AAAA,AAAAU,AAAA,AAAAtE;;AAAAsE;AAAA,AAAA,AAAAnE,AAAA,AAAAyD,AAAA;AAAA,AAAAW,AAAAX;AAAA,AAAA,AAAAW,AAAA,AAAA,AAAAlE,AAAA,AAAAuD,AAAA;;AAAAW;AAAA,AAAAvE;;;AAAA;;AAAA,AAAA,AAAA,AAAAD,AAAAF,AAAA;AAAA,AAAA+D;;;;AAAA/D;;;;;AAAA+D;;;;;AAAAA;;;;;;;;;AAAAtD,AAAA,AAAAkE,AAAA,AAAA1G;AAAA,AAAA,AAAA0G,AAAAhE,AAAA,AAAA7C;;AAAA6G;;AAAA,AAAA,AAAA/D,AAAAH;;;AAAA3C;;AASF,AAAA,AAAM+G,AACHvI;AADH,AAEE,AAAAwB,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA4G;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;AAAAC,AAAA,AAAA;AAAAC,AAAA,AAO0B7I,AAAsBC;AAPhD6I,AAAA,AAAAD;AAAAE,AAAA,AAAA1G,AAAAuG,AAAAE;AAAAE,AAAA,AAAAD,AAKwBpE;AALxBsE,AAAA,AAAAD,AAIuBtE;AAJvBwE,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAA9G,AAAAsG,AAAAO;AAAAE,AAAA,AAAAD,AACe1E,AACAtF;AAFfsJ,AAAAA;AAAA,AAAA,AAAA9F,AAAA8F,AAAA,AAAAW;;AAAA,AAAA,AAAAV,AAAA;AAAA,AAAAW,AAAA,AAAAZ,AAAA;AAAAa,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAAJ,AAAU7E;AAAVgF,AAQU5E;AARV,AAAA,AAAA8E;AAAA,AASwB,AAAAA,AAAA,AAAC3E;;;AATzB4E,AAAA,AAAAN,AAAU7E;AAAVgF,AAQU5E;AARV6E,AASU3E;AATV,AAU0B,AAAKE;AAAL,AAAQ,AAAMC,AAAK,AAAA,AAAOD;AACZE,AAAG,AAACJ,AAAa,AAAA,AAAWE;AAC5BG,AAAG,AAACL,AAAa,AAAA,AAAWE;AAC5BkF,AAAI,AAACpF,AAAa,AAAA,AAA4BE;AAC9CQ,AAAI,AAACV,AAAa,AAAA,AAAwBE;AAC1CmF,AAAK,AAACrF,AAAa,AAAA,AAAaE;AAChCoF,AAAO,AAACtF,AAAa,AAAA,AAAiBE;AACtCqF,AAAO,AAACvF,AAAa,AAAA,AAAiBE;AACtCW,AAAG,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACD,AAAMV,AAEUE,AACAC,AACaK,AACI0E,AACfC,AACIC,AACAC;AAhBhC,AAiBE1E;;;AA3BpCiE,AAAA,AAAAD,AAAAH,AAUsB5I;AAVtB6H,AAAAA;AAAA,AAAA,AAAAjF,AAAAiF,AAAAmB;;AAAA;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnG;;AAAA,AAAAmG,AAAA,AAAA;;AAAAA;;AAAApB;;AAAA,AAAA,AAAA9E,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA/B,AAAA4G;AAAA,AAAA,AAAA,AAAA5E,AAAAD,AAAA;AAAA;;AAAAA;;;;AAAA,AAAAE,AAAAgG;AAAA,AAAA,AAAAC,AAAAtB;AAAA,AAAA,AAAAsB,AAAA,AAAAjG;;AAAAiG;AAAA,AAAA,AAAA9F,AAAA,AAAAwE,AAAA;AAAA,AAAAuB,AAAAvB;AAAA,AAAA,AAAAuB,AAAA,AAAA,AAAA7F,AAAA,AAAAsE,AAAA;;AAAAuB;AAAA,AAAAlG;;;AAAA;;AAAA,AAAA,AAAA,AAAAD,AAAAF,AAAA;AAAA,AAAA8E;;;;AAAA9E;;;;;AAAA8E;;;;;AAAAA;;;;;;;;;AAAArE,AAAA,AAAA6F,AAAA,AAAArI;AAAA,AAAA,AAAAqI,AAAA3F,AAAA,AAAA7C;;AAAAwI;;AAAA,AAAA,AAAA1F,AAAAH;;;AAAA3C;;AAgCF,AAAA,AAAM6I,AACHrK;AADH,AAEE,AAAAwB,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA0I;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;AAAAC,AAAA,AAAA;AAAAC,AAAA,AAO0B3K,AAAsBC;AAPhD2K,AAAA,AAAAD;AAAAE,AAAA,AAAAxI,AAAAqI,AAAAE;AAAAE,AAAA,AAAAD,AAKwBlG;AALxBoG,AAAA,AAAAD,AAIuBpG;AAJvBsG,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAA5I,AAAAoI,AAAAO;AAAAE,AAAA,AAAAD,AACexG,AACArF;AAFfmL,AAAAA;AAAA,AAAA,AAAA5H,AAAA4H,AAAA,AAAAW;;AAAA,AAAA,AAAAV,AAAA;AAAA,AAAAW,AAAA,AAAAZ,AAAA;AAAAa,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAAJ,AAAU3G;AAAV8G,AAQU1G;AARV,AAAA,AAAA4G;AAAA,AASwB,AAAAA,AAAA,AAACzG;;;AATzB0G,AAAA,AAAAN,AAAU3G;AAAV8G,AAQU1G;AARV2G,AASUzG;AATV,AAU0B,AAAKE;AAAL,AAAQ,AAAMC,AAAK,AAAA,AAAOD;AACZE,AAAG,AAACJ,AAAa,AAAA,AAAWE;AAC5BG,AAAG,AAACL,AAAa,AAAA,AAAWE;AAC5BkF,AAAI,AAACpF,AAAa,AAAA,AAA4BE;AAC9CQ,AAAI,AAACV,AAAa,AAAA,AAAwBE;AAC1CmF,AAAK,AAACrF,AAAa,AAAA,AAAaE;AAChCoF,AAAO,AAACtF,AAAa,AAAA,AAAiBE;AACtCqF,AAAO,AAACvF,AAAa,AAAA,AAAiBE;AACtCW,AAAG,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACD,AAAMV,AAEUE,AACAC,AACaK,AACI0E,AACfC,AACIC,AACAC;AAhBhC,AAiBE1E;;;AA3BpC+F,AAAA,AAAAD,AAAAH,AAUsB1K;AAVtB2J,AAAAA;AAAA,AAAA,AAAA/G,AAAA+G,AAAAmB;;AAAA;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAjI;;AAAA,AAAAiI,AAAA,AAAA;;AAAAA;;AAAApB;;AAAA,AAAA,AAAA5G,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA/B,AAAA0I;AAAA,AAAA,AAAA,AAAA1G,AAAAD,AAAA;AAAA;;AAAAA;;;;AAAA,AAAAE,AAAA8H;AAAA,AAAA,AAAAC,AAAAtB;AAAA,AAAA,AAAAsB,AAAA,AAAA/H;;AAAA+H;AAAA,AAAA,AAAA5H,AAAA,AAAAsG,AAAA;AAAA,AAAAuB,AAAAvB;AAAA,AAAA,AAAAuB,AAAA,AAAA,AAAA3H,AAAA,AAAAoG,AAAA;;AAAAuB;AAAA,AAAAhI;;;AAAA;;AAAA,AAAA,AAAA,AAAAD,AAAAF,AAAA;AAAA,AAAA4G;;;;AAAA5G;;;;;AAAA4G;;;;;AAAAA;;;;;;;;;AAAAnG,AAAA,AAAA2H,AAAA,AAAAnK;AAAA,AAAA,AAAAmK,AAAAzH,AAAA,AAAA7C;;AAAAsK;;AAAA,AAAA,AAAAxH,AAAAH;;;AAAA3C;;AAiCF,AAAA,AAAMuK,AACH/L;AADH,AAEE,AAAAwB,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAoK;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAC,AAAA,AAAoB3D,AAAuBvI;AAA3CgM,AAAAA;AAAA,AAAA,AAAAtJ,AAAAsJ,AAAA,AAAAE;;AAAA,AAAA,AAAAD,AAAA;AAAA,AAAAE,AAAA,AAAAH,AAAA;AAAAI,AAAA,AACsB/B,AAAyBrK;AAD/CgM,AAAA,AAAAK,AAAAL;AAAA,AAAA,AAAAK,AAAA,AAAAF;;AAAAE;;AAAA,AAAA,AAAA3J,AAAAsJ,AAAA,AAAAI;;AAAA,AAAA,AAAAH,AAAA;AAAA,AAAAE,AAAA,AAAAH,AAAA;AAAAM,AAAA,AAAAN,AAAA;AAAAO,AAAA,AAAAJ,AAAAG,AAEOhE;AAFP0D,AAAAA;AAAA,AAAA,AAAAzI,AAAAyI,AAAAO;;AAAA;;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAA/I;;AAAA,AAAA+I,AAAA,AAAA;;AAAAA;;AAAAR;;AAAA,AAAA,AAAAtI,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA/B,AAAAoK;AAAA,AAAA,AAAA,AAAApI,AAAAD,AAAA;AAAA;;AAAAA;;;;AAAA,AAAAE,AAAA4I;AAAA,AAAA,AAAAC,AAAAV;AAAA,AAAA,AAAAU,AAAA,AAAA7I;;AAAA6I;AAAA,AAAA,AAAA1I,AAAA,AAAAgI,AAAA;AAAA,AAAAW,AAAAX;AAAA,AAAA,AAAAW,AAAA,AAAA,AAAAzI,AAAA,AAAA8H,AAAA;;AAAAW;AAAA,AAAA9I;;;AAAA;;AAAA,AAAA,AAAA,AAAAD,AAAAF,AAAA;AAAA,AAAAsI;;;;AAAAtI;;;;;AAAAsI;;;;;AAAAA;;;;;;;;;AAAA7H,AAAA,AAAAyI,AAAA,AAAAjL;AAAA,AAAA,AAAAiL,AAAAvI,AAAA,AAAA7C;;AAAAoL;;AAAA,AAAA,AAAAtI,AAAAH;;;AAAA3C;;AAOF,AAAA,AAAMqL,AACHtL;AADH,AAEE,AAAAC,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAkL;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;AAAAC,AAAA,AAAA;AAAAC,AAAA,AAO0BtM,AAAmBW;AAP7C4L,AAAA,AAAAD;AAAAE,AAAA,AAAAhL,AAAA6K,AAAAE;AAAAE,AAAA,AAAAD,AAKwB1I;AALxB4I,AAAA,AAAAD,AAIuB5I;AAJvB8I,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAApL,AAAA4K,AAAAO;AAAAE,AAAA,AAAAD,AACehJ,AACAtF;AAFf4N,AAAAA;AAAA,AAAA,AAAApK,AAAAoK,AAAA,AAAAW;;AAAA,AAAA,AAAAV,AAAA;AAAA,AAAAW,AAAA,AAAAZ,AAAA;AAAAa,AAAA,AAAA,AAAAD;AAAAZ,AAAAA;AAAA,AAAA,AAAAvJ,AAAAuJ,AAAAa;;AAAA;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnK;;AAAA,AAAAmK,AAAA,AAAA;;AAAAA;;AAAAd;;AAAA,AAAA,AAAApJ,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA/B,AAAAkL;AAAA,AAAA,AAAA,AAAAlJ,AAAAD,AAAA;AAAA;;AAAAA;;;;AAAA,AAAAE,AAAAgK;AAAA,AAAA,AAAAC,AAAAhB;AAAA,AAAA,AAAAgB,AAAA,AAAAjK;;AAAAiK;AAAA,AAAA,AAAA9J,AAAA,AAAA8I,AAAA;AAAA,AAAAiB,AAAAjB;AAAA,AAAA,AAAAiB,AAAA,AAAA,AAAA7J,AAAA,AAAA4I,AAAA;;AAAAiB;AAAA,AAAAlK;;;AAAA;;AAAA,AAAA,AAAA,AAAAD,AAAAF,AAAA;AAAA,AAAAoJ;;;;AAAApJ;;;;;AAAAoJ;;;;;AAAAA;;;;;;;;;AAAA3I,AAAA,AAAA6J,AAAA,AAAArM;AAAA,AAAA,AAAAqM,AAAA3J,AAAA,AAAA7C;;AAAAwM;;AAAA,AAAA,AAAA1J,AAAAH;;;AAAA3C;;AAYF,AAAA,AAAMyM,AACHC;AADH,AAEE,AAAA1M,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAuM;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;AAAAC,AAAA,AAAA;AAAAC,AAAA,AAO0BzN,AAAmBoN;AAP7CM,AAAA,AAAAD;AAAAE,AAAA,AAAArM,AAAAkM,AAAAE;AAAAE,AAAA,AAAAD,AAKwB/J;AALxBiK,AAAA,AAAAD,AAIuBjK;AAJvBmK,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAAzM,AAAAiM,AAAAO;AAAAE,AAAA,AAAAD,AACerK,AACAtF;AAFfiP,AAAAA;AAAA,AAAA,AAAAzL,AAAAyL,AAAA,AAAAW;;AAAA,AAAA,AAAAV,AAAA;AAAA,AAAAW,AAAA,AAAAZ,AAAA;AAAAa,AAAA,AAAA,AAAAD;AAAAZ,AAAAA;AAAA,AAAA,AAAA5K,AAAA4K,AAAAa;;AAAA;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAxL;;AAAA,AAAAwL,AAAA,AAAA;;AAAAA;;AAAAd;;AAAA,AAAA,AAAAzK,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA/B,AAAAuM;AAAA,AAAA,AAAA,AAAAvK,AAAAD,AAAA;AAAA;;AAAAA;;;;AAAA,AAAAE,AAAAqL;AAAA,AAAA,AAAAC,AAAAhB;AAAA,AAAA,AAAAgB,AAAA,AAAAtL;;AAAAsL;AAAA,AAAA,AAAAnL,AAAA,AAAAmK,AAAA;AAAA,AAAAiB,AAAAjB;AAAA,AAAA,AAAAiB,AAAA,AAAA,AAAAlL,AAAA,AAAAiK,AAAA;;AAAAiB;AAAA,AAAAvL;;;AAAA;;AAAA,AAAA,AAAA,AAAAD,AAAAF,AAAA;AAAA,AAAAyK;;;;AAAAzK;;;;;AAAAyK;;;;;AAAAA;;;;;;;;;AAAAhK,AAAA,AAAAkL,AAAA,AAAA1N;AAAA,AAAA,AAAA0N,AAAAhL,AAAA,AAAA7C;;AAAA6N;;AAAA,AAAA,AAAA/K,AAAAH;;;AAAA3C;;AAyBF,AAAA,AAAM8N,AACH/N;AADH,AAEE,AAAAC,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA2N;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;AAAAC,AAAA,AAAA;AAAAC,AAAA,AAO0BzO,AAA6BK;AAPvDqO,AAAA,AAAAD;AAAAE,AAAA,AAAAzN,AAAAsN,AAAAE;AAAAE,AAAA,AAAAD,AAKwBnL;AALxBqL,AAAA,AAAAD,AAIuBrL;AAJvBuL,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAA7N,AAAAqN,AAAAO;AAAAE,AAAA,AAAAD,AACezL,AACArF;AAFfoQ,AAAAA;AAAA,AAAA,AAAA7M,AAAA6M,AAAA,AAAAW;;AAAA,AAAA,AAAAV,AAAA;AAAA,AAAAW,AAAA,AAAAZ,AAAA;AAAAa,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAA;AAAAC,AAAA,AAAA;AAAAC,AAAA,AAAAnO,AAAAiO,AAAAC;AAAAE,AAAA,AAAAJ,AAAAG,AAQOO;AARPvB,AAAAA;AAAA,AAAA,AAAAhM,AAAAgM,AAAAiB;;AAAA;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAhN;;AAAA,AAAAgN,AAAA,AAAA;;AAAAA;;AAAAlB;;AAAA,AAAA,AAAA7L,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA/B,AAAA2N;AAAA,AAAA,AAAA,AAAA3L,AAAAD,AAAA;AAAA;;AAAAA;;;;AAAA,AAAAE,AAAA6M;AAAA,AAAA,AAAAC,AAAApB;AAAA,AAAA,AAAAoB,AAAA,AAAA9M;;AAAA8M;AAAA,AAAA,AAAA3M,AAAA,AAAAuL,AAAA;AAAA,AAAAqB,AAAArB;AAAA,AAAA,AAAAqB,AAAA,AAAA,AAAA1M,AAAA,AAAAqL,AAAA;;AAAAqB;AAAA,AAAA/M;;;AAAA;;AAAA,AAAA,AAAA,AAAAD,AAAAF,AAAA;AAAA,AAAA6L;;;;AAAA7L;;;;;AAAA6L;;;;;AAAAA;;;;;;;;;AAAApL,AAAA,AAAA0M,AAAA,AAAAlP;AAAA,AAAA,AAAAkP,AAAAxM,AAAA,AAAA7C;;AAAAqP;;AAAA,AAAA,AAAAvM,AAAAH;;;AAAA3C;;AAYF,AAAA,AAAMuP,AACHxP;AADH,AAEE,AAAAC,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAoP;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;AAAAC,AAAA,AAAA;AAAAC,AAAA,AAO0BpQ,AAAuBO;AAPjD8P,AAAA,AAAAD;AAAAE,AAAA,AAAAlP,AAAA+O,AAAAE;AAAAE,AAAA,AAAAD,AAKwB5M;AALxB8M,AAAA,AAAAD,AAIuB9M;AAJvBgN,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAAtP,AAAA8O,AAAAO;AAAAE,AAAA,AAAAD,AACelN,AACAtF;AAFf8R,AAAAA;AAAA,AAAA,AAAAtO,AAAAsO,AAAA,AAAAW;;AAAA,AAAA,AAAAV,AAAA;AAAA,AAAAW,AAAA,AAAAZ,AAAA;AAAAa,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAA;AAAAC,AAAA,AAAA;AAAAC,AAAA,AAAA5P,AAAA0P,AAAAC;AAAAE,AAAA,AAAAJ,AAAAG,AAQOlB;AARPE,AAAAA;AAAA,AAAA,AAAAzN,AAAAyN,AAAAiB;;AAAA;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAzO;;AAAA,AAAAyO,AAAA,AAAA;;AAAAA;;AAAAlB;;AAAA,AAAA,AAAAtN,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA/B,AAAAoP;AAAA,AAAA,AAAA,AAAApN,AAAAD,AAAA;AAAA;;AAAAA;;;;AAAA,AAAAE,AAAAsO;AAAA,AAAA,AAAAC,AAAApB;AAAA,AAAA,AAAAoB,AAAA,AAAAvO;;AAAAuO;AAAA,AAAA,AAAApO,AAAA,AAAAgN,AAAA;AAAA,AAAAqB,AAAArB;AAAA,AAAA,AAAAqB,AAAA,AAAA,AAAAnO,AAAA,AAAA8M,AAAA;;AAAAqB;AAAA,AAAAxO;;;AAAA;;AAAA,AAAA,AAAA,AAAAD,AAAAF,AAAA;AAAA,AAAAsN;;;;AAAAtN;;;;;AAAAsN;;;;;AAAAA;;;;;;;;;AAAA7M,AAAA,AAAAmO,AAAA,AAAA3Q;AAAA,AAAA,AAAA2Q,AAAAjO,AAAA,AAAA7C;;AAAA8Q;;AAAA,AAAA,AAAAhO,AAAAH;;;AAAA3C;;AAYF;;;;AAAA,AAAM+Q,AAGHC;AAHH,AAIE,AAAC7R,AAAI,AAAK8R;AAAL,AACE,AAAA,AAAA,AAAA,AAAA,AAAC3B,AAAK2B,AACG,AAAI,AAAA,AAAeA,AACjB,AAAA,AAAeA,AACf,AAAA,AAAoBA,AAEtB,AAAI,AAAA,AAAeA,AACjB,AAAA,AAAeA,AACf,AAAA,AAAoBA,AAEtB,AAAI,AAAA,AAAYA,AACd,AAAA,AAAYA,AACZ,AAAA,AAAiBA;AAC9BD;;AAIP,AAAA,AAAA,AAAAE,AAAMM;AAAN,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAK,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAAG,AAAMD,AACH/R,AAAa0S;AADhB,AAAA,AAAAT,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA1S,AAAA4S,AAAAF,AAAAA;AAAA,AAAAG,AAAAH,AAAA,AAAA,AACgCU;AADhC,AAEE,AAAApS,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAiS;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAD,AAAAA;AAAA,AAAA,AAAA,AAAAE,AAAAF;AAAA,AAAA,AAAAE,AAAA,AAAA;;AAAA,AAAAA,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAD,AAAA;AAAA,AAAAE,AAAA,AAAwBjD,AAAe9P;AAAvC4S,AAAAA;AAAA,AAAA,AAAAnR,AAAAmR,AAAA,AAAAG;;AAAA,AAAA,AAAAF,AAAA;AAAA,AAAAG,AAAA,AAG2B3E,AAAiBrO;AAH5C4S,AAAAA;AAAA,AAAA,AAAAnR,AAAAmtQ,AAAAsQ,AAAAW;;AAAA,AAAA,AAAAV,AAAA;AAAA,AAAAQ,AAAA,AAAAT,AAAA;AAAAS,AAAA,AAAAT,AAAA;AAAAY,AAAA,AAAA,AAAAH;AAAAI,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAAD,AAC4B2C;AAD5BzC,AAAA,AAAAD,AAAA;AAAAd,AAAA,AAAAgB,AAAAhB;AAAA,AAAA,AAAAgB,AAAA,AAAAP;;AAAAO;;AAAA,AAAA,AAAA,AAAAD;AAAA,AAAAE,AAAAjB;AAAA,AAAA,AAAAiB,AAAA,AAAA;;AAAAA;AAAA,AAAAC,AAAAlB;AAAA,AAAA,AAAAkB,AAAA,AAAA;;AAAAA;;AAAA;;AAAA,AAAA,AAAAjB,AAAA;AAAA,AAAAkB,AAAA,AAAAnB,AAAA;AAAAoB,AAAA,AAAApB,AAAA;AAAAS,AAAA,AAAAT,AAAA;AAAAqB,AAAA,AAAArB,AAAA;AAAAsB,AAAA,AAAAb,AAAU6C;AAAVjC,AACUkC;AADVpC,AAIUsC;AAJVrC,AASUyC;AATV,AAaa,AAAKG;AAAL,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACaH,AACD,AAACxT,AAAM,AAAA,AAAC4T,AAAa,AAAA,AAAKD,AAC7B,AAAA,AAAOA,AACF,AAACE,AAAe,AAAA,AAAOF,AACjB,AAACG,AAAW,AAAA,AAAW,AAAA,AAASH,AAClC,AAAA,AAAS,AAAA,AAASA,AACjB,AAAA,AAAK,AAAA,AAASA,AACjB,AAAA,AAAO,AAAA,AAASA,AACZ,AAACG,AAAW,AAAA,AAAW,AAAA,AAASH,AAClC,AAAA,AAAS,AAAA,AAASA,AACjB,AAAA,AAAK,AAAA,AAASA,AACjB,AAAA,AAAO,AAAA,AAASA,AACnB,AAACJ,AAAK,AAAA,AAAWI,AACjB,AAACJ,AAAK,AAAA,AAAWI,AACd,AAACJ,AAAK,AAAA,AAAaI,AACvB,AAACJ,AAAK,AAAA,AAAoBI,AAE1B,AAACJ,AAAK,AAAA,AAAoBI,AACvB,AAACJ,AAAK,AAAA,AAAiBI,AACrB,AAACJ,AAAK,AAAA,AAAcI;;;AAjClDzC,AAAA,AAAAD,AAAAH,AAaSrU;AAbTkT,AAAAA;AAAA,AAAA,AAAA,AAAAwB,AAAAxB;AAAA,AAAA,AAAAwB,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAvB,AAAA;AAAA,AAAAkB,AAAA,AAAAnB,AAAA;AAAAoB,AAAA,AAAApB,AAAA;AAAAyB,AAAA,AAAAN,AAUuBqC;AAVvB9B,AAAA,AAAAD,AAAA;AAAAE,AAAA,AAAA,AAU8C5B;AAV9C6B,AAAA,AAAAF,AAAAC;AAAA3B,AAAA,AAAA6B,AAAA7B;AAAA,AAAA,AAAA6B,AAAA,AAAAT;;AAAAS;;AAAA,AAAA,AAAA,AAAAD;AAAA,AAAAE,AAAA9B;AAAA,AAAA,AAAA8B,AAAA,AAAA;;AAAAA;AAAA,AAAAC,AAAA/B;AAAA,AAAA,AAAA+B,AAAA,AAAA;;AAAAA;;AAAA;;AAAA,AAAA,AAAA9B,AAAA;AAAA,AAAAkB,AAAA,AAAAnB,AAAA;AAAAS,AAAA,AAAAT,AAAA;AAAAqB,AAAA,AAAArB,AAAA;AAAAqB,AAAA,AAAArB,AAAA;AAAAgC,AAAA,AAAAvB,AAAU6C;AAAVjC,AACUkC;AADV,AAAA,AAAAtB;AAAA,AAO+B,AAAA,AAAG,AAAC2B,AAAK,AAAA,AAAA3B;;;AAPxCC,AAAA,AAAA,AAAAb;AAAAc,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAAJ,AAAAG,AAM8BwB;AAN9BtB,AAAA,AAAAD,AAKwBsB,AAAK5D;AAL7BqB,AAAA,AAAAkB,AAIuB3D;AAJvB4D,AAAA,AAAAnB,AAS6C9Q;AAT7CkS,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAAD,AAAA;AAAAvC,AAAA,AAAAyC,AAAAzC;AAAA,AAAA,AAAAyC,AAAA,AAAAtB;;AAAA,AAAAsB,AAAA,AAAApB;;AAAAoB;;AAAA,AAAA,AAAA,AAAAD;AAAA,AAAAE,AAAA1C;AAAA,AAAA,AAAA0C,AAAA,AAAA;;AAAAA;AAAA,AAAAC,AAAA3C;AAAA,AAAA,AAAA2C,AAAA,AAAA;;AAAAA;;AAAA;;AAAA,AAAA,AAAA1C,AAAA;AAAA,AAAA2C,AAAA,AAAA,AAWakB,AAA4C1W;AAXzDyV,AAAA,AAAA,AAY6D9C;AAZ7D+C,AAAA,AAAA,AAAAD,AAYiBkB,AAAW3W,AAAa0S;AAZzCE,AAAA,AAAA+C,AAAA/C;AAAA,AAAA,AAAA+C,AAAA,AAAAH;;AAAAG;;AAAA,AAAA,AAAAlU,AAAAmR,AAAA,AAAA8C;;AAAA,AAAA,AAAA7C,AAAA;AAAA,AAAAD,AAAAA;AAAA,AAAA,AAAA,AAAAgD,AAAAhD;AAAA,AAAA,AAAAgD,AAAA,AAAA;;AAAA,AAAAA,AAAA,AAAA;;AAAAA;AAAA;;AAAA;;;;;;;;;;;;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAArT;;AAAA,AAAAqT,AAAA,AAAA;;AAAAA;;AAAAjD;;AAAA,AAAA,AAAAnQ,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA/B,AAAAiS;AAAA,AAAA,AAAA,AAAAjQ,AAAAD,AAAA;AAAA;;AAAAA;;;;AAAA,AAAAE,AAAAkT;AAAA,AAAA,AAAAC,AAAAnD;AAAA,AAAA,AAAAmD,AAAA,AAAAnT;;AAAAmT;AAAA,AAAA,AAAAhT,AAAA,AAAA6P,AAAA;AAAA,AAAAoD,AAAApD;AAAA,AAAA,AAAAoD,AAAA,AAAA,AAAA/S,AAAA,AAAA2P,AAAA;;AAAAoD;AAAA,AAAApT;;;AAAA;;AAAA,AAAA,AAAA,AAAAD,AAAAF,AAAA;AAAA,AAAAmQ;;;;AAAAnQ;;;;;AAAAmQ;;;;;AAAAA;;;;;;;;;AAAA1P,AAAA,AAAA+S,AAAA,AAAAvV;AAAA,AAAA,AAAAuV,AAAA7S,AAAA,AAAA7C;;AAAA0V;;AAAA,AAAA,AAAA5S,AAAAH;;;AAAA3C;;;AAFF,AAAA,AAAA,AAAMwR;;AAAN;AAAA,AAAA,AAAA,AAAAM,AAAMN;AAAN,AAAA,AAAAO,AAAA,AAAArP,AAAAoP;AAAAA,AAAA,AAAAE,AAAAF;AAAAG,AAAA,AAAAvP,AAAAoP;AAAAA,AAAA,AAAAE,AAAAF;AAAA,AAAA,AAAAI,AAAA;AAAA,AAAA,AAAAA,AAAAH,AAAAE,AAAAH;;;AAAA,AAyCA,AAAA,AAAM2E,AACH7W;AADH,AAEE,AAAAI,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAsW;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;AAAAC,AAAA,AAAA;AAAAC,AAAA,AAO0BnX,AAAwBC;AAPlDmX,AAAA,AAAAD;AAAAE,AAAA,AAAApW,AAAAiW,AAAAE;AAAAE,AAAA,AAAAD,AAKwB9T;AALxBgU,AAAA,AAAAD,AAIuBhU;AAJvBkU,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAAxW,AAAAgW,AAAAO;AAAAE,AAAA,AAAAD,AACepU,AACAtF;AAFfgZ,AAAAA;AAAA,AAAA,AAAAxV,AAAAwV,AAAA,AAAAW;;AAAA,AAAA,AAAAV,AAAA;AAAA,AAAAW,AAAA,AAAAZ,AAAA;AAAAa,AAAA,AAAAD,AAAUvU;AAAV,AASO,AAAKkV;AAAL,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACY,AAAA,AAAK,AAAA,AAAQA,AAChB,AAAA,AAAO,AAAA,AAAQA,AACb,AAAA,AAAS,AAAA,AAAQA,AACf,AAACzB,AAAW,AAAA,AAAW,AAAA,AAAQyB,AAC3B,AAAChC,AAAK,AAAA,AAAWgC,AACzB,AAAA,AAAOA;;;AAfvBT,AAAA,AAAA,AAAAF;AAAAG,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAAJ,AAAAG,AAQOvY;AARPuX,AAAAA;AAAA,AAAA,AAAA3U,AAAA2U,AAAAiB;;AAAA;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAA3V;;AAAA,AAAA2V,AAAA,AAAA;;AAAAA;;AAAAlB;;AAAA,AAAA,AAAAxU,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA/B,AAAAsW;AAAA,AAAA,AAAA,AAAAtU,AAAAD,AAAA;AAAA;;AAAAA;;;;AAAA,AAAAE,AAAAwV;AAAA,AAAA,AAAAC,AAAApB;AAAA,AAAA,AAAAoB,AAAA,AAAAzV;;AAAAyV;AAAA,AAAA,AAAAtV,AAAA,AAAAkU,AAAA;AAAA,AAAAqB,AAAArB;AAAA,AAAA,AAAAqB,AAAA,AAAA,AAAArV,AAAA,AAAAgU,AAAA;;AAAAqB;AAAA,AAAA1V;;;AAAA;;AAAA,AAAA,AAAA,AAAAD,AAAAF,AAAA;AAAA,AAAAwU;;;;AAAAxU;;;;;AAAAwU;;;;;AAAAA;;;;;;;;;AAAA/T,AAAA,AAAAqV,AAAA,AAAA7X;AAAA,AAAA,AAAA6X,AAAAnV,AAAA,AAAA7C;;AAAAgY;;AAAA,AAAA,AAAAlV,AAAAH;;;AAAA3C;;AAqBF,AAAA,AAAMkY,AACHtY;AADH,AAEE,AAAAI,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA+X;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;AAAAC,AAAA,AAAA;AAAAC,AAAA,AAO0B5Y,AAAwBC;AAPlD4Y,AAAA,AAAAD;AAAAE,AAAA,AAAA7X,AAAA0X,AAAAE;AAAAE,AAAA,AAAAD,AAKwBvV;AALxByV,AAAA,AAAAD,AAIuBzV;AAJvB2V,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAAjY,AAAAyX,AAAAO;AAAAE,AAAA,AAAAD,AACe7V,AACArF;AAFfwa,AAAAA;AAAA,AAAA,AAAAjX,AAAAiX,AAAA,AAAAW;;AAAA,AAAA,AAAAV,AAAA;AAAA,AAAAW,AAAA,AAAAZ,AAAA;AAAAa,AAAA,AAAAD,AAAUhW;AAAV,AASO,AAAKkV;AAAL,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACY,AAAA,AAAK,AAAA,AAAQA,AAChB,AAAA,AAAO,AAAA,AAAQA,AACb,AAAA,AAAS,AAAA,AAAQA,AACf,AAACzB,AAAW,AAAA,AAAW,AAAA,AAAQyB,AAC3B,AAAChC,AAAK,AAAA,AAAWgC,AACzB,AAAA,AAAOA;;;AAfvBgB,AAAA,AAAA,AAAAF;AAAAG,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAAJ,AAAAG,AAQOha;AARPgZ,AAAAA;AAAA,AAAA,AAAApW,AAAAoW,AAAAiB;;AAAA;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAApX;;AAAA,AAAAoX,AAAA,AAAA;;AAAAA;;AAAAlB;;AAAA,AAAA,AAAAjW,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA/B,AAAA+X;AAAA,AAAA,AAAA,AAAA/V,AAAAD,AAAA;AAAA;;AAAAA;;;;AAAA,AAAAE,AAAAiX;AAAA,AAAA,AAAAC,AAAApB;AAAA,AAAA,AAAAoB,AAAA,AAAAlX;;AAAAkX;AAAA,AAAA,AAAA/W,AAAA,AAAA2V,AAAA;AAAA,AAAAqB,AAAArB;AAAA,AAAA,AAAAqB,AAAA,AAAA,AAAA9W,AAAA,AAAAyV,AAAA;;AAAAqB;AAAA,AAAAnX;;;AAAA;;AAAA,AAAA,AAAA,AAAAD,AAAAF,AAAA;AAAA,AAAAiW;;;;AAAAjW;;;;;AAAAiW;;;;;AAAAA;;;;;;;;;AAAAxV,AAAA,AAAA8W,AAAA,AAAAtZ;AAAA,AAAA,AAAAsZ,AAAA5W,AAAA,AAAA7C;;AAAAyZ;;AAAA,AAAA,AAAA3W,AAAAH;;;AAAA3C;;AAsBF,AAAA,AAAM0Z,AACH/a;AADH,AAEE,AAAAqB,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAuZ;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;AAAAC,AAAA,AAAA;AAAAC,AAAA,AAO0Brb,AAAyBC;AAPnDqb,AAAA,AAAAD;AAAAE,AAAA,AAAArZ,AAAAkZ,AAAAE;AAAAE,AAAA,AAAAD,AAKwB/W;AALxBiX,AAAA,AAAAD,AAIuBjX;AAJvBmX,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAAzZ,AAAAiZ,AAAAO;AAAAE,AAAA,AAAAD,AACerX,AACApF;AAFf+b,AAAAA;AAAA,AAAA,AAAAzY,AAAAyY,AAAA,AAAAW;;AAAA,AAAA,AAAAV,AAAA;AAAA,AAAAW,AAAA,AAAAZ,AAAA;AAAAa,AAAA,AAAAD,AAAUxX;AAAV,AAQwB,AAAKQ;AAAL,AAAA,AAAS,AAACiT,AAAW,AAAA,AAASjT,AACrB,AAACiT,AAAW,AAAA,AAAYjT;;;AATzDkX,AAAA,AAAA,AAAAF;AAAAG,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAAJ,AAAAG,AAQoBxb;AARpB0b,AAAA,AAAAD,AAQO5b,AAAMmc;AARbxB,AAAAA;AAAA,AAAA,AAAA5X,AAAA4X,AAAAkB;;AAAA;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAA7Y;;AAAA,AAAA6Y,AAAA,AAAA;;AAAAA;;AAAAnB;;AAAA,AAAA,AAAAzX,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA/B,AAAAuZ;AAAA,AAAA,AAAA,AAAAvX,AAAAD,AAAA;AAAA;;AAAAA;;;;AAAA,AAAAE,AAAA0Y;AAAA,AAAA,AAAAC,AAAArB;AAAA,AAAA,AAAAqB,AAAA,AAAA3Y;;AAAA2Y;AAAA,AAAA,AAAAxY,AAAA,AAAAmX,AAAA;AAAA,AAAAsB,AAAAtB;AAAA,AAAA,AAAAsB,AAAA,AAAA,AAAAvY,AAAA,AAAAiX,AAAA;;AAAAsB;AAAA,AAAA5Y;;;AAAA;;AAAA,AAAA,AAAA,AAAAD,AAAAF,AAAA;AAAA,AAAAyX;;;;AAAAzX;;;;;AAAAyX;;;;;AAAAA;;;;;;;;;AAAAhX,AAAA,AAAAuY,AAAA,AAAA/a;AAAA,AAAA,AAAA+a,AAAArY,AAAA,AAAA7C;;AAAAkb;;AAAA,AAAA,AAAApY,AAAAH;;;AAAA3C;;AAcF,AAAA,AAAMob,AACH1O;AADH,AAEE,AAAA1M,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAib;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;AAAAC,AAAA,AAAA;AAAAC,AAAA,AAO0Btd,AAAsBuO;AAPhDgP,AAAA,AAAAD;AAAAE,AAAA,AAAA/a,AAAA4a,AAAAE;AAAAE,AAAA,AAAAD,AAKwBzY;AALxB2Y,AAAA,AAAAD,AAIuB3Y;AAJvB6Y,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAAnb,AAAA2a,AAAAO;AAAAE,AAAA,AAAAD,AACe/Y,AACAnF;AAFfwd,AAAAA;AAAA,AAAA,AAAAna,AAAAma,AAAA,AAAAW;;AAAA,AAAA,AAAAV,AAAA;AAAA,AAAAW,AAAA,AAAAZ,AAAA;AAAAa,AAAA,AAAA,AAAAD;AAAAZ,AAAAA;AAAA,AAAA,AAAAtZ,AAAAsZ,AAAAa;;AAAA;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAla;;AAAA,AAAAka,AAAA,AAAA;;AAAAA;;AAAAd;;AAAA,AAAA,AAAAnZ,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA/B,AAAAib;AAAA,AAAA,AAAA,AAAAjZ,AAAAD,AAAA;AAAA;;AAAAA;;;;AAAA,AAAAE,AAAA+Z;AAAA,AAAA,AAAAC,AAAAhB;AAAA,AAAA,AAAAgB,AAAA,AAAAha;;AAAAga;AAAA,AAAA,AAAA7Z,AAAA,AAAA6Y,AAAA;AAAA,AAAAiB,AAAAjB;AAAA,AAAA,AAAAiB,AAAA,AAAA,AAAA5Z,AAAA,AAAA2Y,AAAA;;AAAAiB;AAAA,AAAAja;;;AAAA;;AAAA,AAAA,AAAA,AAAAD,AAAAF,AAAA;AAAA,AAAAmZ;;;;AAAAnZ;;;;;AAAAmZ;;;;;AAAAA;;;;;;;;;AAAA1Y,AAAA,AAAA4Z,AAAA,AAAApc;AAAA,AAAA,AAAAoc,AAAA1Z,AAAA,AAAA7C;;AAAAuc;;AAAA,AAAA,AAAAzZ,AAAAH;;;AAAA3C;;AAWF,AAAA,AAAMwc,AACH9P;AADH,AAEE,AAAA1M,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAqc;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;AAAAC,AAAA,AAAA;AAAAC,AAAA,AAO0Bve,AAAsBoO;AAPhDoQ,AAAA,AAAAD;AAAAE,AAAA,AAAAnc,AAAAgc,AAAAE;AAAAE,AAAA,AAAAD,AAKwB7Z;AALxB+Z,AAAA,AAAAD,AAIuB/Z;AAJvBia,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAAvc,AAAA+b,AAAAO;AAAAE,AAAA,AAAAD,AACena,AACAnF;AAFf4e,AAAAA;AAAA,AAAA,AAAAvb,AAAAub,AAAA,AAAAW;;AAAA,AAAA,AAAAV,AAAA;AAAA,AAAAW,AAAA,AAAAZ,AAAA;AAAAa,AAAA,AAAA,AAAAD;AAAAZ,AAAAA;AAAA,AAAA,AAAA1a,AAAA0a,AAAAa;;AAAA;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAtb;;AAAA,AAAAsb,AAAA,AAAA;;AAAAA;;AAAAd;;AAAA,AAAA,AAAAva,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA/B,AAAAqc;AAAA,AAAA,AAAA,AAAAra,AAAAD,AAAA;AAAA;;AAAAA;;;;AAAA,AAAAE,AAAAmb;AAAA,AAAA,AAAAC,AAAAhB;AAAA,AAAA,AAAAgB,AAAA,AAAApb;;AAAAob;AAAA,AAAA,AAAAjb,AAAA,AAAAia,AAAA;AAAA,AAAAiB,AAAAjB;AAAA,AAAA,AAAAiB,AAAA,AAAA,AAAAhb,AAAA,AAAA+Z,AAAA;;AAAAiB;AAAA,AAAArb;;;AAAA;;AAAA,AAAA,AAAA,AAAAD,AAAAF,AAAA;AAAA,AAAAua;;;;AAAAva;;;;;AAAAua;;;;;AAAAA;;;;;;;;;AAAA9Z,AAAA,AAAAgb,AAAA,AAAAxd;AAAA,AAAA,AAAAwd,AAAA9a,AAAA,AAAA7C;;AAAA2d;;AAAA,AAAA,AAAA7a,AAAAH;;;AAAA3C;;AAaF,AAAA,AAAA,AAAAkR,AAAM0M;AAAN,AAAA,AAAAzM,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAyM,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAtM;;;AAAA,AAAA,AAAA,AAAA,AAAAuM,AAAMD,AACH7f,AAAaE,AAAeC;AAD/B,AAAA,AAAA4f,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAnM,AAAA,AAAAmM,AAAA,AAAA,AAAA,AAAA,AAAA9e,AAAA4S,AAAAkM,AAAAA;AAAA,AAAAjM,AAAAiM,AAAA,AAAA,AAEa1L;AAFb,AAGE,AAAApS,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA+d;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAC,AAAA,AAAAF,AAAA;AAAAG,AAAA,AAAAH,AAAA;AAAAI,AAAA,AAAAJ,AAAA;AAAAG,AAAA,AAAwBjgB,AAAkBN;AAA1CsgB,AAAA,AAC0BhgB,AAAkBJ;AAD5CsgB,AAAA,AAE0BlgB,AAAkBH;AAF5CsgB,AAAA,AAAA,AAAA;AAAAC,AAAA,AAAA;AAAAC,AAAA,AAAAJ,AAAAD,AAAAE,AAU0BvgB;AAV1B2gB,AAAA,AAAAD;AAAAE,AAAA,AAAAhe,AAAA6d,AAAAE;AAAAE,AAAA,AAAAD,AAQwB1b;AARxB4b,AAAA,AAAAD,AAOuB5b;AAPvB8b,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAApe,AAAA4d,AAAAO;AAAAE,AAAA,AAAAD,AAIehc,AACAnF;AALfsgB,AAAA,AAAAe,AAAAf;AAAA,AAAA,AAAAe,AAAA,AAAAb;;AAAA,AAAAa,AAAA,AAAAZ;;AAAA,AAAAY,AAAA,AAAAX;;AAAAW;;AAAA,AAAA,AAAAhe,AAAAid,AAAA,AAAAc;;AAAA,AAAA,AAAAb,AAAA;AAAA,AAAAC,AAAA,AAAAF,AAAA;AAAAG,AAAA,AAAAH,AAAA;AAAAI,AAAA,AAAAJ,AAAA;AAAAgB,AAAA,AAAAhB,AAAA;AAAAiB,AAAA,AAAAjB,AAAA;AAAAkB,AAAA,AAAAlB,AAAA;AAAAkB,AAAA,AAAAlB,AAAA;AAAAmB,AAAA,AAAA,AAAAD;AAAAF,AAAA,AAAA,AAAAG;AAAAC,AAAA,AAAAjB,AAAUvgB;AAAVsgB,AACUpgB;AADVsgB,AAEUrgB;AAFVmhB,AAGUtc;AAHVoc,AAWU8B;AAXV,AAamC,AAAKhQ;AAAL,AAAA,AAAA,AACG,AAAC5S,AAAkB,AAAA,AAAK,AAAA,AAAQ4S,AAC/B,AAAA,AAAOA,AAAG,AAAA,AAAWA;;;AAf5DuO,AAAA,AAAA,AAAAL;AAAAM,AAAA,AAAAF,AAAAC,AAa+BrgB;AAb/BugB,AAAA,AAAAD,AAYwBzgB,AAAMmiB;AAZ9B/B,AAAA,AAAA,AAAAD;AAAAQ,AAAA,AAAAP,AAkBuBvJ;AAlBvB+J,AAAA,AAAAD,AAAA;AAAAE,AAAA,AAAA,AAkB8CzN;AAlB9C0N,AAAA,AAAAF,AAAAC;AAAA1B,AAAA,AAAA4B,AAAA5B;AAAA,AAAA,AAAA4B,AAAA,AAAAL;;AAAA,AAAAK,AAAA,AAAAZ;;AAAA,AAAAY,AAAA,AAAAX;;AAAA,AAAAW,AAAA,AAAAV;;AAAAU;;AAAA,AAAA,AAAA,AAAAD;AAAA,AAAAE,AAAA7B;AAAA,AAAA,AAAA6B,AAAA,AAAA;;AAAAA;AAAA,AAAAC,AAAA9B;AAAA,AAAA,AAAA8B,AAAA,AAAA;;AAAAA;;AAAA;;AAAA,AAAA,AAAA7B,AAAA;AAAA,AAAAC,AAAA,AAAAF,AAAA;AAAAG,AAAA,AAAAH,AAAA;AAAAI,AAAA,AAAAJ,AAAA;AAAA+B,AAAA,AAAA,AAAA5B,AAmBanI;AAnBbgK,AAAA,AAAA,AAoBwF/N;AApBxFgO,AAAA,AAAA9B,AAAAD,AAAAE,AAAA,AAAA4B,AAoBiBiB;AApBjBjD,AAAA,AAAAkC,AAAAlC;AAAA,AAAA,AAAAkC,AAAA,AAAAH;;AAAAG;;AAAA,AAAA,AAAAnf,AAAAid,AAAA,AAAAiC;;AAAA,AAAA,AAAAhC,AAAA;AAAA,AAAAC,AAAA,AAAAF,AAAA;AAAAG,AAAA,AAAAH,AAAA;AAAAuB,AAAA,AAAAvB,AAAA;AAAAI,AAAA,AAAAJ,AAAA;AAAAgB,AAAA,AAAAhB,AAAA;AAAAiB,AAAA,AAAAjB,AAAA;AAAAkB,AAAA,AAAAlB,AAAA;AAAAmC,AAAA,AAAAhC,AAAUvgB;AAAVsgB,AACUpgB;AADVsgB,AAEUrgB;AAFVmhB,AAGUtc;AAHVoc,AAWU8B;AAXVvB,AAYUwB;AAZV9B,AAiBUtJ;AAjBV,AAqBa,AAAKuL;AAAL,AACE,AAAMtjB,AAAa,AAACM,AAAkB,AAAA,AAAK,AAAA,AAAOgjB;AAC5CC,AAAO,AAACjjB,AAAkB,AAAA,AAAK,AAAA,AAAS,AAAA,AAAOgjB;AAC/CE,AAAO,AAACljB,AAAkB,AAAA,AAAK,AAAA,AAAS,AAAA,AAAOgjB;AAC/CG,AAAK,AAAA,AAAOH;AACZI,AAAW,AAACxL,AAAK,AAAA,AAACyL,AAAOR,AAAcI,AAAOE;AAC9CG,AAAW,AAAC1L,AAAK,AAAA,AAACyL,AAAOR,AAAcK,AAAOC;AALpD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAOY,AAACnjB,AAAkB,AAAA,AAAK,AAAA,AAAOgjB,AAClCG,AACK,AAACjL,AAAe,AAAA,AAAO8K,AACjB,AAAC7K,AAAW,AAAA,AAAW,AAAA,AAAS,AAAA,AAAO6K,AACzC,AAAA,AAAS,AAAA,AAAS,AAAA,AAAOA,AACxBC,AACH,AAAA,AAAO,AAAA,AAAS,AAAA,AAAOD,AACnB,AAAC7K,AAAW,AAAA,AAAW,AAAA,AAAS,AAAA,AAAO6K,AACzC,AAAA,AAAS,AAAA,AAAS,AAAA,AAAOA,AACxBE,AACH,AAAA,AAAO,AAAA,AAAS,AAAA,AAAOF,AACtB,AAACpL,AAAK,AAAA,AAASoL,AACjB,AAACpL,AAAK,AAAA,AAAYoL,AACrB,AAACpL,AAAK,AAAA,AAAeoL,AACrB,AAACpL,AAAK,AAAA,AAAeoL,AACnB,AAACpL,AAAK,AAAA,AAAYoL,AACf,AAACpL,AAAK,AAAA,AAAcoL,AACpB,AAACpL,AAAK,AAAA,AAAcoL,AAChBI,AACAE,AACN,AAAA,AAAYN,AAClB,AAAC7K,AAAW,AAAA,AAAO6K;;;AAlD3Cd,AAAA,AAAAD,AAAAlB,AAqBSjgB;AArBTgf,AAAAA;AAAA,AAAA,AAAA,AAAAqC,AAAArC;AAAA,AAAA,AAAAqC,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAApC,AAAA;AAAA,AAAAqC,AAAA,AAAAtC,AAAA;AAAAA,AAAAA;AAAA,AAAA,AAAApc,AAAAoc,AAAAsC;;AAAA,AAAA,AAAArC,AAAA;AAAA,AAAAsC,AAAA,AAAAvC,AAAA;AAAAA,AAAAA;AAAA,AAAA,AAAA,AAAAwC,AAAAxC;AAAA,AAAA,AAAAwC,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAA;;AAAAA;AAAA;;AAAA;;;;;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAA3e;;AAAA,AAAA2e,AAAA,AAAA;;AAAAA;;AAAAzC;;AAAA,AAAA,AAAAjc,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA/B,AAAA+d;AAAA,AAAA,AAAA,AAAA/b,AAAAD,AAAA;AAAA;;AAAAA;;;;AAAA,AAAAE,AAAAwe;AAAA,AAAA,AAAAC,AAAA3C;AAAA,AAAA,AAAA2C,AAAA,AAAAze;;AAAAye;AAAA,AAAA,AAAAte,AAAA,AAAA2b,AAAA;AAAA,AAAA4C,AAAA5C;AAAA,AAAA,AAAA4C,AAAA,AAAA,AAAAre,AAAA,AAAAyb,AAAA;;AAAA4C;AAAA,AAAA1e;;;AAAA;;AAAA,AAAA,AAAA,AAAAD,AAAAF,AAAA;AAAA,AAAAic;;;;AAAAjc;;;;;AAAAic;;;;;AAAAA;;;;;;;;;AAAAxb,AAAA,AAAAqe,AAAA,AAAA7gB;AAAA,AAAA,AAAA6gB,AAAAne,AAAA,AAAA7C;;AAAAghB;;AAAA,AAAA,AAAAle,AAAAH;;;AAAA3C;;;AAHF,AAAA,AAAA,AAAM4d;;AAAN;AAAA,AAAA,AAAA,AAAAG,AAAMH;AAAN,AAAA,AAAAI,AAAA,AAAAtb,AAAAqb;AAAAA,AAAA,AAAA/L,AAAA+L;AAAAE,AAAA,AAAAvb,AAAAqb;AAAAA,AAAA,AAAA/L,AAAA+L;AAAAG,AAAA,AAAAxb,AAAAqb;AAAAA,AAAA,AAAA/L,AAAA+L;AAAA,AAAA,AAAA7L,AAAA;AAAA,AAAA,AAAAA,AAAA8L,AAAAC,AAAAC,AAAAH;;;AAAA,AA0DA,AAAA,AAAM6D,AACH7jB;AADH,AAEE,AAAAiC,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAyhB;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;AAAAC,AAAA,AAAA;AAAAC,AAAA,AAO0BnkB,AAA4BC;AAPtDmkB,AAAA,AAAAD;AAAAE,AAAA,AAAAvhB,AAAAohB,AAAAE;AAAAE,AAAA,AAAAD,AAKwBjf;AALxBmf,AAAA,AAAAD,AAIuBnf;AAJvBqf,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAA3hB,AAAAmhB,AAAAO;AAAAE,AAAA,AAAAD,AACevf,AACAnF;AAFfgkB,AAAAA;AAAA,AAAA,AAAA3gB,AAAA2gB,AAAA,AAAAW;;AAAA,AAAA,AAAAV,AAAA;AAAA,AAAAW,AAAA,AAAAZ,AAAA;AAAAa,AAAA,AAAA,AAAA,AAQce;AARdd,AAAA,AAAA,AAAA,AAQiCc;AARjCb,AAAA,AAAAF,AAAAC,AAQQa;AARRX,AAAA,AAAA,AAAAJ;AAAAK,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAAD,AASergB;AATfugB,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAAN,AAAAK;AAAApB,AAAAA;AAAA,AAAA,AAAA9f,AAAA8f,AAAAqB;;AAAA;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAlhB;;AAAA,AAAAkhB,AAAA,AAAA;;AAAAA;;AAAAtB;;AAAA,AAAA,AAAA3f,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA/B,AAAAyhB;AAAA,AAAA,AAAA,AAAAzf,AAAAD,AAAA;AAAA;;AAAAA;;;;AAAA,AAAAE,AAAA+gB;AAAA,AAAA,AAAAC,AAAAxB;AAAA,AAAA,AAAAwB,AAAA,AAAAhhB;;AAAAghB;AAAA,AAAA,AAAA7gB,AAAA,AAAAqf,AAAA;AAAA,AAAAyB,AAAAzB;AAAA,AAAA,AAAAyB,AAAA,AAAA,AAAA5gB,AAAA,AAAAmf,AAAA;;AAAAyB;AAAA,AAAAjhB;;;AAAA;;AAAA,AAAA,AAAA,AAAAD,AAAAF,AAAA;AAAA,AAAA2f;;;;AAAA3f;;;;;AAAA2f;;;;;AAAAA;;;;;;;;;AAAAlf,AAAA,AAAA4gB,AAAA,AAAApjB;AAAA,AAAA,AAAAojB,AAAA1gB,AAAA,AAAA7C;;AAAAujB;;AAAA,AAAA,AAAAzgB,AAAAH;;;AAAA3C","names":["revert.thegraph/uni-subgraph-url","revert.thegraph/sushi-subgraph-url","revert.thegraph/blocks-subgraph-url","revert.thegraph/univ3-subgraph-url","revert.thegraph/v3-pool-tokens-query-string","pool-address","revert.thegraph/v3-pool-days-query-string","token0-address","token1-address","revert.thegraph/v3-mints-query-string","account","clojure.string/lower-case","revert.thegraph/v3-burns-query-string","revert.thegraph/snapshot-query-string","user-address","revert.thegraph/some-pair","revert.thegraph/block-times-query-string","block-numbers","clojure.string.join","revert.thegraph/positions-query-string","user","pairs","cljs.core.apply","cljs.core/str","p1__65699#","cljs.core.map","revert.thegraph/pairs-query-string","p1__65700#","revert.thegraph/mints-query-string","address","revert.thegraph/pair-days-query-string","pair-address","revert.thegraph/pair-days-query-string-sushi","revert.thegraph/token-days-query-string","token-addresses","p1__65701#","revert.thegraph/<user-lps-uni","pair-addresses","c__52208__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__52209__auto__","switch__52185__auto__","state_65725","state_val_65726","inst_65703","inst_65704","inst_65705","inst_65706","inst_65707","cljs.core/PersistentHashMap","inst_65708","inst_65709","inst_65710","inst_65711","inst_65712","cljs.core.async.impl.ioc-helpers/take!","inst_65714","inst_65715","inst_65716","inst_65717","inst_65718","cljs.core/PersistentVector","inst_65719","inst_65720","inst_65721","p1__65702#","inst_65722","inst_65723","cljs.core.async.impl.ioc-helpers/return-chan","statearr-65727","state-machine__52186__auto__","ret-value__52187__auto__","result__52188__auto__","cljs.core/keyword-identical?","ex__52189__auto__","e65728","statearr-65729","cljs.core/seq","statearr-65730","cljs.core/first","state__52210__auto__","statearr-65731","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","data","cljs_http.client.post","js/JSON.stringify","cljs.core/clj->js","positions","keys-numerical-vals","num-parse-fn","revert.utils/pu","p","pair","r0","r1","ts","resusd","reseth","volusd","ltb","pair'","cljs.core.assoc","p'","revert.thegraph/<user-lps-sushi","state_65755","state_val_65756","inst_65733","inst_65734","inst_65735","inst_65736","inst_65737","inst_65738","inst_65739","inst_65740","inst_65741","inst_65742","inst_65744","inst_65745","inst_65746","inst_65747","inst_65748","inst_65749","inst_65750","inst_65751","p1__65732#","inst_65752","inst_65753","statearr-65757","e65758","statearr-65759","statearr-65760","statearr-65761","revert.thegraph/<user-lps","state_65770","state_val_65771","inst_65762","inst_65764","inst_65765","statearr-65772","inst_65767","inst_65768","statearr-65773","e65774","statearr-65775","statearr-65776","statearr-65777","cljs.core.concat","revert.thegraph/<user-lp-snapshots-uni","state_65798","state_val_65799","inst_65779","inst_65780","inst_65781","inst_65782","inst_65783","inst_65784","inst_65785","inst_65786","inst_65787","inst_65788","inst_65790","inst_65791","inst_65792","inst_65793","inst_65794","p1__65778#","inst_65795","inst_65796","statearr-65800","e65801","statearr-65802","statearr-65803","statearr-65804","lts","rusd","t0pusd","t1pusd","revert.thegraph/<user-lp-snapshots-sushi","state_65825","state_val_65826","inst_65806","inst_65807","inst_65808","inst_65809","inst_65810","inst_65811","inst_65812","inst_65813","inst_65814","inst_65815","inst_65817","inst_65818","inst_65819","inst_65820","inst_65821","p1__65805#","inst_65822","inst_65823","statearr-65827","e65828","statearr-65829","statearr-65830","statearr-65831","revert.thegraph/<user-lp-snapshots","state_65840","state_val_65841","inst_65832","inst_65834","inst_65835","statearr-65842","inst_65837","inst_65838","statearr-65843","e65844","statearr-65845","statearr-65846","statearr-65847","revert.thegraph/<pairs-info","state_65862","state_val_65863","inst_65848","inst_65849","inst_65850","inst_65851","inst_65852","inst_65853","inst_65854","inst_65855","inst_65856","inst_65857","inst_65859","inst_65860","statearr-65864","e65865","statearr-65866","statearr-65867","statearr-65868","revert.thegraph/<user-mints","user-addresses","state_65883","state_val_65884","inst_65869","inst_65870","inst_65871","inst_65872","inst_65873","inst_65874","inst_65875","inst_65876","inst_65877","inst_65878","inst_65880","inst_65881","statearr-65885","e65886","statearr-65887","statearr-65888","statearr-65889","revert.thegraph/<pair-days-sushi","state_65908","state_val_65909","inst_65890","inst_65891","inst_65892","inst_65893","inst_65894","inst_65895","inst_65896","inst_65897","inst_65898","inst_65899","inst_65901","inst_65902","inst_65903","inst_65904","inst_65905","inst_65906","statearr-65910","e65911","statearr-65912","statearr-65913","statearr-65914","cljs.core.into","revert.thegraph/<pair-days-uni","state_65933","state_val_65934","inst_65915","inst_65916","inst_65917","inst_65918","inst_65919","inst_65920","inst_65921","inst_65922","inst_65923","inst_65924","inst_65926","inst_65927","inst_65928","inst_65929","inst_65930","inst_65931","statearr-65935","e65936","statearr-65937","statearr-65938","statearr-65939","revert.thegraph/normalize-volumes","dailys","x","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","revert.thegraph/<pair-days","p__65944","map__65945","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get","seq65941","G__65942","cljs.core/next","G__65943","self__4723__auto__","limit","retries","state_65990","state_val_65991","statearr-65992","inst_65947","inst_65956","inst_65983","statearr-65993","inst_65958","statearr-65994","inst_65949","statearr-65995","inst_65988","inst_65950","inst_65951","inst_65952","inst_65953","statearr-65996","statearr-65997","statearr-65998","inst_65966","inst_65973","inst_65960","inst_65985","inst_65986","statearr-65999","inst_65974","inst_65975","inst_65976","inst_65977","statearr-66000","statearr-66001","statearr-66002","inst_65961","p1__65940#","inst_65962","inst_65963","inst_65964","inst_65965","inst_65967","inst_65968","inst_65969","statearr-66003","statearr-66004","statearr-66005","inst_65979","inst_65980","inst_65981","statearr-66006","statearr-66007","statearr-66008","e66009","statearr-66010","statearr-66011","statearr-66012","uni-data","pair-data","cljs.core/count","pool-dailys","cljs.core.take","cljs.core.take_while","revert.utils/bn","exchange","js/console.log","revert.thegraph._LT_pair_days","pool","clojure.string.split","revert.utils/ts->datetime","revert.utils/str->int","revert.thegraph/<token-days-uni","state_66031","state_val_66032","inst_66013","inst_66014","inst_66015","inst_66016","inst_66017","inst_66018","inst_66019","inst_66020","inst_66021","inst_66022","inst_66024","inst_66025","inst_66026","inst_66027","inst_66028","inst_66029","statearr-66033","e66034","statearr-66035","statearr-66036","statearr-66037","t","revert.thegraph/<token-days-sushi","state_66056","state_val_66057","inst_66038","inst_66039","inst_66040","inst_66041","inst_66042","inst_66043","inst_66044","inst_66045","inst_66046","inst_66047","inst_66049","inst_66050","inst_66051","inst_66052","inst_66053","inst_66054","statearr-66058","e66059","statearr-66060","statearr-66061","statearr-66062","revert.thegraph/<block-times","state_66082","state_val_66083","inst_66063","inst_66064","inst_66065","inst_66066","inst_66067","inst_66068","inst_66069","inst_66070","inst_66071","inst_66072","inst_66074","inst_66075","inst_66076","inst_66077","inst_66078","inst_66079","inst_66080","statearr-66084","e66085","statearr-66086","statearr-66087","statearr-66088","cljs.core/merge","revert.thegraph/<v3-user-mints","state_66103","state_val_66104","inst_66089","inst_66090","inst_66091","inst_66092","inst_66093","inst_66094","inst_66095","inst_66096","inst_66097","inst_66098","inst_66100","inst_66101","statearr-66105","e66106","statearr-66107","statearr-66108","statearr-66109","revert.thegraph/<v3-user-burns","state_66124","state_val_66125","inst_66110","inst_66111","inst_66112","inst_66113","inst_66114","inst_66115","inst_66116","inst_66117","inst_66118","inst_66119","inst_66121","inst_66122","statearr-66126","e66127","statearr-66128","statearr-66129","statearr-66130","revert.thegraph/<v3-pool-days","p__66135","map__66136","seq66131","G__66132","G__66133","G__66134","state_66176","state_val_66177","inst_66139","inst_66138","inst_66140","inst_66141","inst_66142","inst_66143","inst_66144","inst_66145","inst_66146","inst_66147","inst_66148","inst_66149","inst_66150","statearr-66178","inst_66154","inst_66159","inst_66152","inst_66153","inst_66155","inst_66156","inst_66157","inst_66158","inst_66160","inst_66161","inst_66162","inst_66163","statearr-66179","statearr-66180","statearr-66181","inst_66165","inst_66166","inst_66167","statearr-66182","inst_66171","inst_66172","statearr-66183","inst_66174","inst_66169","statearr-66184","statearr-66185","e66186","statearr-66187","statearr-66188","statearr-66189","resp","token-prices","revert.utils/deep-merge","revert.thegraph._LT_v3_pool_days","pool-day","token0","token1","date","price0-usd","cljs.core.get_in","price1-usd","revert.thegraph/<v3-pool-tokens","state_66212","state_val_66213","inst_66190","inst_66191","inst_66192","inst_66193","inst_66194","inst_66195","inst_66196","inst_66197","inst_66198","inst_66199","inst_66201","inst_66202","inst_66203","inst_66204","inst_66205","inst_66206","inst_66207","inst_66208","inst_66209","inst_66210","statearr-66214","e66215","statearr-66216","statearr-66217","statearr-66218","cljs.core.juxt","cljs.core.comp"],"sourcesContent":["(ns revert.thegraph\n  (:require [cljs.core.async :refer [go]]\n            [cljs.core.async.interop :refer-macros [<p!]]\n            [clojure.string :as string]\n            [cljs-http.client :as http]\n            [bignumber.core]\n            [bignumber.js :as BigNumber]\n            [revert.utils :as u]))\n\n\n(def uni-subgraph-url \"https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v2\")\n(def sushi-subgraph-url \"https://api.thegraph.com/subgraphs/name/sushiswap/exchange\")\n(def blocks-subgraph-url \"https://api.thegraph.com/subgraphs/name/blocklytics/ethereum-blocks\")\n(def univ3-subgraph-url \"https://api.thegraph.com/subgraphs/name/ianlapham/uniswap-v3-subgraph\")\n;;(def uni-subgraph-url uni-subgraph-url')\n\n\n(defn v3-pool-tokens-query-string\n  [pool-address]\n  (str \"{\n      poolDayDatas(orderBy: date,\n                   orderDirection: desc,\n                   where: {pool: \\\"\" pool-address \"\\\"}\n                   first: 1) {\n         id\n         pool {id,\n         token0 {\n             id,\n         },\n         token1 {\n             id,\n\n         }}       }}\"))\n\n(defn v3-pool-days-query-string\n  [pool-address token0-address token1-address]\n  (str \"{\n      poolDayDatas(orderBy: date,\n                   orderDirection: desc,\n                   where: {pool: \\\"\" pool-address \"\\\"}\n                   first: 1000) {\n         id\n         date,\n         pool {id,\n         token0 {\n             id,\n            symbol,\n            name,\n            decimals\n\n         },\n         token1 {\n             id,\n            symbol,\n            name,\n            decimals\n\n         }},\n         liquidity,\n         sqrtPrice,\n         token0Price,\n         token1Price,\n         tick,\n         tvlUSD,\n         volumeToken0,\n         volumeToken1\n         volumeUSD,\n         txCount\n       },\n      tokenDayDatas(orderBy: date,\n                   orderDirection: desc,\n                   where: {token_in: [\\\"\" token0-address \"\\\", \\\"\" token1-address \"\\\"]}\n                   first: 1000) {\n    date,\n    token {id},\n    priceUSD\n      }\n   }\n   \"))\n\n\n\n(defn v3-mints-query-string\n  [account]\n  (str\n   \"{\n  mints(where: {origin:  \\\"\" (clojure.string/lower-case account) \"\\\"}) {\n    id,\n    transaction {\n      id,\n      blockNumber\n    }\n    pool {\n      id,\n      token0 {\n        id,\n        name,\n        symbol,\n        decimals,\n        derivedETH\n      },\n      token1 {\n        id,\n        name,\n        symbol,\n        decimals,\n        derivedETH\n      },\n      feeTier,\n      liquidity,\n      sqrtPrice,\n      tick\n      totalValueLockedToken0,\n      totalValueLockedToken1,\n      totalValueLockedETH,\n      totalValueLockedUSD,\n      liquidityProviderCount,\n    },\n    token0{\n      id\n    },\n    token1 {\n      id\n    },\n    amount,\n    amount0,\n    amount1,\n    amountUSD,\n    tickLower,\n    tickUpper\n  }\n  bundles(first: 5) {\n    id\n    ethPriceUSD\n  }\n}\n\"))\n\n\n(defn v3-burns-query-string\n  [account]\n  (str\n   \"{\n  burns(where: {origin:  \\\"\" (clojure.string/lower-case account) \"\\\"}) {\n    id,\n    transaction {\n      id,\n      blockNumber\n    }\n    pool {\n      id,\n      token0 {\n        id\n      },\n      token1 {\n        id\n      },\n      feeTier,\n      liquidity,\n      sqrtPrice,\n      tick\n      totalValueLockedToken0,\n      totalValueLockedToken1,\n      totalValueLockedETH,\n      totalValueLockedUSD,\n      liquidityProviderCount,\n    },\n    token0{\n      id\n    },\n    token1 {\n      id\n    },\n    amount,\n    amount0,\n    amount1,\n    amountUSD,\n    tickLower,\n    tickUpper\n  }\n  bundles(first: 5) {\n    id\n    ethPriceUSD\n  }\n}\n\"))\n\n;; TODO need to paginate if more than 1,000\n;; if we do not specify :first, the default is 100\n(defn snapshot-query-string\n  [user-address]\n  (str \"{\n      liquidityPositionSnapshots(orderBy: timestamp,\n                                 orderDirection: desc,\n                                 where: {user: \\\"\" (clojure.string/lower-case user-address) \"\\\"}\n                                 first: 1000) {\n      block,\n      timestamp,\n      pair {\n          id,\n          reserve0,\n          reserve1,\n          totalSupply,\n\n          token0 {\n             id,\n            symbol,\n            name,\n            decimals\n\n          }\n          token1 {\n             id,\n            symbol,\n            name,\n            decimals\n\n          }\n     },\n    liquidityTokenBalance,\n    liquidityTokenTotalSupply,\n    token0PriceUSD,\n    token1PriceUSD,\n    reserve0,\n    reserve1,\n    reserveUSD\n    }\n   }\"))\n\n(def some-pair \"0x0d0d65e7a7db277d3e0f5e1676325e75f3340455\")\n\n(defn block-times-query-string\n  [block-numbers]\n  (str \"{blocks(where: {number_in: [\"\n       (clojure.string/join \",\" block-numbers)\n       \"]}, first:1000)\n           {number,\n           timestamp}\n        }\"))\n\n(defn positions-query-string\n  [user pairs]\n  (str \"{\n      liquidityPositions( where: {id_in: [\"\n       (apply str\n              (map #(str \"\\\"\"\n                         (clojure.string/lower-case %)\n                         \"-\"\n                         (clojure.string/lower-case user)\n                         \"\\\",\"\n                         )\n                   pairs))\n\n\n\n       \"]}\n                                 first: 1000) {\n      id,\n      user,\n      liquidityTokenBalance,\n      pair {\n          id,\n          reserve0,\n          reserve1,\n          totalSupply,\n          reserveUSD,\n          reserveETH,\n          volumeUSD,\n          token0 {\n            id,\n            symbol,\n            name,\n            decimals,\n          }\n          token1 {\n            id,\n            symbol,\n            name,\n            decimals\n\n          }\n     }\n\n    }\n   }\"))\n\n(defn pairs-query-string\n  [pairs]\n  (str \"{\n      pairs( where: {id_in: [\"\n       (apply str\n              (map #(str \"\\\"\" (clojure.string/lower-case %) \"\\\",\" )\n                   pairs))\n\n\n       \"]}\n                                 first: 1000) {\n          id,\n          reserve0,\n          reserve1,\n          totalSupply,\n\n          token0 {\n             id,\n            symbol,\n            name,\n            decimals\n\n          }\n          token1 {\n             id,\n            symbol,\n            name,\n            decimals\n()\n          }\n     }\n\n    }\n   \"))\n\n\n(defn mints-query-string\n  [address]\n  (str \"{\n      mints(where: {to: \\\"\" address \"\\\"}) {\n          id,\n          to,\n          timestamp,\n          liquidity,\n          amount0,\n          amount1,\n          pair {\n          id,\n          token0 {\n             id,\n            symbol,\n            name,\n            decimals\n\n          }\n          token1 {\n             id,\n            symbol,\n            name,\n            decimals\n\n          }\n     },\n          transaction {\n             id,\n             blockNumber,\n             timestamp\n          }\n\n       }\n     }\n   \"))\n\n;; TODO lower string all addresses that go to the graph\n(defn pair-days-query-string\n  [pair-address]\n  (str \"{\n      pairDayDatas(orderBy: date,\n                   orderDirection: desc,\n                   where: {pairAddress: \\\"\" pair-address \"\\\"}\n                   first: 1000) {\n         id\n         date,\n         pairAddress,\n         token0 {\n             id,\n            symbol,\n            name,\n            decimals\n\n         },\n         token1 {\n             id,\n            symbol,\n            name,\n            decimals\n\n         },\n         reserve0,\n         reserve1,\n         totalSupply,\n         reserveUSD,\n         dailyVolumeToken0,\n         dailyVolumeToken1,\n         dailyVolumeUSD,\n         dailyTxns\n       }\n     }\n   \"))\n\n\n(defn pair-days-query-string-sushi\n  [pair-address]\n  (str \"{\n      pairDayDatas(orderBy: date,\n                   orderDirection: desc,\n                   where: {pair: \\\"\" pair-address \"\\\"}\n                   first: 1000) {\n         id\n         date,\n         pair,\n         token0 {\n             id,\n            symbol,\n            name,\n            decimals\n\n         },\n         token1 {\n             id,\n            symbol,\n            name,\n            decimals\n\n         },\n         reserve0,\n         reserve1,\n         totalSupply,\n         reserveUSD,\n         volumeToken0,\n         volumeToken1,\n         volumeUSD,\n         txCount\n       }\n     }\n   \"))\n\n\n;; TODO lower string all addresses that go to the graph\n(defn token-days-query-string\n  [token-addresses]\n  (str \"{\n      tokenDayDatas(orderBy: date,\n                   orderDirection: desc,\n                   first: 1000,\n                   where: {token_in:[\" (apply str (map #(str \"\\\"\" (string/lower-case %) \"\\\",\")\n                                                       token-addresses)) \"]}) {\n         id\n         date,\n         token {id, name, symbol, decimals, derivedETH},\n         priceUSD\n       }\n     }\n   \"))\n\n\n\n(defn <user-lps-uni\n  [user-address pair-addresses]\n  (go (let [data\n            (<! (http/post\n                 uni-subgraph-url\n                 {:with-credentials? false\n                  :body (js/JSON.stringify\n                         (clj->js\n                          {:query\n                           (positions-query-string user-address pair-addresses)}))}))\n            positions (:liquidityPositions (:data (:body data)))\n            keys-numerical-vals [:liquidityTokenBalance]\n            num-parse-fn #(u/pu % 0)\n            positions' (map (fn [p] (let [pair (:pair p)\n\n                                          r0 (num-parse-fn (:reserve0 pair))\n                                          r1 (num-parse-fn (:reserve1 pair))\n                                          ts (num-parse-fn (:totalSupply pair))\n\n                                          resusd (num-parse-fn (:reserveUSD pair))\n                                          reseth (num-parse-fn (:reserveETH pair))\n                                          volusd (num-parse-fn (:volumeUSD pair))\n                                          ltb (num-parse-fn (:liquidityTokenBalance p))\n                                          pair' (assoc\n                                                 pair\n                                                 :reserve0 r0\n                                                 :reserve1 r1\n                                                 :totalSupply ts\n                                                 :reserveUSD resusd\n                                                 :volumeUSD volusd)\n                                          p' (assoc p\n                                                    :pair pair'\n                                                    :exchange \"uniswap\"\n                                                    :liquidityTokenBalance ltb)]\n                                      p'))\n                            positions)]\n        positions')))\n\n(defn <user-lps-sushi\n  [user-address pair-addresses]\n  (go (let [data\n            (<! (http/post\n                 sushi-subgraph-url\n                 {:with-credentials? false\n                  :body (js/JSON.stringify\n                         (clj->js\n                          {:query\n                           (positions-query-string user-address pair-addresses)}))}))\n            positions (:liquidityPositions (:data (:body data)))\n            keys-numerical-vals [:liquidityTokenBalance]\n            num-parse-fn #(u/pu % 0)\n            positions' (map (fn [p] (let [pair (:pair p)\n\n                                          r0 (num-parse-fn (:reserve0 pair))\n                                          r1 (num-parse-fn (:reserve1 pair))\n                                          ts (num-parse-fn (:totalSupply pair))\n                                          resusd (num-parse-fn (:reserveUSD pair))\n                                          reseth (num-parse-fn (:reserveETH pair))\n                                          volusd (num-parse-fn (:volumeUSD pair))\n                                          ltb (num-parse-fn (:liquidityTokenBalance p))\n                                          pair' (assoc\n                                                 pair\n                                                 :reserve0 r0\n                                                 :reserve1 r1\n                                                 :totalSupply ts\n                                                 :reserveUSD resusd\n                                                 :volumeUSD volusd)\n                                          p' (assoc p\n                                                    :pair pair'\n                                                    :exchange \"sushiswap\"\n                                                    :liquidityTokenBalance ltb)]\n                                      p'))\n                            positions)]\n        positions')))\n\n(defn <user-lps\n  [user-address pair-addresses]\n  (go (let [cuni (<! (<user-lps-uni user-address pair-addresses))\n            csushi (<! (<user-lps-sushi user-address pair-addresses))]\n        (concat cuni csushi))))\n\n\n\n#_(go (def my-lps (<! (<user-lps my-address \"0xb4e16d0168e52d35cacd2c6185b44281ec28c9dc\"))))\n\n\n(defn <user-lp-snapshots-uni\n  [user-address]\n  (go (let [data\n            (<! (http/post\n                 uni-subgraph-url\n                 {:with-credentials? false\n                  :body (js/JSON.stringify\n                         (clj->js\n                          {:query\n                           (snapshot-query-string user-address)}))}))\n            positions (:liquidityPositionSnapshots (:data (:body data)))\n            num-parse-fn #(u/pu % 0)\n            positions' (map (fn [p] (let [pair (:pair p)\n                                          r0 (num-parse-fn (:reserve0 p))\n                                          r1 (num-parse-fn (:reserve1 p))\n                                          lts (num-parse-fn (:liquidityTokenTotalSupply p))\n                                          ltb (num-parse-fn (:liquidityTokenBalance p))\n                                          rusd (num-parse-fn (:reserveUSD p))\n                                          t0pusd (num-parse-fn (:token0PriceUSD p))\n                                          t1pusd (num-parse-fn (:token1PriceUSD p))\n                                          p' (assoc p\n                                                    :exchange \"uniswap\"\n                                                    :reserve0 r0\n                                                    :reserve1 r1\n                                                    :liquidityTokenBalance ltb\n                                                    :liquidityTokenTotalSupply lts\n                                                    :reserveUSD rusd\n                                                    :token0PriceUSD t0pusd\n                                                    :token1PriceUSD t1pusd)]\n                                      p'))\n                            positions)]\n        positions')))\n\n\n(defn <user-lp-snapshots-sushi\n  [user-address]\n  (go (let [data\n            (<! (http/post\n                 sushi-subgraph-url\n                 {:with-credentials? false\n                  :body (js/JSON.stringify\n                         (clj->js\n                          {:query\n                           (snapshot-query-string user-address)}))}))\n            positions (:liquidityPositionSnapshots (:data (:body data)))\n            num-parse-fn #(u/pu % 0)\n            positions' (map (fn [p] (let [pair (:pair p)\n                                          r0 (num-parse-fn (:reserve0 p))\n                                          r1 (num-parse-fn (:reserve1 p))\n                                          lts (num-parse-fn (:liquidityTokenTotalSupply p))\n                                          ltb (num-parse-fn (:liquidityTokenBalance p))\n                                          rusd (num-parse-fn (:reserveUSD p))\n                                          t0pusd (num-parse-fn (:token0PriceUSD p))\n                                          t1pusd (num-parse-fn (:token1PriceUSD p))\n                                          p' (assoc p\n                                                    :exchange \"sushiswap\"\n                                                    :reserve0 r0\n                                                    :reserve1 r1\n                                                    :liquidityTokenBalance ltb\n                                                    :liquidityTokenTotalSupply lts\n                                                    :reserveUSD rusd\n                                                    :token0PriceUSD t0pusd\n                                                    :token1PriceUSD t1pusd)]\n                                      p'))\n                            positions)]\n        positions')))\n\n\n\n(defn <user-lp-snapshots\n  [user-address]\n  (go (let [cuni (<! (<user-lp-snapshots-uni user-address))\n            csushi (<! (<user-lp-snapshots-sushi user-address))]\n        (concat cuni csushi))))\n\n\n\n\n(defn <pairs-info\n  [pair-addresses]\n  (go (let [data\n            (<! (http/post\n                 uni-subgraph-url\n                 {:with-credentials? false\n                  :body (js/JSON.stringify\n                         (clj->js\n                          {:query\n                           (pairs-query-string pair-addresses)}))}))]\n        (:body data))))\n\n\n\n(defn <user-mints\n  [user-addresses]\n  (go (let [data\n            (<! (http/post\n                 uni-subgraph-url\n                 {:with-credentials? false\n                  :body (js/JSON.stringify\n                         (clj->js\n                          {:query\n                           (mints-query-string user-addresses)}))}))]\n        (:body data))))\n\n\n\n#_(defn <pair-days\n  [pair-addresses]\n  (go (let [data\n            (<! (http/post\n                 uni-subgraph-url\n                 {:with-credentials? false\n                  :body (js/JSON.stringify\n                         (clj->js\n                          {:query\n                           (pair-days-query-string-sushi pair-addresses)}))}))]\n        (:body data))))\n\n\n(defn <pair-days-sushi\n  [pair-addresses]\n  (go (let [data\n            (<! (http/post\n                 sushi-subgraph-url\n                 {:with-credentials? false\n                  :body (js/JSON.stringify\n                         (clj->js\n                          {:query\n                           (pair-days-query-string-sushi pair-addresses)}))}))]\n        (into (:body data)\n              {:exchange \"sushiswap\"}))))\n\n\n(defn <pair-days-uni\n  [pair-addresses]\n  (go (let [data\n            (<! (http/post\n                 uni-subgraph-url\n                 {:with-credentials? false\n                  :body (js/JSON.stringify\n                         (clj->js\n                          {:query\n                           (pair-days-query-string pair-addresses)}))}))]\n        (into (:body data)\n              {:exchange \"uniswap\"}))))\n\n\n(defn normalize-volumes\n  \"Normalizes keys between sushiswan and uniswap\n  subgraph result keys\"\n  [dailys]\n  (map (fn [x]\n         (into x {:dailyVolumeToken0\n                  (if (:volumeToken0 x)\n                    (:volumeToken0 x)\n                    (:dailyVolumeToken0 x))\n                  :dailyVolumeToken1\n                  (if (:volumeToken1 x)\n                    (:volumeToken1 x)\n                    (:dailyVolumeToken1 x))\n                  :dailyVolumeUSD\n                  (if (:volumeUSD x)\n                    (:volumeUSD x)\n                    (:dailyVolumeUSD x))}))\n       dailys))\n\n\n\n(defn <pair-days\n  [pair-address limit & {:keys [retries] :or {retries 3}}]\n  (go (let [uni-data (<! (<pair-days-uni pair-address))\n            pair-data (if (> (count (:pairDayDatas (:data uni-data))) 0)\n                        uni-data\n                        (<! (<pair-days-sushi pair-address)))\n            pool-dailys (normalize-volumes\n                         (take limit\n                               (take-while\n                                #(> (u/bn (:totalSupply %)) 0.0)\n                                (:pairDayDatas (:data pair-data)))))\n            exchange (if (nil? (:volumeToken0 (first pool-dailys))) \"uniswap\" \"sushiswap\")]\n        (if (and (zero? (count pool-dailys)) (> retries 0))\n          (do (js/console.log \"Retrying grahp dailys for:\" pair-address)\n              (<! (<pair-days pair-address limit :retries (dec retries))))\n          (map (fn [pool]\n                 {:exchange exchange\n                  :address (first (string/split (:id pool) #\"-\"))\n                  :date (:date pool)\n                  :timestamp (u/ts->datetime (:date pool))\n                  :token0-decimals (u/str->int (:decimals (:token0 pool)))\n                  :token0-symbol (:symbol (:token0 pool))\n                  :token0-address (:id (:token0 pool))\n                  :token0-name (:name (:token0 pool))\n                  :token1-decimals (u/str->int (:decimals (:token1 pool)))\n                  :token1-symbol (:symbol (:token1 pool))\n                  :token1-address (:id (:token1 pool))\n                  :token1-name (:name (:token1 pool))\n                  :reserve0 (u/bn (:reserve0 pool))\n                  :reserve1 (u/bn (:reserve1 pool))\n                  :reserve-usd (u/bn (:reserveUSD pool))\n                  :volume0 (u/bn (:dailyVolumeToken0 pool))\n                  ;;:og-volume0 (:dailyVolumeToken0 pool)\n                  :volume1 (u/bn (:dailyVolumeToken1 pool))\n                  :volume-usd (u/bn (:dailyVolumeUSD pool))\n                  :total-supply (u/bn (:totalSupply pool))})\n               pool-dailys)))))\n\n\n\n\n(defn <token-days-uni\n  [token-addresses]\n  (go (let [data\n            (<! (http/post\n                 uni-subgraph-url\n                 {:with-credentials? false\n                  :body (js/JSON.stringify\n                         (clj->js\n                          {:query\n                           (token-days-query-string token-addresses)}))}))]\n        (map\n         (fn [t]\n           {:address (:id (:token t))\n            :name (:name (:token t))\n            :symbol (:symbol (:token t))\n            :decimals (u/str->int (:decimals (:token t)))\n            :prices {:usd (u/bn (:priceUSD t))}\n            :date (:date t)})\n         (:tokenDayDatas (:data (:body data)))))))\n\n\n\n\n(defn <token-days-sushi\n  [token-addresses]\n  (go (let [data\n            (<! (http/post\n                 sushi-subgraph-url\n                 {:with-credentials? false\n                  :body (js/JSON.stringify\n                         (clj->js\n                          {:query\n                           (token-days-query-string token-addresses)}))}))]\n        (map\n         (fn [t]\n           {:address (:id (:token t))\n            :name (:name (:token t))\n            :symbol (:symbol (:token t))\n            :decimals (u/str->int (:decimals (:token t)))\n            :prices {:usd (u/bn (:priceUSD t))}\n            :date (:date t)})\n         (:tokenDayDatas (:data (:body data)))))))\n\n\n\n\n\n(defn <block-times\n  [block-numbers]\n  (go (let [data\n            (<! (http/post\n                 blocks-subgraph-url\n                 {:with-credentials? false\n                  :body (js/JSON.stringify\n                         (clj->js\n                          {:query\n                           (block-times-query-string block-numbers)}))}))]\n        (apply merge (map (fn [p] {(u/str->int (:number p))\n                                   (u/str->int (:timestamp p))})\n                          (:blocks (:data (:body data))))))))\n\n\n\n(defn <v3-user-mints\n  [user-addresses]\n  (go (let [data\n            (<! (http/post\n                 univ3-subgraph-url\n                 {:with-credentials? false\n                  :body (js/JSON.stringify\n                         (clj->js\n                          {:query\n                           (v3-mints-query-string user-addresses)}))}))]\n        (:body data))))\n\n\n(defn <v3-user-burns\n  [user-addresses]\n  (go (let [data\n            (<! (http/post\n                 univ3-subgraph-url\n                 {:with-credentials? false\n                  :body (js/JSON.stringify\n                         (clj->js\n                          {:query\n                           (v3-burns-query-string user-addresses)}))}))]\n        (:body data))))\n\n\n\n\n(defn <v3-pool-days\n  [pool-address token0-address token1-address\n   & {:keys [retries] :or {retries 3}}]\n  (go (let [pool-address (string/lower-case pool-address)\n            token0-address (string/lower-case token0-address)\n            token1-address (string/lower-case token1-address)\n            data\n            (<! (http/post\n                 univ3-subgraph-url\n                 {:with-credentials? false\n                  :body (js/JSON.stringify\n                         (clj->js\n                          {:query\n                           (v3-pool-days-query-string pool-address token0-address token1-address)}))}))\n            resp (:data (:body data))\n            token-prices (apply u/deep-merge\n                                (map (fn [x]\n                                       {(string/lower-case (:id (:token x)))\n                                        {(:date x) (:priceUSD x)}})\n                                     (:tokenDayDatas resp)))\n            pool-dailys (:poolDayDatas resp)]\n        (if (and (zero? (count pool-dailys)) (> retries 0))\n          (do (js/console.log \"Retrying grahp dailys for:\" pool-address)\n              (<! (<v3-pool-days pool-address token0-address token1-address :retries (dec retries))))\n          (map (fn [pool-day]\n                 (let [pool-address (string/lower-case (:id (:pool pool-day)))\n                       token0 (string/lower-case (:id (:token0 (:pool pool-day))))\n                       token1 (string/lower-case (:id (:token1 (:pool pool-day))))\n                       date (:date pool-day)\n                       price0-usd (u/bn (get-in token-prices [token0 date]))\n                       price1-usd (u/bn (get-in token-prices [token1 date]))]\n                   {:exchange \"uniswapv3\"\n                    :address (string/lower-case (:id (:pool pool-day)))\n                    :date date\n                    :timestamp (u/ts->datetime (:date pool-day))\n                    :token0-decimals (u/str->int (:decimals (:token0 (:pool pool-day))))\n                    :token0-symbol (:symbol (:token0 (:pool pool-day)))\n                    :token0-address token0\n                    :token0-name (:name (:token0 (:pool pool-day)))\n                    :token1-decimals (u/str->int (:decimals (:token1 (:pool pool-day))))\n                    :token1-symbol (:symbol (:token1 (:pool pool-day)))\n                    :token1-address token1\n                    :token1-name (:name (:token1 (:pool pool-day)))\n                    :reserves-usd (u/bn (:tvlUSD pool-day))\n                    :volume-usd (u/bn (:volumeUSD pool-day))\n                    :volume0 (u/bn (:volumeToken0 pool-day))\n                    :volume1 (u/bn (:volumeToken1 pool-day))\n                    :liquidity (u/bn (:liquidity pool-day))\n                    :token0-price (u/bn (:token0Price pool-day))\n                    :token1-price (u/bn (:token1Price pool-day))\n                    :token0-price-usd price0-usd\n                    :token1-price-usd price1-usd\n                    :sqrt-price (:sqrtPrice pool-day)\n                    :tick (u/str->int (:tick pool-day))}))\n                 pool-dailys)))))\n\n\n\n(defn <v3-pool-tokens\n  [pool-address]\n  (go (let [data\n            (<! (http/post\n                 univ3-subgraph-url\n                 {:with-credentials? false\n                  :body (js/JSON.stringify\n                         (clj->js\n                          {:query\n                           (v3-pool-tokens-query-string pool-address)}))}))]\n        ((juxt (comp :id :token0) (comp :id :token1))\n         (:pool (first (:poolDayDatas (:data (:body data)))))))))\n\n"]}