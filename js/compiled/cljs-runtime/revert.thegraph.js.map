{"version":3,"sources":["revert/thegraph.cljs"],"mappings":"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","names":["revert.thegraph/uni-subgraph-url","revert.thegraph/sushi-subgraph-url","revert.thegraph/blocks-subgraph-url","revert.thegraph/snapshot-query-string","user-address","clojure.string/lower-case","revert.thegraph/some-pair","revert.thegraph/block-times-query-string","block-numbers","clojure.string.join","revert.thegraph/positions-query-string","user","pairs","cljs.core.apply","cljs.core/str","p1__77189#","cljs.core.map","revert.thegraph/pairs-query-string","p1__77191#","revert.thegraph/mints-query-string","address","revert.thegraph/pair-days-query-string","pair-address","revert.thegraph/pair-days-query-string-sushi","revert.thegraph/token-days-query-string","token-addresses","p1__77194#","revert.thegraph/<user-lps-uni","pair-addresses","c__52208__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__52209__auto__","switch__52185__auto__","state_77224","state_val_77225","inst_77201","inst_77202","inst_77203","inst_77204","inst_77205","cljs.core/PersistentHashMap","inst_77206","inst_77207","inst_77208","inst_77209","inst_77210","cljs.core.async.impl.ioc-helpers/take!","inst_77212","inst_77213","inst_77214","inst_77215","inst_77216","cljs.core/PersistentVector","inst_77217","inst_77218","inst_77219","p1__77196#","inst_77221","inst_77222","cljs.core.async.impl.ioc-helpers/return-chan","statearr-77242","state-machine__52186__auto__","ret-value__52187__auto__","result__52188__auto__","cljs.core/keyword-identical?","ex__52189__auto__","e77244","statearr-77245","cljs.core/seq","statearr-77246","cljs.core/first","state__52210__auto__","statearr-77247","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","data","cljs_http.client.post","js/JSON.stringify","cljs.core/clj->js","positions","keys-numerical-vals","num-parse-fn","revert.utils/pu","p","pair","r0","r1","ts","resusd","reseth","volusd","ltb","pair'","cljs.core.assoc","p'","revert.thegraph/<user-lps-sushi","state_77271","state_val_77272","inst_77249","inst_77250","inst_77251","inst_77252","inst_77253","inst_77254","inst_77255","inst_77256","inst_77257","inst_77258","inst_77260","inst_77261","inst_77262","inst_77263","inst_77264","inst_77265","inst_77266","inst_77267","p1__77248#","inst_77268","inst_77269","statearr-77276","e77277","statearr-77278","statearr-77279","statearr-77280","revert.thegraph/<user-lps","state_77292","state_val_77293","inst_77284","inst_77286","inst_77287","statearr-77294","inst_77289","inst_77290","statearr-77295","e77296","statearr-77297","statearr-77298","statearr-77299","cljs.core.concat","revert.thegraph/<user-lp-snapshots-uni","state_77320","state_val_77321","inst_77301","inst_77302","inst_77303","inst_77304","inst_77305","inst_77306","inst_77307","inst_77308","inst_77309","inst_77310","inst_77312","inst_77313","inst_77314","inst_77315","inst_77316","p1__77300#","inst_77317","inst_77318","statearr-77322","e77323","statearr-77324","statearr-77325","statearr-77326","lts","rusd","t0pusd","t1pusd","revert.thegraph/<user-lp-snapshots-sushi","state_77347","state_val_77348","inst_77328","inst_77329","inst_77330","inst_77331","inst_77332","inst_77333","inst_77334","inst_77335","inst_77336","inst_77337","inst_77339","inst_77340","inst_77341","inst_77342","inst_77343","p1__77327#","inst_77344","inst_77345","statearr-77349","e77350","statearr-77351","statearr-77352","statearr-77353","revert.thegraph/<user-lp-snapshots","state_77362","state_val_77363","inst_77354","inst_77356","inst_77357","statearr-77364","inst_77359","inst_77360","statearr-77365","e77366","statearr-77367","statearr-77368","statearr-77369","revert.thegraph/<pairs-info","state_77384","state_val_77385","inst_77370","inst_77371","inst_77372","inst_77373","inst_77374","inst_77375","inst_77376","inst_77377","inst_77378","inst_77379","inst_77381","inst_77382","statearr-77386","e77387","statearr-77388","statearr-77389","statearr-77390","revert.thegraph/<user-mints","user-addresses","state_77405","state_val_77406","inst_77391","inst_77392","inst_77393","inst_77394","inst_77395","inst_77396","inst_77397","inst_77398","inst_77399","inst_77400","inst_77402","inst_77403","statearr-77407","e77408","statearr-77409","statearr-77410","statearr-77411","revert.thegraph/<pair-days-sushi","state_77430","state_val_77431","inst_77412","inst_77413","inst_77414","inst_77415","inst_77416","inst_77417","inst_77418","inst_77419","inst_77420","inst_77421","inst_77423","inst_77424","inst_77425","inst_77426","inst_77427","inst_77428","statearr-77432","e77433","statearr-77434","statearr-77435","statearr-77436","cljs.core.into","revert.thegraph/<pair-days-uni","state_77455","state_val_77456","inst_77437","inst_77438","inst_77439","inst_77440","inst_77441","inst_77442","inst_77443","inst_77444","inst_77445","inst_77446","inst_77448","inst_77449","inst_77450","inst_77451","inst_77452","inst_77453","statearr-77457","e77458","statearr-77459","statearr-77460","statearr-77461","revert.thegraph/normalize-volumes","dailys","x","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","revert.thegraph/<pair-days","p__77466","map__77467","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get","seq77463","G__77464","cljs.core/next","G__77465","self__4723__auto__","limit","retries","state_77512","state_val_77513","statearr-77514","inst_77469","inst_77478","inst_77505","statearr-77515","inst_77480","statearr-77516","inst_77471","statearr-77517","inst_77510","inst_77472","inst_77473","inst_77474","inst_77475","statearr-77518","statearr-77519","statearr-77520","inst_77482","inst_77488","inst_77495","inst_77507","inst_77508","statearr-77521","inst_77496","inst_77497","inst_77498","inst_77499","statearr-77522","statearr-77523","statearr-77524","inst_77483","p1__77462#","inst_77484","inst_77485","inst_77486","inst_77487","inst_77489","inst_77490","inst_77491","statearr-77525","statearr-77526","statearr-77527","inst_77501","inst_77502","inst_77503","statearr-77528","statearr-77529","statearr-77530","e77531","statearr-77532","statearr-77533","statearr-77534","uni-data","pair-data","cljs.core/count","pool-dailys","cljs.core.take","cljs.core.take_while","revert.utils/bn","exchange","js/console.log","revert.thegraph._LT_pair_days","pool","clojure.string.split","revert.utils/ts->datetime","revert.utils/str->int","revert.thegraph/<token-days-uni","state_77553","state_val_77554","inst_77535","inst_77536","inst_77537","inst_77538","inst_77539","inst_77540","inst_77541","inst_77542","inst_77543","inst_77544","inst_77546","inst_77547","inst_77548","inst_77549","inst_77550","inst_77551","statearr-77555","e77556","statearr-77557","statearr-77558","statearr-77559","t","revert.thegraph/<token-days-sushi","state_77578","state_val_77579","inst_77560","inst_77561","inst_77562","inst_77563","inst_77564","inst_77565","inst_77566","inst_77567","inst_77568","inst_77569","inst_77571","inst_77572","inst_77573","inst_77574","inst_77575","inst_77576","statearr-77580","e77581","statearr-77582","statearr-77583","statearr-77584","revert.thegraph/<block-times","state_77604","state_val_77605","inst_77585","inst_77586","inst_77587","inst_77588","inst_77589","inst_77590","inst_77591","inst_77592","inst_77593","inst_77594","inst_77596","inst_77597","inst_77598","inst_77599","inst_77600","inst_77601","inst_77602","statearr-77606","e77607","statearr-77608","statearr-77609","statearr-77610","cljs.core/merge"],"sourcesContent":["(ns revert.thegraph\n  (:require [cljs.core.async :refer [go]]\n            [cljs.core.async.interop :refer-macros [<p!]]\n            [clojure.string :as string]\n            [cljs-http.client :as http]\n            [bignumber.core]\n            [bignumber.js :as BigNumber]\n            [revert.utils :as u]))\n\n\n(def uni-subgraph-url \"https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v2\")\n(def sushi-subgraph-url \"https://api.thegraph.com/subgraphs/name/sushiswap/exchange\")\n(def blocks-subgraph-url \"https://api.thegraph.com/subgraphs/name/blocklytics/ethereum-blocks\")\n;;(def uni-subgraph-url uni-subgraph-url')\n\n\n;; TODO need to paginate if more than 1,000\n;; if we do not specify :first, the default is 100\n(defn snapshot-query-string\n  [user-address]\n  (str \"{\n      liquidityPositionSnapshots(orderBy: timestamp,\n                                 orderDirection: desc,\n                                 where: {user: \\\"\" (clojure.string/lower-case user-address) \"\\\"}\n                                 first: 1000) {\n      block,\n      timestamp,\n      pair {\n          id,\n          reserve0,\n          reserve1,\n          totalSupply,\n\n          token0 {\n             id,\n            symbol,\n            name,\n            decimals\n\n          }\n          token1 {\n             id,\n            symbol,\n            name,\n            decimals\n\n          }\n     },\n    liquidityTokenBalance,\n    liquidityTokenTotalSupply,\n    token0PriceUSD,\n    token1PriceUSD,\n    reserve0,\n    reserve1,\n    reserveUSD\n    }\n   }\"))\n\n(def some-pair \"0x0d0d65e7a7db277d3e0f5e1676325e75f3340455\")\n\n(defn block-times-query-string\n  [block-numbers]\n  (str \"{blocks(where: {number_in: [\"\n       (clojure.string/join \",\" block-numbers)\n       \"]}, first:1000)\n           {number,\n           timestamp}\n        }\"))\n\n(defn positions-query-string\n  [user pairs]\n  (str \"{\n      liquidityPositions( where: {id_in: [\"\n       (apply str\n              (map #(str \"\\\"\"\n                         (clojure.string/lower-case %)\n                         \"-\"\n                         (clojure.string/lower-case user)\n                         \"\\\",\"\n                         )\n                   pairs))\n\n\n\n       \"]}\n                                 first: 1000) {\n      id,\n      user,\n      liquidityTokenBalance,\n      pair {\n          id,\n          reserve0,\n          reserve1,\n          totalSupply,\n          reserveUSD,\n          reserveETH,\n          volumeUSD,\n          token0 {\n            id,\n            symbol,\n            name,\n            decimals,\n          }\n          token1 {\n            id,\n            symbol,\n            name,\n            decimals\n\n          }\n     }\n\n    }\n   }\"))\n\n(defn pairs-query-string\n  [pairs]\n  (str \"{\n      pairs( where: {id_in: [\"\n       (apply str\n              (map #(str \"\\\"\" (clojure.string/lower-case %) \"\\\",\" )\n                   pairs))\n\n\n       \"]}\n                                 first: 1000) {\n          id,\n          reserve0,\n          reserve1,\n          totalSupply,\n\n          token0 {\n             id,\n            symbol,\n            name,\n            decimals\n\n          }\n          token1 {\n             id,\n            symbol,\n            name,\n            decimals\n()\n          }\n     }\n\n    }\n   \"))\n\n\n(defn mints-query-string\n  [address]\n  (str \"{\n      mints(where: {to: \\\"\" address \"\\\"}) {\n          id,\n          to,\n          timestamp,\n          liquidity,\n          amount0,\n          amount1,\n          pair {\n          id,\n          token0 {\n             id,\n            symbol,\n            name,\n            decimals\n\n          }\n          token1 {\n             id,\n            symbol,\n            name,\n            decimals\n\n          }\n     },\n          transaction {\n             id,\n             blockNumber,\n             timestamp\n          }\n\n       }\n     }\n   \"))\n\n;; TODO lower string all addresses that go to the graph\n(defn pair-days-query-string\n  [pair-address]\n  (str \"{\n      pairDayDatas(orderBy: date,\n                   orderDirection: desc,\n                   where: {pairAddress: \\\"\" pair-address \"\\\"}\n                   first: 1000) {\n         id\n         date,\n         pairAddress,\n         token0 {\n             id,\n            symbol,\n            name,\n            decimals\n\n         },\n         token1 {\n             id,\n            symbol,\n            name,\n            decimals\n\n         },\n         reserve0,\n         reserve1,\n         totalSupply,\n         reserveUSD,\n         dailyVolumeToken0,\n         dailyVolumeToken1,\n         dailyVolumeUSD,\n         dailyTxns\n       }\n     }\n   \"))\n\n\n(defn pair-days-query-string-sushi\n  [pair-address]\n  (str \"{\n      pairDayDatas(orderBy: date,\n                   orderDirection: desc,\n                   where: {pair: \\\"\" pair-address \"\\\"}\n                   first: 1000) {\n         id\n         date,\n         pair,\n         token0 {\n             id,\n            symbol,\n            name,\n            decimals\n\n         },\n         token1 {\n             id,\n            symbol,\n            name,\n            decimals\n\n         },\n         reserve0,\n         reserve1,\n         totalSupply,\n         reserveUSD,\n         volumeToken0,\n         volumeToken1,\n         volumeUSD,\n         txCount\n       }\n     }\n   \"))\n\n\n;; TODO lower string all addresses that go to the graph\n(defn token-days-query-string\n  [token-addresses]\n  (str \"{\n      tokenDayDatas(orderBy: date,\n                   orderDirection: desc,\n                   first: 1000,\n                   where: {token_in:[\" (apply str (map #(str \"\\\"\" (string/lower-case %) \"\\\",\")\n                                                       token-addresses)) \"]}) {\n         id\n         date,\n         token {id, name, symbol, decimals, derivedETH},\n         priceUSD\n       }\n     }\n   \"))\n\n\n\n(defn <user-lps-uni\n  [user-address pair-addresses]\n  (go (let [data\n            (<! (http/post\n                 uni-subgraph-url\n                 {:with-credentials? false\n                  :body (js/JSON.stringify\n                         (clj->js\n                          {:query\n                           (positions-query-string user-address pair-addresses)}))}))\n            positions (:liquidityPositions (:data (:body data)))\n            keys-numerical-vals [:liquidityTokenBalance]\n            num-parse-fn #(u/pu % 0)\n            positions' (map (fn [p] (let [pair (:pair p)\n\n                                          r0 (num-parse-fn (:reserve0 pair))\n                                          r1 (num-parse-fn (:reserve1 pair))\n                                          ts (num-parse-fn (:totalSupply pair))\n\n                                          resusd (num-parse-fn (:reserveUSD pair))\n                                          reseth (num-parse-fn (:reserveETH pair))\n                                          volusd (num-parse-fn (:volumeUSD pair))\n                                          ltb (num-parse-fn (:liquidityTokenBalance p))\n                                          pair' (assoc\n                                                 pair\n                                                 :reserve0 r0\n                                                 :reserve1 r1\n                                                 :totalSupply ts\n                                                 :reserveUSD resusd\n                                                 :volumeUSD volusd)\n                                          p' (assoc p\n                                                    :pair pair'\n                                                    :exchange \"uniswap\"\n                                                    :liquidityTokenBalance ltb)]\n                                      p'))\n                            positions)]\n        positions')))\n\n(defn <user-lps-sushi\n  [user-address pair-addresses]\n  (go (let [data\n            (<! (http/post\n                 sushi-subgraph-url\n                 {:with-credentials? false\n                  :body (js/JSON.stringify\n                         (clj->js\n                          {:query\n                           (positions-query-string user-address pair-addresses)}))}))\n            positions (:liquidityPositions (:data (:body data)))\n            keys-numerical-vals [:liquidityTokenBalance]\n            num-parse-fn #(u/pu % 0)\n            positions' (map (fn [p] (let [pair (:pair p)\n\n                                          r0 (num-parse-fn (:reserve0 pair))\n                                          r1 (num-parse-fn (:reserve1 pair))\n                                          ts (num-parse-fn (:totalSupply pair))\n                                          resusd (num-parse-fn (:reserveUSD pair))\n                                          reseth (num-parse-fn (:reserveETH pair))\n                                          volusd (num-parse-fn (:volumeUSD pair))\n                                          ltb (num-parse-fn (:liquidityTokenBalance p))\n                                          pair' (assoc\n                                                 pair\n                                                 :reserve0 r0\n                                                 :reserve1 r1\n                                                 :totalSupply ts\n                                                 :reserveUSD resusd\n                                                 :volumeUSD volusd)\n                                          p' (assoc p\n                                                    :pair pair'\n                                                    :exchange \"sushiswap\"\n                                                    :liquidityTokenBalance ltb)]\n                                      p'))\n                            positions)]\n        positions')))\n\n(defn <user-lps\n  [user-address pair-addresses]\n  (go (let [cuni (<! (<user-lps-uni user-address pair-addresses))\n            csushi (<! (<user-lps-sushi user-address pair-addresses))]\n        (concat cuni csushi))))\n\n\n\n#_(go (def my-lps (<! (<user-lps my-address \"0xb4e16d0168e52d35cacd2c6185b44281ec28c9dc\"))))\n\n\n(defn <user-lp-snapshots-uni\n  [user-address]\n  (go (let [data\n            (<! (http/post\n                 uni-subgraph-url\n                 {:with-credentials? false\n                  :body (js/JSON.stringify\n                         (clj->js\n                          {:query\n                           (snapshot-query-string user-address)}))}))\n            positions (:liquidityPositionSnapshots (:data (:body data)))\n            num-parse-fn #(u/pu % 0)\n            positions' (map (fn [p] (let [pair (:pair p)\n                                          r0 (num-parse-fn (:reserve0 p))\n                                          r1 (num-parse-fn (:reserve1 p))\n                                          lts (num-parse-fn (:liquidityTokenTotalSupply p))\n                                          ltb (num-parse-fn (:liquidityTokenBalance p))\n                                          rusd (num-parse-fn (:reserveUSD p))\n                                          t0pusd (num-parse-fn (:token0PriceUSD p))\n                                          t1pusd (num-parse-fn (:token1PriceUSD p))\n                                          p' (assoc p\n                                                    :exchange \"uniswap\"\n                                                    :reserve0 r0\n                                                    :reserve1 r1\n                                                    :liquidityTokenBalance ltb\n                                                    :liquidityTokenTotalSupply lts\n                                                    :reserveUSD rusd\n                                                    :token0PriceUSD t0pusd\n                                                    :token1PriceUSD t1pusd)]\n                                      p'))\n                            positions)]\n        positions')))\n\n\n(defn <user-lp-snapshots-sushi\n  [user-address]\n  (go (let [data\n            (<! (http/post\n                 sushi-subgraph-url\n                 {:with-credentials? false\n                  :body (js/JSON.stringify\n                         (clj->js\n                          {:query\n                           (snapshot-query-string user-address)}))}))\n            positions (:liquidityPositionSnapshots (:data (:body data)))\n            num-parse-fn #(u/pu % 0)\n            positions' (map (fn [p] (let [pair (:pair p)\n                                          r0 (num-parse-fn (:reserve0 p))\n                                          r1 (num-parse-fn (:reserve1 p))\n                                          lts (num-parse-fn (:liquidityTokenTotalSupply p))\n                                          ltb (num-parse-fn (:liquidityTokenBalance p))\n                                          rusd (num-parse-fn (:reserveUSD p))\n                                          t0pusd (num-parse-fn (:token0PriceUSD p))\n                                          t1pusd (num-parse-fn (:token1PriceUSD p))\n                                          p' (assoc p\n                                                    :exchange \"sushiswap\"\n                                                    :reserve0 r0\n                                                    :reserve1 r1\n                                                    :liquidityTokenBalance ltb\n                                                    :liquidityTokenTotalSupply lts\n                                                    :reserveUSD rusd\n                                                    :token0PriceUSD t0pusd\n                                                    :token1PriceUSD t1pusd)]\n                                      p'))\n                            positions)]\n        positions')))\n\n\n\n(defn <user-lp-snapshots\n  [user-address]\n  (go (let [cuni (<! (<user-lp-snapshots-uni user-address))\n            csushi (<! (<user-lp-snapshots-sushi user-address))]\n        (concat cuni csushi))))\n\n\n\n\n(defn <pairs-info\n  [pair-addresses]\n  (go (let [data\n            (<! (http/post\n                 uni-subgraph-url\n                 {:with-credentials? false\n                  :body (js/JSON.stringify\n                         (clj->js\n                          {:query\n                           (pairs-query-string pair-addresses)}))}))]\n        (:body data))))\n\n\n\n(defn <user-mints\n  [user-addresses]\n  (go (let [data\n            (<! (http/post\n                 uni-subgraph-url\n                 {:with-credentials? false\n                  :body (js/JSON.stringify\n                         (clj->js\n                          {:query\n                           (mints-query-string user-addresses)}))}))]\n        (:body data))))\n\n\n\n#_(defn <pair-days\n  [pair-addresses]\n  (go (let [data\n            (<! (http/post\n                 uni-subgraph-url\n                 {:with-credentials? false\n                  :body (js/JSON.stringify\n                         (clj->js\n                          {:query\n                           (pair-days-query-string-sushi pair-addresses)}))}))]\n        (:body data))))\n\n\n(defn <pair-days-sushi\n  [pair-addresses]\n  (go (let [data\n            (<! (http/post\n                 sushi-subgraph-url\n                 {:with-credentials? false\n                  :body (js/JSON.stringify\n                         (clj->js\n                          {:query\n                           (pair-days-query-string-sushi pair-addresses)}))}))]\n        (into (:body data)\n              {:exchange \"sushiswap\"}))))\n\n\n(defn <pair-days-uni\n  [pair-addresses]\n  (go (let [data\n            (<! (http/post\n                 uni-subgraph-url\n                 {:with-credentials? false\n                  :body (js/JSON.stringify\n                         (clj->js\n                          {:query\n                           (pair-days-query-string pair-addresses)}))}))]\n        (into (:body data)\n              {:exchange \"uniswap\"}))))\n\n\n(defn normalize-volumes\n  \"Normalizes keys between sushiswan and uniswap\n  subgraph result keys\"\n  [dailys]\n  (map (fn [x]\n         (into x {:dailyVolumeToken0\n                  (if (:volumeToken0 x)\n                    (:volumeToken0 x)\n                    (:dailyVolumeToken0 x))\n                  :dailyVolumeToken1\n                  (if (:volumeToken1 x)\n                    (:volumeToken1 x)\n                    (:dailyVolumeToken1 x))\n                  :dailyVolumeUSD\n                  (if (:volumeUSD x)\n                    (:volumeUSD x)\n                    (:dailyVolumeUSD x))}))\n       dailys))\n\n\n\n(defn <pair-days\n  [pair-address limit & {:keys [retries] :or {retries 3}}]\n  (go (let [uni-data (<! (<pair-days-uni pair-address))\n            pair-data (if (> (count (:pairDayDatas (:data uni-data))) 0)\n                        uni-data\n                        (<! (<pair-days-sushi pair-address)))\n            pool-dailys (normalize-volumes\n                         (take limit\n                               (take-while\n                                #(> (u/bn (:totalSupply %)) 0.0)\n                                (:pairDayDatas (:data pair-data)))))\n            exchange (if (nil? (:volumeToken0 (first pool-dailys))) \"uniswap\" \"sushiswap\")]\n        (if (and (zero? (count pool-dailys)) (> retries 0))\n          (do (js/console.log \"Retrying grahp dailys for:\" pair-address)\n              (<! (<pair-days pair-address limit :retries (dec retries))))\n          (map (fn [pool]\n                 {:exchange exchange\n                  :address (first (string/split (:id pool) #\"-\"))\n                  :date (:date pool)\n                  :timestamp (u/ts->datetime (:date pool))\n                  :token0-decimals (u/str->int (:decimals (:token0 pool)))\n                  :token0-symbol (:symbol (:token0 pool))\n                  :token0-address (:id (:token0 pool))\n                  :token0-name (:name (:token0 pool))\n                  :token1-decimals (u/str->int (:decimals (:token1 pool)))\n                  :token1-symbol (:symbol (:token1 pool))\n                  :token1-address (:id (:token1 pool))\n                  :token1-name (:name (:token1 pool))\n                  :reserve0 (u/bn (:reserve0 pool))\n                  :reserve1 (u/bn (:reserve1 pool))\n                  :reserve-usd (u/bn (:reserveUSD pool))\n                  :volume0 (u/bn (:dailyVolumeToken0 pool))\n                  ;;:og-volume0 (:dailyVolumeToken0 pool)\n                  :volume1 (u/bn (:dailyVolumeToken1 pool))\n                  :volume-usd (u/bn (:dailyVolumeUSD pool))\n                :total-supply (u/bn (:totalSupply pool))})\n               pool-dailys)))))\n\n\n\n\n(defn <token-days-uni\n  [token-addresses]\n  (go (let [data\n            (<! (http/post\n                 uni-subgraph-url\n                 {:with-credentials? false\n                  :body (js/JSON.stringify\n                         (clj->js\n                          {:query\n                           (token-days-query-string token-addresses)}))}))]\n        (map\n         (fn [t]\n           {:address (:id (:token t))\n            :name (:name (:token t))\n            :symbol (:symbol (:token t))\n            :decimals (u/str->int (:decimals (:token t)))\n            :prices {:usd (u/bn (:priceUSD t))}\n            :date (:date t)})\n         (:tokenDayDatas (:data (:body data)))))))\n\n\n\n\n(defn <token-days-sushi\n  [token-addresses]\n  (go (let [data\n            (<! (http/post\n                 sushi-subgraph-url\n                 {:with-credentials? false\n                  :body (js/JSON.stringify\n                         (clj->js\n                          {:query\n                           (token-days-query-string token-addresses)}))}))]\n        (map\n         (fn [t]\n           {:address (:id (:token t))\n            :name (:name (:token t))\n            :symbol (:symbol (:token t))\n            :decimals (u/str->int (:decimals (:token t)))\n            :prices {:usd (u/bn (:priceUSD t))}\n            :date (:date t)})\n         (:tokenDayDatas (:data (:body data)))))))\n\n\n\n\n\n(defn <block-times\n  [block-numbers]\n  (go (let [data\n            (<! (http/post\n                 blocks-subgraph-url\n                 {:with-credentials? false\n                  :body (js/JSON.stringify\n                         (clj->js\n                          {:query\n                           (block-times-query-string block-numbers)}))}))]\n        (apply merge (map (fn [p] {(u/str->int (:number p))\n                                   (u/str->int (:timestamp p))})\n                          (:blocks (:data (:body data))))))))\n\n\n\n"]}