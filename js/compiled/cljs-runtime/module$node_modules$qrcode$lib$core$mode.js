shadow$provide.module$node_modules$qrcode$lib$core$mode=function(global,require,module,exports){function fromString(string){if("string"!==typeof string)throw Error("Param is not a string");switch(string.toLowerCase()){case "numeric":return exports.NUMERIC;case "alphanumeric":return exports.ALPHANUMERIC;case "kanji":return exports.KANJI;case "byte":return exports.BYTE;default:throw Error("Unknown mode: "+string);}}var VersionCheck=require("module$node_modules$qrcode$lib$core$version_check"),Regex=
require("module$node_modules$qrcode$lib$core$regex");exports.NUMERIC={id:"Numeric",bit:1,ccBits:[10,12,14]};exports.ALPHANUMERIC={id:"Alphanumeric",bit:2,ccBits:[9,11,13]};exports.BYTE={id:"Byte",bit:4,ccBits:[8,16,16]};exports.KANJI={id:"Kanji",bit:8,ccBits:[8,10,12]};exports.MIXED={bit:-1};exports.getCharCountIndicator=function(mode,version){if(!mode.ccBits)throw Error("Invalid mode: "+mode);if(!VersionCheck.isValid(version))throw Error("Invalid version: "+version);return 1<=version&&10>version?
mode.ccBits[0]:27>version?mode.ccBits[1]:mode.ccBits[2]};exports.getBestModeForData=function(dataStr){return Regex.testNumeric(dataStr)?exports.NUMERIC:Regex.testAlphanumeric(dataStr)?exports.ALPHANUMERIC:Regex.testKanji(dataStr)?exports.KANJI:exports.BYTE};exports.toString=function(mode){if(mode&&mode.id)return mode.id;throw Error("Invalid mode");};exports.isValid=function(mode){return mode&&mode.bit&&mode.ccBits};exports.from=function(value,defaultValue){if(exports.isValid(value))return value;try{return fromString(value)}catch(e){return defaultValue}}}
//# sourceMappingURL=module$node_modules$qrcode$lib$core$mode.js.map
