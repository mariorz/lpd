{"version":3,"sources":["re_frisk/subs_graph.cljs"],"mappings":"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","names":["js/re-frisk","js/re-frisk.subs-graph","js/re-frisk.subs-graph.network","re-frisk.subs-graph/network","cljs.core.atom","js/re-frisk.subs-graph.vis","re-frisk.subs-graph/vis","js/re-frisk.subs-graph.doc","re-frisk.subs-graph/doc","js/re-frisk.subs-graph.nodes","re-frisk.subs-graph/nodes","js/re-frisk.subs-graph.edges","re-frisk.subs-graph/edges","js/re-frisk.subs-graph.options","re-frisk.subs-graph/options","cljs.core/clj->js","re-frisk.subs-graph/init","win","document","cljs.core/reset!","re-frisk.subs-graph/set-root-node","reaction","cljs.core/deref","cljs.core.get","data","cljs.core.swap_BANG_","cljs.core/assoc","re-frisk.subs-graph/destroy","temp__5753__auto__","network-js","re-frisk.subs-graph/create","and__4115__auto__","Network","DataSet","nodes-ds","cljs.core/vals","edges-ds","container","re-frisk.subs-graph/update-subs","traces","app-db-reaction","cljs.core/first","new-nodes","seq__56861","cljs.core/seq","chunk__56862","count__56863","i__56864","map__57092","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","map__57177","cljs.core/next","subs","seq__57094","chunk__57095","count__57096","i__57097","map__57132","map__57156","seq__57179","chunk__57180","count__57181","i__57182","map__57238","map__57264","op-type","input-signals","operation","temp__5751__auto__","old-reaction","cljs.core.not_EQ_","updated-node","cljs.core.assoc","re-frisk.ui.components.colors/sub-colors","cljs.core/conj","seq__57140","chunk__57141","count__57142","i__57143","seq__57163","chunk__57164","count__57165","i__57166","seq__57240","chunk__57241","count__57242","i__57243","seq__57266","chunk__57267","count__57268","i__57269","input-reaction","reaction-path","old-edge","updated-edge","cljs.core.update","cljs.core/inc","seq__57283","chunk__57284","count__57285","i__57286","js/re-frisk.subs-graph.event-network","re-frisk.subs-graph/event-network","p__57291","map__57292","re-frisk.subs-graph/create-event-subs","nodes","edges","seq__57294","chunk__57295","count__57296","i__57297","map__57319","map__57336","seq__57321","chunk__57322","count__57323","i__57324","seq__57344","chunk__57345","count__57346","i__57347"],"sourcesContent":["(ns re-frisk.subs-graph\n  (:require [re-frisk.ui.components.colors :as colors]))\n\n(defonce network (atom nil))\n(defonce vis (atom nil))\n(defonce doc (atom nil))\n(defonce nodes (atom {}))\n(defonce edges (atom {}))\n(defonce options (clj->js {:physics\n                           {:solver        \"forceAtlas2Based\"\n                            :maxVelocity   30\n                            :minVelocity   10\n                            :stabilization {:iterations 30}}}))\n\n(defn init [win document]\n  (reset! vis (.-vis ^js win))\n  (reset! doc document))\n\n(defn set-root-node [reaction]\n  (when-not (get @nodes reaction)\n    (let [data {:id reaction :label \"app-db\" :color {:background :yellow}}]\n      (swap! nodes assoc reaction data)\n      (when @network\n        (.add (.-nodes ^js (:data @network)) (clj->js data))))))\n\n(defn destroy []\n  (when-let [network-js (:network @network)]\n    (.destroy network-js)\n    (reset! network nil)))\n\n(defn create []\n  (destroy)\n  (when (and @vis @doc)\n    (let [Network  (.-Network ^js @vis)\n          DataSet  (.-DataSet ^js @vis)\n          nodes-ds (DataSet. (clj->js (vals @nodes)))\n          edges-ds (DataSet. (clj->js (vals @edges)))\n          data     #js {:nodes nodes-ds\n                        :edges edges-ds}]\n      (when-let [container (.getElementById @doc \"global-subs-graph-container\")]\n        (reset! network {:data    data\n                         :network (Network. container data options)})))))\n\n(defn update-subs [traces]\n  (when-let [app-db-reaction (:app-db-reaction (first traces))]\n    (set-root-node app-db-reaction))\n  (let [new-nodes (atom [])]\n    (doseq [{:keys [subs]} traces]\n      (doseq [{:keys [op-type reaction input-signals operation]} subs]\n        (if-let [old-reaction (get @nodes reaction)]\n          (when (not= op-type (:op-type old-reaction))\n            (let [updated-node (assoc old-reaction\n                                 :op-type op-type\n                                 :color {:background (get colors/sub-colors op-type)})]\n              (swap! nodes assoc reaction updated-node)\n              (when @network\n                (.update (.-nodes ^js (:data @network)) (clj->js [updated-node])))))\n          (let [data {:id      reaction :label operation :color {:background (get colors/sub-colors op-type)}\n                      :font {:color :white}\n                      :op-type op-type}]\n            (swap! nodes assoc reaction data)\n            (swap! new-nodes conj data)))\n        (when input-signals\n          (doseq [input-reaction input-signals]\n            (let [reaction-path (str input-reaction \"-\" reaction)]\n              (if-let [old-edge (get @edges reaction-path)]\n                (let [updated-edge (update old-edge :value inc)]\n                  (swap! edges assoc reaction-path updated-edge)\n                  (when @network\n                    (.update (.-edges ^js (:data @network)) (clj->js [updated-edge]))))\n                (let [data {:id reaction-path :from input-reaction :to reaction :value 1}]\n                  (swap! edges assoc reaction-path data)\n                  (when @network\n                    (.add (.-edges ^js (:data @network)) (clj->js data))))))))))\n    (when @network\n      (if (> (count @new-nodes) 20)\n        (create)\n        (doseq [data @new-nodes]\n          (.add (.-nodes ^js (:data @network)) (clj->js data)))))))\n\n(defonce event-network (atom nil))\n\n(defn create-event-subs [{:keys [app-db-reaction subs]}]\n  (when @event-network\n    (.destroy @event-network)\n    (reset! event-network nil))\n  (when (and @vis @doc)\n    (when-let [container (.getElementById @doc \"event-subs-graph-container\")]\n      (let [Network  (.-Network ^js @vis)\n            DataSet  (.-DataSet ^js @vis)\n            nodes (atom {app-db-reaction {:id app-db-reaction :label \"app-db\" :color {:background :yellow}}})\n            edges (atom {})]\n        (doseq [{:keys [op-type reaction input-signals operation]} subs]\n          (if-let [old-reaction (get @nodes reaction)]\n            (when (not= op-type (:op-type old-reaction))\n              (let [updated-node (assoc old-reaction\n                                   :op-type op-type\n                                   :color {:background (get colors/sub-colors op-type)})]\n                (swap! nodes assoc reaction updated-node)))\n            (let [data {:id      reaction :label operation :color {:background (get colors/sub-colors op-type)}\n                        :font {:color :white}\n                        :op-type op-type}]\n              (swap! nodes assoc reaction data)))\n          (when input-signals\n            (doseq [input-reaction input-signals]\n              (when-not (get @edges (str input-reaction \"-\" reaction))\n                (swap! edges assoc (str input-reaction \"-\" reaction) {:from input-reaction :to reaction})))))\n        (reset! event-network (Network. container #js {:nodes (DataSet. (clj->js (vals @nodes)))\n                                                       :edges (DataSet. (clj->js (vals @edges)))} options))))))\n"]}