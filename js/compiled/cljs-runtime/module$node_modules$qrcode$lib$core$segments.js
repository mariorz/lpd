shadow$provide.module$node_modules$qrcode$lib$core$segments=function(global,require,module,exports){function getSegments(regex,mode,str){for(var segments=[],result;null!==(result=regex.exec(str));)segments.push({data:result[0],index:result.index,mode,length:result[0].length});return segments}function getSegmentsFromString(dataStr){var numSegs=getSegments(Regex.NUMERIC,Mode.NUMERIC,dataStr),alphaNumSegs=getSegments(Regex.ALPHANUMERIC,Mode.ALPHANUMERIC,dataStr);if(Utils.isKanjiModeEnabled()){var byteSegs=
getSegments(Regex.BYTE,Mode.BYTE,dataStr);dataStr=getSegments(Regex.KANJI,Mode.KANJI,dataStr)}else byteSegs=getSegments(Regex.BYTE_KANJI,Mode.BYTE,dataStr),dataStr=[];return numSegs.concat(alphaNumSegs,byteSegs,dataStr).sort(function(s1,s2){return s1.index-s2.index}).map(function(obj){return{data:obj.data,mode:obj.mode,length:obj.length}})}function getSegmentBitsLength(length,mode){switch(mode){case Mode.NUMERIC:return NumericData.getBitsLength(length);case Mode.ALPHANUMERIC:return AlphanumericData.getBitsLength(length);
case Mode.KANJI:return KanjiData.getBitsLength(length);case Mode.BYTE:return ByteData.getBitsLength(length)}}function mergeSegments(segs){return segs.reduce(function(acc,curr){var prevSeg=0<=acc.length-1?acc[acc.length-1]:null;if(prevSeg&&prevSeg.mode===curr.mode)return acc[acc.length-1].data+=curr.data,acc;acc.push(curr);return acc},[])}function buildSingleSegment(data,modesHint){var bestMode=Mode.getBestModeForData(data);modesHint=Mode.from(modesHint,bestMode);if(modesHint!==Mode.BYTE&&modesHint.bit<
bestMode.bit)throw Error('"'+data+'" cannot be encoded with mode '+Mode.toString(modesHint)+".\n Suggested mode is: "+Mode.toString(bestMode));modesHint!==Mode.KANJI||Utils.isKanjiModeEnabled()||(modesHint=Mode.BYTE);switch(modesHint){case Mode.NUMERIC:return new NumericData(data);case Mode.ALPHANUMERIC:return new AlphanumericData(data);case Mode.KANJI:return new KanjiData(data);case Mode.BYTE:return new ByteData(data)}}var Mode=require("module$node_modules$qrcode$lib$core$mode"),NumericData=require("module$node_modules$qrcode$lib$core$numeric_data"),
AlphanumericData=require("module$node_modules$qrcode$lib$core$alphanumeric_data"),ByteData=require("module$node_modules$qrcode$lib$core$byte_data"),KanjiData=require("module$node_modules$qrcode$lib$core$kanji_data"),Regex=require("module$node_modules$qrcode$lib$core$regex"),Utils=require("module$node_modules$qrcode$lib$core$utils"),dijkstra=require("module$node_modules$dijkstrajs$dijkstra");exports.fromArray=function(array){return array.reduce(function(acc,seg){"string"===typeof seg?acc.push(buildSingleSegment(seg,
null)):seg.data&&acc.push(buildSingleSegment(seg.data,seg.mode));return acc},[])};exports.fromString=function(data,version){var segs=getSegmentsFromString(data,Utils.isKanjiModeEnabled());data=[];for(var i=0;i<segs.length;i++){var seg=segs[i];switch(seg.mode){case Mode.NUMERIC:data.push([seg,{data:seg.data,mode:Mode.ALPHANUMERIC,length:seg.length},{data:seg.data,mode:Mode.BYTE,length:seg.length}]);break;case Mode.ALPHANUMERIC:data.push([seg,{data:seg.data,mode:Mode.BYTE,length:seg.length}]);break;
case Mode.KANJI:data.push([seg,{data:seg.data,mode:Mode.BYTE,length:unescape(encodeURIComponent(seg.data)).length}]);break;case Mode.BYTE:data.push([{data:seg.data,mode:Mode.BYTE,length:unescape(encodeURIComponent(seg.data)).length}])}}segs={};i={start:{}};seg=["start"];for(var i$jscomp$0=0;i$jscomp$0<data.length;i$jscomp$0++){for(var nodeGroup=data[i$jscomp$0],currentNodeIds=[],j=0;j<nodeGroup.length;j++){var node=nodeGroup[j],key=""+i$jscomp$0+j;currentNodeIds.push(key);segs[key]={node,lastCount:0};
i[key]={};for(var n=0;n<seg.length;n++){var prevNodeId=seg[n];segs[prevNodeId]&&segs[prevNodeId].node.mode===node.mode?(i[prevNodeId][key]=getSegmentBitsLength(segs[prevNodeId].lastCount+node.length,node.mode)-getSegmentBitsLength(segs[prevNodeId].lastCount,node.mode),segs[prevNodeId].lastCount+=node.length):(segs[prevNodeId]&&(segs[prevNodeId].lastCount=node.length),i[prevNodeId][key]=getSegmentBitsLength(node.length,node.mode)+4+Mode.getCharCountIndicator(node.mode,version))}}seg=currentNodeIds}for(n=
0;n<seg.length;n++)i[seg[n]].end=0;version=dijkstra.find_path(i,"start","end");data=[];for(i=1;i<version.length-1;i++)data.push(segs[version[i]].node);return exports.fromArray(mergeSegments(data))};exports.rawSplit=function(data){return exports.fromArray(getSegmentsFromString(data,Utils.isKanjiModeEnabled()))}}
//# sourceMappingURL=module$node_modules$qrcode$lib$core$segments.js.map
