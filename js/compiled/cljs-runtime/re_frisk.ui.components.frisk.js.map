{"version":3,"sources":["re_frisk/ui/components/frisk.cljs"],"mappings":"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","names":["re-frisk.ui.components.frisk/debounce-pending","cljs.core.atom","re-frisk.ui.components.frisk/debounce","key","delay","f","old-timeout","cljs.core/deref","cljs.core.get","new-timeout","js/setTimeout","cljs.core.swap_BANG_","cljs.core/assoc","js/clearTimeout","p__63440","map__63441","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","re-frisk.ui.components.frisk/ExpandButton","expanded?","path","emit-fn","G__63449","G__63450","re-frisk.ui.components.frisk/styles","re-frisk.ui.components.frisk/ExpandAllButton","data","re-frisk.ui.components.frisk/CollapseAllButton","re-frisk.ui.components.frisk/button","label","p1__63459#","re-frisk.ui.components.frisk/FilterEditBox","inp-val","val","cljs.core/reset!","re-frisk.ui.components.frisk/FilterReset","p__63465","map__63466","re-frisk.ui.components.frisk/node-clicked","event","all","G__63471","G__63472","G__63473","re-frisk.ui.components.frisk/NilText","cljs.core.pr_str","re-frisk.ui.components.frisk/StringText","re-frisk.ui.components.frisk/KeywordText","re-frisk.ui.components.frisk/NumberText","re-frisk.ui.components.frisk/is-prefix","needle","haystack","cljs.core/count","cljs.core._EQ_","cljs.core.subvec","p__63483","map__63485","re-frisk.ui.components.frisk/Node","swappable","node","matching-paths","p1__63481#","cljs.core.merge","p1__63482#","e","G__63490","G__63491","G__63492","cljs.core/Keyword","cljs.core/name","G__63496","G__63497","G__63498","cljs.core.keyword","cljs.core/object?","G__63502","G__63503","G__63504","js/Number","re-frisk.ui.components.frisk/is-expanded","expanded-paths","expanded-matching-paths","or__4126__auto__","p__63511","map__63512","vec__63513","cljs.core.nth","re-frisk.ui.components.frisk/KeyValNode","k","v","re-frisk.ui.components.frisk/DataFrisk","cljs.core.conj","p__63523","map__63524","re-frisk.ui.components.frisk/MapNode","cljs.core/empty?","cljs.core/keys","cljs.core.map_indexed","i","x","cljs.core.assoc","p__63543","map__63544","re-frisk.ui.components.frisk/ListVecNode","cljs.core/vector?","p__63556","map__63557","re-frisk.ui.components.frisk/SetNode","p__63565","map__63567","cljs.core/map?","cljs.core/set?","cljs.core/seq?","cljs.core/native-satisfies?","cljs.core/IDeref","re-frisk.ui.components.frisk/conj-to-set","coll","re-frisk.ui.components.frisk/expand-all-paths","root-value","remaining","cljs.core/seq","vec__63596","seq__63597","first__63598","cljs.core/first","cljs.core/next","current","rest","current-node","G__63600","cljs.core.concat","cljs.core.map","p__63602","vec__63604","cljs.core/coll?","re-frisk.ui.components.frisk/apply-filter","state","id","value","filter","re-frisk.filter.filter-parser/parse","cljs.core/assoc-in","re-frisk.ui.components.frisk/emit-fn-factory","state-atom","filter-refs","args","G__63614","js/Error","cljs.core/update-in","cljs.core/disj","p1__63611#","cljs.core/second","cljs.core.dissoc","vec__63617","var_args","G__63621","re-frisk.ui.components.frisk/walk-paths","re_frisk.ui.components.frisk.walk_paths","prefix","clojure.set/union","p__63623","vec__63626","re-frisk.ui.components.frisk/matching-paths","filter'","cljs.core/set","p1__63631#","cljs.core.filter","re-frisk.filter.filter-matcher/match","re-frisk.ui.components.frisk/prefixes","cljs.core.reductions","cljs.core/conj","re-frisk.ui.components.frisk/expanded-matching-paths","paths","re-frisk.ui.components.frisk/scroll-frisk-list-item","filter-ref","current-search-index","dec?","len","indx","matching","cljs.core/vec","cljs.core.sort_by","p1__63633#","cljs.core/PersistentHashMap","cljs.core/dec","cljs.core/inc","temp__5753__auto__","elem","re-frisk.ui.components.frisk/Root","_","reagent.core.atom","data-frisk","cljs.core/IAtom","cljs.core.get_in","expanded-matching","re-com.core/v-box","re-frisk.ui.components.components/scroller","re-frisk.ui.components.frisk/expand-by-default","p1__63642#","p2__63643#","cljs.core.reduce","cljs.core.range"],"sourcesContent":["(ns re-frisk.ui.components.frisk\n  (:require [clojure.set :as set]\n            [re-frisk.filter.filter-parser :as filter-parser]\n            [re-frisk.filter.filter-matcher :as filter-matcher]\n            [re-com.core :as re-com]\n            [re-frisk.ui.components.components :as components]\n            [reagent.core :as reagent]))\n\n;;original idea Odin Hole Standal https://github.com/Odinodin/data-frisk-reagent\n(declare DataFrisk)\n\n(def debounce-pending (atom {}))\n(defn debounce [key delay f]\n  (let [old-timeout (get @debounce-pending key)\n        new-timeout (js/setTimeout f delay)]\n    (swap! debounce-pending assoc key new-timeout)\n    (js/clearTimeout old-timeout)))\n\n(defn ExpandButton [{:keys [expanded? path emit-fn]}]\n  [:button {:style    {:border          0\n                       :backgroundColor \"transparent\" :width \"20px\" :height \"20px\"}\n            :on-click #(emit-fn (if expanded? :contract :expand) path)}\n   [:svg {:viewBox \"0 0 100 100\"\n          :width   \"100%\" :height \"100%\"\n          :style   {:transition \"all 0.2s ease\"\n                    :transform  (when expanded? \"rotate(90deg)\")}}\n    [:polygon {:points \"0,0 0,100 100,50\" :stroke \"gray\" :color \"gray\"}]]])\n\n(def styles\n  {:shell                {:backgroundColor \"#FAFAFA\"\n                          :fontFamily      \"Consolas,Monaco,Courier New,monospace\"\n                          :fontSize        \"12px\"\n                          :z-index         9999}\n   :strings              {:color \"#4Ebb4E\"}\n   :keywords             {:color \"purple\"}\n   :numbers              {:color \"blue\"}\n   :nil                  {:color \"red\"}\n   :shell-visible-button {:backgroundColor \"#4EE24E\"}})\n\n(defn ExpandAllButton [emit-fn data]\n  [:button {:on-click #(emit-fn :expand-all data)}\n   \"expand\"])\n\n(defn CollapseAllButton [emit-fn data]\n  [:button {:on-click #(emit-fn :collapse-all)}\n   \"collapse\"])\n\n(defn button [label emit-fn]\n  [:button {:on-click emit-fn\n            :style    {:paddingLeft             \"5px\"\n                       :paddingRight            \"5px\"\n                       :marginLeft              \"5px\"}}\n   label])\n\n(defn FilterEditBox [emit-fn inp-val]\n  [:input {:type        \"text\"\n           :value       @inp-val\n           :style       {:flex 1 :margin-left 5}\n           :placeholder \"Type here to find keys...\"\n           :on-change   #(let [val (.. % -target -value)]\n                           (reset! inp-val val)\n                           (emit-fn :filter-change val))}])\n\n(defn FilterReset [emit-fn inp-val]\n  [:button {:style    {:margin-right 5 :width 25}\n            :on-click #(do\n                         (reset! inp-val \"\")\n                         (emit-fn :filter-change \"\" 0))} \"X\"])\n\n(defn node-clicked [{:keys [event emit-fn path] :as all}]\n  (.stopPropagation event)\n  (emit-fn :filter-change (str path) 0))\n\n(defn NilText []\n  [:span {:style (:nil styles)} (pr-str nil)])\n\n(defn StringText [data]\n  [:span {:style (:strings styles)} (pr-str data)])\n\n(defn KeywordText [data]\n  [:span {:style (:keywords styles)} (str data)])\n\n(defn NumberText [data]\n  [:span {:style (:numbers styles)} data])\n\n(defn is-prefix [needle haystack]\n  (and (< (count needle) (count haystack))\n       (= needle (subvec haystack 0 (count needle)))))\n\n(defn Node [{:keys [data path emit-fn swappable node matching-paths]}]\n  [:span {:style {:padding-top \"5px\"}}\n   (when node\n     [:span {:style {:padding-left \"20px\"}}\n      [Node node]])\n   [:span\n    (merge\n     {:on-click #(node-clicked {:event % :emit-fn emit-fn :path path})\n      :style    (merge (when node {:padding-left \"10px\"})\n                       (when (get matching-paths path)\n                         {:background-color \"#fff9db\"}))}\n     (when (get matching-paths path)\n       {:id  (str path)\n        :ref #(emit-fn :filter-ref path %)}))\n    (cond\n      (nil? data)\n      [NilText]\n\n      (string? data)\n      (if swappable\n        [:input {:type          \"text\"\n                 :default-value (str data)\n                 :on-change     (fn string-changed [e] (emit-fn :changed path (.. e -target -value)))}]\n        [StringText data])\n\n      (keyword? data)\n      (if swappable\n        [:input {:type          \"text\"\n                 :default-value (name data)\n                 :on-change     (fn keyword-changed [e] (emit-fn :changed path (keyword (.. e -target -value))))}]\n        [KeywordText data])\n\n      (object? data)\n      \"Object\"\n\n      (number? data)\n      (if swappable\n        [:input {:type          \"number\"\n                 :default-value data\n                 :on-change     (fn number-changed [e] (emit-fn :changed path (js/Number (.. e -target -value))))}]\n        [NumberText data])\n      :else\n      (str data))]])\n\n;; A path is expanded if it is explicitly expanded or if it is a part of\n;; current selection\n(defn is-expanded [expanded-paths expanded-matching-paths path]\n  (or (get expanded-paths path)\n      (get expanded-matching-paths path)))\n\n(defn KeyValNode [{[k v] :data :keys [path expanded-paths matching-paths expanded-matching-paths emit-fn swappable]}]\n  [:div {:style {:display \"flex\"}}\n   [DataFrisk {:node                    {:data           k\n                                         :emit-fn        emit-fn\n                                         :path           (conj path k)\n                                         :matching-paths matching-paths}\n               :data                    v\n               :swappable               swappable\n               :path                    (conj path k)\n               :expanded-paths          expanded-paths\n               :matching-paths          matching-paths\n               :expanded-matching-paths expanded-matching-paths\n               :emit-fn                 emit-fn}]])\n\n(defn MapNode [{:keys [data path expanded-paths matching-paths expanded-matching-paths emit-fn node] :as all}]\n  (let [expanded? (is-expanded expanded-paths expanded-matching-paths path)]\n    [:div {:style {:display \"flex\" :padding-top \"3px\"}}\n     [:div {:style {:flex \"0 1 auto\"}}\n      (if (empty? data)\n        [:div {:style {:width \"20px\"}}]\n        [ExpandButton {:expanded? expanded?\n                       :path      path\n                       :emit-fn   emit-fn}])]\n     [:div {:style {:flex 1}}\n      (when node\n        [Node node])\n      [:span \" {\"]\n      [:span (str (count (keys data)) \" keys\")]\n      [:span \"}\"]\n      (when expanded?\n        (map-indexed (fn [i x] ^{:key i}\n                       [:div {:style {:flex 1}}\n                        [KeyValNode (assoc all :data x)]])\n                     data))]]))\n\n(defn ListVecNode [{:keys [data path expanded-paths matching-paths expanded-matching-paths emit-fn swappable node]}]\n  (let [expanded? (is-expanded expanded-paths expanded-matching-paths path)]\n    [:div {:style {:display \"flex\" :padding-top \"3px\"}}\n     [:div {:style {:flex \"0 1 auto\"}}\n      (if (empty? data)\n        [:div {:style {:width \"20px\"}}]\n        [ExpandButton {:expanded? expanded?\n                       :path      path\n                       :emit-fn   emit-fn}])]\n     [:div {:style {:flex 1}}\n      (when node\n        [Node node])\n      [:span (if (vector? data) \" [\" \" (\")\n       (str (count data) \" items\")]\n      [:span (if (vector? data) \"]\" \")\")]\n      (when expanded?\n        (map-indexed (fn [i x] ^{:key i} [:div {:style {:flex 1}}\n                                          [DataFrisk {:data                    x\n                                                      :swappable               swappable\n                                                      :path                    (conj path i)\n                                                      :expanded-paths          expanded-paths\n                                                      :matching-paths          matching-paths\n                                                      :expanded-matching-paths expanded-matching-paths\n                                                      :emit-fn                 emit-fn}]]) data))]]))\n\n(defn SetNode [{:keys [data path expanded-paths matching-paths expanded-matching-paths emit-fn swappable node]}]\n  (let [expanded? (is-expanded expanded-paths expanded-matching-paths path)]\n    [:div {:style {:display \"flex\" :padding-top \"3px\"}}\n     [:div {:style {:flex \"0 1 auto\"}}\n      (if (empty? data)\n        [:div {:style {:width \"20px\"}}]\n        [ExpandButton {:expanded? expanded?\n                       :path      path\n                       :emit-fn   emit-fn}])]\n     [:div {:style {:flex 1}}\n      (when node\n        [Node node])\n      [:span \" #{\"\n       (str (count data) \" items\")]\n      [:span \"}\"]\n      (when expanded?\n        (map-indexed (fn [i x] ^{:key i} [:div {:style {:flex 1}}\n                                          [DataFrisk {:data                    x\n                                                      :swappable               swappable\n                                                      :path                    (conj path x)\n                                                      :expanded-paths          expanded-paths\n                                                      :matching-paths          matching-paths\n                                                      :expanded-matching-paths expanded-matching-paths\n                                                      :emit-fn                 emit-fn}]]) data))]]))\n\n(defn DataFrisk [{:keys [data] :as all}]\n  (cond (map? data) [MapNode all]\n        (set? data) [SetNode all]\n        (or (seq? data) (vector? data)) [ListVecNode all]\n        (satisfies? IDeref data) [DataFrisk (assoc all :data @data)]\n        :else [Node all]))\n\n(defn conj-to-set [coll x]\n  (conj (or coll #{}) x))\n\n(defn expand-all-paths [root-value]\n  (loop [remaining [{:path [] :node root-value}]\n         expanded-paths #{}]\n    (if (seq remaining)\n      (let [[current & rest] remaining\n            current-node (if (satisfies? IDeref (:node current)) @(:node current) (:node current))]\n        (cond (map? current-node)\n              (recur\n               (concat rest (map (fn [[k v]] {:path (conj (:path current) k)\n                                              :node v})\n                                 current-node))\n               (conj expanded-paths (:path current)))\n              (or (seq? current-node) (vector? current-node))\n              (recur\n               (concat rest (map-indexed (fn [i node] {:path (conj (:path current) i)\n                                                       :node node})\n                                         current-node))\n               (conj expanded-paths (:path current)))\n              :else\n              (recur\n               rest\n               (if (coll? current-node)\n                 (conj expanded-paths (:path current))\n                 expanded-paths))))\n      expanded-paths)))\n\n(defn apply-filter [state id value]\n  (let [filter (filter-parser/parse value)]\n    (assoc-in state [:data-frisk id :filter] filter)))\n\n(defn emit-fn-factory [state-atom id swappable filter-refs inp-val]\n  (fn [event & args]\n    (case event\n      :expand (swap! state-atom update-in [:data-frisk id :expanded-paths] conj-to-set (first args))\n      :expand-all (swap! state-atom assoc-in [:data-frisk id :expanded-paths] (expand-all-paths (first args)))\n      :contract (swap! state-atom update-in [:data-frisk id :expanded-paths] disj (first args))\n      :collapse-all (swap! state-atom assoc-in [:data-frisk id :expanded-paths] #{})\n      :filter-ref (swap! filter-refs #(if (second args)\n                                        (assoc % (first args) (second args))\n                                        (dissoc % (first args))))\n      :filter-change\n      (do\n        (reset! inp-val (first args))\n        (debounce :filter-change 400 #(swap! state-atom apply-filter id (first args))))\n      :changed (let [[path value] args]\n                 (if (seq path)\n                   (swap! swappable assoc-in path value)\n                   (reset! swappable value))))))\n\n(defn walk-paths\n  ([data]\n   (walk-paths [] data))\n  ([prefix data]\n   (conj\n    (cond (map? data)\n          (apply set/union\n                 (map (fn [[k v]] (walk-paths (conj prefix k) v)) data))\n          (set? data)\n          (apply set/union\n                 (map (fn [v] (walk-paths (conj prefix v) v)) data))\n          (or (seq? data) (vector? data))\n          (apply set/union\n                 (map-indexed\n                  (fn [i v] (walk-paths (conj prefix i) v)) data))\n          (satisfies? IDeref data) (walk-paths prefix @data)\n          :else #{})\n    prefix)))\n\n(defn matching-paths [data filter']\n  (set (filter #(filter-matcher/match filter' %) (walk-paths data))))\n\n(defn prefixes [path]\n  (set (reductions conj [] path)))\n\n;; Any node which is a prefix of a matched path needs to be expnaded\n(defn expanded-matching-paths [paths]\n  (apply set/union (map prefixes paths)))\n\n(defn scroll-frisk-list-item [filter-ref current-search-index dec?]\n  (let [filter-ref @filter-ref\n        len (count filter-ref)\n        indx @current-search-index]\n    (when (> len 0)\n      (let [matching (vec (sort-by :y (map #(hash-map\n                                             :path (first %)\n                                             :y (.-top (.getBoundingClientRect (second %)))\n                                             :el (second %))\n                                           filter-ref)))]\n        (if dec?\n          (if (or (zero? indx)\n                  (>= (dec indx) len))\n            (reset! current-search-index (dec len))\n            (swap! current-search-index dec))\n          (if (>= (inc indx) len)\n            (reset! current-search-index 0)\n            (swap! current-search-index inc)))\n        (when-let [path (get matching indx)]\n          (when-let [elem (:el path)]\n            (.scrollIntoView elem #js {:block \"center\"})))))))\n\n(defn Root [_ _ _]\n  (let [filter-refs (atom {})\n        current-search-index (atom 0)\n        inp-val (reagent/atom \"\")]\n    (fn [data id state-atom]\n      (let [data-frisk (:data-frisk @state-atom)\n            swappable (when (satisfies? IAtom data)\n                        data)\n            filter (or (get-in data-frisk [id :filter]) [])\n            matching (matching-paths data filter)\n            expanded-matching (expanded-matching-paths matching)\n            emit-fn (emit-fn-factory state-atom id swappable filter-refs inp-val)]\n        [re-com/v-box :style {:background-color \"#f3f3f3\" :color \"#444444\"}\n         :size \"1\"\n         :children\n         [[:div {:style {:padding \"4px 2px\" :display \"flex\"}}\n           [ExpandAllButton emit-fn data]\n           [CollapseAllButton emit-fn]\n           [:div {:style {:padding \"2px\" :margin-left \"4px\" :background-color \"#fff9db\"}} (count matching)]\n           [button \"\u25b2\" #(scroll-frisk-list-item filter-refs current-search-index true)]\n           [button \"\u25bc\" #(scroll-frisk-list-item filter-refs current-search-index false)]\n           [FilterEditBox emit-fn inp-val]\n           [FilterReset emit-fn inp-val]]\n          [components/scroller\n           [DataFrisk {:data                    data\n                       :swappable               swappable\n                       :path                    []\n                       :expanded-paths          (get-in data-frisk [id :expanded-paths])\n                       :matching-paths          matching\n                       :expanded-matching-paths expanded-matching\n                       :emit-fn                 emit-fn}]]]]))))\n\n(def expand-by-default (reduce #(assoc-in %1 [:data-frisk %2 :expanded-paths] #{[]}) {} (range 1)))"]}