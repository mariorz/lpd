shadow$provide.module$node_modules$penpal$lib$index=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.default=exports.ERR_NOT_IN_IFRAME=exports.ERR_CONNECTION_TIMEOUT=exports.ERR_CONNECTION_DESTROYED=void 0;exports.ERR_CONNECTION_DESTROYED="ConnectionDestroyed";exports.ERR_CONNECTION_TIMEOUT="ConnectionTimeout";exports.ERR_NOT_IN_IFRAME="NotInIframe";var DEFAULT_PORTS={"http:":"80","https:":"443"},URL_REGEX=/^(https?:)?\/\/([^/:]+)(:(\d+))?/;try{var JSCompiler_inline_result=
window?window.Promise:null}catch(e){JSCompiler_inline_result=null}var Penpal={ERR_CONNECTION_DESTROYED:"ConnectionDestroyed",ERR_CONNECTION_TIMEOUT:"ConnectionTimeout",ERR_NOT_IN_IFRAME:"NotInIframe",Promise:JSCompiler_inline_result,debug:!1},generateId=function(){var id=0;return function(){return++id}}(),log=function(){if(Penpal.debug){for(var _console,_len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];(_console=console).log.apply(_console,["[Penpal]"].concat(args))}},
getOriginFromUrl=function(url){var location=document.location,regexResult=URL_REGEX.exec(url);if(regexResult){url=regexResult[1]?regexResult[1]:location.protocol;var hostname=regexResult[2];location=regexResult[4]}else url=location.protocol,hostname=location.hostname,location=location.port;location=location&&location!==DEFAULT_PORTS[url]?":".concat(location):"";return"".concat(url,"//").concat(hostname).concat(location)},DestructionPromise=function(executor){var handlers=[];executor(function(){handlers.forEach(function(handler){handler()})});
return{then:function(handler){handlers.push(handler)}}},serializeError=function(_ref){return{name:_ref.name,message:_ref.message,stack:_ref.stack}},deserializeError=function(obj){var deserializedError=Error();Object.keys(obj).forEach(function(key){return deserializedError[key]=obj[key]});return deserializedError},connectCallSender=function(callSender,info,methodNames,destructionPromise){var localName=info.localName,local=info.local,remote=info.remote,remoteOrigin=info.remoteOrigin,destroyed=!1;log("".concat(localName,
": Connecting call sender"));var createMethodProxy=function(methodName){return function(){for(var _len2=arguments.length,args=Array(_len2),_key2=0;_key2<_len2;_key2++)args[_key2]=arguments[_key2];log("".concat(localName,": Sending ").concat(methodName,"() call"));if(destroyed)throw _len2=Error("Unable to send ".concat(methodName,"() call due ")+"to destroyed connection"),_len2.code="ConnectionDestroyed",_len2;return new Penpal.Promise(function(resolve,reject){var id=generateId();local.addEventListener("message",
function handleMessageEvent(event){if(event.source===remote&&event.origin===remoteOrigin&&"reply"===event.data.penpal&&event.data.id===id){log("".concat(localName,": Received ").concat(methodName,"() reply"));local.removeEventListener("message",handleMessageEvent);var returnValue=event.data.returnValue;event.data.returnValueIsError&&(returnValue=deserializeError(returnValue));("fulfilled"===event.data.resolution?resolve:reject)(returnValue)}});remote.postMessage({penpal:"call",id,methodName,args},
remoteOrigin)})}};destructionPromise.then(function(){destroyed=!0});methodNames.reduce(function(api,methodName){api[methodName]=createMethodProxy(methodName);return api},callSender)},connectCallReceiver=function(info,methods,destructionPromise){var localName=info.localName,local=info.local,remote=info.remote,remoteOrigin=info.remoteOrigin,destroyed=!1;log("".concat(localName,": Connecting call receiver"));var handleMessageEvent=function(event){if(event.source===remote&&event.origin===remoteOrigin&&
"call"===event.data.penpal){event=event.data;var methodName=event.methodName,args=event.args,id=event.id;log("".concat(localName,": Received ").concat(methodName,"() call"));methodName in methods&&(event=function(resolution){return function(returnValue){log("".concat(localName,": Sending ").concat(methodName,"() reply"));if(destroyed)log("".concat(localName,": Unable to send ").concat(methodName,"() reply due to destroyed connection"));else{var message={penpal:"reply",id,resolution,returnValue};"rejected"===
resolution&&returnValue instanceof Error&&(message.returnValue=serializeError(returnValue),message.returnValueIsError=!0);try{remote.postMessage(message,remoteOrigin)}catch(err){throw"DataCloneError"===err.name&&remote.postMessage({penpal:"reply",id,resolution:"rejected",returnValue:serializeError(err),returnValueIsError:!0},remoteOrigin),err;}}}},(new Penpal.Promise(function(resolve){return resolve(methods[methodName].apply(methods,args))})).then(event("fulfilled"),event("rejected")))}};local.addEventListener("message",
handleMessageEvent);destructionPromise.then(function(){destroyed=!0;local.removeEventListener("message",handleMessageEvent)})};Penpal.connectToChild=function(_ref2){var url=_ref2.url,appendTo=_ref2.appendTo,_ref2$methods=_ref2.methods,methods=void 0===_ref2$methods?{}:_ref2$methods,timeout=_ref2.timeout,destroy,connectionDestructionPromise=new DestructionPromise(function(resolveConnectionDestructionPromise){destroy=resolveConnectionDestructionPromise}),parent=window,iframe=document.createElement("iframe");
(appendTo||document.body).appendChild(iframe);connectionDestructionPromise.then(function(){iframe.parentNode&&iframe.parentNode.removeChild(iframe)});var child=iframe.contentWindow||iframe.contentDocument.parentWindow,childOrigin=getOriginFromUrl(url);return{promise:new Penpal.Promise(function(resolveConnectionPromise,reject){var connectionTimeoutId;void 0!==timeout&&(connectionTimeoutId=setTimeout(function(){var error=Error("Connection to child timed out after ".concat(timeout,"ms"));error.code=
"ConnectionTimeout";reject(error);destroy()},timeout));var callSender={},receiverMethodNames,destroyCallReceiver,handleMessage=function(event){if(event.source===child&&event.origin===childOrigin&&"handshake"===event.data.penpal){log("Parent: Received handshake, sending reply");event.source.postMessage({penpal:"handshake-reply",methodNames:Object.keys(methods)},event.origin);var info={localName:"Parent",local:parent,remote:child,remoteOrigin:event.origin};destroyCallReceiver&&destroyCallReceiver();
var callReceiverDestructionPromise=new DestructionPromise(function(resolveCallReceiverDestructionPromise){connectionDestructionPromise.then(resolveCallReceiverDestructionPromise);destroyCallReceiver=resolveCallReceiverDestructionPromise});connectCallReceiver(info,methods,callReceiverDestructionPromise);receiverMethodNames&&receiverMethodNames.forEach(function(receiverMethodName){delete callSender[receiverMethodName]});receiverMethodNames=event.data.methodNames;connectCallSender(callSender,info,receiverMethodNames,
connectionDestructionPromise);clearTimeout(connectionTimeoutId);resolveConnectionPromise(callSender)}};parent.addEventListener("message",handleMessage);connectionDestructionPromise.then(function(){parent.removeEventListener("message",handleMessage);var error=Error("Connection destroyed");error.code="ConnectionDestroyed";reject(error)});log("Parent: Loading iframe");iframe.src=url}),iframe,destroy}};Penpal.connectToParent=function(){var _ref3=0<arguments.length&&void 0!==arguments[0]?arguments[0]:
{},_ref3$parentOrigin=_ref3.parentOrigin,parentOrigin=void 0===_ref3$parentOrigin?"*":_ref3$parentOrigin;_ref3$parentOrigin=_ref3.methods;var methods=void 0===_ref3$parentOrigin?{}:_ref3$parentOrigin,timeout=_ref3.timeout;if(window===window.top)throw _ref3=Error("connectToParent() must be called within an iframe"),_ref3.code="NotInIframe",_ref3;var destroy,connectionDestructionPromise=new DestructionPromise(function(resolveConnectionDestructionPromise){destroy=resolveConnectionDestructionPromise}),
child=window,parent=child.parent;return{promise:new Penpal.Promise(function(resolveConnectionPromise,reject){var connectionTimeoutId;void 0!==timeout&&(connectionTimeoutId=setTimeout(function(){var error=Error("Connection to parent timed out after ".concat(timeout,"ms"));error.code="ConnectionTimeout";reject(error);destroy()},timeout));var handleMessageEvent$jscomp$0=function handleMessageEvent(event){if(("*"===parentOrigin||parentOrigin===event.origin)&&event.source===parent&&"handshake-reply"===
event.data.penpal){log("Child: Received handshake reply");child.removeEventListener("message",handleMessageEvent);var info={localName:"Child",local:child,remote:parent,remoteOrigin:event.origin},callSender={};connectCallReceiver(info,methods,connectionDestructionPromise);connectCallSender(callSender,info,event.data.methodNames,connectionDestructionPromise);clearTimeout(connectionTimeoutId);resolveConnectionPromise(callSender)}};child.addEventListener("message",handleMessageEvent$jscomp$0);connectionDestructionPromise.then(function(){child.removeEventListener("message",
handleMessageEvent$jscomp$0);var error=Error("Connection destroyed");error.code="ConnectionDestroyed";reject(error)});log("Child: Sending handshake");parent.postMessage({penpal:"handshake",methodNames:Object.keys(methods)},parentOrigin)}),destroy}};exports.default=Penpal}
//# sourceMappingURL=module$node_modules$penpal$lib$index.js.map
