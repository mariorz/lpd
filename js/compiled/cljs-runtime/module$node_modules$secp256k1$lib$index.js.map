{
"version":3,
"file":"module$node_modules$secp256k1$lib$index.js",
"lineCount":16,
"mappings":"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",
"sources":["node_modules/secp256k1/lib/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$secp256k1$lib$index\"] = function(global,require,module,exports) {\n'use strict'\nvar assert = require('./assert')\nvar der = require('./der')\nvar messages = require('./messages.json')\n\nfunction initCompressedValue (value, defaultValue) {\n  if (value === undefined) return defaultValue\n\n  assert.isBoolean(value, messages.COMPRESSED_TYPE_INVALID)\n  return value\n}\n\nmodule.exports = function (secp256k1) {\n  return {\n    privateKeyVerify: function (privateKey) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      return privateKey.length === 32 && secp256k1.privateKeyVerify(privateKey)\n    },\n\n    privateKeyExport: function (privateKey, compressed) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      compressed = initCompressedValue(compressed, true)\n      var publicKey = secp256k1.privateKeyExport(privateKey, compressed)\n\n      return der.privateKeyExport(privateKey, publicKey, compressed)\n    },\n\n    privateKeyImport: function (privateKey) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n\n      privateKey = der.privateKeyImport(privateKey)\n      if (privateKey && privateKey.length === 32 && secp256k1.privateKeyVerify(privateKey)) return privateKey\n\n      throw new Error(messages.EC_PRIVATE_KEY_IMPORT_DER_FAIL)\n    },\n\n    privateKeyNegate: function (privateKey) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      return secp256k1.privateKeyNegate(privateKey)\n    },\n\n    privateKeyModInverse: function (privateKey) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      return secp256k1.privateKeyModInverse(privateKey)\n    },\n\n    privateKeyTweakAdd: function (privateKey, tweak) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID)\n      assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID)\n\n      return secp256k1.privateKeyTweakAdd(privateKey, tweak)\n    },\n\n    privateKeyTweakMul: function (privateKey, tweak) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID)\n      assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID)\n\n      return secp256k1.privateKeyTweakMul(privateKey, tweak)\n    },\n\n    publicKeyCreate: function (privateKey, compressed) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      compressed = initCompressedValue(compressed, true)\n\n      return secp256k1.publicKeyCreate(privateKey, compressed)\n    },\n\n    publicKeyConvert: function (publicKey, compressed) {\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)\n      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)\n\n      compressed = initCompressedValue(compressed, true)\n\n      return secp256k1.publicKeyConvert(publicKey, compressed)\n    },\n\n    publicKeyVerify: function (publicKey) {\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)\n      return secp256k1.publicKeyVerify(publicKey)\n    },\n\n    publicKeyTweakAdd: function (publicKey, tweak, compressed) {\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)\n      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)\n\n      assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID)\n      assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID)\n\n      compressed = initCompressedValue(compressed, true)\n\n      return secp256k1.publicKeyTweakAdd(publicKey, tweak, compressed)\n    },\n\n    publicKeyTweakMul: function (publicKey, tweak, compressed) {\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)\n      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)\n\n      assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID)\n      assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID)\n\n      compressed = initCompressedValue(compressed, true)\n\n      return secp256k1.publicKeyTweakMul(publicKey, tweak, compressed)\n    },\n\n    publicKeyCombine: function (publicKeys, compressed) {\n      assert.isArray(publicKeys, messages.EC_PUBLIC_KEYS_TYPE_INVALID)\n      assert.isLengthGTZero(publicKeys, messages.EC_PUBLIC_KEYS_LENGTH_INVALID)\n      for (var i = 0; i < publicKeys.length; ++i) {\n        assert.isBuffer(publicKeys[i], messages.EC_PUBLIC_KEY_TYPE_INVALID)\n        assert.isBufferLength2(publicKeys[i], 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)\n      }\n\n      compressed = initCompressedValue(compressed, true)\n\n      return secp256k1.publicKeyCombine(publicKeys, compressed)\n    },\n\n    signatureNormalize: function (signature) {\n      assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID)\n      assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID)\n\n      return secp256k1.signatureNormalize(signature)\n    },\n\n    signatureExport: function (signature) {\n      assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID)\n      assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID)\n\n      var sigObj = secp256k1.signatureExport(signature)\n      return der.signatureExport(sigObj)\n    },\n\n    signatureImport: function (sig) {\n      assert.isBuffer(sig, messages.ECDSA_SIGNATURE_TYPE_INVALID)\n      assert.isLengthGTZero(sig, messages.ECDSA_SIGNATURE_LENGTH_INVALID)\n\n      var sigObj = der.signatureImport(sig)\n      if (sigObj) return secp256k1.signatureImport(sigObj)\n\n      throw new Error(messages.ECDSA_SIGNATURE_PARSE_DER_FAIL)\n    },\n\n    signatureImportLax: function (sig) {\n      assert.isBuffer(sig, messages.ECDSA_SIGNATURE_TYPE_INVALID)\n      assert.isLengthGTZero(sig, messages.ECDSA_SIGNATURE_LENGTH_INVALID)\n\n      var sigObj = der.signatureImportLax(sig)\n      if (sigObj) return secp256k1.signatureImport(sigObj)\n\n      throw new Error(messages.ECDSA_SIGNATURE_PARSE_DER_FAIL)\n    },\n\n    sign: function (message, privateKey, options) {\n      assert.isBuffer(message, messages.MSG32_TYPE_INVALID)\n      assert.isBufferLength(message, 32, messages.MSG32_LENGTH_INVALID)\n\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      var data = null\n      var noncefn = null\n      if (options !== undefined) {\n        assert.isObject(options, messages.OPTIONS_TYPE_INVALID)\n\n        if (options.data !== undefined) {\n          assert.isBuffer(options.data, messages.OPTIONS_DATA_TYPE_INVALID)\n          assert.isBufferLength(options.data, 32, messages.OPTIONS_DATA_LENGTH_INVALID)\n          data = options.data\n        }\n\n        if (options.noncefn !== undefined) {\n          assert.isFunction(options.noncefn, messages.OPTIONS_NONCEFN_TYPE_INVALID)\n          noncefn = options.noncefn\n        }\n      }\n\n      return secp256k1.sign(message, privateKey, noncefn, data)\n    },\n\n    verify: function (message, signature, publicKey) {\n      assert.isBuffer(message, messages.MSG32_TYPE_INVALID)\n      assert.isBufferLength(message, 32, messages.MSG32_LENGTH_INVALID)\n\n      assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID)\n      assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID)\n\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)\n      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)\n\n      return secp256k1.verify(message, signature, publicKey)\n    },\n\n    recover: function (message, signature, recovery, compressed) {\n      assert.isBuffer(message, messages.MSG32_TYPE_INVALID)\n      assert.isBufferLength(message, 32, messages.MSG32_LENGTH_INVALID)\n\n      assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID)\n      assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID)\n\n      assert.isNumber(recovery, messages.RECOVERY_ID_TYPE_INVALID)\n      assert.isNumberInInterval(recovery, -1, 4, messages.RECOVERY_ID_VALUE_INVALID)\n\n      compressed = initCompressedValue(compressed, true)\n\n      return secp256k1.recover(message, signature, recovery, compressed)\n    },\n\n    ecdh: function (publicKey, privateKey) {\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)\n      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)\n\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      return secp256k1.ecdh(publicKey, privateKey)\n    },\n\n    ecdhUnsafe: function (publicKey, privateKey, compressed) {\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)\n      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)\n\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      compressed = initCompressedValue(compressed, true)\n\n      return secp256k1.ecdhUnsafe(publicKey, privateKey, compressed)\n    }\n  }\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","initCompressedValue","value","defaultValue","undefined","assert","isBoolean","messages","COMPRESSED_TYPE_INVALID","der","module.exports","secp256k1","privateKeyVerify","privateKey","isBuffer","EC_PRIVATE_KEY_TYPE_INVALID","length","privateKeyExport","compressed","isBufferLength","EC_PRIVATE_KEY_LENGTH_INVALID","publicKey","privateKeyImport","Error","EC_PRIVATE_KEY_IMPORT_DER_FAIL","privateKeyNegate","privateKeyModInverse","privateKeyTweakAdd","tweak","TWEAK_TYPE_INVALID","TWEAK_LENGTH_INVALID","privateKeyTweakMul","publicKeyCreate","publicKeyConvert","EC_PUBLIC_KEY_TYPE_INVALID","isBufferLength2","EC_PUBLIC_KEY_LENGTH_INVALID","publicKeyVerify","publicKeyTweakAdd","publicKeyTweakMul","publicKeyCombine","publicKeys","isArray","EC_PUBLIC_KEYS_TYPE_INVALID","isLengthGTZero","EC_PUBLIC_KEYS_LENGTH_INVALID","i","signatureNormalize","signature","ECDSA_SIGNATURE_TYPE_INVALID","ECDSA_SIGNATURE_LENGTH_INVALID","signatureExport","sigObj","signatureImport","sig","ECDSA_SIGNATURE_PARSE_DER_FAIL","signatureImportLax","sign","message","options","MSG32_TYPE_INVALID","MSG32_LENGTH_INVALID","data","noncefn","isObject","OPTIONS_TYPE_INVALID","OPTIONS_DATA_TYPE_INVALID","OPTIONS_DATA_LENGTH_INVALID","isFunction","OPTIONS_NONCEFN_TYPE_INVALID","verify","recover","recovery","isNumber","RECOVERY_ID_TYPE_INVALID","isNumberInInterval","RECOVERY_ID_VALUE_INVALID","ecdh","ecdhUnsafe"]
}
