shadow$provide.module$node_modules$eth_block_tracker$src$polling=function(global,require,module,exports){function timeout(duration,unref){return new Promise(resolve=>{resolve=setTimeout(resolve,duration);resolve.unref&&unref&&resolve.unref()})}const pify=require("module$node_modules$pify$index");global=require("module$node_modules$eth_block_tracker$src$base");class PollingBlockTracker extends global{constructor(opts={}){if(!opts.provider)throw Error("PollingBlockTracker - no provider specified.");
const pollingInterval=opts.pollingInterval||2E4,retryTimeout=opts.retryTimeout||pollingInterval/10,keepEventLoopActive=void 0!==opts.keepEventLoopActive?opts.keepEventLoopActive:!0,setSkipCacheFlag=opts.setSkipCacheFlag||!1;super(Object.assign({blockResetDuration:pollingInterval},opts));this._provider=opts.provider;this._pollingInterval=pollingInterval;this._retryTimeout=retryTimeout;this._keepEventLoopActive=keepEventLoopActive;this._setSkipCacheFlag=setSkipCacheFlag}async checkForLatestBlock(){await this._updateLatestBlock();
return await this.getLatestBlock()}_start(){this._performSync().catch(err=>this.emit("error",err))}async _performSync(){for(;this._isRunning;)try{await this._updateLatestBlock(),await timeout(this._pollingInterval,!this._keepEventLoopActive)}catch(err){const newErr=Error(`PollingBlockTracker - encountered an error while attempting to update latest block:\n${err.stack}`);try{this.emit("error",newErr)}catch(emitErr){console.error(newErr)}await timeout(this._retryTimeout,!this._keepEventLoopActive)}}async _updateLatestBlock(){const latestBlock=
await this._fetchLatestBlock();this._newPotentialLatest(latestBlock)}async _fetchLatestBlock(){const req={jsonrpc:"2.0",id:1,method:"eth_blockNumber",params:[]};this._setSkipCacheFlag&&(req.skipCache=!0);const res=await pify(cb=>this._provider.sendAsync(req,cb))();if(res.error)throw Error(`PollingBlockTracker - encountered error fetching block:\n${res.error}`);return res.result}}module.exports=PollingBlockTracker}
//# sourceMappingURL=module$node_modules$eth_block_tracker$src$polling.js.map
