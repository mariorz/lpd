{
"version":3,
"file":"module$node_modules$qrcode$lib$core$alignment_pattern.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAe,qDAAf,CAA0E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAWlH,IAAIC,cAAgBH,OAAA,CAAQ,2CAAR,CAAhBG,CAAmCA,aAgBvCD,QAAA,CAAQE,eAAR,CAA0BC,QAAyB,CAACC,OAAD,CAAU,CAC3D,GAAgB,CAAhB,GAAIA,OAAJ,CAAmB,MAAO,EAE1B,KAAIC,SAAWC,IAAA,CAAKC,KAAL,CAAWH,OAAX,CAAqB,CAArB,CAAXC,CAAqC,CAAzC,CACIG,KAAOP,aAAA,CAAcG,OAAd,CACPK,QAAAA,CAAqB,GAAT,GAAAD,IAAA,CAAe,EAAf,CAAkE,CAAlE,CAAoBF,IAAA,CAAKI,IAAL,EAAWF,IAAX,CAAkB,EAAlB,GAAyB,CAAzB,CAA6BH,QAA7B,CAAwC,CAAxC,EAChCM,KAAAA,CAAY,CAACH,IAAD,CAAQ,CAAR,CAEhB,KAAK,IAAII,EAAI,CAAb,CAAgBA,CAAhB,CAAoBP,QAApB,CAA+B,CAA/B,CAAkCO,CAAA,EAAlC,CACED,IAAA,CAAUC,CAAV,CAAA,CAAeD,IAAA,CAAUC,CAAV,CAAc,CAAd,CAAf,CAAkCH,OAGpCE,KAAA,CAAUE,IAAV,CAAe,CAAf,CAEA,OAAOF,KAAA,CAAUG,OAAV,EAdoD,CAqC7Dd,QAAA,CAAQe,YAAR;AAAuBC,QAAsB,CAACZ,OAAD,CAAU,CACrD,IAAIa,OAAS,EACTC,QAAAA,CAAMlB,OAAA,CAAQE,eAAR,CAAwBE,OAAxB,CAGV,KAFA,IAAIe,UAAYD,OAAZC,CAAgBC,MAApB,CAESR,EAAI,CAAb,CAAgBA,CAAhB,CAAoBO,SAApB,CAA+BP,CAAA,EAA/B,CACE,IAAK,IAAIS,EAAI,CAAb,CAAgBA,CAAhB,CAAoBF,SAApB,CAA+BE,CAAA,EAA/B,CAEa,CAAX,GAAKT,CAAL,EAAsB,CAAtB,GAAgBS,CAAhB,EACW,CADX,GACKT,CADL,EACgBS,CADhB,GACsBF,SADtB,CACkC,CADlC,EAEKP,CAFL,GAEWO,SAFX,CAEuB,CAFvB,EAEkC,CAFlC,GAE4BE,CAF5B,EAMAJ,MAAA,CAAOJ,IAAP,CAAY,CAACK,OAAA,CAAIN,CAAJ,CAAD,CAASM,OAAA,CAAIG,CAAJ,CAAT,CAAZ,CAIJ,OAAOJ,OAlB8C,CAhE2D;",
"sources":["node_modules/qrcode/lib/core/alignment-pattern.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$qrcode$lib$core$alignment_pattern\"] = function(global,require,module,exports) {\n/**\n * Alignment pattern are fixed reference pattern in defined positions\n * in a matrix symbology, which enables the decode software to re-synchronise\n * the coordinate mapping of the image modules in the event of moderate amounts\n * of distortion of the image.\n *\n * Alignment patterns are present only in QR Code symbols of version 2 or larger\n * and their number depends on the symbol version.\n */\n\nvar getSymbolSize = require('./utils').getSymbolSize\n\n/**\n * Calculate the row/column coordinates of the center module of each alignment pattern\n * for the specified QR Code version.\n *\n * The alignment patterns are positioned symmetrically on either side of the diagonal\n * running from the top left corner of the symbol to the bottom right corner.\n *\n * Since positions are simmetrical only half of the coordinates are returned.\n * Each item of the array will represent in turn the x and y coordinate.\n * @see {@link getPositions}\n *\n * @param  {Number} version QR Code version\n * @return {Array}          Array of coordinate\n */\nexports.getRowColCoords = function getRowColCoords (version) {\n  if (version === 1) return []\n\n  var posCount = Math.floor(version / 7) + 2\n  var size = getSymbolSize(version)\n  var intervals = size === 145 ? 26 : Math.ceil((size - 13) / (2 * posCount - 2)) * 2\n  var positions = [size - 7] // Last coord is always (size - 7)\n\n  for (var i = 1; i < posCount - 1; i++) {\n    positions[i] = positions[i - 1] - intervals\n  }\n\n  positions.push(6) // First coord is always 6\n\n  return positions.reverse()\n}\n\n/**\n * Returns an array containing the positions of each alignment pattern.\n * Each array's element represent the center point of the pattern as (x, y) coordinates\n *\n * Coordinates are calculated expanding the row/column coordinates returned by {@link getRowColCoords}\n * and filtering out the items that overlaps with finder pattern\n *\n * @example\n * For a Version 7 symbol {@link getRowColCoords} returns values 6, 22 and 38.\n * The alignment patterns, therefore, are to be centered on (row, column)\n * positions (6,22), (22,6), (22,22), (22,38), (38,22), (38,38).\n * Note that the coordinates (6,6), (6,38), (38,6) are occupied by finder patterns\n * and are not therefore used for alignment patterns.\n *\n * var pos = getPositions(7)\n * // [[6,22], [22,6], [22,22], [22,38], [38,22], [38,38]]\n *\n * @param  {Number} version QR Code version\n * @return {Array}          Array of coordinates\n */\nexports.getPositions = function getPositions (version) {\n  var coords = []\n  var pos = exports.getRowColCoords(version)\n  var posLength = pos.length\n\n  for (var i = 0; i < posLength; i++) {\n    for (var j = 0; j < posLength; j++) {\n      // Skip if position is occupied by finder patterns\n      if ((i === 0 && j === 0) ||             // top-left\n          (i === 0 && j === posLength - 1) || // bottom-left\n          (i === posLength - 1 && j === 0)) { // top-right\n        continue\n      }\n\n      coords.push([pos[i], pos[j]])\n    }\n  }\n\n  return coords\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","getSymbolSize","getRowColCoords","exports.getRowColCoords","version","posCount","Math","floor","size","intervals","ceil","positions","i","push","reverse","getPositions","exports.getPositions","coords","pos","posLength","length","j"]
}
