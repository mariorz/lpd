{
"version":3,
"file":"module$node_modules$jsonify$lib$parse.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/jsonify/lib/parse.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$jsonify$lib$parse\"] = function(global,require,module,exports) {\nvar at, // The index of the current character\n    ch, // The current character\n    escapee = {\n        '\"':  '\"',\n        '\\\\': '\\\\',\n        '/':  '/',\n        b:    '\\b',\n        f:    '\\f',\n        n:    '\\n',\n        r:    '\\r',\n        t:    '\\t'\n    },\n    text,\n\n    error = function (m) {\n        // Call error when something is wrong.\n        throw {\n            name:    'SyntaxError',\n            message: m,\n            at:      at,\n            text:    text\n        };\n    },\n    \n    next = function (c) {\n        // If a c parameter is provided, verify that it matches the current character.\n        if (c && c !== ch) {\n            error(\"Expected '\" + c + \"' instead of '\" + ch + \"'\");\n        }\n        \n        // Get the next character. When there are no more characters,\n        // return the empty string.\n        \n        ch = text.charAt(at);\n        at += 1;\n        return ch;\n    },\n    \n    number = function () {\n        // Parse a number value.\n        var number,\n            string = '';\n        \n        if (ch === '-') {\n            string = '-';\n            next('-');\n        }\n        while (ch >= '0' && ch <= '9') {\n            string += ch;\n            next();\n        }\n        if (ch === '.') {\n            string += '.';\n            while (next() && ch >= '0' && ch <= '9') {\n                string += ch;\n            }\n        }\n        if (ch === 'e' || ch === 'E') {\n            string += ch;\n            next();\n            if (ch === '-' || ch === '+') {\n                string += ch;\n                next();\n            }\n            while (ch >= '0' && ch <= '9') {\n                string += ch;\n                next();\n            }\n        }\n        number = +string;\n        if (!isFinite(number)) {\n            error(\"Bad number\");\n        } else {\n            return number;\n        }\n    },\n    \n    string = function () {\n        // Parse a string value.\n        var hex,\n            i,\n            string = '',\n            uffff;\n        \n        // When parsing for string values, we must look for \" and \\ characters.\n        if (ch === '\"') {\n            while (next()) {\n                if (ch === '\"') {\n                    next();\n                    return string;\n                } else if (ch === '\\\\') {\n                    next();\n                    if (ch === 'u') {\n                        uffff = 0;\n                        for (i = 0; i < 4; i += 1) {\n                            hex = parseInt(next(), 16);\n                            if (!isFinite(hex)) {\n                                break;\n                            }\n                            uffff = uffff * 16 + hex;\n                        }\n                        string += String.fromCharCode(uffff);\n                    } else if (typeof escapee[ch] === 'string') {\n                        string += escapee[ch];\n                    } else {\n                        break;\n                    }\n                } else {\n                    string += ch;\n                }\n            }\n        }\n        error(\"Bad string\");\n    },\n\n    white = function () {\n\n// Skip whitespace.\n\n        while (ch && ch <= ' ') {\n            next();\n        }\n    },\n\n    word = function () {\n\n// true, false, or null.\n\n        switch (ch) {\n        case 't':\n            next('t');\n            next('r');\n            next('u');\n            next('e');\n            return true;\n        case 'f':\n            next('f');\n            next('a');\n            next('l');\n            next('s');\n            next('e');\n            return false;\n        case 'n':\n            next('n');\n            next('u');\n            next('l');\n            next('l');\n            return null;\n        }\n        error(\"Unexpected '\" + ch + \"'\");\n    },\n\n    value,  // Place holder for the value function.\n\n    array = function () {\n\n// Parse an array value.\n\n        var array = [];\n\n        if (ch === '[') {\n            next('[');\n            white();\n            if (ch === ']') {\n                next(']');\n                return array;   // empty array\n            }\n            while (ch) {\n                array.push(value());\n                white();\n                if (ch === ']') {\n                    next(']');\n                    return array;\n                }\n                next(',');\n                white();\n            }\n        }\n        error(\"Bad array\");\n    },\n\n    object = function () {\n\n// Parse an object value.\n\n        var key,\n            object = {};\n\n        if (ch === '{') {\n            next('{');\n            white();\n            if (ch === '}') {\n                next('}');\n                return object;   // empty object\n            }\n            while (ch) {\n                key = string();\n                white();\n                next(':');\n                if (Object.hasOwnProperty.call(object, key)) {\n                    error('Duplicate key \"' + key + '\"');\n                }\n                object[key] = value();\n                white();\n                if (ch === '}') {\n                    next('}');\n                    return object;\n                }\n                next(',');\n                white();\n            }\n        }\n        error(\"Bad object\");\n    };\n\nvalue = function () {\n\n// Parse a JSON value. It could be an object, an array, a string, a number,\n// or a word.\n\n    white();\n    switch (ch) {\n    case '{':\n        return object();\n    case '[':\n        return array();\n    case '\"':\n        return string();\n    case '-':\n        return number();\n    default:\n        return ch >= '0' && ch <= '9' ? number() : word();\n    }\n};\n\n// Return the json_parse function. It will have access to all of the above\n// functions and variables.\n\nmodule.exports = function (source, reviver) {\n    var result;\n    \n    text = source;\n    at = 0;\n    ch = ' ';\n    result = value();\n    white();\n    if (ch) {\n        error(\"Syntax error\");\n    }\n\n    // If there is a reviver function, we recursively walk the new structure,\n    // passing each name/value pair to the reviver function for possible\n    // transformation, starting with a temporary root object that holds the result\n    // in an empty key. If there is not a reviver function, we simply return the\n    // result.\n\n    return typeof reviver === 'function' ? (function walk(holder, key) {\n        var k, v, value = holder[key];\n        if (value && typeof value === 'object') {\n            for (k in value) {\n                if (Object.prototype.hasOwnProperty.call(value, k)) {\n                    v = walk(value, k);\n                    if (v !== undefined) {\n                        value[k] = v;\n                    } else {\n                        delete value[k];\n                    }\n                }\n            }\n        }\n        return reviver.call(holder, key, value);\n    }({'': result}, '')) : result;\n};\n\n};"],
"names":["shadow$provide","global","require","module","exports","at","ch","escapee","b","f","n","r","t","text","error","m","name","message","next","c","charAt","number","string","isFinite","i","uffff","hex","parseInt","String","fromCharCode","white","word","value","object","key","Object","hasOwnProperty","call","array","push","module.exports","source","reviver","result","walk","holder","k","prototype","v","undefined"]
}
