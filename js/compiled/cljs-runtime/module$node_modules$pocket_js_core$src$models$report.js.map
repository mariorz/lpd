{
"version":3,
"file":"module$node_modules$pocket_js_core$src$models$report.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAe,oDAAf,CAAyE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CACjH,MAAMC,MAAQH,OAAA,CAAQ,iCAAR,CAAd,CACMI,UAAYJ,OAAA,CAAQ,wDAAR,CAQlB,MAAMK,OAAN,CAQEC,WAAW,CAACC,EAAD,CAAKC,OAAL,CAAcC,aAAd,CAA6B,CACxC,IAAA,CAAKF,EAAL,CAAUA,EACJ,KAAA,CAAKC,OAAL,CAAeA,OACf,KAAA,CAAKC,aAAL,CAAqBA,aAHa,CAWtCC,MAAM,EAAE,CACN,MAAO,CACL,GAAM,IAAN,CAAWH,EADN,CAEL,QAAW,IAAX,CAAgBC,OAFX,CADD,CAYRG,OAAO,EAAE,CACP,IAAKC,IAAIA,QAAT,GAAqB,KAArB,CACE,GAAI,CAAC,IAAA,CAAKC,cAAL,CAAoBD,QAApB,CAAL,EAAwD,EAAxD,EAAsC,IAAA,CAAKA,QAAL,CAAtC,CACE,MAAO,CAAA,CAGX;MAAO,CAAA,CANA,CAeHE,UAAI,CAACC,QAAD,CAAU,CASd,IAAIC,SAAW,MARKb,KAAAc,CAAMC,MAAND,CAAa,CAC/BE,QAASf,SAATe,CAAmBC,eADY,CAE/BC,QAAS,IAATA,CAAcZ,aAAdY,CAA4BC,cAFG,CAG/BC,QAAS,CACP,eAAgB,kBADT,CAHsB,CAAbN,CAQC,CAAcO,IAAd,CAAmBpB,SAAnB,CAA6BqB,UAA7B,CACnB,IAAA,CAAKf,MAAL,EADmB,CAIrB,IAAuB,GAAvB,EAAIM,QAAJ,CAAaU,MAAb,EAA+C,IAA/C,EAA8BV,QAA9B,CAAuCW,IAAvC,CACE,GAAIZ,QAAJ,CACEA,QAAA,CAAS,IAAT,CAAeC,QAAf,CAAwBW,IAAxB,CADF,KAIA,OAAOX,SAAP,CAAgBW,IALlB,KAOE,IAAIZ,QAAJ,CACEA,QAAA,CAAaa,KAAJ,CAAU,oCAAV,CAAiDZ,QAAjD,CAA0DW,IAA1D,CAAT,CADF,KAIA,OAAWC,MAAJ,CAAU,oCAAV,CAAiDZ,QAAjD,CAA0DW,IAA1D,CAxBK,CA9CxB,CA2EA1B,MAAA,CAAOC,OAAP;AAAiB,CAChBG,MADgB,CArFgG;",
"sources":["node_modules/pocket-js-core/src/models/report.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pocket_js_core$src$models$report\"] = function(global,require,module,exports) {\nconst axios = require('axios');\nconst constants = require(\"../utils/constants.js\");\n\n// Report\n/**\n *\n *\n * @class Report\n */\nclass Report {\n\t/**\n   * Creates an instance of Report.\n   * @param {String} ip - Internet protocol address of the node.\n   * @param {String} message - Message describing the report.\n   * @param {Configuration} configuration - Configuration object.\n   * @memberof Report\n   */\n  constructor(ip, message, configuration) {\n\t\tthis.ip = ip;\n        this.message = message;\n        this.configuration = configuration;\n    }\n    /**\n     *\n\t   * Parse properties to a JSON Object.\n\t   * @returns {JSON} - A JSON Object.\n     * @memberof Report\n     */\n    toJSON(){\n      return {\n        \"IP\": this.ip,\n        \"Message\": this.message\n      }\n    }\n    /**\n     *\n\t   * Verifies if the Report is valid\n\t   * @returns {boolean} - True or false\n     * @memberof Report\n     */\n    isValid(){\n      for (var property in this) {\n        if (!this.hasOwnProperty(property) || this[property] == \"\") {\n          return false;\n        }\n      }\n      return true;\n    }\n    /**\n     *\n     * Sends a report to the dispatcher.\n     * @param {callback} callback\n     * @returns {String} - An string with the result.\n     * @memberof Report\n     */\n    async send(callback){\n        const axiosInstance = axios.create({\n            baseURL: constants.dispatchNodeURL,\n            timeout: this.configuration.requestTimeOut,\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          });\n    \n          var response = await axiosInstance.post(constants.reportPath,\n            this.toJSON()\n          );\n    \n          if (response.status == 200 && response.data != null) {\n            if (callback) {\n              callback(null, response.data);\n              return;\n            }\n            return response.data;\n          } else {\n            if (callback) {\n              callback(new Error(\"Failed to send report with error: \" + response.data));\n              return;\n            }\n            return new Error(\"Failed to send report with error: \" + response.data);\n          }\n    }\n}\n\nmodule.exports = {\n\tReport\n}\n};"],
"names":["shadow$provide","global","require","module","exports","axios","constants","Report","constructor","ip","message","configuration","toJSON","isValid","property","hasOwnProperty","send","callback","response","axiosInstance","create","baseURL","dispatchNodeURL","timeout","requestTimeOut","headers","post","reportPath","status","data","Error"]
}
