{"version":3,"sources":["revert/views.cljs"],"mappings":"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","names":["revert.views/submit-component","value","e","revert.utils/set-hash!","cljs.core/deref","revert.views/atom-input","cljs.core._EQ_","t","cljs.core/reset!","revert.views/app-shell","revert.common-views/site-header","revert.common-views/footer-links","input","cljs.core.atom","revert.views/app-landing","revert.common-views/connecting-component","p__90401","vec__90402","cljs.core.nth","revert.views/snapshot->symbols","token0","token1","revert.views/toggle-exited","re-frame.core/dispatch","revert.views/open-staking-addresses","lp","cljs.core.filter","cljs.core/some?","cljs.core.map","p1__90405#","bignumber.core/>","revert.utils/bn","revert.views/closed-staking-addresses","p1__90406#","cljs.core.not_EQ_","cljs.core/contains?","revert.pools/proxys-out","clojure.string/lower-case","cljs.core/not","revert.views/unidentified-destinations","posopen","posclosed","dests","cljs.core/set","known","cljs.core.concat","cljs.core/vec","cljs.core/first","clojure.data/diff","p__90407","vec__90408","revert.views/token-qty","token","qty","e90411","js/Error","err","p__90412","vec__90413","revert.views/qty-and-value","tokens","e90416","bignumber.core/*","revert.tokens/symbol->price","p__90417","vec__90418","revert.views/asset-qty","e90421","revert.views/signed-qty","n","s","revert.views/big-signed-qty","e90422","or__4126__auto__","bignumber.core/>=","cljs.core.subs","revert.views/big-signed-pct","e90423","revert.views/big-unsigned-qty","e90424","revert.views/big-unsigned-strqty","revert.views/big-nil","revert.views/toggle-logs","x","revert.views/toggle-lp-visible","lp-address","revert.views/get-token","js/window.location.pathname","js/window.location.hash","js/window.location.search","revert.views/make-history","js/window","js/goog.History","revert.views/render-tx-link","tx","revert.views/handle-url-change","js/window.scrollTo","js/revert","js/revert.views","js/revert.views.history","revert.views/history","G__90427","p1__90426#","goog.events/listen","goog.history.EventType/NAVIGATE","revert.views/nav!","revert.views/render-address-link","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","revert.views/render-lp-pos","p__90442","map__90443","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","seq90435","G__90436","cljs.core/next","G__90437","G__90438","G__90439","G__90440","G__90441","self__4723__auto__","lp-pos","pool-hist","pool","blocks-ts","expanded-logs","ignored","exited","e90445","stakes","farms","rewards","cljs.core.mapcat","claimed","claim-txs","cljs.core.distinct","lp-symbols","pair-name","clojure.string.join","lp-tokens","open-staking","closed-staking","unknown-dests","rewards-unclaimed","revert.lp-positions/unclaimed-rewards","unclaimed-rewards-str","p1__90428#","p__90446","vec__90447","unclaimed-rewards-str'","cljs.core/empty?","rewards-claimed","revert.lp-positions/claimed-rewards","claimed-rewards-str","p1__90429#","p__90450","vec__90451","claimed-rewards-str'","revert.lp-positions/all-paid-rewards","total-rewards","cljs.core.merge_with","bignumber.core/+","total-rewards-str","p1__90430#","p__90454","vec__90455","total-rewards-str'","pool-hist'","cljs.core.into","cljs.core/vals","cljs.core/second","prices0","cljs.core/reverse","prices1","price-divs","cljs.core/identity","gas-cost-eth","revert.lp-positions/fees-paid","eth-price","gas-cost-usd","exchange","exchange-symbol","G__90458","invested","revert.lp-positions/invested-assets","invested-named","cljs.core/zipmap","p1__90431#","revert.tokens/token-symbol","cljs.core/keys","withdrawn","revert.lp-positions/withdrawan-assets","withdrawn-named","p1__90432#","current","revert.lp-positions/current-assets","current-named","p1__90433#","diffs","revert.lp-positions/diff-assets","diffs-named","p1__90434#","position-apr","revert.lp-positions/total-apr","re-com.core/md-circle-icon-button","revert.lp-positions/assets-value","revert.lp-positions/pool-pnl","revert.lp-positions/total-pnl","bignumber.core/=","revert.common-views/spark-line","revert.common-views/spark-line-bars","cljs.core.comp","cljs.core/count","revert.common-views/separator-str","revert.views/render-dashboard","pool-histories","re_frame.core.subscribe","pools","open-positions","closed-positions","ignored-positions","include-exited","included-positions","revert.lp-positions/assets-value-all","revert.lp-positions/gas-costs-all","revert.lp-positions/rewards-all","revert.lp-positions/pool-pnl-all","revert.lp-positions/total-pnl-all","p1__90459#","p1__90460#","revert.views.render_lp_pos","p1__90461#","revert.views/account-dashboard","account","pool-assets","pair-symbols","loading-msgs","all-loaded","revert.views/pool-charts","pool-name","revert.pools/pool-name","exchange-emoji","revert.pools/exchange-emoji","plot","revert.charts/make-line-plot-concat","oz.core/vega-lite","revert.views/pool-history","address","pool-address","pool-days","ph","loading","base-url","pool-url","revert.views/main-panel","showing","re-com.core/v-box","js/goog.DEBUG","G__90462","cljs.core/Keyword","revert.demo-views/pos-demo"],"sourcesContent":["(ns revert.views\n  (:import [goog.history Html5History EventType]\n           [goog History])\n  (:require\n   [reagent.core :as reagent]\n   [re-frame.core :as re-frame]\n   [re-com.core :as re-com :refer [at h-box v-box box gap line scroller border label p title alert-box h-split\n                                   md-circle-icon-button]]\n   [oz.core :as oz]\n   [bignumber.js :as BigNumber]\n   [react-sparklines :as sparklines]\n   [goog.uri.utils :as uri]\n   [goog.events :as events]\n   [goog.history.EventType :as EventType]\n   [revert.utils :as u]\n   [revert.subs :as subs]\n   [revert.pools :as pools]\n   [revert.tokens :as tokens]\n   [revert.charts :as charts]\n   [revert.common-views :as cv]\n   [revert.demo-views :as dv]\n   [revert.lp-positions :as lp-positions]\n   [bignumber.core :as bn]))\n\n\n\n\n(defn submit-component [value]\n  [:input {:type \"button\" :value \"GO\"\n           :class \"landing-go-button\"\n           :on-click (fn [e]\n                       (.preventDefault e)\n                       (u/set-hash! (str \"/account/\" @value)))}])\n\n\n(defn atom-input [value]\n  [:div\n   [:br]\n   [:input {:type \"text\" :size \"44\"\n            :class \"landing-input\"\n            :placeholder \"Enter Ethereum address or ENS domain\"\n            :on-key-down (fn [e]\n                           (if (= (.-key e) \"Enter\")\n                             (do (.preventDefault e)\n                                 (u/set-hash! (str \"/account/\" @value)))))\n            :on-change (fn [t]\n                         (reset! value (-> t .-target .-value)))}]\n   (submit-component value)\n   [:br]\n   [:br]])\n\n\n(defn app-shell []\n  [:div {:class \"app\"}\n   [cv/site-header]\n   [:div {:class \"app-inner\"}\n    [:div {:style {:min-height \"400px\"\n                  :margin-bottom \"0px\"}}]]\n   [cv/footer-links]])\n\n\n(let [input (atom-input (atom \"\"))]\n  (defn app-landing []\n    [:div {:class \"app\"}\n     [cv/site-header]\n     [:div {:class \"app-inner\"}\n      [:br]\n      [:div {:class \"landing-box\"}\n       [:div {:style {:flex-direction \"row\"\n                      :display \"flex\"}}\n        [:div {:class \"landing-banner\"} \"Actionable analytics for DeFi liquidity providers_\"]\n        ]\n       [:div {:style {:margin-top \"40px\"}} (cv/connecting-component)]\n       [:div {:style {:margin-top \"20px\"}} \"or\"]\n       input\n       ]]\n     [cv/footer-links]]))\n\n(defn snapshot->symbols\n  [[token0 token1]]\n  (str \"- \"\n       token0\n       \"/\"\n       token1))\n\n(defn toggle-exited\n  []\n  (re-frame/dispatch [:toggle-exited]))\n\n\n(defn open-staking-addresses\n  [lp]\n  (filter\n   some?\n   (map :staking-address\n        (filter #(bignumber.core/> (:lp-shares %) (u/bn \"0.0\"))\n                (:stakings lp)))))\n\n(defn closed-staking-addresses\n  [lp]\n  (filter\n   some?\n   (map :staking-address\n        (filter #(and\n                  (not= nil (:lp-shares %))\n                  (not (contains?\n                        pools/proxys-out\n                        (clojure.string/lower-case (:staking-address %))))\n                  (not (bn/> (:lp-shares %) (u/bn \"0.0\"))))\n                (:stakings lp)))))\n\n\n(defn unidentified-destinations\n  [lp]\n  (let [posopen (open-staking-addresses lp)\n        posclosed (closed-staking-addresses lp)\n        dests (set (map clojure.string/lower-case\n                        (map :to (:txs-out lp))))\n        known (set (map clojure.string/lower-case\n                        (concat posopen posclosed\n                                (vec pools/proxys-out))))]\n    (vec (first (clojure.data/diff dests known)))))\n\n(defn token-qty\n  [[token qty]]\n  (try\n    (str token \" \" (. qty toFormat 6) \" \")\n    (catch js/Error err)))\n\n\n\n(defn qty-and-value\n  [[token qty] tokens]\n  (try\n    [:div {:key (str token \"-qty-and-val-\" (str qty))} token \" \" (. qty toFormat 6)\n     \" ($\" (. (bn/* qty (tokens/symbol->price token tokens \"usd\")) toFormat 2)  \")\" [:br]]\n    (catch js/Error err)))\n\n\n(defn asset-qty\n  [[token qty]]\n  (try\n    [:div {:key (str token \"-asset-qty-\" (str qty))} token \" \" (. qty toFormat 6) [:br]]\n    (catch js/Error err)))\n\n(defn signed-qty\n  [n]\n  (let [s (. n toFormat 2)]\n    (if (>= n 0)\n      [:span {:class \"pos\"} s \" USD\"]\n      [:span {:class \"neg\"} s \" USD\"])))\n\n(defn big-signed-qty\n  [n]\n  (let [s (try (. n toFormat 2)\n               (catch js/Error err \"0.00\"))]\n    (if (or (bn/>= n (u/bn \"0.00\")) (= s \"0.00\"))\n      [:div {:class \"bigpos\"} (str\"$\"s)]\n      [:div {:class \"bigneg\"} (str \"-$\" (subs s 1))])))\n\n(defn big-signed-pct\n  [n]\n  (let [s (try (. n toFormat 2)\n               (catch js/Error err \"0.00\"))]\n    (if (or (bn/>= n (u/bn \"0.00\")) (= s \"0.00\"))\n      [:div {:class \"bigpos\"} (str s \"%\")]\n      [:div {:class \"bigneg\"} (str \"-\" (subs s 1) \"%\")])))\n\n\n(defn big-unsigned-qty\n  [n]\n  (try (let [s (. n toFormat 2)]\n         [:div {:class \"bigneutral\"} (str\"$\"s)])\n       (catch js/Error err  [:div {:class \"bigneutral\"} (str\"$0.00\")])))\n\n\n(defn big-unsigned-strqty\n  [s]\n  [:div {:class \"bigneutral\"} (str \"$\"s)])\n\n\n(defn big-nil\n  [s]\n  [:div {:class \"bigneutral\"} \"--\"])\n\n\n\n(defn toggle-logs\n  [x]\n  (re-frame/dispatch [:toggle-logs x]))\n\n\n\n(defn toggle-lp-visible\n  [lp-address]\n  (re-frame/dispatch [:toggle-ignore lp-address]))\n\n\n\n(defn get-token []\n    (if false #_(Html5History.isSupported)\n    (str js/window.location.pathname js/window.location.search)\n    (if (= js/window.location.pathname \"/\")\n      (.substring js/window.location.hash 1)\n      (str js/window.location.pathname js/window.location.search))))\n\n(defn make-history []\n  (if false #_(Html5History.isSupported)\n    (doto (Html5History.)\n      (.setPathPrefix (str js/window.location.protocol\n                           \"//\"\n                           js/window.location.host))\n      (.setUseFragment false))\n    (if (not= \"/\" js/window.location.pathname)\n      (aset js/window \"location\" (str \"/#\" (get-token)))\n      (History.))))\n\n\n(defn render-tx-link\n  [tx]\n  [:div {:key (str tx \"-tx-link\") :style {:display \"inline\"}}\n   [:a {:href (str \"https://etherscan.io/tx/\" tx)}\n    (subs tx 0 6)] \" \"])\n\n\n\n\n(defn handle-url-change [^js/Event e]\n  ;; log the event object to console for inspection\n  #_(js/console.log e)\n  ;; and let's see the token\n  #_(js/console.log (str \"Navigating: \" (get-token)))\n  ;; we are checking if this event is due to user action,\n  ;; such as click a link, a back button, etc.\n  ;; as opposed to programmatically setting the URL with the API\n  (when-not (.-isNavigation e)\n    ;; in this case, we're setting it\n    #_(js/console.log \"Token set programmatically\")\n    ;; let's scroll to the top to simulate a navigation\n    (js/window.scrollTo 0 0))\n  ;; dispatch on the token\n  #_(secretary/dispatch! (get-token)))\n\n\n(defonce history\n  (doto (make-history)\n    (goog.events/listen EventType.NAVIGATE\n                        ;; wrap in a fn to allow live reloading\n                        #(handle-url-change %))\n    (.setEnabled true)))\n\n(defn nav! [token]\n  (.setToken history token))\n\n(defn render-address-link\n  [tx]\n  [:div {:key (str tx \"-addres-link\") :style {:display \"inline\"}}\n   [:a {:href (str \"https://etherscan.io/address/\" tx)}\n    (subs tx 0 6)] \" \"])\n\n\n(defn render-lp-pos\n  [lp-pos pool-hist pool tokens blocks-ts expanded-logs\n   & {:keys [ignored exited] :or {ignored false exited false}}]\n  (try\n    (if (nil? (:token0-symbol (first pool-hist)))\n      nil\n      (let [stakes (:stakings lp-pos)\n            farms (map :staking-address stakes)\n            rewards (mapcat :rewards stakes)\n            claimed (mapcat :paid-rewards rewards)\n            claim-txs (distinct (map :tx-hash claimed))\n            lp-symbols [(:token0-symbol (first pool-hist))\n                        (:token1-symbol (first pool-hist))]\n            pair-name (clojure.string/join \"/\" lp-symbols)\n            lp-tokens (:lp-shares lp-pos)\n            open-staking (open-staking-addresses lp-pos)\n            closed-staking (closed-staking-addresses lp-pos)\n            unknown-dests (unidentified-destinations lp-pos)\n            rewards-unclaimed (lp-positions/unclaimed-rewards lp-pos tokens)\n            unclaimed-rewards-str (map #(qty-and-value % tokens)\n                                       (filter (fn [[token qty]] (bn/> qty (u/bn 0)))\n                                               rewards-unclaimed))\n\n            unclaimed-rewards-str' (if (empty? unclaimed-rewards-str)\n                                     \"0.000000\"\n                                     unclaimed-rewards-str)\n            rewards-claimed (lp-positions/claimed-rewards lp-pos tokens)\n            claimed-rewards-str (map #(qty-and-value % tokens)\n                                       (filter (fn [[token qty]] (bn/> qty (u/bn 0)))\n                                               rewards-claimed))\n\n            claimed-rewards-str' (if (empty? claimed-rewards-str)\n                                   \"0.000000\"\n                                   claimed-rewards-str)\n\n            claim-txs (lp-positions/all-paid-rewards lp-pos)\n            total-rewards (merge-with bignumber.core/+ rewards-claimed rewards-unclaimed)\n            total-rewards-str (map #(qty-and-value % tokens)\n                                     (filter (fn [[token qty]] (bn/> qty (u/bn 0)))\n                                             total-rewards))\n\n            total-rewards-str' (if (empty? total-rewards-str)\n                                 \"0.000000 ($0.00)\"\n                                 total-rewards-str)\n\n            pool-hist' (into pool-hist\n                             {:token0-prices\n                              (concat [(get (first (vals (:prices lp-pos))) \"usd\")]\n                                      (:token0-prices pool-hist))\n                              :token1-prices\n                              (concat [(get (second (vals (:prices lp-pos))) \"usd\")]\n                                      (:token1-prices pool-hist))})\n            prices0 (reverse (concat (map :token0-price pool-hist)) #_[current-price0])\n            prices1 (reverse (concat (map :token1-price pool-hist)) #_[current-price1])\n            price-divs (identity (map :price-divergence pool-hist))\n            gas-cost-eth (lp-positions/fees-paid lp-pos)\n            eth-price (tokens/symbol->price \"WETH\" tokens \"usd\")\n            gas-cost-usd (bn/* gas-cost-eth eth-price)\n            exchange (:exchange pool)\n            exchange-symbol (case exchange\n                              \"uniswap\" \"\ud83e\udd84\"\n                              \"sushiswap\" \"\ud83c\udf63\"\n                              \"\")\n            invested (lp-positions/invested-assets lp-pos)\n            invested-named (zipmap (map #(tokens/token-symbol % tokens) (keys invested))\n                                   (vals invested))\n            withdrawn (lp-positions/withdrawan-assets lp-pos pool)\n            withdrawn-named (zipmap (map #(tokens/token-symbol % tokens) (keys withdrawn))\n                                    (vals withdrawn))\n            current (lp-positions/current-assets lp-pos pool)\n            current-named (zipmap (map #(tokens/token-symbol % tokens) (keys current))\n                                  (vals current))\n            diffs (lp-positions/diff-assets lp-pos pool)\n            diffs-named (zipmap (map #(tokens/token-symbol % tokens) (keys diffs))\n                                (vals diffs))\n            position-apr (lp-positions/total-apr lp-pos pool tokens blocks-ts)]\n        [:div {:class \"lp-inner-box\"\n               :id (str pair-name \"-\" exchange \"-title\")\n               :key (str pair-name \"-\" exchange \"-title\")\n               :style (when ignored  {:opacity 0.5})}\n         [:div {:class \"lp-pos-header-ignore-button\"}\n          [md-circle-icon-button\n           :emphasise? ignored\n           :md-icon-name (if ignored \"zmdi-eye\" \"zmdi-eye-off\")\n           :size :smaller\n           :on-click nil\n           :tooltip (if ignored \"Include pool\" \"Ignore pool\")\n           :on-click #(toggle-lp-visible (:address lp-pos))\n           :tooltip-position :right-center\n           :class \"noclass\"\n           :style {:color \"\" :padding-bottom \"20px\"}]]\n         [:div {:class \"lp-pos-header\"}\n          [:div {:class \"lp-pos-header-segment1\"}\n           [:div {:class \"lp-pos-header-subtitle\"} \"exchange_pool_\" ]\n           [:div {:class \"lp-title\"} (str exchange-symbol \" \" pair-name)]]\n          [:div {:class \"lp-pos-header-segment2\"}\n           [:div {:class \"lp-pos-header-subtitle\"} \"pool_assets_value_\" ]\n             [big-unsigned-qty (lp-positions/assets-value lp-pos pool tokens)]]\n          [:div {:class \"lp-pos-header-segment3\"}\n           [:div {:class \"lp-pos-header-subtitle\"} \"pool_pnl_\" ]\n           [big-signed-qty (lp-positions/pool-pnl lp-pos pool tokens)]]\n          [:div {:class \"lp-pos-header-segment4\"}\n           [:div {:class \"lp-pos-header-subtitle\"} \"total_pnl_\" ]\n           [big-signed-qty (lp-positions/total-pnl lp-pos pool tokens)]]\n          [:div {:class \"lp-pos-header-segment5\"}\n           [:div {:class \"lp-pos-header-subtitle\"} \"apr_\" ]\n           (if (or exited (bn/= position-apr (u/bn \"0.00\")))\n             [big-nil]\n             [big-signed-pct position-apr])]\n          ]\n         [:hr {:class \"lp-header-divider\"}]\n         [:div {:class \"lp-pos-header\"}\n          [:div {:class \"lp-pos-info-segment1\"}\n           [:div {:class \"lp-pos-assets\"}\n            [:div {:class \"lp-pos-subtitle\"} \"current_assets_\" ]\n            [:div {:class \"lp-assets\"}  (map asset-qty current-named)]]\n           [:div {:class \"lp-pos-assets\"}\n            [:div {:class \"lp-pos-subtitle\"} \"invested_assets_\" ]\n            [:div {:class \"lp-assets\"}  (map asset-qty invested-named)]]\n           [:div {:class \"lp-pos-assets\"}\n            [:div {:class \"lp-pos-subtitle\"} \"withdrawn_\" ]\n            [:div {:class \"lp-assets\"}  (map asset-qty withdrawn-named)]]\n           [:div {:class \"lp-pos-assets\"}\n            [:div {:class \"lp-pos-subtitle\"} \"diffs_\" ]\n            [:div {:class \"lp-assets\"}  (map asset-qty diffs-named)]]]\n          [:div {:class \"lp-pos-info-segment2\"}\n           [:div {:class \"lp-pos-assets\"}\n            [:div {:class \"lp-pos-subtitle\"} \"gas_costs_\" ]\n            [:div {:class \"lp-assets\"}\n             \"ETH \" (. gas-cost-eth toFormat 6)\n             \" ($\"(. gas-cost-usd toFormat 2) \")\"]]\n           [:div {:class \"lp-pos-assets\"}\n            [:div {:class \"lp-pos-subtitle\"} \"total_rewards_\" ]\n            [:div {:class \"lp-assets\"}\n             total-rewards-str']]\n           [:div {:class \"lp-pos-assets\"}\n            [:div {:class \"lp-pos-subtitle\"} \"unclaimed_rewards_\" ]\n            [:div {:class \"lp-assets\"}\n             unclaimed-rewards-str']]\n           [:div {:class \"lp-pos-assets\"}\n            [:div {:class \"lp-pos-subtitle\"} \"claimed_rewards_\" ]\n            [:div {:class \"lp-assets\"}\n             claimed-rewards-str']]\n           [:div {:class \"lp-pos-assets\"}\n            [:div {:class \"lp-pos-subtitle\"} \"lp_tokens_\" ]\n            [:div {:class \"lp-assets\"}\n             (. (:lp-shares lp-pos) toFormat 18)]]]\n          [:div {:class \"lp-pos-info-segment3\" :style {:margin-right \"0px\"}}\n           [:div {:class \"lp-pos-assets\" :style {:margin-right \"40px\"}}\n            [:div {:class \"lp-pos-subtitle\"} \"v/r_ratio_30d\" ]\n            [:div {:class \"lp-assets\"}\n             [cv/spark-line (reverse (map :vol-res-ratio pool-hist))]]]\n           [:div {:class \"lp-pos-assets\" :style {:margin-right \"40px\"}}\n            [:div {:class \"lp-pos-subtitle\"} \"reserves_30d\" ]\n            [:div {:class \"lp-assets\"}\n             [cv/spark-line (reverse (map :reserve-usd pool-hist)) :currency true]]]\n           [:div {:class \"lp-pos-assets\" :style {:margin-right \"40px\"}}\n            [:div {:class \"lp-pos-subtitle\"} \"volume_30d\" ]\n            [:div {:class \"lp-assets\"}\n             [cv/spark-line-bars (reverse (map :volume-usd-derived pool-hist))]]]]\n          [:div {:class \"lp-pos-info-segment4\"}\n           [:div {:class \"lp-pos-assets\" :style {:margin-right \"40px\"}}\n            [:div {:class \"lp-pos-subtitle\"} \"price_divergence_30d\" ]\n            [:div {:class \"lp-assets\"}\n             [cv/spark-line (reverse price-divs) :percentage true]]]\n           [:div {:class \"lp-pos-assets\" :style {:margin-right \"40px\"}}\n            [:div {:class \"lp-pos-subtitle\"} \"price0_30d\" ]\n            [:div {:class \"lp-assets\"}\n             [cv/spark-line prices0 :currency true]]]\n           [:div {:class \"lp-pos-assets\" :style {:margin-right \"40px\"}}\n            [:div {:class \"lp-pos-subtitle\"} \"price1_30d\" ]\n            [:div {:class \"lp-assets\"}\n             [cv/spark-line prices1 :currency true]]]]]\n         [:div {:class \"lp-pos-header\"}\n          [:div {:class \"lp-pos-header-segment-left\"}\n           [:a {:on-click (fn [e]\n                            (.preventDefault e)\n                            (toggle-logs (:address lp-pos)))\n                :href \"#\"\n                :class \"lp-pos-link\"}\n            \"position_log_\"]]\n          [:div {:class \"lp-pos-header-segment-right\"}\n           [:a {:href (str \"#/pool/\" (:address lp-pos))\n                ;;:on-click (fn [e]\n                ;;            (.preventDefault e)\n                ;;            #_(nav! (str \"/pool/\" (:address lp-pos))))\n                :class \"lp-pos-link\"} \"pool_history_\"]]]\n         (if (contains? expanded-logs (:address lp-pos))\n           [:div {:class \"pos-log\"}\n            [:hr {:class \"lp-header-divider\"}]\n            [:div  {:id (str pair-name \"-m\")}\n             \"Mints: \" (map (comp render-tx-link :tx-hash)\n                            (:mints lp-pos))\n             #_[:br]]\n            (if (< 0 (count (:burns lp-pos)))\n              [:div  {:id (str pair-name \"-b\")}\n               \"Burns: \" (map (comp render-tx-link :tx-hash)\n                              (:burns lp-pos))\n               #_[:br]])\n            (if (< 0 (count (:txs-out lp-pos)))\n              [:div  {:id (str pair-name \"-txs-out\")}\n               \"LP transfers out: \" (map (comp render-tx-link :txhash)\n                                         (:txs-out lp-pos))\n               #_[:br]])\n            (if (not (empty? unknown-dests))\n              [:div  {:id (str pair-name \"-unknown-dests\")\n                      :style {:color \"orange\"}}\n               \"Unidentified LP token recipients: \"\n               (map render-address-link unknown-dests)])\n            (if (< 0 (count claim-txs))\n              [:div  {:id (str pair-name \"-cr\")}\n               \"Claimed Rewards: \" #_(map token-qty\n                                          (:claimed (:reward-breakdown lp-pos)))\n               (map (comp render-tx-link :tx-hash) claim-txs)\n               #_[:br]])\n            (if (not (empty? open-staking))\n              [:div  {:id (str pair-name \"-open-stakes\")}\n               \"LPs tokens currently staked at: \"\n               (map render-address-link open-staking)])\n            (if (not (empty? closed-staking))\n              [:div  {:id (str pair-name \"-closed-stakes\")}\n               \"LPs tokens previously staked at: \"\n               (map render-address-link closed-staking)])\n\n            #_[:div  {:id (str pair-name \"-p\")}\n               \"Prices: \" (map token-qty\n                               (zipmap (keys (:prices lp-pos))\n                                       (map (fn [m] (get m \"usd\")) (vals (:prices lp-pos)))))]])\n         #_[:div {:style {:padding-top \"20px\"}}\n            [:div {:id (str pair-name \"-pair\")} [:u pair-name \" 90d History\"]]\n            [oz.core/vega-lite (make-line-plot-concat\n                                (add-daily-pnl (reverse (make-line-points pool-hist))))]]\n         #_[render-pool-history pool-hist]\n         #_(if debug [d/DataFriskView {:lp lp :lp-pos lp-pos}])\n         [:div cv/separator-str]]))\n    (catch js/Error err nil)))\n\n\n(defn render-dashboard\n  []\n  (let [pool-histories @(re-frame/subscribe [:pool-histories])\n        expanded-logs  @(re-frame/subscribe [:expanded-logs])\n        pools @(re-frame/subscribe [:pools])\n        tokens @(re-frame/subscribe [:tokens])\n        blocks-ts @(re-frame/subscribe [:blocks-ts])\n        open-positions @(re-frame/subscribe [:open-lp-positions])\n        closed-positions  @(re-frame/subscribe [:closed-lp-positions])\n        ignored-positions  @(re-frame/subscribe [:ignored-lp-positions])\n        include-exited @(re-frame/subscribe [:include-exited])\n;;        include-exited true\n        included-positions (if include-exited\n                             (concat open-positions closed-positions)\n                             open-positions)]\n    [:div\n     [:div  {:style {:width \"100%\"}}\n      [:div {:class \"inner-box\"\n             :style {:margin-top \"0px\"\n                     :margin-bottom \"20px\"\n                     :color \"lightgray\"\n                     :font-style \"bold\"\n                     :font-family \"monospace\"}} \"Currently only tracking Uniswap and Sushiswap pools\"\n       [:div {:style {:float \"right\"\n                      :width \"50%\"\n                      :text-align \"right\"}}\n        [:a {:class \"lp-pos-link\"\n             :target \"_blank\"\n             :href \"https://157lkj525va.typeform.com/to/L16U1psx\"} (str \"report_an_issue_\")]]\n       ]\n      #_[:div {:class \"subtitle\" :style {:float \"left\" :width \"50%\"}}\n         (str \"total_returns_\")]\n\n      [:div {:class \"switcher\" :style {:float \"right\" :width \"50%\"\n                                       :text-align \"right\"}}\n       [:span {:class \"subtitle3\"} (str \"include_exited_positions \")]\n       [:label {:class \"switch\"}\n        [:input {:type \"checkbox\" :on-change toggle-exited}]\n        [:span {:class \"slider round\"}]]]]\n     (if (not (nil? included-positions))\n               [:div {:class \"inner-box\" :style {:display \"inline-block\" :width \"100%\"}}\n                [:div {:style {:width \"20%\" :display \"inline-block\"}}\n                 [:div {:class \"subtitle2\"} \"assets_value_\"]\n                 [big-unsigned-qty (lp-positions/assets-value-all included-positions pools tokens)]]\n                 [:div {:style {:width \"20%\" :display \"inline-block\"}}\n                  [:div {:class \"subtitle2\"} \"gas_costs_\" ]\n                  [big-unsigned-qty (lp-positions/gas-costs-all included-positions pools tokens)]]\n                [:div {:style {:width \"20%\" :display \"inline-block\"}}\n                 [:div {:class \"subtitle2\"} \"staking_rewards_\"]\n                 [big-unsigned-qty (lp-positions/rewards-all included-positions pools tokens)]]\n                [:div {:style {:width \"20%\" :display \"inline-block\"}}\n                 [:div {:class \"subtitle2\"} \"pnl_from_pools_\" ]\n                 [big-signed-qty (lp-positions/pool-pnl-all included-positions pools tokens)]]\n                [:div {:style {:width \"20%\" :display \"inline-block\"}}\n                 [:div {:class \"subtitle2\"} \"total_pnl_\"]\n                 [big-signed-qty (lp-positions/total-pnl-all included-positions pools tokens)]]\n                ])\n     [:div {:style {:clear \"both\"}}]\n     (if  true ;;(not (nil? (:total-pnl-all @app-state)))\n       [:div\n        [:br]\n        [:div {:class \"subtitle\"} (str  (count open-positions) \"_open_lp_positions_\")]\n        [:br]\n        (map #(render-lp-pos\n               %\n               (get pool-histories (:address %))\n               (get pools (:address %))\n               tokens\n               blocks-ts\n               expanded-logs)\n             open-positions)])\n     (if true\n       [:div\n        [:br]\n        [:div {:class \"subtitle\"} (str  (count closed-positions) \"_exited_lp_positions_\")]\n        [:br]\n        (map #(render-lp-pos\n               %\n               (get pool-histories (:address %))\n               (get pools (:address %))\n               tokens\n               blocks-ts\n               expanded-logs\n               :exited true)\n             closed-positions)])\n     (if (> (count ignored-positions) 0)\n       [:div\n        [:br]\n        [:div {:class \"subtitle\"} (str  (count ignored-positions) \"_ignored_lp_positions_\")]\n        [:br]\n        (map #(render-lp-pos\n               %\n               (get pool-histories (:address %))\n               (get pools (:address %))\n               tokens\n               blocks-ts\n               expanded-logs\n               :ignored true)\n             ignored-positions)])]))\n\n\n(defn account-dashboard\n  [account]\n  (let [pool-assets @(re-frame/subscribe [:pool-assets])\n        pair-symbols (map snapshot->symbols pool-assets)\n        loading-msgs (reverse @(re-frame/subscribe [:loading-msgs]))\n        all-loaded @(re-frame/subscribe [:all-loaded])]\n    [:div {:class \"app\"}\n     [cv/site-header]\n     [:div {:class \"app-inner\"}\n      [:br]\n      (if (not all-loaded)\n        [:div {:class \"inner-box\" :style {:min-height \"800px\"\n                                          :margin-top \"0px\"\n                                          :margin-bottom \"250px\"\n                                          :overflow \"visible\"}}\n         [:pre {:style {:display \"inline-block\"\n                        :overflow \"auto\"}}\n          \"Loading account's historic LP positions\"\n           (if (> (count loading-msgs) 0)\n             (str \"\\n\" (clojure.string/join \"\\n\" loading-msgs)))\n          [:span {:class \"animate-flicker\"}\n           \" ...\"]\n          \"\\n\"]]\n        [render-dashboard])]\n     [:div {:style {:margin-top \"250px\"}}\n      [cv/footer-links]]]))\n\n\n(defn pool-charts\n  [pool-hist]\n  (let [pool-name (pools/pool-name pool-hist)\n        exchange-emoji (pools/exchange-emoji pool-hist)\n        plot (charts/make-line-plot-concat pool-hist)]\n    [:div\n     [:div {:class \"subtitle\"\n            :id (str pool-name \"-pair\")}\n      (str exchange-emoji \" \" pool-name \" Pool History\")]\n     [:hr {:class \"lp-header-divider\"}]\n     [:div {:style {:margin-top \"20px\" :margin-bottom \"20px\"}}\n      [oz/vega-lite plot]]]))\n\n\n(defn pool-history [address]\n  (let [pool-histories @(re-frame/subscribe [:pool-histories])\n        pool-address @(re-frame/subscribe [:pool-address])\n        pool-days @(re-frame/subscribe [:pool-days])\n        ph (get pool-histories address)\n        loading @(re-frame/subscribe [:loading])\n        base-url (.. js/window -location -origin)\n        pool-url (str  base-url \"/#/pool/\" pool-address)]\n    [:div {:class \"app\"}\n     [cv/site-header]\n     [:div {:class \"app-inner\"}\n      [:br]\n      [:div {:class \"pool-days-selector\"}\n       [:span {:class (str \"pool-days-unselected\"\n                           (when (= pool-days 30)\n                             \" pool-days-selected\"))}\n        (if (not= pool-days 30)\n          [:a {:href (str pool-url \"/30\")} \"30d\"]\n          \"30d\")]\n       [:span {:class (str \"pool-days-unselected\"\n                           (when (= pool-days 60)\n                             \" pool-days-selected\"))}\n        (if (not= pool-days 60)\n          [:a {:href (str pool-url \"/60\")} \"60d\"]\n          \"60d\")]\n       [:span {:class (str \"pool-days-unselected\"\n                           (when (= pool-days 90)\n                             \" pool-days-selected\"))}\n       (if (not= pool-days 90)\n          [:a {:href (str pool-url \"/90\")} \"90d\"]\n          \"90d\")]\n       [:span {:class (str \"pool-days-unselected\"\n                           (when (= pool-days 180)\n                             \" pool-days-selected\"))}\n        (if (not= pool-days 180)\n          [:a {:href (str pool-url \"/180\")} \"180d\"]\n          \"180d\")]]\n      [:div {:class \"inner-box\" :style {:min-height \"800px\"\n                                        :margin-top \"60px\"\n                                        :margin-bottom \"250px\"\n                                        :overflow \"visible\"}}\n       [:pre {:style {:display \"inline-block\"\n                      :overflow \"auto\"}}\n        (if (or (nil? ph) loading)\n          [:div {:class \"animate-flicker\"}\n           (str \"Loading pool with address \" address)]\n          [pool-charts ph])]]]\n     [cv/footer-links]]))\n\n\n(defn main-panel []\n  (let [showing @(re-frame/subscribe [:showing])\n        account @(re-frame/subscribe [:account])\n        pool-address @(re-frame/subscribe [:pool-address])]\n    [re-com/v-box\n     :src      (at)\n     :height   \"100%\"\n     :children [(case showing\n                  :about [dv/pos-demo]\n                  :account [account-dashboard account]\n                  :pool [pool-history pool-address]\n                  :all [app-landing]\n                  [app-shell])]]))\n\n"]}