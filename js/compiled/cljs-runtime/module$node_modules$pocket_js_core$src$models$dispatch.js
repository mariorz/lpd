shadow$provide.module$node_modules$pocket_js_core$src$models$dispatch=function(global,require,module,exports){const axios=require("module$node_modules$axios$index"),Node=require("module$node_modules$pocket_js_core$src$models$node").Node,constants=require("module$node_modules$pocket_js_core$src$utils$constants");class Dispatch{constructor(configuration){this.configuration=configuration;this.axiosInstance=axios.create({baseURL:constants.dispatchNodeURL,path:constants.dispatchPath,timeout:this.configuration.requestTimeOut,
headers:{"Content-Type":"application/json"}})}blockchainsJSON(){var blockchainArray=[];this.configuration.blockchains.forEach(element=>{blockchainArray.push(element)});return blockchainArray}async retrieveServiceNodes(callback){try{var response=null;response=await this.axiosInstance.post(constants.dispatchPath,{DevID:this.configuration.devID,Blockchains:this.blockchainsJSON()});if(null!=response&&200==response.status&&null!=response.data){var nodes=this.parseDispatchResponse(response.data);if(callback)callback(nodes,
null);else return nodes}else if(callback)callback(null,Error("Failed to retrieve service nodes with error: "+response.data));else return Error("Failed to retrieve service nodes with error: "+response.data)}catch(err){if(callback)callback(null,Error("Failed to retrieve service nodes with error: "+err));else return Error("Failed to retrieve service nodes with error: "+err)}}parseDispatchResponse(response){try{var nodes=[];if(Array.isArray(response))response.forEach(element=>{var network=element.name,
netID=element.netid;element.ips&&element.ips.forEach(ipPort=>{ipPort=new Node(network,netID,ipPort);nodes.push(ipPort)})});else{var network$jscomp$0=response.name,netID$jscomp$0=response.netid;response.ips&&response.ips.forEach(ipPort=>{ipPort=new Node(network$jscomp$0,netID$jscomp$0,ipPort);nodes.push(ipPort)})}return nodes}catch(error){return Error("Failed to parsed service nodes with error: "+error)}}}module.exports={Dispatch}}
//# sourceMappingURL=module$node_modules$pocket_js_core$src$models$dispatch.js.map
