{"version":3,"sources":["re_frisk/ui/timeline.cljs"],"mappings":";AAKA,AAAKA,AAAQ,AAAA,AAACC;AAEd,AAAA,AAAMC,AAAaC,AAAWC;AAA9B,AACE,AAAMC,AAAK,AAAA,AAAA,AAAAC,AAAiBH;AAA5B,AACE,AAAM,AAAAI,AAAI,AAAK,AAACC,AAAIJ,AAAM,AAAA,AAAIC;AAAxB,AAAA,AAAAE;AAAAA;;AACI,AAAAE,AAAKL;AAAL,AAAA,AAAAK;AAAU,AAAA,AAAGJ;;AAAbI;;;;AADV,AAEE,AAAA,AAAA,AAAAC,AAACC,AAAMR,AAAWS;AAAlB,AACQ,AAAIR;AACF,AAAAM,AAAK,AAAA,AAAI,AAAA,AAAGL,AAAeA;;AAC3B,AAAAK,AAAK,AAAA,AAAI,AAAA,AAAIL,AAAe,AAAA,AAAGA;;;;AACzC,AAAAQ,AAAgB,AAAA,AAAAP,AAAA,AAAA,AAAA,AAACS,AAAQZ;AAAzB,AAAA,AAAAU;AAAA,AAAA,AAAAA,AAAWC;AAAX,AACE,AAAA,AAAAR,AAAON;AAAP,AAAe,AAAA,AAAAM,AAACU,AAAiBhB;;AAAjC;;AACA,AAACiB,AAAOjB,AAAQ,AAAA,AAACkB;AAAD,AAAgB,AAACC,AAAiC,AAAA,AAAA,AAAAb,AAAOH,AAAYW;AAArE;;AAFlB;;;AANF;;;AAUJ,AAAA,AAAMM,AAASjB;AAAf,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAGKkB;AAHL,AAGyC,AAAA,AAACnB,AAAYC;AAHtD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAKKkB;AALL,AAKyC,AAAA,AAACnB,AAAYC;AALtD;;AAOA,AAAA,AAAMmB,AAAUC,AAAcpB;AAA9B,AACE,AAAMW,AAAS,AAAAU,AAAA;AAAA,AAAU,AAAA,AAAAlB,AAAA,AAAA,AAAA,AAACS,AAAQZ;;AAC5BsB,AAAS,AAAAD,AAAA;AAAA,AAAU,AAAA,AAAA,AAAAlB,AAAiBH;;AACpCuB,AAAS,AAAAF,AAAA;AAAA,AAAU,AAACG,AAAM,AAAA,AAAAC,AAACC;AAAD,AAAM,AAAAD,AAAA,AAAA,AAACE,AAAmB,AAAA,AAAAxB,AAACyB,AAAGjB,AAAK,AAAA,AAAAc,AACb,AAAMI,AAAM,AAAA,AAAA1B,AAAG,AAAA,AAAAsB,AAAeH;AAA9B,AACE,AAAA,AAAK,AAAA,AAAI,AAAA,AAAGO,AAAWA;AAFzC,AAGgB,AAAA,AAAI,AAAA,AAAA1B,AAACyB,AAAGjB,AAAK,AAAA,AAAAc,AAEX,AAAA,AAAA,AAAI,AAAA,AAACG,AAAE,AAAA,AAAAH;AAL/B,AAAAtB,AAMM,AAAA,AAASiB;;AAR/C,AASE;AAAA,AACE,AAAA,AAAAjB,AAAMmB,AAAUA;AACVQ,AAAS,AAAA,AAAOR;AADtB,AAAAnB,AAEM4B,AAAUR;AACVS,AAAS,AAAA,AAAK,AAAG,AAAG,AAAA,AAAM,AAACC,AAAKF,AAAS,AAAA,AAAQ,AAACG,AAAMH,AAAUD;AAHxE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAQI,AAAAK,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAD,AAAAA;;AAAA,AAAA,AAAA1B,AAAA,AAAA4B,AAAAF;AAAA,AAAA,AAAA1B;AAAA,AAAA,AAAA0B,AAAA1B;AAAA,AAAA,AAAA,AAAA6B,AAAAH;AAAA,AAAAI,AAw5EyC,AAAAiC,AAAArC;AAx5EzCK,AAAA,AAAAC,AAAAF;AAAAG,AAAA,AAAAC,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAI,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAJ;AAAA,AAAA,AAAAK,AAAAN,AAAAK,AAAMS;AAAN,AAAA,AAAA,AAAAP,AAAAJ,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACS,AAAA,AAA0BW,AACC,AAAGxB,AAAKR,AAAiB,AAAGQ,AAAKR,AAGlE,AAAA,AAAK,AAAA,AAAK,AAAGgC,AAAExB;;AALlB,AAAA,AAAAe,AAAA;;;;AAAA;;;;;AAAA,AAAAG,AAAA,AAAAC,AAAAN,AAAA,AAAAO,AAAA,AAAAC,AAAAf;;AAAA,AAAAY,AAAA,AAAAC,AAAAN,AAAA;;;AAAA,AAAA,AAAAT,AAAAE,AAAMkB;AAAN,AAAA,AAAAF,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAF,AAAA,AAAAG,AAAAjB,AACS,AAAA,AAA0BkB,AACC,AAAGxB,AAAKR,AAAiB,AAAGQ,AAAKR,AAGlE,AAAA,AAAK,AAAA,AAAK,AAAGgC,AAAExB;;;AALlB;;;;AAAA,AAAA;;AAAA,AAAA,AAAAK,AAAQ,AAACoB,AAAM,AAAA,AAAK,AAAGvB,AAASF;AAMhC,AAAAK,AAAA,AAAAqB;AAAA,AAAA,AAAAnB,AAAA,AAAA;AAAA,AAAA,AAAAmB,AAAAA;;AAAA,AAAA,AAAA9C,AAAA,AAAA4B,AAAAkB;AAAA,AAAA,AAAA9C;AAAA,AAAA,AAAA8C,AAAA9C;AAAA,AAAA,AAAA,AAAA6B,AAAAiB;AAAA,AAAAhB,AAk5EyC,AAAAiC,AAAAjB;AAl5EzCf,AAAA,AAAAC,AAAAF;AAAAiB,AAAA,AAAAb,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAiB,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAjB;AAAA,AAAAkB,AAAA,AAAAb,AAAAN,AAAAkB;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAAA,AAA6CS;AAA7C,AAAAL,AAAAJ,AAAA,AAAchD;AAAd,AAAAoD,AAAAJ,AAAA,AAAmBO;AAAnB,AAAAH,AAAAJ,AAAA,AAAyB9B;AAAzB,AAAAkC,AAAAJ,AAAA,AAA+BQ;AAA/B,AAAA,AAAA,AAAApB,AAAAU,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEgB,AAAA,AAA2B9C,AACxB;AAAK0D;AAAL,AACE,AAAA,AAAC7D,AAAMR,AAAWsE,AAAsBF;;AACxC,AAACG,AAA6B,AAAA,AAAA,AAAApE,AAAOH,AAAYW;;AACjD,AAAiB0D;;AANtC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACS,AAAA,AAA2B1D,AAMX,AAAA,AAAK,AAAGwD,AAAS7C,AAAkCO,AAAiBA,AAE/CqC;;AAT9C,AAAA,AAAAR,AAAA;;;;AAAA;;;;;AAAA,AAAAV,AAAA,AAAAC,AAAAQ,AAAA,AAAAO,AAAA,AAAAb,AAAAK;;AAAA,AAAAR,AAAA,AAAAC,AAAAQ,AAAA;;;AAAA,AAAAQ,AAAA,AAAA/B,AAAAsB;AAAAS,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAL,AAAA,AAAAK,AAAA,AAAA,AAAA,AAAA,AAAAJ,AAAAC,AAAAG,AAAAA;AAAAA,AAA6CG;AAA7C,AAAAL,AAAAE,AAAA,AAActD;AAAd,AAAAoD,AAAAE,AAAA,AAAmBC;AAAnB,AAAAH,AAAAE,AAAA,AAAyBpC;AAAzB,AAAAkC,AAAAE,AAAA,AAA+BE;AAA/B,AAAA,AAAAf,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEgB,AAAA,AAA2BzC,AACxB;AAAK0D;AAAL,AACE,AAAA,AAAC7D,AAAMR,AAAWsE,AAAsBF;;AACxC,AAACG,AAA6B,AAAA,AAAA,AAAApE,AAAOH,AAAYW;;AACjD,AAAiB0D;;AANtC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAL,AAAA,AAAAX,AAAAG,AACS,AAAA,AAA2B7C,AAMX,AAAA,AAAK,AAAGwD,AAAS7C,AAAkCO,AAAiBA,AAE/CqC;;;AAT9C;;;;AAAA,AAAA;;AAAA,AAAA,AAAA/B,AAAmDJ;AAdvD,AAwBId,AAAQjB;;;AAElB,AAAA,AAAMwE,AAAqBpD,AAAcpB;AAAzC,AACE;AAAA,AACE,AAAM,AAAA,AAAA,AAAAG,AAAoBH;AAA1B,AAAA,AACGmB,AAASC,AAAcpB;;AAD1B","names":["re-frisk.ui.timeline/timeout","cljs.core.atom","re-frisk.ui.timeline/change-zoom","tool-state","inc?","curr","cljs.core/deref","or__4126__auto__","cljs.core/not","and__4115__auto__","p1__62622#","cljs.core.swap_BANG_","cljs.core/update","temp__5753__auto__","indx","cljs.core.get_in","js/clearTimeout","cljs.core/reset!","js/setTimeout","re-frisk.utils/scroll-timeline-event-item","re-frisk.ui.timeline/buttons","re-frisk.ui.components.components/small-button","re-frisk.ui.timeline/timeline","re-frame-data","reagent.ratom/make-reaction","mult","selected","cljs.core.doall","p1__62632#","cljs.core.map","cljs.core.assoc","cljs.core._EQ_","width","devi","events","all-time","cljs.core/last","cljs.core/first","iter__4529__auto__","s__62643","cljs.core/LazySeq","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__62645","cljs.core/chunk-buffer","i__62644","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__62642","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","x","cljs.core.range","s__62652","b__62654","i__62653","map__62657","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","iter__62651","map__62662","color","position","item","event","cljs.core/assoc","re-frisk.utils/scroll-event-list-item","re-frisk.ui.timeline/timeline-visibility","cljs.core/chunk-first"],"sourcesContent":["(ns re-frisk.ui.timeline\n  (:require-macros [reagent.ratom :refer [reaction]])\n  (:require [re-frisk.ui.components.components :as components]\n            [re-frisk.utils :as utils]))\n\n(def timeout (atom nil))\n\n(defn change-zoom [tool-state inc?]\n  (let [curr (:timeline-zoom @tool-state)]\n    (when (or (and (not inc?) (>= curr 0.05))\n              (and inc? (< curr 12)))\n      (swap! tool-state update :timeline-zoom\n             #(if inc?\n                (+ % (if (< curr 0.1) 0.01 curr))\n                (- % (if (<= curr 0.1) 0.01 (/ curr 2)))))\n      (when-let [indx (get-in @tool-state [:selected-event :indx])]\n        (when @timeout (js/clearTimeout @timeout))\n        (reset! timeout (js/setTimeout #(utils/scroll-timeline-event-item (:doc @tool-state) indx) 500))))))\n\n(defn buttons [tool-state]\n  [:div {:style {:position :absolute :top 70 :left 0}}\n   [:div {:style {:display :flex :flex-direction :row}}\n    [components/small-button {:on-click #(change-zoom tool-state false)} \"-\"]\n    [:div {:style {:width 5}}]\n    [components/small-button {:on-click #(change-zoom tool-state true)} \"+\"]]])\n\n(defn timeline [re-frame-data tool-state]\n  (let [indx     (reaction (get-in @tool-state [:selected-event :indx]))\n        mult     (reaction (:timeline-zoom @tool-state))\n        selected (reaction (doall (map #(assoc % :selected? (= @indx (:indx %))\n                                                 :width (let [width (* (:duration %) @mult)]\n                                                          (int (if (< width 2) 2 width)))\n                                                 :color (if (= @indx (:indx %))\n                                                          \"#df691a\"\n                                                          (if (= (:op-type %) :event) :blue \"#219653\")))\n                                       @(:events re-frame-data))))]\n    (fn []\n      (let [mult     @mult\n            devi     (/ 200 mult)\n            events   @selected\n            all-time (int (+ (- (:end (last events)) (:start (first events))) devi))]\n        [:div {:style {:height           100 :width \"100%\" :overflow-x :auto :overflow-y :hidden\n                       :background-color \"#f3f3f3\" :max-height 100}}\n         [:div {:style {:display  :flex :flex-direction :row :width \"100%\" :height 100\n                        :position :relative :overflow-x :auto}}\n          (for [x (range (int (/ all-time devi)))]\n            ^{:key (str \"timelime-time-item\" x)}\n            [:div {:style {:width             (* devi mult) :min-width (* devi mult) :height 90\n                           :border-left-width 1 :border-left-color :gray :border-left-style :solid\n                           :color             :gray :font-size 10}}\n             (str (int (* x devi)) \" ms\")])\n          (for [{:keys [indx color width position] :as item} events]\n            ^{:key (str \"timeline-event-item\" indx)}\n            [:div {:id    (str \"timeline-event-item\" indx)\n                   :on-click (fn [event]\n                               (swap! tool-state assoc :selected-event item)\n                               (utils/scroll-event-list-item (:doc @tool-state) indx)\n                               (.preventDefault event))\n                   :style {:left   (int (* position mult)) :position :absolute :width width :min-width width\n                           :top    20\n                           :height 70 :background-color color :opacity 0.5}}])]\n         [buttons tool-state]]))))\n\n(defn timeline-visibility [re-frame-data tool-state]\n  (fn []\n    (when (:timeline-opened? @tool-state)\n      [timeline re-frame-data tool-state])))"]}