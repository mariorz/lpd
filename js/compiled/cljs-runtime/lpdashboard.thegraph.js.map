{"version":3,"sources":["lpdashboard/thegraph.cljs"],"mappings":"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","names":["lpdashboard.thegraph/uni-subgraph-url","lpdashboard.thegraph/snapshot-query-string","user-address","clojure.string/lower-case","lpdashboard.thegraph/some-pair","lpdashboard.thegraph/positions-query-string","user","pairs","cljs.core.apply","cljs.core/str","p1__27933#","cljs.core.map","lpdashboard.thegraph/pairs-query-string","p1__27937#","lpdashboard.thegraph/<user-lps","pair-addresses","c__27667__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__27668__auto__","switch__27575__auto__","state_27989","state_val_27990","inst_27965","inst_27966","inst_27967","inst_27968","inst_27969","inst_27970","inst_27971","cljs.core/PersistentHashMap","inst_27972","inst_27973","inst_27974","inst_27975","inst_27976","statearr-28043","cljs.core.async.impl.ioc-helpers/take!","inst_27978","inst_27979","inst_27980","inst_27981","inst_27982","cljs.core/PersistentVector","inst_27983","inst_27984","inst_27985","p1__27964#","inst_27986","inst_27987","cljs.core.async.impl.ioc-helpers/return-chan","statearr-28053","state-machine__27576__auto__","ret-value__27577__auto__","result__27578__auto__","cljs.core/keyword-identical?","ex__27579__auto__","e28056","statearr-28057","cljs.core/seq","statearr-28059","cljs.core/first","state__27669__auto__","statearr-28063","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","_","js/console.log","cljs.core/clj->js","data","cljs_http.client.post","js/JSON.stringify","positions","keys-numerical-vals","num-parse-fn","lpdashboard.utils/pu","p","pair","r0","r1","ts","ltb","pair'","cljs.core.assoc","p'","lpdashboard.thegraph/<user-lp-snapshots","state_28088","state_val_28089","inst_28068","inst_28070","inst_28071","inst_28072","inst_28073","inst_28074","inst_28075","inst_28076","inst_28077","inst_28078","inst_28080","inst_28081","inst_28082","inst_28083","inst_28084","p1__28066#","inst_28085","inst_28086","statearr-28099","e28100","statearr-28101","statearr-28102","statearr-28104","lts","rusd","t0pusd","t1pusd","lpdashboard.thegraph/<pairs-info","state_28149","state_val_28150","inst_28124","inst_28136","inst_28137","inst_28138","inst_28139","inst_28140","inst_28141","inst_28142","inst_28143","inst_28144","inst_28146","inst_28147","statearr-28155","e28157","statearr-28158","statearr-28159","statearr-28163"],"sourcesContent":["(ns lpdashboard.thegraph\n  (:require [cljs.core.async :refer [go]]\n            [cljs.core.async.interop :refer-macros [<p!]]\n            [cljs-http.client :as http]\n            [bignumber.core]\n            [bignumber.js :as BigNumber]\n            [lpdashboard.utils :as u]))\n\n\n(def uni-subgraph-url \"https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v2\")\n\n;; TODO need to paginate if more than 1,000\n;; if we do not specify :first, the default is 100\n(defn snapshot-query-string\n  [user-address]\n  (str \"{\n      liquidityPositionSnapshots(orderBy: timestamp,\n                                 where: {user: \\\"\" (clojure.string/lower-case user-address) \"\\\"}\n                                 first: 1000) {\n      block,\n      timestamp,\n      pair {\n          id,\n          token0 {\n             id,\n            symbol,\n            name,\n            decimals\n\n          }\n          token1 {\n             id,\n            symbol,\n            name,\n            decimals\n\n          }\n     },\n    liquidityTokenBalance,\n    liquidityTokenTotalSupply,\n    token0PriceUSD,\n    token1PriceUSD,\n    reserve0,\n    reserve1,\n    reserveUSD\n    }\n   }\"))\n\n(def some-pair \"0x0d0d65e7a7db277d3e0f5e1676325e75f3340455\")\n\n\n(defn positions-query-string\n  [user pairs]\n  (str \"{\n      liquidityPositions( where: {id_in: [\"\n       (apply str\n              (map #(str \"\\\"\"\n                         (clojure.string/lower-case %)\n                         \"-\"\n                         (clojure.string/lower-case user)\n                         \"\\\",\"\n                         )\n                   pairs))\n\n\n\n       \"]}\n                                 first: 1000) {\n      pair {\n          id,\n          reserve0,\n          reserve1,\n          totalSupply,\n\n          token0 {\n             id,\n            symbol,\n            name,\n            decimals\n\n          }\n          token1 {\n             id,\n            symbol,\n            name,\n            decimals\n\n          }\n     },\n    liquidityTokenBalance\n    }\n   }\"))\n\n(defn pairs-query-string\n  [pairs]\n  (str \"{\n      pairs( where: {id_in: [\"\n       (apply str\n              (map #(str \"\\\"\" (clojure.string/lower-case %) \"\\\",\" )\n                   pairs))\n\n\n       \"]}\n                                 first: 1000) {\n          id,\n          reserve0,\n          reserve1,\n          totalSupply,\n\n          token0 {\n             id,\n            symbol,\n            name,\n            decimals\n\n          }\n          token1 {\n             id,\n            symbol,\n            name,\n            decimals\n\n          }\n     }\n\n    }\n   \"))\n\n\n\n(defn <user-lps\n  [user-address pair-addresses]\n  (go (let [_ (js/console.log (clj->js pair-addresses))\n            data\n            (<! (http/post\n                 uni-subgraph-url\n                 {:with-credentials? false\n                  :body (js/JSON.stringify\n                         (clj->js\n                          {:query\n                           (positions-query-string user-address pair-addresses)}))}))\n            positions (:liquidityPositions (:data (:body data)))\n            keys-numerical-vals [:liquidityTokenBalance]\n            num-parse-fn #(u/pu % 2)\n            positions' (map (fn [p] (let [pair (:pair p)\n\n                                          r0 (num-parse-fn (:reserve0 pair))\n                                          r1 (num-parse-fn (:reserve1 pair))\n                                          ts (num-parse-fn (:totalSupply pair))\n                                          ltb (num-parse-fn (:liquidityTokenBalance p))\n                                          pair' (assoc\n                                                 pair\n                                                 :reserve0 r0\n                                                 :reserve1 r1\n                                                 :totalSupply ts)\n                                          p' (assoc p\n                                                    :pair pair'\n                                                    :liquidityTokenBalance ltb)]\n                                      p'))\n                            positions)]\n        positions')))\n\n\n\n\n#_(go (def my-lps (<! (<user-lps my-address \"0xb4e16d0168e52d35cacd2c6185b44281ec28c9dc\"))))\n\n\n(defn <user-lp-snapshots\n  [user-address]\n  (go (let [data\n            (<! (http/post\n                 uni-subgraph-url\n                 {:with-credentials? false\n                  :body (js/JSON.stringify\n                         (clj->js\n                          {:query\n                           (snapshot-query-string user-address)}))}))\n            positions (:liquidityPositionSnapshots (:data (:body data)))\n            num-parse-fn #(u/pu % 2)\n            positions' (map (fn [p] (let [pair (:pair p)\n                                          r0 (num-parse-fn (:reserve0 p))\n                                          r1 (num-parse-fn (:reserve1 p))\n                                          lts (num-parse-fn (:liquidityTokenTotalSupply p))\n                                          ltb (num-parse-fn (:liquidityTokenBalance p))\n                                          rusd (num-parse-fn (:reserveUSD p))\n                                          t0pusd (num-parse-fn (:token0PriceUSD p))\n                                          t1pusd (num-parse-fn (:token1PriceUSD p))\n                                          p' (assoc p\n                                                    :reserve0 r0\n                                                    :reserve1 r1\n                                                    :liquidityTokenBalance ltb\n                                                    :liquidityTokenTotalSupply lts\n                                                    :reserveUSD rusd\n                                                    :token0PriceUSD t0pusd\n                                                    :token1PriceUSD t1pusd)]\n                                      p'))\n                            positions)]\n        positions')))\n\n\n\n\n\n(defn <pairs-info\n  [pair-addresses]\n  (go (let [data\n            (<! (http/post\n                 uni-subgraph-url\n                 {:with-credentials? false\n                  :body (js/JSON.stringify\n                         (clj->js\n                          {:query\n                           (pairs-query-string pair-addresses)}))}))]\n        (:body data))))\n"]}