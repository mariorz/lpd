shadow$provide.module$node_modules$eth_json_rpc_filters$log_filter=function(global,require,module,exports){const EthQuery=require("module$node_modules$eth_query$index"),pify=require("module$node_modules$pify$index");global=require("module$node_modules$eth_json_rpc_filters$base_filter_history");const {hexToInt,incrementHexInt,minBlockRef,blockRefIsNumber}=require("module$node_modules$eth_json_rpc_filters$hexUtils");class LogFilter extends global{constructor({provider,params}){super();this.type="log";
this.ethQuery=new EthQuery(provider);this.params=Object.assign({fromBlock:"latest",toBlock:"latest",address:void 0,topics:[]},params);this.params.address&&(Array.isArray(this.params.address)||(this.params.address=[this.params.address]),this.params.address=this.params.address.map(address=>address.toLowerCase()))}async initialize({currentBlock}){let fromBlock=this.params.fromBlock;["latest","pending"].includes(fromBlock)&&(fromBlock=currentBlock);"earliest"===fromBlock&&(fromBlock="0x0");this.params.fromBlock=
fromBlock;currentBlock=minBlockRef(this.params.toBlock,currentBlock);currentBlock=Object.assign({},this.params,{toBlock:currentBlock});currentBlock=await this._fetchLogs(currentBlock);this.addInitialResults(currentBlock)}async update({oldBlock,newBlock}){oldBlock=oldBlock?incrementHexInt(oldBlock):newBlock;newBlock=Object.assign({},this.params,{fromBlock:oldBlock,toBlock:newBlock});newBlock=(await this._fetchLogs(newBlock)).filter(log=>this.matchLog(log));this.addResults(newBlock)}async _fetchLogs(params){return await pify(cb=>
this.ethQuery.getLogs(params,cb))()}matchLog(log){if(hexToInt(this.params.fromBlock)>=hexToInt(log.blockNumber)||blockRefIsNumber(this.params.toBlock)&&hexToInt(this.params.toBlock)<=hexToInt(log.blockNumber))return!1;const normalizedLogAddress=log.address&&log.address.toLowerCase();return this.params.address&&normalizedLogAddress&&!this.params.address.includes(normalizedLogAddress)?!1:this.params.topics.every((topicPattern,index)=>{index=log.topics[index];if(!index)return!1;index=index.toLowerCase();
topicPattern=Array.isArray(topicPattern)?topicPattern:[topicPattern];if(topicPattern.includes(null))return!0;topicPattern=topicPattern.map(topic=>topic.toLowerCase());return topicPattern.includes(index)})}}module.exports=LogFilter}
//# sourceMappingURL=module$node_modules$eth_json_rpc_filters$log_filter.js.map
