shadow$provide.module$node_modules$pify$index=function(global,require,module,exports){const processFn=(fn,opts)=>function(){const P=opts.promiseModule,args=Array(arguments.length);for(let i=0;i<arguments.length;i++)args[i]=arguments[i];return new P((resolve,reject)=>{opts.errorFirst?args.push(function(err,result){if(opts.multiArgs){const results=Array(arguments.length-1);for(let i=1;i<arguments.length;i++)results[i-1]=arguments[i];err?(results.unshift(err),reject(results)):resolve(results)}else err?
reject(err):resolve(result)}):args.push(function(result){if(opts.multiArgs){const results=Array(arguments.length-1);for(let i=0;i<arguments.length;i++)results[i]=arguments[i];resolve(results)}else resolve(result)});fn.apply(this,args)})};module.exports=(obj,opts)=>{opts=Object.assign({exclude:[/.+(Sync|Stream)$/],errorFirst:!0,promiseModule:Promise},opts);const filter=key=>{const match=pattern=>"string"===typeof pattern?key===pattern:pattern.test(key);return opts.include?opts.include.some(match):
!opts.exclude.some(match)};let ret;ret="function"===typeof obj?function(){return opts.excludeMain?obj.apply(this,arguments):processFn(obj,opts).apply(this,arguments)}:Object.create(Object.getPrototypeOf(obj));for(const key in obj){const x=obj[key];ret[key]="function"===typeof x&&filter(key)?processFn(x,opts):x}return ret}}
//# sourceMappingURL=module$node_modules$pify$index.js.map
