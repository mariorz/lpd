{
"version":3,
"file":"module$node_modules$jsonify$lib$stringify.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/jsonify/lib/stringify.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$jsonify$lib$stringify\"] = function(global,require,module,exports) {\nvar cx = /[\\u0000\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,\n    escapable = /[\\\\\\\"\\x00-\\x1f\\x7f-\\x9f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,\n    gap,\n    indent,\n    meta = {    // table of character substitutions\n        '\\b': '\\\\b',\n        '\\t': '\\\\t',\n        '\\n': '\\\\n',\n        '\\f': '\\\\f',\n        '\\r': '\\\\r',\n        '\"' : '\\\\\"',\n        '\\\\': '\\\\\\\\'\n    },\n    rep;\n\nfunction quote(string) {\n    // If the string contains no control characters, no quote characters, and no\n    // backslash characters, then we can safely slap some quotes around it.\n    // Otherwise we must also replace the offending characters with safe escape\n    // sequences.\n    \n    escapable.lastIndex = 0;\n    return escapable.test(string) ? '\"' + string.replace(escapable, function (a) {\n        var c = meta[a];\n        return typeof c === 'string' ? c :\n            '\\\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);\n    }) + '\"' : '\"' + string + '\"';\n}\n\nfunction str(key, holder) {\n    // Produce a string from holder[key].\n    var i,          // The loop counter.\n        k,          // The member key.\n        v,          // The member value.\n        length,\n        mind = gap,\n        partial,\n        value = holder[key];\n    \n    // If the value has a toJSON method, call it to obtain a replacement value.\n    if (value && typeof value === 'object' &&\n            typeof value.toJSON === 'function') {\n        value = value.toJSON(key);\n    }\n    \n    // If we were called with a replacer function, then call the replacer to\n    // obtain a replacement value.\n    if (typeof rep === 'function') {\n        value = rep.call(holder, key, value);\n    }\n    \n    // What happens next depends on the value's type.\n    switch (typeof value) {\n        case 'string':\n            return quote(value);\n        \n        case 'number':\n            // JSON numbers must be finite. Encode non-finite numbers as null.\n            return isFinite(value) ? String(value) : 'null';\n        \n        case 'boolean':\n        case 'null':\n            // If the value is a boolean or null, convert it to a string. Note:\n            // typeof null does not produce 'null'. The case is included here in\n            // the remote chance that this gets fixed someday.\n            return String(value);\n            \n        case 'object':\n            if (!value) return 'null';\n            gap += indent;\n            partial = [];\n            \n            // Array.isArray\n            if (Object.prototype.toString.apply(value) === '[object Array]') {\n                length = value.length;\n                for (i = 0; i < length; i += 1) {\n                    partial[i] = str(i, value) || 'null';\n                }\n                \n                // Join all of the elements together, separated with commas, and\n                // wrap them in brackets.\n                v = partial.length === 0 ? '[]' : gap ?\n                    '[\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + ']' :\n                    '[' + partial.join(',') + ']';\n                gap = mind;\n                return v;\n            }\n            \n            // If the replacer is an array, use it to select the members to be\n            // stringified.\n            if (rep && typeof rep === 'object') {\n                length = rep.length;\n                for (i = 0; i < length; i += 1) {\n                    k = rep[i];\n                    if (typeof k === 'string') {\n                        v = str(k, value);\n                        if (v) {\n                            partial.push(quote(k) + (gap ? ': ' : ':') + v);\n                        }\n                    }\n                }\n            }\n            else {\n                // Otherwise, iterate through all of the keys in the object.\n                for (k in value) {\n                    if (Object.prototype.hasOwnProperty.call(value, k)) {\n                        v = str(k, value);\n                        if (v) {\n                            partial.push(quote(k) + (gap ? ': ' : ':') + v);\n                        }\n                    }\n                }\n            }\n            \n        // Join all of the member texts together, separated with commas,\n        // and wrap them in braces.\n\n        v = partial.length === 0 ? '{}' : gap ?\n            '{\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + '}' :\n            '{' + partial.join(',') + '}';\n        gap = mind;\n        return v;\n    }\n}\n\nmodule.exports = function (value, replacer, space) {\n    var i;\n    gap = '';\n    indent = '';\n    \n    // If the space parameter is a number, make an indent string containing that\n    // many spaces.\n    if (typeof space === 'number') {\n        for (i = 0; i < space; i += 1) {\n            indent += ' ';\n        }\n    }\n    // If the space parameter is a string, it will be used as the indent string.\n    else if (typeof space === 'string') {\n        indent = space;\n    }\n\n    // If there is a replacer, it must be a function or an array.\n    // Otherwise, throw an error.\n    rep = replacer;\n    if (replacer && typeof replacer !== 'function'\n    && (typeof replacer !== 'object' || typeof replacer.length !== 'number')) {\n        throw new Error('JSON.stringify');\n    }\n    \n    // Make a fake root object containing our value under the key of ''.\n    // Return the result of stringifying the value.\n    return str('', {'': value});\n};\n\n};"],
"names":["shadow$provide","global","require","module","exports","quote","string","escapable","lastIndex","test","replace","a","c","meta","charCodeAt","toString","slice","str","key","holder","mind","gap","value","toJSON","rep","call","isFinite","String","indent","partial","Object","prototype","apply","length","i","v","join","k","push","hasOwnProperty","module.exports","replacer","space","Error"]
}
