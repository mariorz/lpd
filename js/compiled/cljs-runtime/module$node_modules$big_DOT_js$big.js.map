{
"version":3,
"file":"module$node_modules$big_DOT_js$big.js",
"lineCount":14,
"mappings":"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",
"sources":["node_modules/big_DOT_js/big.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$big_DOT_js$big\"] = function(global,require,module,exports) {\n/*\r\n *  big.js v5.2.2\r\n *  A small, fast, easy-to-use library for arbitrary-precision decimal arithmetic.\r\n *  Copyright (c) 2018 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *  https://github.com/MikeMcl/big.js/LICENCE\r\n */\r\n;(function (GLOBAL) {\r\n  'use strict';\r\n  var Big,\r\n\r\n\r\n/************************************** EDITABLE DEFAULTS *****************************************/\r\n\r\n\r\n    // The default values below must be integers within the stated ranges.\r\n\r\n    /*\r\n     * The maximum number of decimal places (DP) of the results of operations involving division:\r\n     * div and sqrt, and pow with negative exponents.\r\n     */\r\n    DP = 20,          // 0 to MAX_DP\r\n\r\n    /*\r\n     * The rounding mode (RM) used when rounding to the above decimal places.\r\n     *\r\n     *  0  Towards zero (i.e. truncate, no rounding).       (ROUND_DOWN)\r\n     *  1  To nearest neighbour. If equidistant, round up.  (ROUND_HALF_UP)\r\n     *  2  To nearest neighbour. If equidistant, to even.   (ROUND_HALF_EVEN)\r\n     *  3  Away from zero.                                  (ROUND_UP)\r\n     */\r\n    RM = 1,             // 0, 1, 2 or 3\r\n\r\n    // The maximum value of DP and Big.DP.\r\n    MAX_DP = 1E6,       // 0 to 1000000\r\n\r\n    // The maximum magnitude of the exponent argument to the pow method.\r\n    MAX_POWER = 1E6,    // 1 to 1000000\r\n\r\n    /*\r\n     * The negative exponent (NE) at and beneath which toString returns exponential notation.\r\n     * (JavaScript numbers: -7)\r\n     * -1000000 is the minimum recommended exponent value of a Big.\r\n     */\r\n    NE = -7,            // 0 to -1000000\r\n\r\n    /*\r\n     * The positive exponent (PE) at and above which toString returns exponential notation.\r\n     * (JavaScript numbers: 21)\r\n     * 1000000 is the maximum recommended exponent value of a Big.\r\n     * (This limit is not enforced or checked.)\r\n     */\r\n    PE = 21,            // 0 to 1000000\r\n\r\n\r\n/**************************************************************************************************/\r\n\r\n\r\n    // Error messages.\r\n    NAME = '[big.js] ',\r\n    INVALID = NAME + 'Invalid ',\r\n    INVALID_DP = INVALID + 'decimal places',\r\n    INVALID_RM = INVALID + 'rounding mode',\r\n    DIV_BY_ZERO = NAME + 'Division by zero',\r\n\r\n    // The shared prototype object.\r\n    P = {},\r\n    UNDEFINED = void 0,\r\n    NUMERIC = /^-?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i;\r\n\r\n\r\n  /*\r\n   * Create and return a Big constructor.\r\n   *\r\n   */\r\n  function _Big_() {\r\n\r\n    /*\r\n     * The Big constructor and exported function.\r\n     * Create and return a new instance of a Big number object.\r\n     *\r\n     * n {number|string|Big} A numeric value.\r\n     */\r\n    function Big(n) {\r\n      var x = this;\r\n\r\n      // Enable constructor usage without new.\r\n      if (!(x instanceof Big)) return n === UNDEFINED ? _Big_() : new Big(n);\r\n\r\n      // Duplicate.\r\n      if (n instanceof Big) {\r\n        x.s = n.s;\r\n        x.e = n.e;\r\n        x.c = n.c.slice();\r\n      } else {\r\n        parse(x, n);\r\n      }\r\n\r\n      /*\r\n       * Retain a reference to this Big constructor, and shadow Big.prototype.constructor which\r\n       * points to Object.\r\n       */\r\n      x.constructor = Big;\r\n    }\r\n\r\n    Big.prototype = P;\r\n    Big.DP = DP;\r\n    Big.RM = RM;\r\n    Big.NE = NE;\r\n    Big.PE = PE;\r\n    Big.version = '5.2.2';\r\n\r\n    return Big;\r\n  }\r\n\r\n\r\n  /*\r\n   * Parse the number or string value passed to a Big constructor.\r\n   *\r\n   * x {Big} A Big number instance.\r\n   * n {number|string} A numeric value.\r\n   */\r\n  function parse(x, n) {\r\n    var e, i, nl;\r\n\r\n    // Minus zero?\r\n    if (n === 0 && 1 / n < 0) n = '-0';\r\n    else if (!NUMERIC.test(n += '')) throw Error(INVALID + 'number');\r\n\r\n    // Determine sign.\r\n    x.s = n.charAt(0) == '-' ? (n = n.slice(1), -1) : 1;\r\n\r\n    // Decimal point?\r\n    if ((e = n.indexOf('.')) > -1) n = n.replace('.', '');\r\n\r\n    // Exponential form?\r\n    if ((i = n.search(/e/i)) > 0) {\r\n\r\n      // Determine exponent.\r\n      if (e < 0) e = i;\r\n      e += +n.slice(i + 1);\r\n      n = n.substring(0, i);\r\n    } else if (e < 0) {\r\n\r\n      // Integer.\r\n      e = n.length;\r\n    }\r\n\r\n    nl = n.length;\r\n\r\n    // Determine leading zeros.\r\n    for (i = 0; i < nl && n.charAt(i) == '0';) ++i;\r\n\r\n    if (i == nl) {\r\n\r\n      // Zero.\r\n      x.c = [x.e = 0];\r\n    } else {\r\n\r\n      // Determine trailing zeros.\r\n      for (; nl > 0 && n.charAt(--nl) == '0';);\r\n      x.e = e - i - 1;\r\n      x.c = [];\r\n\r\n      // Convert string to array of digits without leading/trailing zeros.\r\n      for (e = 0; i <= nl;) x.c[e++] = +n.charAt(i++);\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Round Big x to a maximum of dp decimal places using rounding mode rm.\r\n   * Called by stringify, P.div, P.round and P.sqrt.\r\n   *\r\n   * x {Big} The Big to round.\r\n   * dp {number} Integer, 0 to MAX_DP inclusive.\r\n   * rm {number} 0, 1, 2 or 3 (DOWN, HALF_UP, HALF_EVEN, UP)\r\n   * [more] {boolean} Whether the result of division was truncated.\r\n   */\r\n  function round(x, dp, rm, more) {\r\n    var xc = x.c,\r\n      i = x.e + dp + 1;\r\n\r\n    if (i < xc.length) {\r\n      if (rm === 1) {\r\n\r\n        // xc[i] is the digit after the digit that may be rounded up.\r\n        more = xc[i] >= 5;\r\n      } else if (rm === 2) {\r\n        more = xc[i] > 5 || xc[i] == 5 &&\r\n          (more || i < 0 || xc[i + 1] !== UNDEFINED || xc[i - 1] & 1);\r\n      } else if (rm === 3) {\r\n        more = more || !!xc[0];\r\n      } else {\r\n        more = false;\r\n        if (rm !== 0) throw Error(INVALID_RM);\r\n      }\r\n\r\n      if (i < 1) {\r\n        xc.length = 1;\r\n\r\n        if (more) {\r\n\r\n          // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n          x.e = -dp;\r\n          xc[0] = 1;\r\n        } else {\r\n\r\n          // Zero.\r\n          xc[0] = x.e = 0;\r\n        }\r\n      } else {\r\n\r\n        // Remove any digits after the required decimal places.\r\n        xc.length = i--;\r\n\r\n        // Round up?\r\n        if (more) {\r\n\r\n          // Rounding up may mean the previous digit has to be rounded up.\r\n          for (; ++xc[i] > 9;) {\r\n            xc[i] = 0;\r\n            if (!i--) {\r\n              ++x.e;\r\n              xc.unshift(1);\r\n            }\r\n          }\r\n        }\r\n\r\n        // Remove trailing zeros.\r\n        for (i = xc.length; !xc[--i];) xc.pop();\r\n      }\r\n    } else if (rm < 0 || rm > 3 || rm !== ~~rm) {\r\n      throw Error(INVALID_RM);\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of Big x in normal or exponential notation.\r\n   * Handles P.toExponential, P.toFixed, P.toJSON, P.toPrecision, P.toString and P.valueOf.\r\n   *\r\n   * x {Big}\r\n   * id? {number} Caller id.\r\n   *         1 toExponential\r\n   *         2 toFixed\r\n   *         3 toPrecision\r\n   *         4 valueOf\r\n   * n? {number|undefined} Caller's argument.\r\n   * k? {number|undefined}\r\n   */\r\n  function stringify(x, id, n, k) {\r\n    var e, s,\r\n      Big = x.constructor,\r\n      z = !x.c[0];\r\n\r\n    if (n !== UNDEFINED) {\r\n      if (n !== ~~n || n < (id == 3) || n > MAX_DP) {\r\n        throw Error(id == 3 ? INVALID + 'precision' : INVALID_DP);\r\n      }\r\n\r\n      x = new Big(x);\r\n\r\n      // The index of the digit that may be rounded up.\r\n      n = k - x.e;\r\n\r\n      // Round?\r\n      if (x.c.length > ++k) round(x, n, Big.RM);\r\n\r\n      // toFixed: recalculate k as x.e may have changed if value rounded up.\r\n      if (id == 2) k = x.e + n + 1;\r\n\r\n      // Append zeros?\r\n      for (; x.c.length < k;) x.c.push(0);\r\n    }\r\n\r\n    e = x.e;\r\n    s = x.c.join('');\r\n    n = s.length;\r\n\r\n    // Exponential notation?\r\n    if (id != 2 && (id == 1 || id == 3 && k <= e || e <= Big.NE || e >= Big.PE)) {\r\n      s = s.charAt(0) + (n > 1 ? '.' + s.slice(1) : '') + (e < 0 ? 'e' : 'e+') + e;\r\n\r\n    // Normal notation.\r\n    } else if (e < 0) {\r\n      for (; ++e;) s = '0' + s;\r\n      s = '0.' + s;\r\n    } else if (e > 0) {\r\n      if (++e > n) for (e -= n; e--;) s += '0';\r\n      else if (e < n) s = s.slice(0, e) + '.' + s.slice(e);\r\n    } else if (n > 1) {\r\n      s = s.charAt(0) + '.' + s.slice(1);\r\n    }\r\n\r\n    return x.s < 0 && (!z || id == 4) ? '-' + s : s;\r\n  }\r\n\r\n\r\n  // Prototype/instance methods\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the absolute value of this Big.\r\n   */\r\n  P.abs = function () {\r\n    var x = new this.constructor(this);\r\n    x.s = 1;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return 1 if the value of this Big is greater than the value of Big y,\r\n   *       -1 if the value of this Big is less than the value of Big y, or\r\n   *        0 if they have the same value.\r\n  */\r\n  P.cmp = function (y) {\r\n    var isneg,\r\n      x = this,\r\n      xc = x.c,\r\n      yc = (y = new x.constructor(y)).c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either zero?\r\n    if (!xc[0] || !yc[0]) return !xc[0] ? !yc[0] ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    isneg = i < 0;\r\n\r\n    // Compare exponents.\r\n    if (k != l) return k > l ^ isneg ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = -1; ++i < j;) {\r\n      if (xc[i] != yc[i]) return xc[i] > yc[i] ^ isneg ? 1 : -1;\r\n    }\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ isneg ? 1 : -1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big divided by the value of Big y, rounded,\r\n   * if necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\r\n   */\r\n  P.div = function (y) {\r\n    var x = this,\r\n      Big = x.constructor,\r\n      a = x.c,                  // dividend\r\n      b = (y = new Big(y)).c,   // divisor\r\n      k = x.s == y.s ? 1 : -1,\r\n      dp = Big.DP;\r\n\r\n    if (dp !== ~~dp || dp < 0 || dp > MAX_DP) throw Error(INVALID_DP);\r\n\r\n    // Divisor is zero?\r\n    if (!b[0]) throw Error(DIV_BY_ZERO);\r\n\r\n    // Dividend is 0? Return +-0.\r\n    if (!a[0]) return new Big(k * 0);\r\n\r\n    var bl, bt, n, cmp, ri,\r\n      bz = b.slice(),\r\n      ai = bl = b.length,\r\n      al = a.length,\r\n      r = a.slice(0, bl),   // remainder\r\n      rl = r.length,\r\n      q = y,                // quotient\r\n      qc = q.c = [],\r\n      qi = 0,\r\n      d = dp + (q.e = x.e - y.e) + 1;    // number of digits of the result\r\n\r\n    q.s = k;\r\n    k = d < 0 ? 0 : d;\r\n\r\n    // Create version of divisor with leading zero.\r\n    bz.unshift(0);\r\n\r\n    // Add zeros to make remainder as long as divisor.\r\n    for (; rl++ < bl;) r.push(0);\r\n\r\n    do {\r\n\r\n      // n is how many times the divisor goes into current remainder.\r\n      for (n = 0; n < 10; n++) {\r\n\r\n        // Compare divisor and remainder.\r\n        if (bl != (rl = r.length)) {\r\n          cmp = bl > rl ? 1 : -1;\r\n        } else {\r\n          for (ri = -1, cmp = 0; ++ri < bl;) {\r\n            if (b[ri] != r[ri]) {\r\n              cmp = b[ri] > r[ri] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        // If divisor < remainder, subtract divisor from remainder.\r\n        if (cmp < 0) {\r\n\r\n          // Remainder can't be more than 1 digit longer than divisor.\r\n          // Equalise lengths using divisor with extra leading zero?\r\n          for (bt = rl == bl ? b : bz; rl;) {\r\n            if (r[--rl] < bt[rl]) {\r\n              ri = rl;\r\n              for (; ri && !r[--ri];) r[ri] = 9;\r\n              --r[ri];\r\n              r[rl] += 10;\r\n            }\r\n            r[rl] -= bt[rl];\r\n          }\r\n\r\n          for (; !r[0];) r.shift();\r\n        } else {\r\n          break;\r\n        }\r\n      }\r\n\r\n      // Add the digit n to the result array.\r\n      qc[qi++] = cmp ? n : ++n;\r\n\r\n      // Update the remainder.\r\n      if (r[0] && cmp) r[rl] = a[ai] || 0;\r\n      else r = [a[ai]];\r\n\r\n    } while ((ai++ < al || r[0] !== UNDEFINED) && k--);\r\n\r\n    // Leading zero? Do not remove if result is simply zero (qi == 1).\r\n    if (!qc[0] && qi != 1) {\r\n\r\n      // There can't be more than one zero.\r\n      qc.shift();\r\n      q.e--;\r\n    }\r\n\r\n    // Round?\r\n    if (qi > d) round(q, dp, Big.RM, r[0] !== UNDEFINED);\r\n\r\n    return q;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is equal to the value of Big y, otherwise return false.\r\n   */\r\n  P.eq = function (y) {\r\n    return !this.cmp(y);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is greater than the value of Big y, otherwise return\r\n   * false.\r\n   */\r\n  P.gt = function (y) {\r\n    return this.cmp(y) > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is greater than or equal to the value of Big y, otherwise\r\n   * return false.\r\n   */\r\n  P.gte = function (y) {\r\n    return this.cmp(y) > -1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is less than the value of Big y, otherwise return false.\r\n   */\r\n  P.lt = function (y) {\r\n    return this.cmp(y) < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is less than or equal to the value of Big y, otherwise\r\n   * return false.\r\n   */\r\n  P.lte = function (y) {\r\n    return this.cmp(y) < 1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big minus the value of Big y.\r\n   */\r\n  P.minus = P.sub = function (y) {\r\n    var i, j, t, xlty,\r\n      x = this,\r\n      Big = x.constructor,\r\n      a = x.s,\r\n      b = (y = new Big(y)).s;\r\n\r\n    // Signs differ?\r\n    if (a != b) {\r\n      y.s = -b;\r\n      return x.plus(y);\r\n    }\r\n\r\n    var xc = x.c.slice(),\r\n      xe = x.e,\r\n      yc = y.c,\r\n      ye = y.e;\r\n\r\n    // Either zero?\r\n    if (!xc[0] || !yc[0]) {\r\n\r\n      // y is non-zero? x is non-zero? Or both are zero.\r\n      return yc[0] ? (y.s = -b, y) : new Big(xc[0] ? x : 0);\r\n    }\r\n\r\n    // Determine which is the bigger number. Prepend zeros to equalise exponents.\r\n    if (a = xe - ye) {\r\n\r\n      if (xlty = a < 0) {\r\n        a = -a;\r\n        t = xc;\r\n      } else {\r\n        ye = xe;\r\n        t = yc;\r\n      }\r\n\r\n      t.reverse();\r\n      for (b = a; b--;) t.push(0);\r\n      t.reverse();\r\n    } else {\r\n\r\n      // Exponents equal. Check digit by digit.\r\n      j = ((xlty = xc.length < yc.length) ? xc : yc).length;\r\n\r\n      for (a = b = 0; b < j; b++) {\r\n        if (xc[b] != yc[b]) {\r\n          xlty = xc[b] < yc[b];\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    // x < y? Point xc to the array of the bigger number.\r\n    if (xlty) {\r\n      t = xc;\r\n      xc = yc;\r\n      yc = t;\r\n      y.s = -y.s;\r\n    }\r\n\r\n    /*\r\n     * Append zeros to xc if shorter. No need to add zeros to yc if shorter as subtraction only\r\n     * needs to start at yc.length.\r\n     */\r\n    if ((b = (j = yc.length) - (i = xc.length)) > 0) for (; b--;) xc[i++] = 0;\r\n\r\n    // Subtract yc from xc.\r\n    for (b = i; j > a;) {\r\n      if (xc[--j] < yc[j]) {\r\n        for (i = j; i && !xc[--i];) xc[i] = 9;\r\n        --xc[i];\r\n        xc[j] += 10;\r\n      }\r\n\r\n      xc[j] -= yc[j];\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (; xc[--b] === 0;) xc.pop();\r\n\r\n    // Remove leading zeros and adjust exponent accordingly.\r\n    for (; xc[0] === 0;) {\r\n      xc.shift();\r\n      --ye;\r\n    }\r\n\r\n    if (!xc[0]) {\r\n\r\n      // n - n = +0\r\n      y.s = 1;\r\n\r\n      // Result must be zero.\r\n      xc = [ye = 0];\r\n    }\r\n\r\n    y.c = xc;\r\n    y.e = ye;\r\n\r\n    return y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big modulo the value of Big y.\r\n   */\r\n  P.mod = function (y) {\r\n    var ygtx,\r\n      x = this,\r\n      Big = x.constructor,\r\n      a = x.s,\r\n      b = (y = new Big(y)).s;\r\n\r\n    if (!y.c[0]) throw Error(DIV_BY_ZERO);\r\n\r\n    x.s = y.s = 1;\r\n    ygtx = y.cmp(x) == 1;\r\n    x.s = a;\r\n    y.s = b;\r\n\r\n    if (ygtx) return new Big(x);\r\n\r\n    a = Big.DP;\r\n    b = Big.RM;\r\n    Big.DP = Big.RM = 0;\r\n    x = x.div(y);\r\n    Big.DP = a;\r\n    Big.RM = b;\r\n\r\n    return this.minus(x.times(y));\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big plus the value of Big y.\r\n   */\r\n  P.plus = P.add = function (y) {\r\n    var t,\r\n      x = this,\r\n      Big = x.constructor,\r\n      a = x.s,\r\n      b = (y = new Big(y)).s;\r\n\r\n    // Signs differ?\r\n    if (a != b) {\r\n      y.s = -b;\r\n      return x.minus(y);\r\n    }\r\n\r\n    var xe = x.e,\r\n      xc = x.c,\r\n      ye = y.e,\r\n      yc = y.c;\r\n\r\n    // Either zero? y is non-zero? x is non-zero? Or both are zero.\r\n    if (!xc[0] || !yc[0]) return yc[0] ? y : new Big(xc[0] ? x : a * 0);\r\n\r\n    xc = xc.slice();\r\n\r\n    // Prepend zeros to equalise exponents.\r\n    // Note: reverse faster than unshifts.\r\n    if (a = xe - ye) {\r\n      if (a > 0) {\r\n        ye = xe;\r\n        t = yc;\r\n      } else {\r\n        a = -a;\r\n        t = xc;\r\n      }\r\n\r\n      t.reverse();\r\n      for (; a--;) t.push(0);\r\n      t.reverse();\r\n    }\r\n\r\n    // Point xc to the longer array.\r\n    if (xc.length - yc.length < 0) {\r\n      t = yc;\r\n      yc = xc;\r\n      xc = t;\r\n    }\r\n\r\n    a = yc.length;\r\n\r\n    // Only start adding at yc.length - 1 as the further digits of xc can be left as they are.\r\n    for (b = 0; a; xc[a] %= 10) b = (xc[--a] = xc[a] + yc[a] + b) / 10 | 0;\r\n\r\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n\r\n    if (b) {\r\n      xc.unshift(b);\r\n      ++ye;\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (a = xc.length; xc[--a] === 0;) xc.pop();\r\n\r\n    y.c = xc;\r\n    y.e = ye;\r\n\r\n    return y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a Big whose value is the value of this Big raised to the power n.\r\n   * If n is negative, round to a maximum of Big.DP decimal places using rounding\r\n   * mode Big.RM.\r\n   *\r\n   * n {number} Integer, -MAX_POWER to MAX_POWER inclusive.\r\n   */\r\n  P.pow = function (n) {\r\n    var x = this,\r\n      one = new x.constructor(1),\r\n      y = one,\r\n      isneg = n < 0;\r\n\r\n    if (n !== ~~n || n < -MAX_POWER || n > MAX_POWER) throw Error(INVALID + 'exponent');\r\n    if (isneg) n = -n;\r\n\r\n    for (;;) {\r\n      if (n & 1) y = y.times(x);\r\n      n >>= 1;\r\n      if (!n) break;\r\n      x = x.times(x);\r\n    }\r\n\r\n    return isneg ? one.div(y) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big rounded using rounding mode rm\r\n   * to a maximum of dp decimal places, or, if dp is negative, to an integer which is a\r\n   * multiple of 10**-dp.\r\n   * If dp is not specified, round to 0 decimal places.\r\n   * If rm is not specified, use Big.RM.\r\n   *\r\n   * dp? {number} Integer, -MAX_DP to MAX_DP inclusive.\r\n   * rm? 0, 1, 2 or 3 (ROUND_DOWN, ROUND_HALF_UP, ROUND_HALF_EVEN, ROUND_UP)\r\n   */\r\n  P.round = function (dp, rm) {\r\n    var Big = this.constructor;\r\n    if (dp === UNDEFINED) dp = 0;\r\n    else if (dp !== ~~dp || dp < -MAX_DP || dp > MAX_DP) throw Error(INVALID_DP);\r\n    return round(new Big(this), dp, rm === UNDEFINED ? Big.RM : rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the square root of the value of this Big, rounded, if\r\n   * necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\r\n   */\r\n  P.sqrt = function () {\r\n    var r, c, t,\r\n      x = this,\r\n      Big = x.constructor,\r\n      s = x.s,\r\n      e = x.e,\r\n      half = new Big(0.5);\r\n\r\n    // Zero?\r\n    if (!x.c[0]) return new Big(x);\r\n\r\n    // Negative?\r\n    if (s < 0) throw Error(NAME + 'No square root');\r\n\r\n    // Estimate.\r\n    s = Math.sqrt(x + '');\r\n\r\n    // Math.sqrt underflow/overflow?\r\n    // Re-estimate: pass x coefficient to Math.sqrt as integer, then adjust the result exponent.\r\n    if (s === 0 || s === 1 / 0) {\r\n      c = x.c.join('');\r\n      if (!(c.length + e & 1)) c += '0';\r\n      s = Math.sqrt(c);\r\n      e = ((e + 1) / 2 | 0) - (e < 0 || e & 1);\r\n      r = new Big((s == 1 / 0 ? '1e' : (s = s.toExponential()).slice(0, s.indexOf('e') + 1)) + e);\r\n    } else {\r\n      r = new Big(s);\r\n    }\r\n\r\n    e = r.e + (Big.DP += 4);\r\n\r\n    // Newton-Raphson iteration.\r\n    do {\r\n      t = r;\r\n      r = half.times(t.plus(x.div(t)));\r\n    } while (t.c.slice(0, e).join('') !== r.c.slice(0, e).join(''));\r\n\r\n    return round(r, Big.DP -= 4, Big.RM);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big times the value of Big y.\r\n   */\r\n  P.times = P.mul = function (y) {\r\n    var c,\r\n      x = this,\r\n      Big = x.constructor,\r\n      xc = x.c,\r\n      yc = (y = new Big(y)).c,\r\n      a = xc.length,\r\n      b = yc.length,\r\n      i = x.e,\r\n      j = y.e;\r\n\r\n    // Determine sign of result.\r\n    y.s = x.s == y.s ? 1 : -1;\r\n\r\n    // Return signed 0 if either 0.\r\n    if (!xc[0] || !yc[0]) return new Big(y.s * 0);\r\n\r\n    // Initialise exponent of result as x.e + y.e.\r\n    y.e = i + j;\r\n\r\n    // If array xc has fewer digits than yc, swap xc and yc, and lengths.\r\n    if (a < b) {\r\n      c = xc;\r\n      xc = yc;\r\n      yc = c;\r\n      j = a;\r\n      a = b;\r\n      b = j;\r\n    }\r\n\r\n    // Initialise coefficient array of result with zeros.\r\n    for (c = new Array(j = a + b); j--;) c[j] = 0;\r\n\r\n    // Multiply.\r\n\r\n    // i is initially xc.length.\r\n    for (i = b; i--;) {\r\n      b = 0;\r\n\r\n      // a is yc.length.\r\n      for (j = a + i; j > i;) {\r\n\r\n        // Current sum of products at this digit position, plus carry.\r\n        b = c[j] + yc[i] * xc[j - i - 1] + b;\r\n        c[j--] = b % 10;\r\n\r\n        // carry\r\n        b = b / 10 | 0;\r\n      }\r\n\r\n      c[j] = (c[j] + b) % 10;\r\n    }\r\n\r\n    // Increment result exponent if there is a final carry, otherwise remove leading zero.\r\n    if (b) ++y.e;\r\n    else c.shift();\r\n\r\n    // Remove trailing zeros.\r\n    for (i = c.length; !c[--i];) c.pop();\r\n    y.c = c;\r\n\r\n    return y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big in exponential notation to dp fixed decimal\r\n   * places and rounded using Big.RM.\r\n   *\r\n   * dp? {number} Integer, 0 to MAX_DP inclusive.\r\n   */\r\n  P.toExponential = function (dp) {\r\n    return stringify(this, 1, dp, dp);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big in normal notation to dp fixed decimal\r\n   * places and rounded using Big.RM.\r\n   *\r\n   * dp? {number} Integer, 0 to MAX_DP inclusive.\r\n   *\r\n   * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n   * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n   */\r\n  P.toFixed = function (dp) {\r\n    return stringify(this, 2, dp, this.e + dp);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big rounded to sd significant digits using\r\n   * Big.RM. Use exponential notation if sd is less than the number of digits necessary to represent\r\n   * the integer part of the value in normal notation.\r\n   *\r\n   * sd {number} Integer, 1 to MAX_DP inclusive.\r\n   */\r\n  P.toPrecision = function (sd) {\r\n    return stringify(this, 3, sd, sd - 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big.\r\n   * Return exponential notation if this Big has a positive exponent equal to or greater than\r\n   * Big.PE, or a negative exponent equal to or less than Big.NE.\r\n   * Omit the sign for negative zero.\r\n   */\r\n  P.toString = function () {\r\n    return stringify(this);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big.\r\n   * Return exponential notation if this Big has a positive exponent equal to or greater than\r\n   * Big.PE, or a negative exponent equal to or less than Big.NE.\r\n   * Include the sign for negative zero.\r\n   */\r\n  P.valueOf = P.toJSON = function () {\r\n    return stringify(this, 4);\r\n  };\r\n\r\n\r\n  // Export\r\n\r\n\r\n  Big = _Big_();\r\n\r\n  Big['default'] = Big.Big = Big;\r\n\r\n  //AMD.\r\n  if (typeof define === 'function' && define.amd) {\r\n    define(function () { return Big; });\r\n\r\n  // Node and other CommonJS-like environments that support module.exports.\r\n  } else if (typeof module !== 'undefined' && module.exports) {\r\n    module.exports = Big;\r\n\r\n  //Browser.\r\n  } else {\r\n    GLOBAL.Big = Big;\r\n  }\r\n})(this);\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","GLOBAL","_Big_","Big","n","x","UNDEFINED","s","e","c","slice","i","NUMERIC","test","Error","charAt","indexOf","replace","search","substring","length","nl","constructor","prototype","P","DP","RM","NE","PE","version","round","dp","rm","more","xc","INVALID_RM","unshift","pop","stringify","id","k","z","MAX_DP","INVALID_DP","push","join","abs","P.abs","cmp","P.cmp","y","yc","j","l","isneg","div","P.div","a","b","DIV_BY_ZERO","bl","bz","ai","al","r","rl","q","qc","qi","d","ri","bt","shift","eq","P.eq","gt","P.gt","gte","P.gte","lt","P.lt","lte","P.lte","minus","sub","P.sub","plus","xe","ye","xlty","t","reverse","mod","P.mod","ygtx","times","add","P.add","pow","P.pow","one","MAX_POWER","P.round","sqrt","P.sqrt","half","Math","toExponential","mul","P.mul","Array","P.toExponential","toFixed","P.toFixed","toPrecision","P.toPrecision","sd","toString","P.toString","valueOf","toJSON","P.toJSON","define","amd"]
}
