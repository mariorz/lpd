{"version":3,"sources":["re_frisk/trace.cljs"],"mappings":"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","names":["re-frisk.trace/normalize-traces","traces","ignore-events","cljs.core.reduce","p__62929","map__62930","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","items","op-type","tags","duration","id","trace","cljs.core._EQ_","cljs.core/namespace","item","G__62934","cljs.core/Keyword","cljs.core/not","cljs.core/first","cljs.core.conj","cljs.core.merge","cljs.core.dissoc","cljs.core.assoc","cljs.core/select-keys","re-frisk.utils/truncate-name","re-frisk.diff.diff/diff","prev","cljs.core/peek","cljs.core/pop","re-frisk.utils/str-ms","cljs.core.update","cljs.core/conj","re-frame.interop/reagent-id","re-frame.db/app-db","cljs.core.sort_by","re-frisk.trace/normalize-durations","first-event","p__62948","map__62950","subs?","subs","handler-duration","fx-duration","map__62953","start","created-duration-cached","run-duration","created-duration","disposed-duration","render-duration","p__62955","map__62956","acc","end","cached?","G__62958","cljs.core/+","cljs.core/inc","handler-fx-duration","G__63004"],"sourcesContent":["(ns re-frisk.trace\n  (:require [re-frisk.diff.diff :as diff]\n            [re-frisk.utils :as utils]\n            [re-frame.trace]\n            [re-frame.interop :as interop]\n            [re-frame.db :as db]))\n\n(defn normalize-traces [traces ignore-events]\n  (reduce (fn [items {:keys [op-type tags duration id] :as trace}]\n            (let [op-type (if (= (namespace op-type) \"sub\") :sub op-type)\n                  item    {:indx id :trace? true}]\n              (case op-type\n                ;:re-frame.router/fsm-trigger\n                #_(conj items (merge item\n                                     (select-keys trace [:id :op-type :operation :start :end])))\n                :event\n                (when (or (not ignore-events) (not (get ignore-events (first (:event tags)))))\n                  (conj items (merge (dissoc item :trace?)\n                                     (assoc (select-keys trace [:id :op-type :operation :duration\n                                                                :start :end])\n                                       :event (:event tags)\n                                       :truncated-name (utils/truncate-name (str (first (:event tags))))\n                                       :app-db-diff (diff/diff (:app-db-before tags) (:app-db-after tags))))))\n                :event/handler\n                (let [prev (peek items)]\n                  (when (= (:op-type prev) :event)\n                    (conj (pop items) (assoc prev :handler-duration duration))\n                    #_(conj items (merge item\n                                         (select-keys trace [:id :op-type :operation :duration])))))\n                :event/do-fx\n                (let [prev (peek items)]\n                  (when (= (:op-type prev) :event)\n                    (conj (pop items) (assoc prev :fx-duration duration))\n                    #_(conj items (merge item\n                                         (select-keys trace [:id :op-type :duration])))))\n                (:sub :render)\n                (let [prev  (peek items)\n                      trace (select-keys trace [:id :op-type :operation :duration :start :end])\n                      trace (assoc trace :duration-ms (utils/str-ms (:duration trace))\n                                         :reaction (:reaction tags)\n                                         :cached? (:cached? tags)\n                                         :input-signals (:input-signals tags))]\n                  (if (:subs? prev)\n                    (conj (pop items) (update prev :subs conj trace))\n                    (conj items (merge item\n                                       {:op-type         :subs :subs? true :subs [trace]\n                                        :app-db-reaction (interop/reagent-id db/app-db)\n                                        :start           (:start trace)}))))\n                items)))\n          []\n          (sort-by :id traces)))\n\n(defn normalize-durations [first-event]\n  (fn [{:keys [subs? subs op-type handler-duration fx-duration]\n        :as   trace}]\n    (let [{:keys [duration handler-duration fx-duration start created-duration-cached\n                  run-duration created-duration disposed-duration render-duration]\n           :as   trace}\n          (cond\n            subs?\n            (merge trace\n                   (reduce (fn [acc {:keys [duration op-type end cached?]}]\n                             (cond-> (update acc :duration + duration)\n                                     :always\n                                     (assoc :end end)\n                                     (= op-type :sub/run)\n                                     (-> (update :run-count inc)\n                                         (update :run-duration + duration))\n                                     (and (= op-type :sub/create) (not cached?))\n                                     (-> (update :created-count inc)\n                                         (update :created-duration + duration))\n                                     (and (= op-type :sub/create) cached?)\n                                     (-> (update :created-count-cached inc)\n                                         (update :created-duration-cached + duration))\n                                     (= op-type :sub/dispose)\n                                     (-> (update :disposed-count inc)\n                                         (update :disposed-duration + duration))\n                                     (= op-type :render)\n                                     (-> (update :render-count inc)\n                                         (update :render-duration + duration))))\n                           {:duration                0\n                            :run-count               0\n                            :run-duration            0\n                            :render-count            0\n                            :render-duration         0\n                            :created-count           0\n                            :created-duration        0\n                            :disposed-count          0\n                            :disposed-duration       0\n                            :created-count-cached    0\n                            :created-duration-cached 0}\n                           subs))\n            (= op-type :event)\n            (let [handler-fx-duration (+ handler-duration fx-duration)]\n              (assoc trace :handler-fx-duration handler-fx-duration\n                           :handler-fx-duration-ms (utils/str-ms handler-fx-duration)))\n            :else\n            trace)]\n      (cond-> trace\n              duration\n              (assoc :duration-ms (utils/str-ms duration))\n              handler-duration\n              (assoc :handler-duration-ms (utils/str-ms handler-duration))\n              fx-duration\n              (assoc :fx-duration-ms (utils/str-ms fx-duration))\n              run-duration\n              (assoc :run-duration-ms (utils/str-ms run-duration))\n              created-duration\n              (assoc :created-duration-ms (utils/str-ms created-duration))\n              created-duration-cached\n              (assoc :created-duration-cached-ms (utils/str-ms created-duration-cached))\n              disposed-duration\n              (assoc :disposed-duration-ms (utils/str-ms disposed-duration))\n              render-duration\n              (assoc :render-duration-ms (utils/str-ms render-duration))\n              :always\n              (assoc :position (- start (:start first-event)))))))"]}