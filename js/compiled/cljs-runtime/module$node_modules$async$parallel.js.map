{
"version":3,
"file":"module$node_modules$async$parallel.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,CAAe,kCAAf,CAAuD,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG/FC,MAAA,CAAOC,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAA,CAAQI,OAAR,CAiFAC,QAAsB,CAACC,KAAD,CAAQC,QAAR,CAAkB,CACtC,CAAC,CAAA,CAAGC,UAAH,CAAcJ,OAAf,EAAwBK,QAAxB,CAAiCL,OAAjC,CAA0CE,KAA1C,CAAiDC,QAAjD,CADsC,CA7ExC,KAAIE,SAM0C,CAR1CC,MAQ0C,CARhCZ,OAAA,CAAQ,kCAAR,CAQgC,GANRY,MAMQ,CAAWC,UAAX,CANRD,MAMQ,CAA8B,CAAEN,QANxCM,MAMsC,CAN5E,CAIIF,WAE0C,CAJ1CI,OAI0C,CAJ9Bd,OAAA,CAAQ,6CAAR,CAI8B,GAFNc,OAEM,CAAWD,UAAX,CAFNC,OAEM,CAA8B,CAAER,QAFtCQ,OAEoC,CA0E5Eb,OAAA,CAAOC,OAAP,CAAiBA,OAAA,CAAQ,SAAR,CA1F8E;",
"sources":["node_modules/async/parallel.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$async$parallel\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = parallelLimit;\n\nvar _eachOf = require('./eachOf');\n\nvar _eachOf2 = _interopRequireDefault(_eachOf);\n\nvar _parallel = require('./internal/parallel');\n\nvar _parallel2 = _interopRequireDefault(_parallel);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Run the `tasks` collection of functions in parallel, without waiting until\n * the previous function has completed. If any of the functions pass an error to\n * its callback, the main `callback` is immediately called with the value of the\n * error. Once the `tasks` have completed, the results are passed to the final\n * `callback` as an array.\n *\n * **Note:** `parallel` is about kicking-off I/O tasks in parallel, not about\n * parallel execution of code.  If your tasks do not use any timers or perform\n * any I/O, they will actually be executed in series.  Any synchronous setup\n * sections for each task will happen one after the other.  JavaScript remains\n * single-threaded.\n *\n * **Hint:** Use [`reflect`]{@link module:Utils.reflect} to continue the\n * execution of other tasks when a task fails.\n *\n * It is also possible to use an object instead of an array. Each property will\n * be run as a function and the results will be passed to the final `callback`\n * as an object instead of an array. This can be a more readable way of handling\n * results from {@link async.parallel}.\n *\n * @name parallel\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|Object} tasks - A collection of\n * [async functions]{@link AsyncFunction} to run.\n * Each async function can complete with any number of optional `result` values.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed successfully. This function gets a results array\n * (or object) containing all the result arguments passed to the task callbacks.\n * Invoked with (err, results).\n *\n * @example\n * async.parallel([\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ],\n * // optional callback\n * function(err, results) {\n *     // the results array will equal ['one','two'] even though\n *     // the second function had a shorter timeout.\n * });\n *\n * // an example using an object instead of an array\n * async.parallel({\n *     one: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 1);\n *         }, 200);\n *     },\n *     two: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 2);\n *         }, 100);\n *     }\n * }, function(err, results) {\n *     // results is now equals to: {one: 1, two: 2}\n * });\n */\nfunction parallelLimit(tasks, callback) {\n  (0, _parallel2.default)(_eachOf2.default, tasks, callback);\n}\nmodule.exports = exports['default'];\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","default","parallelLimit","tasks","callback","_parallel2","_eachOf2","_eachOf","__esModule","_parallel"]
}
