{
"version":3,
"file":"module$node_modules$axios$lib$core$dispatchRequest.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAe,kDAAf,CAAuE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG/G,IAAIC,MAAQH,OAAA,CAAQ,qCAAR,CAAZ,CACII,cAAgBJ,OAAA,CAAQ,kDAAR,CADpB,CAEIK,SAAWL,OAAA,CAAQ,+CAAR,CAFf,CAGIM,SAAWN,OAAA,CAAQ,wCAAR,CAHf,CAIIO,cAAgBP,OAAA,CAAQ,qDAAR,CAJpB,CAKIQ,YAAcR,OAAA,CAAQ,mDAAR,CAiBlBC;MAAA,CAAOC,OAAP,CAAiBO,QAAwB,CAACC,MAAD,CAAS,CACnBA,MAZ7B,CAAWC,WAAX,EAY6BD,MAX3B,CAAOC,WAAP,CAAmBC,gBAAnB,EAcEF,OAAJ,CAAWG,OAAX,EAAsB,CAACN,aAAA,CAAcG,MAAd,CAAqBI,GAArB,CAAvB,GACEJ,MADF,CACSI,GADT,CACeN,WAAA,CAAYE,MAAZ,CAAmBG,OAAnB,CAA4BH,MAA5B,CAAmCI,GAAnC,CADf,CAKAJ,OAAA,CAAOK,OAAP,CAAiBL,MAAjB,CAAwBK,OAAxB,EAAmC,EAGnCL,OAAA,CAAOM,IAAP,CAAcZ,aAAA,CACZM,MADY,CACLM,IADK,CAEZN,MAFY,CAELK,OAFK,CAGZL,MAHY,CAGLO,gBAHK,CAOdP,OAAA,CAAOK,OAAP,CAAiBZ,KAAA,CAAMe,KAAN,CACfR,MADe,CACRK,OADQ,CACAI,MADA,EACU,EADV,CAEfT,MAAA,CAAOK,OAAP,CAAeL,MAAf,CAAsBU,MAAtB,CAFe,EAEkB,EAFlB,CAGfV,MAHe,CAGRK,OAHQ,EAGG,EAHH,CAMjBZ,MAAA,CAAMkB,OAAN,CACE,uCAAA,CAAA,KAAA,CAAA,GAAA,CADF,CAEEC,QAA0B,CAACF,MAAD,CAAS,CACjC,OAAOV,MAAA,CAAOK,OAAP,CAAeK,MAAf,CAD0B,CAFrC,CASA;MAAO,CAFOV,MAEP,CAFca,OAEd,EAFyBjB,QAEzB,CAFkCiB,OAElC,EAAQb,MAAR,CAAA,CAAgBc,IAAhB,CAAqBC,QAA4B,CAACC,QAAD,CAAW,CACpChB,MA9C/B,CAAWC,WAAX,EA8C+BD,MA7C7B,CAAOC,WAAP,CAAmBC,gBAAnB,EAgDAc,SAAA,CAASV,IAAT,CAAgBZ,aAAA,CACdsB,QADc,CACLV,IADK,CAEdU,QAFc,CAELX,OAFK,CAGdL,MAHc,CAGPiB,iBAHO,CAMhB,OAAOD,SAV0D,CAA5D,CAWJE,QAA2B,CAACC,MAAD,CAAS,CAChCxB,QAAA,CAASwB,MAAT,CAAL,GAC+BnB,MAG7B,CA7DOC,WA6DP,EAH6BD,MAzD/B,CAAOC,WAAP,CAAmBC,gBAAnB,EA4DE,CAAIiB,MAAJ,EAAcA,MAAd,CAAqBH,QAArB,GACEG,MADF,CACSH,QADT,CACkBV,IADlB,CACyBZ,aAAA,CACrByB,MADqB,CACdH,QADc,CACLV,IADK,CAErBa,MAFqB,CAEdH,QAFc,CAELX,OAFK,CAGrBL,MAHqB,CAGdiB,iBAHc,CADzB,CAJF,CAaA,OAAOG,QAAA,CAAQC,MAAR,CAAeF,MAAf,CAd8B,CAXhC,CAlCyC,CAzB6D;",
"sources":["node_modules/axios/lib/core/dispatchRequest.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$axios$lib$core$dispatchRequest\"] = function(global,require,module,exports) {\n'use strict';\n\nvar utils = require('./../utils');\nvar transformData = require('./transformData');\nvar isCancel = require('../cancel/isCancel');\nvar defaults = require('../defaults');\nvar isAbsoluteURL = require('./../helpers/isAbsoluteURL');\nvar combineURLs = require('./../helpers/combineURLs');\n\n/**\n * Throws a `Cancel` if cancellation has been requested.\n */\nfunction throwIfCancellationRequested(config) {\n  if (config.cancelToken) {\n    config.cancelToken.throwIfRequested();\n  }\n}\n\n/**\n * Dispatch a request to the server using the configured adapter.\n *\n * @param {object} config The config that is to be used for the request\n * @returns {Promise} The Promise to be fulfilled\n */\nmodule.exports = function dispatchRequest(config) {\n  throwIfCancellationRequested(config);\n\n  // Support baseURL config\n  if (config.baseURL && !isAbsoluteURL(config.url)) {\n    config.url = combineURLs(config.baseURL, config.url);\n  }\n\n  // Ensure headers exist\n  config.headers = config.headers || {};\n\n  // Transform request data\n  config.data = transformData(\n    config.data,\n    config.headers,\n    config.transformRequest\n  );\n\n  // Flatten headers\n  config.headers = utils.merge(\n    config.headers.common || {},\n    config.headers[config.method] || {},\n    config.headers || {}\n  );\n\n  utils.forEach(\n    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],\n    function cleanHeaderConfig(method) {\n      delete config.headers[method];\n    }\n  );\n\n  var adapter = config.adapter || defaults.adapter;\n\n  return adapter(config).then(function onAdapterResolution(response) {\n    throwIfCancellationRequested(config);\n\n    // Transform response data\n    response.data = transformData(\n      response.data,\n      response.headers,\n      config.transformResponse\n    );\n\n    return response;\n  }, function onAdapterRejection(reason) {\n    if (!isCancel(reason)) {\n      throwIfCancellationRequested(config);\n\n      // Transform response data\n      if (reason && reason.response) {\n        reason.response.data = transformData(\n          reason.response.data,\n          reason.response.headers,\n          config.transformResponse\n        );\n      }\n    }\n\n    return Promise.reject(reason);\n  });\n};\n\n};"],
"names":["shadow$provide","global","require","module","exports","utils","transformData","isCancel","defaults","isAbsoluteURL","combineURLs","module.exports","config","cancelToken","throwIfRequested","baseURL","url","headers","data","transformRequest","merge","common","method","forEach","cleanHeaderConfig","adapter","then","onAdapterResolution","response","transformResponse","onAdapterRejection","reason","Promise","reject"]
}
