{"version":3,"sources":["revert/pools.cljs"],"mappings":"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","names":["revert.pools/<get-reserves","contract","c__52208__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__52209__auto__","switch__52185__auto__","state_74298","state_val_74299","inst_74283","inst_74284","cljs.core.async.interop/p->c","cljs.core.async.impl.ioc-helpers/take!","inst_74286","inst_74287","cljs.core/ExceptionInfo","inst_74288","cljs.core/ex-data","inst_74289","inst_74290","cljs.core._EQ_","inst_74291","statearr-74300","statearr-74301","statearr-74302","inst_74293","statearr-74303","statearr-74304","inst_74296","cljs.core.async.impl.ioc-helpers/return-chan","statearr-74305","state-machine__52186__auto__","ret-value__52187__auto__","result__52188__auto__","cljs.core/keyword-identical?","ex__52189__auto__","e74306","statearr-74307","cljs.core/seq","statearr-74308","cljs.core/first","state__52210__auto__","statearr-74309","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","revert.pools/<token0","state_74325","state_val_74326","inst_74310","inst_74311","inst_74313","inst_74314","inst_74315","inst_74316","inst_74317","inst_74318","statearr-74327","statearr-74328","statearr-74329","inst_74320","statearr-74330","statearr-74331","inst_74323","statearr-74332","e74333","statearr-74334","statearr-74335","statearr-74336","revert.pools/<token1","state_74352","state_val_74353","inst_74337","inst_74338","inst_74340","inst_74341","inst_74342","inst_74343","inst_74344","inst_74345","statearr-74354","statearr-74355","statearr-74356","inst_74347","statearr-74357","statearr-74358","inst_74350","statearr-74359","e74360","statearr-74361","statearr-74362","statearr-74363","revert.pools/total-lps","pool","revert.pools/reserves","p__74364","p__74365","vec__74366","cljs.core.nth","vec__74369","revert.pools/usd-volume","token0-price","token0-volume","token1-price","token1-volume","bignumber.core//","bignumber.core/+","bignumber.core/*","revert.utils/bn","revert.pools/token0-price","revert.pools/token1-price","revert.pools/usd-diff","init-pool","init-pool-prop","init-lp","init-token0","init-token1","current-pool-prop","current-token0","current-token1","token0-diff","bignumber.core/-","token1-diff","init-usd","usd-diff'","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","revert.pools/<pool-dailys","p__74374","map__74375","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","seq74372","G__74373","cljs.core/next","self__4723__auto__","pair-address","limit","state_74398","state_val_74399","inst_74377","inst_74379","inst_74380","inst_74381","statearr-74400","statearr-74401","statearr-74402","inst_74383","inst_74384","inst_74385","inst_74386","inst_74387","inst_74388","inst_74389","inst_74390","inst_74391","inst_74392","inst_74393","statearr-74403","statearr-74404","inst_74396","statearr-74405","e74406","statearr-74407","statearr-74408","statearr-74409","pool-dailys","revert.thegraph/<pair-days","cljs.core/empty?","exchange","token0-address","token1-address","cljs.core/last","init-token0-price","init-token1-price","cljs.core.map","cljs.core.into","revert.utils/price-divergence","revert.pools/<pool-histories","pool-addresses","days","a","state_74414","state_val_74415","inst_74410","inst_74412","statearr-74416","e74417","statearr-74418","statearr-74419","statearr-74420","revert.pools._LT_pool_dailys","cljs.core.async.merge","cljs.core.async/map<","hist","cljs.core.async/reduce","cljs.core/into","revert.pools/lp-proportion","s","revert.pools/most-recent-snapshots","gsnapshots","pair-snapshots","cljs.core/group-by","cljs.core.comp","last-snapshots","p1__74422#","cljs.core.sort_by","cljs.core/vals","revert.pools/<graph-uniswap-positions","user-address","state_74436","state_val_74437","inst_74423","inst_74425","inst_74426","inst_74427","inst_74428","inst_74429","inst_74431","inst_74432","inst_74433","inst_74434","cljs.core/PersistentHashMap","statearr-74438","e74439","statearr-74440","statearr-74441","statearr-74442","revert.thegraph/<user-lp-snapshots","revert.thegraph/<user-lps","revert.pools/address0","revert.pools/zapper-in-addresses","revert.pools/zapper-out-addresses","revert.pools/mint-addresses","cljs.core/set","cljs.core.conj","revert.pools/proxys-out","revert.pools/make-burn-map","lp-pool","mint-txr","token1-decimals","token2-decimals","tx","re","lp-address","token0","token1","txhash","block-number","pool-decimals","gas-decimals","eth-decimals","gas-price","revert.utils/ebn->bn","gas-used","transfer-logs","cljs.core.filter","cljs.core/some?","revert.ethereum/decode-transfer-data","lp-transfers","p1__74443#","clojure.string/lower-case","cljs.core/contains?","lp-qty","cljs.core.reduce","burn-logs","p1__74444#","revert.ethereum/decode-burn-data","lp-burns","p1__74445#","token0-qty","token1-qty","revert.pools/<get-lp-burns","state_74469","state_val_74470","inst_74448","inst_74449","cljs.core/deref","inst_74450","statearr-74471","inst_74458","inst_74455","inst_74461","inst_74452","inst_74453","inst_74454","inst_74456","inst_74457","inst_74459","p1__74446#","inst_74460","inst_74462","statearr-74472","inst_74464","inst_74465","p1__74447#","inst_74466","inst_74467","statearr-74473","e74474","statearr-74475","statearr-74476","statearr-74477","burn-transfers","revert.ethereum/<user-lp-burn-transfers","revert.ethereum/provider","token0-decimals","revert.utils/str->int","burn-hashes","burn-txrs","revert.ethereum/<get-trxs","revert.pools/<get-user-burns","lp-pools","burns","cljs.core.mapv","p","state_74486","state_val_74487","inst_74478","inst_74479","inst_74480","statearr-74488","inst_74482","inst_74483","inst_74484","statearr-74489","e74490","statearr-74491","statearr-74492","statearr-74493","cljs.core/merge","revert.pools/make-mint-map","p1__74494#","p1__74495#","mint-logs","p1__74496#","revert.ethereum/decode-mint-data","lp-mints","p1__74497#","revert.pools/<get-lp-mints","state_74521","state_val_74522","inst_74500","inst_74501","inst_74502","inst_74503","inst_74504","inst_74505","inst_74506","inst_74507","inst_74508","statearr-74523","inst_74513","inst_74510","inst_74511","p1__74498#","inst_74512","inst_74514","statearr-74524","inst_74516","inst_74517","p1__74499#","inst_74518","inst_74519","statearr-74525","e74526","statearr-74527","statearr-74528","statearr-74529","mint-transfers","revert.ethereum/<user-lp-mint-transfers","mint-hashes","mint-txrs","revert.pools/<get-user-mints","mints","state_74538","state_val_74539","inst_74530","inst_74531","inst_74532","statearr-74540","inst_74534","inst_74535","inst_74536","statearr-74541","e74542","statearr-74543","statearr-74544","statearr-74545","revert.pools/<fetch-account","account-or-name","state_74568","state_val_74569","inst_74546","inst_74548","inst_74549","statearr-74570","inst_74556","inst_74551","inst_74552","inst_74553","inst_74554","inst_74555","inst_74557","statearr-74571","inst_74559","inst_74560","statearr-74572","inst_74562","inst_74563","inst_74564","inst_74565","inst_74566","statearr-74573","e74574","statearr-74575","statearr-74576","statearr-74577","revert.ethereum/<resolve-address","revert.pools/pool-name","pool-history","revert.pools/exchange","revert.pools/exchange-emoji","G__74578","js/Error"],"sourcesContent":["(ns revert.pools\n  (:require\n   [clojure.string :as string]\n   [cljs.core.async :refer [go]]\n   [cljs.core.async.interop :refer-macros [<p!]]\n   [bignumber.core :as bn]\n   [revert.utils :as u]\n   [revert.ethereum :as ethereum]\n   [revert.thegraph :as thegraph]))\n\n\n\n(defn <get-reserves\n  [^js contract]\n  (go (<p! (. contract getReserves))))\n\n(defn <token0\n  [^js contract]\n  (go (<p! (. contract token0))))\n\n(defn <token1\n  [^js contract]\n  (go (<p! (. contract token1))))\n\n\n\n(defn total-lps\n  [pool]\n  (:total-supply pool))\n\n\n(defn reserves\n  [pool]\n  {(:token0-address pool) (:reserve0 pool)\n   (:token1-address pool) (:reserve1 pool)})\n\n\n\n(defn usd-volume\n  [[token0-price token0-volume]\n   [token1-price token1-volume]]\n  (bn// (bn/+ (bn/* token0-price token0-volume)\n              (bn/* token1-price token1-volume))\n        (u/bn \"2.0\")))\n\n\n(defn token0-price\n  [pool]\n  (bn// (bn// (:reserve-usd pool) (u/bn \"2.0\"))\n        (:reserve0 pool)))\n\n(defn token1-price\n  [pool]\n  (bn// (bn// (:reserve-usd pool) (u/bn \"2.0\"))\n        (:reserve1 pool)))\n\n\n(defn usd-diff\n  [init-pool pool]\n  (let [;; init\n        init-pool-prop (bn// (u/bn \"1.0\") (:reserve-usd init-pool))\n        init-lp (bn/* init-pool-prop (:total-supply init-pool))\n        init-token0 (bn/* init-pool-prop (:reserve0 init-pool))\n        init-token1 (bn/* init-pool-prop (:reserve1 init-pool))\n        ;; current\n        current-pool-prop (bn// init-lp (:total-supply pool))\n        current-token0 (bn/* current-pool-prop (:reserve0 pool))\n        current-token1 (bn/* current-pool-prop (:reserve1 pool))\n        ;;diff\n        token0-diff (bn/- current-token0 init-token0)\n        token1-diff (bn/- current-token1 init-token1)\n        token0-price (token0-price pool)\n        token1-price (token1-price pool)\n        init-usd (bn/+ (bn/* init-token0 token0-price)\n                       (bn/* init-token1 token1-price))\n        usd-diff' (bn/* (bn/+ (bn/* token0-price token0-diff)\n                              (bn/* token1-price token1-diff))\n                        (u/bn \"1.0\"))]\n    (bn/* (bn// usd-diff' init-usd) (u/bn \"100\"))))\n\n\n(defn <pool-dailys\n  [pair-address & {:keys [limit] :or {limit 365}}]\n  (go\n    (let [pool-dailys (<! (thegraph/<pair-days pair-address limit))]\n      (when (not (empty? pool-dailys))\n        (let [exchange (:exchange (first pool-dailys))\n              token0-address (:token0-address (first pool-dailys))\n              token1-address (:token1-address (first pool-dailys))\n              init-pool (last pool-dailys)\n              init-token0-price (token0-price init-pool)\n              init-token1-price (token1-price init-pool)]\n          (map (fn [pool]\n                 (let [token0-price (token0-price pool)\n                       token1-price (token1-price pool)]\n                   (into pool\n                         {:token0-price token0-price\n                          :token1-price token1-price\n                          :price-divergence (u/price-divergence\n                                             [init-token0-price token0-price]\n                                           [init-token1-price token1-price])\n                          :volume-usd-derived (usd-volume\n                                               [token0-price (:volume0 pool)]\n                                               [token1-price (:volume1 pool)])\n                          :vol-res-ratio (bn// (usd-volume\n                                                [token0-price (:volume0 pool)]\n                                                [token1-price (:volume1 pool)])\n                                             (:reserve-usd pool))\n                          :usd-diff (usd-diff init-pool pool)})))\n               pool-dailys))))))\n\n\n(defn <pool-histories\n  [pool-addresses days]\n  (->> (map (fn [a] (go (<! (<pool-dailys a :limit days))))\n            pool-addresses)\n       (cljs.core.async/merge)\n       (cljs.core.async/map< (fn [hist] {(:address (first hist)) hist}))\n       (cljs.core.async/reduce into {})))\n\n\n(defn lp-proportion [s]\n  (bn// (:liquidityTokenBalance s)\n                    (:liquidityTokenTotalSupply s)))\n\n\n#_(defn snapshot-balances [s]\n  (let [datetime (js/Date. (* 1000 (:timestamp s)))\n        token0 (:symbol (:token0 (:pair s)))\n        token1 (:symbol (:token1 (:pair s)))\n        prop (lp-proportion s)\n        token0-balance (bn/* prop (:reserve0 s))\n        token1-balance (bn/* prop (:reserve1 s))]\n    {:token0-symbol token0\n     :token1-symbol token1\n     :token0-balance token0-balance\n     :token1-balance token1-balance}))\n\n\n\n#_(defn last-lp-snapshots\n  [snapshots]\n  (let [pair-snapshots (group-by (comp :id :pair) snapshots)\n        last-snapshots (map (comp last #(sort-by :timestamp %)) (vals pair-snapshots))]\n    (map (fn [s] {:token ((comp :id :pair) s)\n                  :pos (snapshot-balances s)})\n         last-snapshots)))\n\n\n\n(defn most-recent-snapshots\n  \"Returns most recent snapshot for each LP pair where\n   `gsnapshots` is a coll of LPSnapshots as returned\n    by `thegraph/<user-lp-snapshots`\"\n  [gsnapshots]\n  (let [pair-snapshots (group-by (comp :id :pair) gsnapshots)\n        last-snapshots (map (comp last #(sort-by :timestamp %)) (vals pair-snapshots))]\n    last-snapshots))\n\n\n(defn <graph-uniswap-positions\n  [user-address]\n  (go (let [snapshots (<! (thegraph/<user-lp-snapshots user-address))\n            pair-ids (map (comp :id :pair)\n                          (most-recent-snapshots snapshots))\n            positions (<! (thegraph/<user-lps user-address pair-ids))]\n        {:user-address user-address\n         ;;:last-snapshots (last-lp-snapshots snapshots)\n         ;;:snapshots snapshots\n         :lp-positions positions})))\n\n\n\n(def address0 \"0x0000000000000000000000000000000000000000\")\n\n(def zapper-in-addresses\n  [;; uniswap\n   \"0x5acedba6c402e2682d312a7b4982eda0ccf2d2e3\"\n   \"0xd3cf4e98e1e432b3d6ae42ae406a78f2ac8293d0\"\n   \"0xeee503b78e96f24c47c9ad8c287990e51697a99c\"\n   \"0x026bdac2f308c0109a864138cca1a623f7828f4a\"\n   \"0x775EE938186FddC13bD7C89D24820E1b0758F91D\"\n   \"0x80c5e6908368cb9db503ba968d7ec5a565bfb389\"\n   ;; sushiswap\n   \"0xcff6ef0b9916682b37d80c19cff8949bc1886bc2\"\n   \"0x91baf383abc0c332a69a73041c866f6761a90b3c\"])\n\n\n(def zapper-out-addresses\n  [;; uniswap\n   \"0x69090d6968b12b79cd403ee33e871284dc7e92f6\"\n   \"0x343e3a490c9251dc0eaa81da146ba6abe6c78b2d\"\n   \"0xcfa897e2c4e0a64eaa9ca41f607820a09134353a\"\n   \"0x79b6c6f8634ea477ed725ec23b7b6fcb41f00e58\"\n   \"0x05448acd708b78791d007bc1e037ea6fe78283a6\"\n   ;; sushiswap\n   \"0x3351be9654188571a3e32388da582947928111ce\"\n   \"0xa4e4beaa9d27eabb6a5e010565a21d93a723c7e1\"])\n\n\n\n(def mint-addresses (set (conj zapper-in-addresses address0)))\n\n(def proxys-out\n  (set zapper-out-addresses))\n\n\n(defn make-burn-map\n  [lp-pool user-address mint-txr token1-decimals token2-decimals]\n  (let [tx (:tx mint-txr)\n        re (:receipt mint-txr)\n        ;;lp-address (:address lp-pool)\n        ;;token0 (first (:tokens lp-pool))\n        ;;token1 (second (:tokens lp-pool))\n        lp-address (:id lp-pool)\n        token0 (:id (:token0 lp-pool))\n        token1 (:id (:token1 lp-pool))\n\n        txhash (.-hash tx)\n        block-number (.-blockNumber tx)\n        pool-decimals 18\n        gas-decimals 0\n        eth-decimals 18\n        gas-price (u/ebn->bn (.-gasPrice tx) eth-decimals)\n        gas-used (u/ebn->bn (.-gasUsed re) gas-decimals)\n\n\n\n        transfer-logs (filter some? (map ethereum/decode-transfer-data (.-logs re)))\n        lp-transfers (filter #(and (= (string/lower-case lp-address)\n                                      (string/lower-case (:token-address %)))\n                                   (= (string/lower-case user-address)\n                                      (string/lower-case (:from %)))\n                                   (or\n                                    (= (string/lower-case (:token-address %))\n                                       (string/lower-case (:to %)))\n                                    (contains?\n                                     proxys-out\n                                     (string/lower-case (:to %)))))\n                             transfer-logs)\n\n        lp-qty (if (empty? lp-transfers)\n                 (u/bn \"0\")\n                 (reduce bn/+ (map :amount lp-transfers)))\n\n        burn-logs (filter some? (map #(ethereum/decode-burn-data % token1-decimals token2-decimals)\n                                     (.-logs re)))\n        lp-burns (filter #(= (string/lower-case lp-address)\n                             (string/lower-case (:pair-address %)))\n                         burn-logs)\n        token0-qty (reduce bn/+ (map :amount0 lp-burns))\n        token1-qty (reduce bn/+ (map :amount1 lp-burns))]\n    (if (and (> token0-qty 0)\n             (> token1-qty 0)\n             (> lp-qty 0))\n      {:block-number block-number\n       :tx-hash txhash\n       :lp-burned lp-qty\n       :gas-price gas-price\n       :gas-used gas-used\n       :withdrawals {token0 token0-qty\n                   token1 token1-qty}})))\n\n\n(defn <get-lp-burns\n  [lp-pool user-address]\n  (go\n    (let\n        [;;pair-address (:address lp-pool)\n         ;;token1-address (first (:tokens lp-pool))\n         ;;token2-address (second (:tokens lp-pool))\n         ;;token1-decimals (<! (ethereum/<token-decimals token1-address))\n         ;;token2-decimals (<! (ethereum/<token-decimals token2-address))\n\n         pair-address (:id lp-pool)\n\n         burn-transfers (<! (ethereum/<user-lp-burn-transfers\n                             @ethereum/provider pair-address user-address))\n\n         token0-decimals (u/str->int (:decimals (:token0 lp-pool)))\n         token1-decimals (u/str->int (:decimals (:token1 lp-pool)))\n         ;; assure unique hashes here since perhaps we can have\n         ;; more than one mint-transfer in the same tx\n         burn-hashes (set (map #(.-transactionHash %) burn-transfers))\n         burn-txrs (<! (ethereum/<get-trxs burn-hashes))\n         burns (map #(make-burn-map lp-pool user-address % token0-decimals token1-decimals)\n                    burn-txrs)]\n      (filter some? burns))))\n\n\n\n(defn <get-user-burns\n  [user-address lp-pools]\n  (let [burns\n        (mapv (fn [p] (go {(:id p)\n                           (<! (<get-lp-burns p user-address))}))\n              lp-pools)]\n    (->> (cljs.core.async/merge burns)\n         (cljs.core.async/reduce merge {}))))\n\n\n\n\n\n(defn make-mint-map\n  [lp-pool user-address mint-txr token1-decimals token2-decimals]\n  (let [tx (:tx mint-txr)\n        re (:receipt mint-txr)\n        ;;lp-address (:address lp-pool)\n        ;;token0 (first (:tokens lp-pool))\n        ;;token1 (second (:tokens lp-pool))\n        lp-address (:id lp-pool)\n        token0 (:id (:token0 lp-pool))\n        token1 (:id (:token1 lp-pool))\n\n        txhash (.-hash tx)\n        block-number (.-blockNumber tx)\n        pool-decimals 18\n        gas-decimals 0\n        eth-decimals 18\n        gas-price (u/ebn->bn (.-gasPrice tx) eth-decimals)\n        gas-used (u/ebn->bn (.-gasUsed re) gas-decimals)\n\n\n        transfer-logs (filter some? (map #(ethereum/decode-transfer-data % pool-decimals)\n                                         (.-logs re)))\n\n        ;; we decode the transaction and filter for the logs that\n        ;; match the lp address, and where the transfer is going from\n        ;; either the zero account, or one of zapper's addresses when\n        ;; this was a zap-in\n        lp-transfers (filter #(and (= (string/lower-case lp-address)\n                                      (string/lower-case (:token-address %)))\n                                   (contains? mint-addresses\n                                              (string/lower-case (:from %)))\n                                   (= (string/lower-case user-address)\n                                      (string/lower-case (:to %))))\n                             transfer-logs)\n        lp-qty (if (empty? lp-transfers)\n                 (u/bn \"0\")\n                 (reduce bn/+ (map :amount lp-transfers)))\n        mint-logs (filter some? (map #(ethereum/decode-mint-data % token1-decimals token2-decimals) (.-logs re)))\n        ;; in case other tokens are minted in the same tx\n        lp-mints (filter #(= (string/lower-case lp-address)\n                             (string/lower-case (:pair-address %)))\n                         mint-logs)\n        token0-qty (reduce bn/+ (map :amount0 lp-mints))\n        token1-qty (reduce bn/+ (map :amount1 lp-mints))]\n    (if (and (> token0-qty 0)\n             (> token1-qty 0)\n             (> lp-qty 0))\n      ;; we have the above check\n      ;; because make-mint-map could have been passed\n      ;; a tx where any address transfers lp-tokens to user-address\n      {:block-number block-number\n       :tx-hash txhash\n       :lp-minted lp-qty\n       :gas-price gas-price\n       :gas-used gas-used\n       :deposits {token0 token0-qty\n                  token1 token1-qty}})))\n\n(defn <get-lp-mints\n  [lp-pool user-address]\n  (go\n    (let\n        [;;pair-address (:address lp-pool)\n         pair-address (:id lp-pool)\n         ;;token1-address (first (:tokens lp-pool))\n         ;;token2-address (second (:tokens lp-pool))\n\n         ;;token1-decimals (<! (ethereum/<token-decimals token1-address))\n         ;;token2-decimals (<! (ethereum/<token-decimals token2-address))\n\n         token0-decimals (u/str->int (:decimals (:token0 lp-pool)))\n         token1-decimals (u/str->int (:decimals (:token1 lp-pool)))\n\n         mint-transfers (<! (ethereum/<user-lp-mint-transfers\n                             @ethereum/provider pair-address user-address))\n         ;; assure unique hashes here since perhaps we can have\n         ;; more than one mint-transfer in the same tx\n         mint-hashes (set (map #(.-transactionHash %) mint-transfers))\n         mint-txrs (<! (ethereum/<get-trxs mint-hashes))\n         mints (map #(make-mint-map lp-pool user-address % token0-decimals token1-decimals)\n                    mint-txrs)]\n      (filter some? mints))))\n\n\n\n\n(defn <get-user-mints\n  [user-address lp-pools]\n  (let [mints\n        (mapv (fn [p] (go {(:id p)\n                           (<! (<get-lp-mints p user-address))}))\n              lp-pools)]\n    (->> (cljs.core.async/merge mints)\n         (cljs.core.async/reduce merge {}))))\n\n#_(defn gposition->pool\n  [gposition]\n  (let [pair (:pair gposition)\n        pair-address (:id pair)\n        token0 (:token0 pair)\n        token1 (:token1 pair)\n        address0 (:id token0)\n        address1 (:id token1)\n        exchange (:exchange gposition)]\n    {:address pair-address\n     :exchange exchange\n     :tokens [address0 address1]}))\n\n\n\n(defn <fetch-account\n  [account-or-name]\n  (go\n    (let [account (<! (ethereum/<resolve-address account-or-name))\n          graph-positions (<! (<graph-uniswap-positions account))\n          pool-addresses (map (comp :id :pair) (:positions graph-positions))\n          ;;lp-pools (map gposition->pool (:positions graph-positions))\n          lp-pools (map :pair (:lp-positions graph-positions))\n          account-mints  (<! (<get-user-mints account lp-pools))\n          account-burns  (<! (<get-user-burns account lp-pools))]\n      (into graph-positions {:account account\n                             :mints account-mints\n                             :burns account-burns}))))\n\n\n\n\n(defn pool-name\n  [pool-history]\n  (str (:token0-symbol (first pool-history)) \"/\" (:token1-symbol (first pool-history))))\n\n\n(defn exchange\n  [pool-history]\n  (:exchange (first pool-history)))\n\n\n(defn exchange-emoji\n  [pool-history]\n  (case (exchange pool-history)\n    \"uniswap\" \"\ud83e\udd84\"\n    \"uniswapv3\" \"\ud83e\udd84\"\n    \"sushiswap\" \"\ud83c\udf63\"\n    \"\" (exchange pool-history)))\n\n\n"]}