{"version":3,"sources":["revert/pools.cljs"],"mappings":"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","names":["revert.pools/<get-reserves","contract","c__52208__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__52209__auto__","switch__52185__auto__","state_87229","state_val_87231","inst_87197","inst_87198","cljs.core.async.interop/p->c","cljs.core.async.impl.ioc-helpers/take!","inst_87200","inst_87202","cljs.core/ExceptionInfo","inst_87209","cljs.core/ex-data","inst_87210","inst_87211","cljs.core._EQ_","inst_87212","statearr-87242","statearr-87244","statearr-87246","inst_87215","statearr-87249","statearr-87255","inst_87221","cljs.core.async.impl.ioc-helpers/return-chan","statearr-87258","state-machine__52186__auto__","ret-value__52187__auto__","result__52188__auto__","cljs.core/keyword-identical?","ex__52189__auto__","e87263","statearr-87265","cljs.core/seq","statearr-87268","cljs.core/first","state__52210__auto__","statearr-87270","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","revert.pools/<token0","state_87300","state_val_87301","inst_87285","inst_87286","inst_87288","inst_87289","inst_87290","inst_87291","inst_87292","inst_87293","statearr-87303","statearr-87306","statearr-87307","inst_87295","statearr-87309","statearr-87310","inst_87298","statearr-87312","e87315","statearr-87316","statearr-87318","statearr-87329","revert.pools/<token1","state_87364","state_val_87365","inst_87346","inst_87347","inst_87349","inst_87351","inst_87352","inst_87353","inst_87354","inst_87355","statearr-87367","statearr-87369","statearr-87371","inst_87357","statearr-87375","statearr-87377","inst_87360","statearr-87378","e87381","statearr-87383","statearr-87384","statearr-87388","revert.pools/price-change","new-price","old-price","bignumber.core/*","bignumber.core/-","bignumber.core//","revert.pools/total-lps","pool","revert.pools/reserves","p__87397","p__87398","vec__87399","cljs.core.nth","vec__87402","revert.pools/price-divergence","token0-init","token0-current","token1-init","token1-current","price0-change","price1-change","bignumber.core/abs","p__87412","p__87413","vec__87415","vec__87418","revert.pools/usd-volume","token0-price","token0-volume","token1-price","token1-volume","bignumber.core/+","revert.utils/bn","revert.pools/token0-price","revert.pools/token1-price","revert.pools/usd-diff","init-pool","init-pool-prop","init-lp","init-token0","init-token1","current-pool-prop","current-token0","current-token1","token0-diff","token1-diff","init-usd","usd-diff'","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","revert.pools/<pool-dailys","p__87440","map__87441","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","seq87435","G__87436","cljs.core/next","self__4723__auto__","pair-address","limit","state_87463","state_val_87464","inst_87446","inst_87448","inst_87449","inst_87450","inst_87451","inst_87452","inst_87453","inst_87454","inst_87455","inst_87456","inst_87457","inst_87458","inst_87459","statearr-87475","e87477","statearr-87478","statearr-87481","statearr-87485","pool-dailys","revert.thegraph/<pair-days","exchange","token0-address","token1-address","cljs.core/last","init-token0-price","init-token1-price","cljs.core.map","cljs.core.into","revert.pools/<pool-histories","pool-addresses","days","a","state_87494","state_val_87495","inst_87490","inst_87492","statearr-87496","e87497","statearr-87498","statearr-87499","statearr-87500","revert.pools._LT_pool_dailys","cljs.core.async.merge","cljs.core.async/map<","hist","cljs.core.async/reduce","cljs.core/into","revert.pools/lp-proportion","s","revert.pools/most-recent-snapshots","gsnapshots","pair-snapshots","cljs.core/group-by","cljs.core.comp","last-snapshots","p1__87502#","cljs.core.sort_by","cljs.core/vals","revert.pools/<graph-uniswap-positions","user-address","state_87520","state_val_87521","inst_87507","inst_87509","inst_87510","inst_87511","inst_87512","inst_87513","inst_87515","inst_87516","inst_87517","inst_87518","cljs.core/PersistentHashMap","statearr-87525","e87526","statearr-87528","statearr-87530","statearr-87533","revert.thegraph/<user-lp-snapshots","revert.thegraph/<user-lps","revert.pools/address0","revert.pools/zapper-in-addresses","revert.pools/zapper-out-addresses","revert.pools/mint-addresses","cljs.core/set","cljs.core.conj","revert.pools/proxys-out","revert.pools/make-burn-map","lp-pool","mint-txr","token1-decimals","token2-decimals","tx","re","lp-address","token0","token1","txhash","block-number","pool-decimals","gas-decimals","eth-decimals","gas-price","revert.utils/ebn->bn","gas-used","transfer-logs","cljs.core.filter","cljs.core/some?","revert.ethereum/decode-transfer-data","lp-transfers","p1__87536#","clojure.string/lower-case","cljs.core/contains?","lp-qty","cljs.core/empty?","cljs.core.reduce","burn-logs","p1__87538#","revert.ethereum/decode-burn-data","lp-burns","p1__87539#","token0-qty","token1-qty","revert.pools/<get-lp-burns","state_87573","state_val_87574","inst_87550","inst_87551","cljs.core/deref","inst_87552","statearr-87579","inst_87554","inst_87563","inst_87560","inst_87557","inst_87555","inst_87556","inst_87558","inst_87559","inst_87561","p1__87546#","inst_87562","inst_87565","statearr-87583","inst_87567","inst_87568","p1__87547#","inst_87569","inst_87570","statearr-87584","e87586","statearr-87588","statearr-87590","statearr-87592","burn-transfers","revert.ethereum/<user-lp-burn-transfers","revert.ethereum/provider","token0-decimals","revert.utils/str->int","burn-hashes","burn-txrs","revert.ethereum/<get-trxs","revert.pools/<get-user-burns","lp-pools","burns","cljs.core.mapv","p","state_87604","state_val_87605","inst_87596","inst_87597","inst_87598","statearr-87606","inst_87600","inst_87601","inst_87602","statearr-87608","e87610","statearr-87612","statearr-87613","statearr-87615","cljs.core/merge","revert.pools/make-mint-map","p1__87616#","p1__87617#","mint-logs","p1__87618#","revert.ethereum/decode-mint-data","lp-mints","p1__87619#","revert.pools/<get-lp-mints","state_87653","state_val_87654","inst_87632","inst_87633","inst_87634","inst_87635","inst_87636","inst_87637","inst_87638","inst_87639","inst_87640","statearr-87657","inst_87645","inst_87642","inst_87643","p1__87627#","inst_87644","inst_87646","statearr-87660","inst_87648","inst_87649","p1__87628#","inst_87650","inst_87651","statearr-87663","e87665","statearr-87666","statearr-87667","statearr-87668","mint-transfers","revert.ethereum/<user-lp-mint-transfers","mint-hashes","mint-txrs","revert.pools/<get-user-mints","mints","state_87677","state_val_87678","inst_87669","inst_87670","inst_87671","statearr-87679","inst_87673","inst_87674","inst_87675","statearr-87683","e87685","statearr-87686","statearr-87687","statearr-87688","revert.pools/<fetch-account","account-or-name","state_87714","state_val_87715","inst_87692","inst_87694","inst_87695","statearr-87718","inst_87702","inst_87697","inst_87698","inst_87699","inst_87700","inst_87701","inst_87703","statearr-87721","inst_87705","inst_87706","statearr-87722","inst_87708","inst_87709","inst_87710","inst_87711","inst_87712","statearr-87725","e87727","statearr-87728","statearr-87729","statearr-87731","revert.ethereum/<resolve-address","revert.pools/pool-name","pool-history","revert.pools/exchange","revert.pools/exchange-emoji","G__87735","js/Error"],"sourcesContent":["(ns revert.pools\n  (:require\n   [clojure.string :as string]\n   [cljs.core.async :refer [go]]\n   [cljs.core.async.interop :refer-macros [<p!]]\n   [bignumber.core :as bn]\n   [revert.utils :as u]\n   [revert.ethereum :as ethereum]\n   [revert.thegraph :as thegraph]))\n\n\n\n(defn <get-reserves\n  [^js contract]\n  (go (<p! (. contract getReserves))))\n\n(defn <token0\n  [^js contract]\n  (go (<p! (. contract token0))))\n\n(defn <token1\n  [^js contract]\n  (go (<p! (. contract token1))))\n\n\n(defn price-change\n  [new-price old-price]\n  (bn/* (bn/- (bn// new-price old-price) 1)\n        100))\n\n(defn total-lps\n  [pool]\n  (:total-supply pool))\n\n\n(defn reserves\n  [pool]\n  {(:token0-address pool) (:reserve0 pool)\n   (:token1-address pool) (:reserve1 pool)})\n\n(defn price-divergence\n  \"Returns the difference between percentace change\n  in prices for token0 and token1\"\n  [[token0-init token0-current]\n   [token1-init token1-current]]\n  (let [price0-change (price-change token0-current token0-init)\n        price1-change (price-change token1-current token1-init)]\n    (bn/abs (bn/- price0-change price1-change))))\n\n\n(defn usd-volume\n  [[token0-price token0-volume]\n   [token1-price token1-volume]]\n  (bn// (bn/+ (bn/* token0-price token0-volume)\n              (bn/* token1-price token1-volume))\n        (u/bn \"2.0\")))\n\n\n(defn token0-price\n  [pool]\n  (bn// (bn// (:reserve-usd pool) (u/bn \"2.0\"))\n        (:reserve0 pool)))\n\n(defn token1-price\n  [pool]\n  (bn// (bn// (:reserve-usd pool) (u/bn \"2.0\"))\n        (:reserve1 pool)))\n\n\n(defn usd-diff\n  [init-pool pool]\n  (let [;; init\n        init-pool-prop (bn// (u/bn \"1.0\") (:reserve-usd init-pool))\n        init-lp (bn/* init-pool-prop (:total-supply init-pool))\n        init-token0 (bn/* init-pool-prop (:reserve0 init-pool))\n        init-token1 (bn/* init-pool-prop (:reserve1 init-pool))\n        ;; current\n        current-pool-prop (bn// init-lp (:total-supply pool))\n        current-token0 (bn/* current-pool-prop (:reserve0 pool))\n        current-token1 (bn/* current-pool-prop (:reserve1 pool))\n        ;;diff\n        token0-diff (bn/- current-token0 init-token0)\n        token1-diff (bn/- current-token1 init-token1)\n        token0-price (token0-price pool)\n        token1-price (token1-price pool)\n        init-usd (bn/+ (bn/* init-token0 token0-price)\n                       (bn/* init-token1 token1-price))\n        usd-diff' (bn/* (bn/+ (bn/* token0-price token0-diff)\n                              (bn/* token1-price token1-diff))\n                        (u/bn \"1.0\"))]\n    (bn/* (bn// usd-diff' init-usd) (u/bn \"100\"))))\n\n\n(defn <pool-dailys\n  [pair-address & {:keys [limit] :or {limit 365}}]\n  (go\n    (let [pool-dailys (<! (thegraph/<pair-days pair-address limit))\n          exchange (:exchange (first pool-dailys))\n          token0-address (:token0-address (first pool-dailys))\n          token1-address (:token1-address (first pool-dailys))\n          init-pool (last pool-dailys)\n          init-token0-price (token0-price init-pool)\n          init-token1-price (token1-price init-pool)]\n      (map (fn [pool]\n             (let [token0-price (token0-price pool)\n                   token1-price (token1-price pool)]\n               (into pool\n                     {:token0-price token0-price\n                      :token1-price token1-price\n                      :price-divergence (price-divergence\n                                         [init-token0-price token0-price]\n                                         [init-token1-price token1-price])\n                      :volume-usd-derived (usd-volume\n                                           [token0-price (:volume0 pool)]\n                                           [token1-price (:volume1 pool)])\n                      :vol-res-ratio (bn// (usd-volume\n                                            [token0-price (:volume0 pool)]\n                                            [token1-price (:volume1 pool)])\n                                           (:reserve-usd pool))\n                      :usd-diff (usd-diff init-pool pool)})))\n           pool-dailys))))\n\n\n(defn <pool-histories\n  [pool-addresses days]\n  (->> (map (fn [a] (go (<! (<pool-dailys a :limit days))))\n            pool-addresses)\n       (cljs.core.async/merge)\n       (cljs.core.async/map< (fn [hist] {(:address (first hist)) hist}))\n       (cljs.core.async/reduce into {})))\n\n\n(defn lp-proportion [s]\n  (bn// (:liquidityTokenBalance s)\n                    (:liquidityTokenTotalSupply s)))\n\n\n#_(defn snapshot-balances [s]\n  (let [datetime (js/Date. (* 1000 (:timestamp s)))\n        token0 (:symbol (:token0 (:pair s)))\n        token1 (:symbol (:token1 (:pair s)))\n        prop (lp-proportion s)\n        token0-balance (bn/* prop (:reserve0 s))\n        token1-balance (bn/* prop (:reserve1 s))]\n    {:token0-symbol token0\n     :token1-symbol token1\n     :token0-balance token0-balance\n     :token1-balance token1-balance}))\n\n\n\n#_(defn last-lp-snapshots\n  [snapshots]\n  (let [pair-snapshots (group-by (comp :id :pair) snapshots)\n        last-snapshots (map (comp last #(sort-by :timestamp %)) (vals pair-snapshots))]\n    (map (fn [s] {:token ((comp :id :pair) s)\n                  :pos (snapshot-balances s)})\n         last-snapshots)))\n\n\n\n(defn most-recent-snapshots\n  \"Returns most recent snapshot for each LP pair where\n   `gsnapshots` is a coll of LPSnapshots as returned\n    by `thegraph/<user-lp-snapshots`\"\n  [gsnapshots]\n  (let [pair-snapshots (group-by (comp :id :pair) gsnapshots)\n        last-snapshots (map (comp last #(sort-by :timestamp %)) (vals pair-snapshots))]\n    last-snapshots))\n\n\n(defn <graph-uniswap-positions\n  [user-address]\n  (go (let [snapshots (<! (thegraph/<user-lp-snapshots user-address))\n            pair-ids (map (comp :id :pair)\n                          (most-recent-snapshots snapshots))\n            positions (<! (thegraph/<user-lps user-address pair-ids))]\n        {:user-address user-address\n         ;;:last-snapshots (last-lp-snapshots snapshots)\n         ;;:snapshots snapshots\n         :lp-positions positions})))\n\n\n\n(def address0 \"0x0000000000000000000000000000000000000000\")\n\n(def zapper-in-addresses\n  [;; uniswap\n   \"0x5acedba6c402e2682d312a7b4982eda0ccf2d2e3\"\n   \"0xd3cf4e98e1e432b3d6ae42ae406a78f2ac8293d0\"\n   \"0xeee503b78e96f24c47c9ad8c287990e51697a99c\"\n   \"0x026bdac2f308c0109a864138cca1a623f7828f4a\"\n   \"0x775EE938186FddC13bD7C89D24820E1b0758F91D\"\n   \"0x80c5e6908368cb9db503ba968d7ec5a565bfb389\"\n   ;; sushiswap\n   \"0xcff6ef0b9916682b37d80c19cff8949bc1886bc2\"\n   \"0x91baf383abc0c332a69a73041c866f6761a90b3c\"])\n\n\n(def zapper-out-addresses\n  [;; uniswap\n   \"0x69090d6968b12b79cd403ee33e871284dc7e92f6\"\n   \"0x343e3a490c9251dc0eaa81da146ba6abe6c78b2d\"\n   \"0xcfa897e2c4e0a64eaa9ca41f607820a09134353a\"\n   \"0x79b6c6f8634ea477ed725ec23b7b6fcb41f00e58\"\n   \"0x05448acd708b78791d007bc1e037ea6fe78283a6\"\n   ;; sushiswap\n   \"0x3351be9654188571a3e32388da582947928111ce\"\n   \"0xa4e4beaa9d27eabb6a5e010565a21d93a723c7e1\"])\n\n\n\n(def mint-addresses (set (conj zapper-in-addresses address0)))\n\n(def proxys-out\n  (set zapper-out-addresses))\n\n\n(defn make-burn-map\n  [lp-pool user-address mint-txr token1-decimals token2-decimals]\n  (let [tx (:tx mint-txr)\n        re (:receipt mint-txr)\n        ;;lp-address (:address lp-pool)\n        ;;token0 (first (:tokens lp-pool))\n        ;;token1 (second (:tokens lp-pool))\n        lp-address (:id lp-pool)\n        token0 (:id (:token0 lp-pool))\n        token1 (:id (:token1 lp-pool))\n\n        txhash (.-hash tx)\n        block-number (.-blockNumber tx)\n        pool-decimals 18\n        gas-decimals 0\n        eth-decimals 18\n        gas-price (u/ebn->bn (.-gasPrice tx) eth-decimals)\n        gas-used (u/ebn->bn (.-gasUsed re) gas-decimals)\n\n\n\n        transfer-logs (filter some? (map ethereum/decode-transfer-data (.-logs re)))\n        lp-transfers (filter #(and (= (string/lower-case lp-address)\n                                      (string/lower-case (:token-address %)))\n                                   (= (string/lower-case user-address)\n                                      (string/lower-case (:from %)))\n                                   (or\n                                    (= (string/lower-case (:token-address %))\n                                       (string/lower-case (:to %)))\n                                    (contains?\n                                     proxys-out\n                                     (string/lower-case (:to %)))))\n                             transfer-logs)\n\n        lp-qty (if (empty? lp-transfers)\n                 (u/bn \"0\")\n                 (reduce bn/+ (map :amount lp-transfers)))\n\n        burn-logs (filter some? (map #(ethereum/decode-burn-data % token1-decimals token2-decimals)\n                                     (.-logs re)))\n        lp-burns (filter #(= (string/lower-case lp-address)\n                             (string/lower-case (:pair-address %)))\n                         burn-logs)\n        token0-qty (reduce bn/+ (map :amount0 lp-burns))\n        token1-qty (reduce bn/+ (map :amount1 lp-burns))]\n    (if (and (> token0-qty 0)\n             (> token1-qty 0)\n             (> lp-qty 0))\n      {:block-number block-number\n       :tx-hash txhash\n       :lp-burned lp-qty\n       :gas-price gas-price\n       :gas-used gas-used\n       :withdrawals {token0 token0-qty\n                   token1 token1-qty}})))\n\n\n(defn <get-lp-burns\n  [lp-pool user-address]\n  (go\n    (let\n        [;;pair-address (:address lp-pool)\n         ;;token1-address (first (:tokens lp-pool))\n         ;;token2-address (second (:tokens lp-pool))\n         ;;token1-decimals (<! (ethereum/<token-decimals token1-address))\n         ;;token2-decimals (<! (ethereum/<token-decimals token2-address))\n\n         pair-address (:id lp-pool)\n\n         burn-transfers (<! (ethereum/<user-lp-burn-transfers\n                             @ethereum/provider pair-address user-address))\n\n         token0-decimals (u/str->int (:decimals (:token0 lp-pool)))\n         token1-decimals (u/str->int (:decimals (:token1 lp-pool)))\n         ;; assure unique hashes here since perhaps we can have\n         ;; more than one mint-transfer in the same tx\n         burn-hashes (set (map #(.-transactionHash %) burn-transfers))\n         burn-txrs (<! (ethereum/<get-trxs burn-hashes))\n         burns (map #(make-burn-map lp-pool user-address % token0-decimals token1-decimals)\n                    burn-txrs)]\n      (filter some? burns))))\n\n\n\n(defn <get-user-burns\n  [user-address lp-pools]\n  (let [burns\n        (mapv (fn [p] (go {(:id p)\n                           (<! (<get-lp-burns p user-address))}))\n              lp-pools)]\n    (->> (cljs.core.async/merge burns)\n         (cljs.core.async/reduce merge {}))))\n\n\n\n\n\n(defn make-mint-map\n  [lp-pool user-address mint-txr token1-decimals token2-decimals]\n  (let [tx (:tx mint-txr)\n        re (:receipt mint-txr)\n        ;;lp-address (:address lp-pool)\n        ;;token0 (first (:tokens lp-pool))\n        ;;token1 (second (:tokens lp-pool))\n        lp-address (:id lp-pool)\n        token0 (:id (:token0 lp-pool))\n        token1 (:id (:token1 lp-pool))\n\n        txhash (.-hash tx)\n        block-number (.-blockNumber tx)\n        pool-decimals 18\n        gas-decimals 0\n        eth-decimals 18\n        gas-price (u/ebn->bn (.-gasPrice tx) eth-decimals)\n        gas-used (u/ebn->bn (.-gasUsed re) gas-decimals)\n\n\n        transfer-logs (filter some? (map #(ethereum/decode-transfer-data % pool-decimals)\n                                         (.-logs re)))\n\n        ;; we decode the transaction and filter for the logs that\n        ;; match the lp address, and where the transfer is going from\n        ;; either the zero account, or one of zapper's addresses when\n        ;; this was a zap-in\n        lp-transfers (filter #(and (= (string/lower-case lp-address)\n                                      (string/lower-case (:token-address %)))\n                                   (contains? mint-addresses\n                                              (string/lower-case (:from %)))\n                                   (= (string/lower-case user-address)\n                                      (string/lower-case (:to %))))\n                             transfer-logs)\n        lp-qty (if (empty? lp-transfers)\n                 (u/bn \"0\")\n                 (reduce bn/+ (map :amount lp-transfers)))\n        mint-logs (filter some? (map #(ethereum/decode-mint-data % token1-decimals token2-decimals) (.-logs re)))\n        ;; in case other tokens are minted in the same tx\n        lp-mints (filter #(= (string/lower-case lp-address)\n                             (string/lower-case (:pair-address %)))\n                         mint-logs)\n        token0-qty (reduce bn/+ (map :amount0 lp-mints))\n        token1-qty (reduce bn/+ (map :amount1 lp-mints))]\n    (if (and (> token0-qty 0)\n             (> token1-qty 0)\n             (> lp-qty 0))\n      ;; we have the above check\n      ;; because make-mint-map could have been passed\n      ;; a tx where any address transfers lp-tokens to user-address\n      {:block-number block-number\n       :tx-hash txhash\n       :lp-minted lp-qty\n       :gas-price gas-price\n       :gas-used gas-used\n       :deposits {token0 token0-qty\n                  token1 token1-qty}})))\n\n(defn <get-lp-mints\n  [lp-pool user-address]\n  (go\n    (let\n        [;;pair-address (:address lp-pool)\n         pair-address (:id lp-pool)\n         ;;token1-address (first (:tokens lp-pool))\n         ;;token2-address (second (:tokens lp-pool))\n\n         ;;token1-decimals (<! (ethereum/<token-decimals token1-address))\n         ;;token2-decimals (<! (ethereum/<token-decimals token2-address))\n\n         token0-decimals (u/str->int (:decimals (:token0 lp-pool)))\n         token1-decimals (u/str->int (:decimals (:token1 lp-pool)))\n\n         mint-transfers (<! (ethereum/<user-lp-mint-transfers\n                             @ethereum/provider pair-address user-address))\n         ;; assure unique hashes here since perhaps we can have\n         ;; more than one mint-transfer in the same tx\n         mint-hashes (set (map #(.-transactionHash %) mint-transfers))\n         mint-txrs (<! (ethereum/<get-trxs mint-hashes))\n         mints (map #(make-mint-map lp-pool user-address % token0-decimals token1-decimals)\n                    mint-txrs)]\n      (filter some? mints))))\n\n\n\n\n(defn <get-user-mints\n  [user-address lp-pools]\n  (let [mints\n        (mapv (fn [p] (go {(:id p)\n                           (<! (<get-lp-mints p user-address))}))\n              lp-pools)]\n    (->> (cljs.core.async/merge mints)\n         (cljs.core.async/reduce merge {}))))\n\n#_(defn gposition->pool\n  [gposition]\n  (let [pair (:pair gposition)\n        pair-address (:id pair)\n        token0 (:token0 pair)\n        token1 (:token1 pair)\n        address0 (:id token0)\n        address1 (:id token1)\n        exchange (:exchange gposition)]\n    {:address pair-address\n     :exchange exchange\n     :tokens [address0 address1]}))\n\n\n\n(defn <fetch-account\n  [account-or-name]\n  (go\n    (let [account (<! (ethereum/<resolve-address account-or-name))\n          graph-positions (<! (<graph-uniswap-positions account))\n          pool-addresses (map (comp :id :pair) (:positions graph-positions))\n          ;;lp-pools (map gposition->pool (:positions graph-positions))\n          lp-pools (map :pair (:lp-positions graph-positions))\n          account-mints  (<! (<get-user-mints account lp-pools))\n          account-burns  (<! (<get-user-burns account lp-pools))]\n      (into graph-positions {:account account\n                             :mints account-mints\n                             :burns account-burns}))))\n\n\n\n\n(defn pool-name\n  [pool-history]\n  (str (:token0-symbol (first pool-history)) \"/\" (:token1-symbol (first pool-history))))\n\n\n(defn exchange\n  [pool-history]\n  (:exchange (first pool-history)))\n\n\n(defn exchange-emoji\n  [pool-history]\n  (case (exchange pool-history)\n    \"uniswap\" \"\ud83e\udd84\"\n    \"sushiswap\" \"\ud83c\udf63\"\n    \"\" (exchange pool-history)))\n\n\n"]}