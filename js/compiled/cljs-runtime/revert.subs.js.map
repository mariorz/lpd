{"version":3,"sources":["revert/subs.cljs"],"mappings":"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","names":["re_frame.core.reg_sub","db","_","positions","pool-addresses","cljs.core/keys","pools","p1__106156#","cljs.core.map","cljs.core.get","pool-tokens","cljs.core.juxt","cljs.core/count","pt","cljs.core/first","cljs.core/second","and__4115__auto__","cljs.core._EQ_","p1__106157#","cljs.core.filter","cljs.core/contains?","bignumber.core/>","revert.lp-positions/assets-value","revert.utils/bn","cljs.core/vals","p1__106158#","bignumber.core/<=","p1__106159#","p1__106160#","revert.lp-positions/v3assets-value","p1__106161#","p1__106162#"],"sourcesContent":["(ns revert.subs\n  (:require\n   [re-frame.core :as re-frame]\n   [bignumber.core :as bn]\n   [revert.utils :as u]\n   [revert.lp-positions :as lp-positions]))\n\n(re-frame/reg-sub\n ::name\n (fn [db]\n   (:name db)))\n\n\n(re-frame/reg-sub\n :showing          ;; usage:   (subscribe [:showing])\n (fn [db _]        ;; db is the (map) value stored in the app-db atom\n   (:showing db))) ;; extract a value from the application state\n\n\n(re-frame/reg-sub\n :connected          ;; usage:   (subscribe [:showing])\n (fn [db _]        ;; db is the (map) value stored in the app-db atom\n   (:connected db))) ;; extract a value from the application state\n\n\n(re-frame/reg-sub\n :account          ;; usage:   (subscribe [:showing])\n (fn [db _]\n   ;; db is the (map) value stored in the app-db atom\n   (:account db))) ;; extract a value from the application state\n\n\n(re-frame/reg-sub\n :pool-address          ;; usage:   (subscribe [:showing])\n (fn [db _]\n   ;; db is the (map) value stored in the app-db atom\n   (:pool-address db))) ;; extract a value from the application state\n\n(re-frame/reg-sub\n :pool-days          ;; usage:   (subscribe [:showing])\n (fn [db _]\n   ;; db is the (map) value stored in the app-db atom\n   (:pool-days db))) ;; extract a value from the application state\n\n\n(re-frame/reg-sub\n :loading\n (fn [db _]\n   (:loading db)))\n\n\n(re-frame/reg-sub\n :include-exited\n (fn [db _]\n   (:include-exited db)))\n\n\n(re-frame/reg-sub\n :expanded-logs\n (fn [db _]\n   (:expanded-logs db)))\n\n\n(re-frame/reg-sub\n :pool-histories\n (fn [db _]\n   ;; db is the (map) value stored in the app-db atom\n   (:pool-histories db))) ;; extract a value from the application state\n\n\n(re-frame/reg-sub\n :pools\n (fn [db _]\n   (:pools db)))\n\n\n\n(re-frame/reg-sub\n :loading-msgs\n (fn [db _]\n   (:loading-msgs db)))\n\n\n\n(re-frame/reg-sub\n :tokens\n (fn [db _]\n   (:tokens db)))\n\n\n(re-frame/reg-sub\n :blocks-ts\n (fn [db _]\n   (:blocks-ts db)))\n\n\n(re-frame/reg-sub\n :pool-assets\n (fn [db _]\n   (let [positions (:lp-positions db)\n         pool-addresses (keys positions)\n         pools (map #(get (:pools db) %) pool-addresses)\n         pool-tokens (map (juxt :token0-address :token1-address) pools)]\n     (when (> (count (:tokens db)) 0)\n       (map (fn [pt]\n              [(:symbol (get (:tokens db) (first pt)))\n               (:symbol (get (:tokens db) (second pt)))])\n            pool-tokens)))))\n\n\n(re-frame/reg-sub\n :all-loaded\n (fn [db _]\n   (and (:account-loaded db)\n        (:univ3-state-loaded db)\n        (:pool-histories-loaded db)\n        (:pool-stakings-loaded db)\n        (:tokens-loaded db)\n        (= 0 (:blocks-ts-loaded db)))))\n\n\n(re-frame/reg-sub\n :open-lp-positions\n (fn [db _]\n   (filter #(and\n             (not (contains? (:ignored-pools db) (:address %)))\n             (bn/> (lp-positions/assets-value % (get (:pools db) (:address %)) (:tokens db)) (u/bn \"0.0001\")))\n           (vals (:lp-positions db)))))\n\n\n\n(re-frame/reg-sub\n :closed-lp-positions\n (fn [db _]\n   (filter #(and\n             (not (contains? (:ignored-pools db) (:address %)))\n             (bn/<= (lp-positions/assets-value % (get (:pools db) (:address %)) (:tokens db)) (u/bn \"0.0001\")))\n           (vals (:lp-positions db)))))\n\n\n(re-frame/reg-sub\n :ignored-lp-positions\n (fn [db _]\n   (filter #(contains? (:ignored-pools db) (:address %))\n           (vals (:lp-positions db)))))\n\n\n\n\n(re-frame/reg-sub\n :v3pools\n (fn [db _]\n   (:v3pools db)))\n\n\n(re-frame/reg-sub\n :v3open-lp-positions\n (fn [db _]\n   (filter #(and\n             (not (contains? (:v3ignored-pools db) (str (:nft-id %))))\n             (bn/> (lp-positions/v3assets-value % (get (:v3pools db) (:address %)) (:tokens db)) (u/bn \"0.0001\")))\n           (:v3lp-positions db))))\n\n\n(re-frame/reg-sub\n :v3closed-lp-positions\n (fn [db _]\n   (filter #(and\n             (not (contains? (:v3ignored-pools db) (str (:nft-id %))))\n             (bn/<= (lp-positions/v3assets-value % (get (:v3pools db) (:address %)) (:tokens db)) (u/bn \"0.0001\")))\n           (:v3lp-positions db))))\n\n\n(re-frame/reg-sub\n :v3ignored-lp-positions\n (fn [db _]\n   (filter #(contains? (:v3ignored-pools db) (str (:nft-id %)))\n            (:v3lp-positions db))))\n\n(re-frame/reg-sub\n :v3pool-histories\n (fn [db _]\n   ;; db is the (map) value stored in the app-db atom\n   (:v3pool-histories db))) ;; extract a value from the application state\n"]}