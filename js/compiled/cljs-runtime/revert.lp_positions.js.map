{"version":3,"sources":["revert/lp_positions.cljs"],"mappings":"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","names":["revert.lp-positions/eth-fees","parsed-tx","gas-price","gas-used","eth-paid","bignumber.core/*","revert.lp-positions/fees-paid","lp-position","mints","minting-fees","cljs.core/empty?","revert.utils/bn","cljs.core.reduce","bignumber.core/+","cljs.core.map","burns","burning-fees","revert.lp-positions/get-current-earned","lp-snapshot","and__4115__auto__","cljs.core/first","cljs.core.not_EQ_","token","clojure.string/lower-case","qty","qty'","revert.lp-positions/token-unclaimed-from-contract","rewards-map","revert.lp-positions/all-unclaimed-for-contract","rewards-maps","revert.lp-positions/all-snapshot-unclaimed","p1__90296#","cljs.core.filter","cljs.core.comp","revert.lp-positions/unclaimed-rewards","tokens","claimed","cljs.core/zipmap","p1__90297#","revert.tokens/token-symbol","revert.lp-positions/token-claimed-from-contract","qtys","claims-summed","cljs.core._EQ_","revert.lp-positions/all-claims-for-contract","revert.lp-positions/all-snapshot-claimed","p1__90298#","revert.lp-positions/make-paid-rewards","reward","p1__90299#","cljs.core.into","revert.lp-positions/all-paid-rewards","cljs.core.apply","cljs.core/concat","revert.lp-positions/claimed-rewards","p1__90300#","revert.lp-positions/minted-lps","revert.lp-positions/burned-lps","revert.lp-positions/position-lps","minted","burned","revert.utils/max-bn","bignumber.core/-","revert.lp-positions/current-assets","pool","pos-lps","pool-portion","bignumber.core//","revert.pools/total-lps","pool-reserves","revert.pools/reserves","cljs.core/keys","pr","cljs.core/vals","revert.lp-positions/tokens-deposited","deposits","cljs.core/merge-with","revert.lp-positions/tokens-withdrawn","deposited","zeroed","withdrawals","cljs.core.merge_with","revert.lp-positions/invested-assets","revert.lp-positions/withdrawan-assets","revert.lp-positions/diff-assets","withdrawn","revert.lp-positions/compute-assets-value","current","priced-tokens","k","cljs.core/contains?","cljs.core/count","res","s","cljs.core.get","revert.utils/bn?","cljs.core/not","revert.lp-positions/assets-value","revert.lp-positions/total-rewards","rewards-claimed","rewards-claimed'","rewards-unclaimed","rewards-unclaimed'","all-rewards","revert.lp-positions/pool-pnl","revert.lp-positions/total-pnl","ppnl","gas-cost-eth","gas-costs","revert.utils/weth-address","revert.lp-positions/deposit-flow","mint","blocks-ts","block-ts","revert.utils/ts->datetime","deposit-value","js/Date","revert.lp-positions/gas-flow","gas-value","revert.lp-positions/mint-flows","deposit-flows","p1__90301#","gas-flows","p1__90302#","cljs.core.concat","revert.lp-positions/withdrawal-flow","burn","withdrawal-value","revert.lp-positions/burn-flows","withdrawal-flows","p1__90303#","p1__90304#","revert.lp-positions/reward-flow","reward-value","revert.lp-positions/rewards-flows","paid-rewards","flows","p1__90305#","revert.lp-positions/pending-rewards-flows","unclaimed-rewards","unclaimed-rewards'","r","unclaimed-value","revert.lp-positions/cash-flows","rewards","assets-value","assets","pending-rewards","cljs.core.sort_by","revert.lp-positions/total-irr","e90306","flows'","m","js/parseFloat","irr","js/module$node_modules$$webcarrot$xirr$cjs$index.xirr","cljs.core.clj__GT_js","js/Error","err","js/console.log","revert.lp-positions/balance-reducer","state","flow","init-time","next-time","revert.utils/datetime->ts","time-block","next-balance","next-avgbal","revert.lp-positions/average-balance","relevant-flows","p1__90307#","first-deposit","current-state","revert.utils/make-unix-ts","avg-balance","revert.lp-positions/total-apr","e90308","balance-state","total-pnl","first-block","cljs.core.sort","first-ts","timediff","daysdiff","revert.utils/seconds->days","year-portion","multiplier","revert.lp-positions/assets-value-all","lp-positions","pools","p1__90309#","revert.lp-positions/gas-costs-all","eth-price","revert.tokens/symbol->price","gas-cost-usd","revert.lp-positions/rewards-all","p1__90310#","revert.lp-positions/pool-pnl-all","p1__90311#","revert.lp-positions/total-pnl-all","p1__90312#","revert.lp-positions/block-numbers","mint-blocks","burn-blocks","reward-blocks","blocks"],"sourcesContent":["(ns revert.lp-positions\n  (:require\n   [clojure.string :as string]\n   [bignumber.core :as bn]\n   [\"@webcarrot/xirr\" :as xirr]\n   [revert.utils :as u]\n   [revert.tokens :as tokens]\n   [revert.pools :as pools]\n   [revert.irr :as irr]))\n\n\n\n(defn eth-fees\n  [parsed-tx]\n  (let [gas-price (:gas-price parsed-tx)\n        gas-used (:gas-used parsed-tx)\n        eth-paid (bn/* gas-used gas-price)]\n    eth-paid))\n\n\n(defn fees-paid\n  [lp-position]\n  (let [mints (:mints lp-position)\n        minting-fees (if (empty? mints)\n                       (u/bn 0.0)\n                       (reduce bn/+ (map eth-fees mints)))\n        burns (:burns lp-position)\n        burning-fees (if (empty? burns)\n                       (u/bn 0.0)\n                       (reduce bn/+ (map eth-fees burns)))]\n    (bn/+ burning-fees minting-fees)))\n\n\n\n(defn get-current-earned\n  [lp-snapshot]\n  (if (and (:reward-token-address\n            (:rewards (first (:stakings lp-snapshot))))\n           (not= \"\" (:reward-token-address\n                     (:rewards (first (:stakings lp-snapshot))))))\n    (let [token (string/lower-case (:reward-token-address\n                                    (:rewards (first (:stakings lp-snapshot)))))\n          qty (:pending-rewards\n               (:rewards (first (:stakings lp-snapshot))))\n          qty' (if qty\n                 qty\n                 (u/bn 0.00))]\n      [{:qty qty'\n        :token token}])))\n\n\n(defn token-unclaimed-from-contract\n  [rewards-map]\n  (let [token (string/lower-case (:reward-token-address rewards-map))\n        qty (:pending-rewards rewards-map)]\n    (if (not= \"\" token)\n      {:qty qty\n       :token token}\n      {})))\n\n\n\n(defn all-unclaimed-for-contract\n  [rewards-maps]\n  (token-unclaimed-from-contract rewards-maps))\n\n\n(defn all-snapshot-unclaimed\n  [lp-position]\n  (filter #(not (empty? %))\n          (map (comp all-unclaimed-for-contract :rewards)\n               (:stakings lp-position))))\n\n\n(defn unclaimed-rewards\n  [lp-position tokens]\n  (let [claimed (get-current-earned lp-position)]\n    #_claimed\n    (zipmap (map (comp #(tokens/token-symbol % tokens) :token) claimed)\n            (map :qty claimed))))\n\n\n(defn token-claimed-from-contract\n  [rewards-map]\n  (let [token (string/lower-case (:reward-token-address rewards-map))\n        qtys (map :qty (:paid-rewards rewards-map))\n        claims-summed (if (= qtys '())\n                        (u/bn 0.0)\n                        (reduce bn/+ qtys))]\n    (if (not= \"\" token)\n      {:qty claims-summed\n       :token token}\n      {})))\n\n\n(defn all-claims-for-contract\n  [rewards-maps]\n  (token-claimed-from-contract rewards-maps))\n\n(defn all-snapshot-claimed\n  [lp-position]\n  (filter #(not (empty? %))\n          (map (comp all-claims-for-contract :rewards)\n               (:stakings lp-position))))\n\n\n(defn make-paid-rewards\n  [reward]\n  (let [token (:reward-token-address reward)]\n    (map #(into % {:token token}) (:paid-rewards reward))))\n\n(defn all-paid-rewards\n  [lp-position]\n  (->> (:stakings lp-position)\n       (map :rewards)\n       (map make-paid-rewards)\n       (apply concat)))\n\n\n\n\n(defn claimed-rewards\n  [lp-position tokens]\n  (let [claimed (all-snapshot-claimed lp-position)]\n    #_claimed\n    (zipmap (map (comp #(tokens/token-symbol % tokens) :token) claimed)\n            (map :qty claimed))))\n\n\n(defn minted-lps\n  [lp-position]\n  (let [qtys (map :lp-minted (:mints lp-position))]\n    (if (= qtys '())\n      (u/bn 0.0)\n      (reduce bn/+ qtys))))\n\n\n(defn burned-lps\n  [lp-position]\n  (let [qtys (map :lp-burned (:burns lp-position))]\n    (if (= qtys '())\n      (u/bn 0.0)\n      (reduce bn/+ qtys))))\n\n\n(defn position-lps\n  [lp-position]\n  (let [minted (minted-lps lp-position)\n        burned (burned-lps lp-position)]\n    (u/max-bn [(bn/- minted burned) (u/bn \"0.0\")])))\n\n\n(defn current-assets\n  [lp-position pool]\n  (let [pos-lps (position-lps lp-position)\n        pool-portion (bn// pos-lps (pools/total-lps pool))\n        pool-reserves (pools/reserves pool)]\n    (zipmap (keys pool-reserves)\n            (map (fn [pr] (bn/* pr pool-portion))\n                 (vals pool-reserves)))))\n\n\n(defn tokens-deposited\n  [lp-position]\n  (let [mints (:mints lp-position)\n        deposits (map :deposits mints)]\n    (apply merge-with bn/+ deposits)))\n\n(defn tokens-withdrawn\n  [lp-position]\n  (let [deposited (tokens-deposited lp-position)\n        zeroed (zipmap (keys deposited) [(u/bn 0.0) (u/bn 0.0)])\n        burns (:burns lp-position)\n        withdrawals (map :withdrawals burns)]\n    (merge-with bn/+ zeroed\n                (apply merge-with bn/+ withdrawals))))\n\n\n(defn invested-assets\n  [lp-position]\n  (tokens-deposited lp-position))\n\n\n(defn withdrawan-assets\n  [lp-position pool]\n  (tokens-withdrawn lp-position))\n\n\n(defn diff-assets\n  [lp-position pool]\n  (let [deposited (tokens-deposited lp-position)\n        withdrawn (tokens-withdrawn lp-position)]\n    (merge-with bn/-\n                (current-assets lp-position pool)\n                (merge-with bn/- deposited withdrawn))))\n\n\n(defn compute-assets-value\n  [current tokens]\n  (let [priced-tokens (filter (fn [k] (contains? tokens k)) (keys current))]\n    (if (> (count priced-tokens) 0)\n      (let [res (reduce bn/+\n                        (map (fn [s] (bn/* (get current s)\n                                           (:usd (:prices (get tokens s)))))\n                           priced-tokens))]\n        (if (and (u/bn? res) (not (.isNaN res)))\n          res\n          (u/bn \"0.00\")))\n      (u/bn \"0.00\"))))\n\n(defn assets-value\n  [lp-position pool tokens]\n  (compute-assets-value\n   (current-assets lp-position pool)\n   tokens))\n\n\n(defn total-rewards\n  [lp-position pool tokens]\n  (let [rewards-claimed (all-snapshot-claimed lp-position)\n        rewards-claimed' (zipmap (map :token rewards-claimed) (map :qty rewards-claimed))\n        rewards-unclaimed (all-snapshot-unclaimed lp-position)\n        rewards-unclaimed' (zipmap (map :token rewards-unclaimed) (map :qty rewards-unclaimed))\n        all-rewards (merge-with bn/+ rewards-claimed' rewards-unclaimed')]\n    (if (> (count all-rewards) 0)\n      (compute-assets-value\n       all-rewards\n       tokens)\n      (u/bn 0.0))))\n\n\n\n(defn pool-pnl\n  [lp-position pool tokens]\n  (compute-assets-value\n   (diff-assets lp-position pool)\n   tokens))\n\n\n\n(defn total-pnl\n  [lp-position pool tokens]\n  (let [ppnl (diff-assets lp-position pool)\n        rewards-claimed (all-snapshot-claimed lp-position)\n        rewards-claimed' (zipmap (map :token rewards-claimed) (map :qty rewards-claimed))\n        rewards-unclaimed (all-snapshot-unclaimed lp-position)\n        rewards-unclaimed' (zipmap (map :token rewards-unclaimed) (map :qty rewards-unclaimed))\n        gas-cost-eth (fees-paid lp-position)\n        gas-costs {u/weth-address (bn/* (u/bn \"-1.0\") gas-cost-eth)}\n        all-rewards (merge-with bn/+ rewards-claimed' rewards-unclaimed')]\n    (compute-assets-value\n     (merge-with bn/+ ppnl all-rewards gas-costs)\n     tokens)))\n\n(defn deposit-flow\n  [mint tokens blocks-ts]\n  (let [block-ts (u/ts->datetime (get blocks-ts (:block-number mint)))\n        deposit-value (bn/* (u/bn \"-1\") (compute-assets-value (:deposits mint) tokens))]\n    #_{:amount deposit-value :date (js/Date. \"2020-10-12\")}\n    {:amount (.toNumber deposit-value)\n     :date (js/Date. block-ts)\n     :type :deposits}))\n\n(defn gas-flow\n  [mint tokens blocks-ts]\n  (let [block-ts (u/ts->datetime (get blocks-ts (:block-number mint)))\n        eth-paid (bn/* (:gas-price mint) (:gas-used mint))\n        gas-value  (bn/* (u/bn \"-1\") (compute-assets-value {u/weth-address eth-paid} tokens))]\n    {:amount (.toNumber gas-value)\n     :date (js/Date. block-ts)\n     :type :gas-costs}))\n\n(defn mint-flows\n  [lp-position tokens blocks-ts]\n  (let [deposit-flows (map #(deposit-flow % tokens blocks-ts) (:mints lp-position))\n        gas-flows (map #(gas-flow % tokens blocks-ts) (:mints lp-position))]\n    (concat deposit-flows gas-flows)))\n\n(defn withdrawal-flow\n  [burn tokens blocks-ts]\n  (let [block-ts (u/ts->datetime (get blocks-ts (:block-number burn)))\n        withdrawal-value (compute-assets-value (:withdrawals burn) tokens)]\n    {:amount (.toNumber withdrawal-value)\n     :date (js/Date. block-ts)\n     :type :withdrawals}))\n\n\n(defn burn-flows\n  [lp-position tokens blocks-ts]\n  (let [withdrawal-flows (map #(withdrawal-flow % tokens blocks-ts) (:burns lp-position))\n        gas-flows (map #(gas-flow % tokens blocks-ts) (:burns lp-position))]\n    (concat withdrawal-flows gas-flows)))\n\n(defn reward-flow\n  [reward tokens blocks-ts]\n  (let [block-ts (u/ts->datetime (get blocks-ts (:block-number reward)))\n        reward-value (compute-assets-value {(string/lower-case (:token reward)) (:qty reward)} tokens)]\n    {:amount (.toNumber reward-value)\n     :date (js/Date. block-ts)\n     :type :claimed-rewards}))\n\n\n(defn rewards-flows\n  [lp-position tokens blocks-ts]\n  (let [paid-rewards (all-paid-rewards lp-position)\n        flows (map #(reward-flow % tokens blocks-ts) paid-rewards)]\n    flows))\n\n\n(defn pending-rewards-flows\n  [lp-position tokens]\n  (let [unclaimed-rewards (all-snapshot-unclaimed lp-position)\n        unclaimed-rewards' (apply merge-with bn/+ (map (fn [r] {(string/lower-case (:token r)) (:qty r)})\n                                                       unclaimed-rewards))\n        unclaimed-value (compute-assets-value unclaimed-rewards' tokens)]\n    [{:amount (.toNumber unclaimed-value)\n      :date (js/Date.)\n      :type :pending-rewards}]))\n\n\n(defn cash-flows\n  [lp-position pool tokens blocks-ts]\n  (let [mints (mint-flows lp-position tokens blocks-ts)\n        burns (burn-flows lp-position tokens blocks-ts)\n        rewards (rewards-flows lp-position tokens blocks-ts)\n        assets-value (assets-value lp-position pool tokens)\n        assets [{:amount (.toNumber assets-value) :date (js/Date.)}]\n        pending-rewards (pending-rewards-flows lp-position tokens)]\n    (sort-by :date (concat mints burns rewards assets pending-rewards))))\n\n\n(defn total-irr\n  [lp-position pool tokens blocks-ts]\n  (try\n    (let [flows (cash-flows lp-position pool tokens blocks-ts)\n          flows' (map (fn [m] (into m {:amount (js/parseFloat (.toFixed (:amount m) 2))})) flows)\n          irr (xirr/xirr (clj->js flows' 0.1 1e-10 2000 200))]\n      (bn/* (u/bn irr) (u/bn \"100\")))\n    (catch js/Error err\n      (do (js/console.log (str \"xirr error:\" err))\n          (u/bn \"0.0\")))))\n\n(defn balance-reducer\n  [state flow]\n  (let [init-time (:init-time state)\n        next-time (u/datetime->ts (:date flow))\n        time-block (- next-time (:time state))\n        next-balance (+ (:amount flow) (:balance state))\n        next-avgbal (if (= time-block 0)\n                      (:avg-balance state)\n                      (/ (+ (* (:avg-balance state) (- (:time state) init-time))\n                            (* (:balance state) time-block))\n                         (- next-time init-time)))]\n    {:avg-balance next-avgbal\n     :init-time init-time\n     :balance next-balance\n     :time next-time}))\n\n(defn average-balance\n  \"Should return one number, the avg balance for the period\n  in the cash flows.\"\n  [lp-position pool tokens blocks-ts]\n  (let [flows (cash-flows lp-position pool tokens blocks-ts)\n        relevant-flows (filter #(contains? #{:deposits :withdrawals :gas-costs} (:type %)) flows)\n        first-deposit (first relevant-flows)\n        current-state {:amount 0.0 :date (u/ts->datetime (u/make-unix-ts))}\n        avg-balance (reduce balance-reducer {:avg-banace 0.0\n                                             :init-time (u/datetime->ts (:date first-deposit))\n                                             :time (u/datetime->ts (:date first-deposit))\n                                             :balance 0.0}\n                            (concat relevant-flows [current-state]))]\n    avg-balance))\n\n(defn total-apr\n  [lp-position pool tokens blocks-ts]\n  (try\n    (let [balance-state (average-balance lp-position pool tokens blocks-ts)\n          avg-balance (* -1 (:avg-balance balance-state))\n          total-pnl (total-pnl lp-position pool tokens)\n          first-block (first (sort (map :block-number (:mints lp-position))))\n          first-ts (get blocks-ts first-block)\n          timediff (- (u/make-unix-ts) first-ts)\n          daysdiff (u/bn (u/seconds->days timediff))\n          year-portion (bn// daysdiff (u/bn \"365\"))\n          multiplier (bn// (u/bn \"1\") year-portion)]\n      (bn/* (bn/* (bn// total-pnl avg-balance) multiplier)\n            (u/bn \"100.0\")))\n    (catch js/Error err\n      (do (js/console.log (str \"apr error:\" err))\n          (u/bn \"0.0\")))))\n\n(defn assets-value-all\n  [lp-positions pools tokens]\n  (reduce bn/+\n   (map #(assets-value % (get pools (:address %)) tokens)\n        lp-positions)))\n\n(defn gas-costs-all\n  [lp-positions pools tokens]\n  (let [gas-cost-eth (reduce bn/+  (map fees-paid lp-positions))\n        eth-price (tokens/symbol->price \"WETH\" tokens \"usd\")\n        gas-cost-usd (bn/* gas-cost-eth eth-price)]\n    gas-cost-usd))\n\n\n(defn rewards-all\n  [lp-positions pools tokens]\n  (reduce bn/+\n          (map #(total-rewards % (get pools (:address %)) tokens)\n               lp-positions)))\n\n\n\n(defn pool-pnl-all\n  [lp-positions pools tokens]\n  (reduce bn/+\n          (map #(pool-pnl % (get pools (:address %)) tokens)\n               lp-positions)))\n\n\n(defn total-pnl-all\n  [lp-positions pools tokens]\n  (reduce bn/+\n          (map #(total-pnl % (get pools (:address %)) tokens)\n               lp-positions)))\n\n\n(defn block-numbers\n  [lp-position]\n  (let [mint-blocks (map :block-number (:mints lp-position))\n        burn-blocks (map :block-number (:burns lp-position))\n        rewards-claimed (all-paid-rewards lp-position)\n        reward-blocks (map :block-number rewards-claimed)\n        blocks (concat mint-blocks burn-blocks reward-blocks)]\n    blocks))\n\n\n"]}