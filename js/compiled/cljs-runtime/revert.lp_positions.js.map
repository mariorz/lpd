{"version":3,"sources":["revert/lp_positions.cljs"],"mappings":"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","names":["revert.lp-positions/eth-fees","parsed-tx","e83954","gas-price","gas-used","eth-paid","cljs.core.not_EQ_","bignumber.core/*","revert.utils/bn","js/Error","err","js/console.log","revert.lp-positions/fees-paid","lp-position","mints","minting-fees","cljs.core/empty?","cljs.core.reduce","bignumber.core/+","cljs.core.map","burns","burning-fees","revert.lp-positions/get-current-earned","lp-snapshot","and__4115__auto__","cljs.core/first","token","clojure.string/lower-case","qty","qty'","revert.lp-positions/token-unclaimed-from-contract","rewards-map","revert.lp-positions/all-unclaimed-for-contract","rewards-maps","revert.lp-positions/all-snapshot-unclaimed","p1__83955#","cljs.core.filter","cljs.core.comp","revert.lp-positions/unclaimed-rewards","tokens","claimed","cljs.core/zipmap","p1__83956#","revert.tokens/token-symbol","revert.lp-positions/token-claimed-from-contract","qtys","claims-summed","cljs.core._EQ_","revert.lp-positions/all-claims-for-contract","revert.lp-positions/all-snapshot-claimed","p1__83957#","revert.lp-positions/make-paid-rewards","reward","p1__83958#","cljs.core.into","revert.lp-positions/all-paid-rewards","cljs.core.apply","cljs.core/concat","revert.lp-positions/claimed-rewards","p1__83959#","revert.lp-positions/minted-lps","revert.lp-positions/burned-lps","revert.lp-positions/position-lps","minted","burned","revert.utils/max-bn","bignumber.core/-","revert.lp-positions/current-assets","pool","pos-lps","pool-portion","bignumber.core//","revert.pools/total-lps","pool-reserves","revert.pools/reserves","cljs.core/keys","pr","cljs.core/vals","revert.lp-positions/v3current-assets","token0","token1","amount0","amount1","revert.lp-positions/v3-uncollected-fees","token0-address","token1-address","token0-symbol","cljs.core.get","token1-symbol","revert.lp-positions/v3-uncollected-fees-addys","revert.lp-positions/v3-collected-fees","withdrawals","zeroed","summed","cljs.core.merge_with","cljs.core/merge-with","revert.lp-positions/v3-collected-fees-addys","revert.lp-positions/tokens-deposited","deposits","revert.lp-positions/tokens-withdrawn","deposited","revert.lp-positions/invested-assets","revert.lp-positions/withdrawan-assets","revert.lp-positions/diff-assets","withdrawn","revert.lp-positions/v3diff-assets","revert.lp-positions/compute-assets-value","current","priced-tokens","k","cljs.core/contains?","cljs.core/count","res","s","revert.utils/bn?","cljs.core/not","revert.lp-positions/assets-value","revert.lp-positions/v3assets-value","revert.lp-positions/total-rewards","rewards-claimed","rewards-claimed'","rewards-unclaimed","rewards-unclaimed'","all-rewards","revert.lp-positions/pool-pnl","revert.lp-positions/v3pool-pnl","ppnl","fees-collected","fees-uncollected","all-fees","revert.lp-positions/total-pnl","gas-cost-eth","gas-costs","revert.utils/weth-address","revert.lp-positions/v3total-pnl","_","cljs.core.println","revert.lp-positions/deposit-flow","mint","blocks-ts","block-ts","revert.utils/ts->datetime","deposit-value","js/Date","revert.lp-positions/gas-flow","gas-value","revert.lp-positions/mint-flows","deposit-flows","p1__83960#","gas-flows","p1__83961#","cljs.core.concat","revert.lp-positions/withdrawal-flow","burn","withdrawal-value","revert.lp-positions/burn-flows","withdrawal-flows","p1__83962#","p1__83963#","revert.lp-positions/reward-flow","reward-value","revert.lp-positions/rewards-flows","paid-rewards","flows","p1__83964#","revert.lp-positions/pending-rewards-flows","unclaimed-rewards","unclaimed-rewards'","r","unclaimed-value","revert.lp-positions/cash-flows","rewards","assets-value","assets","pending-rewards","cljs.core.sort_by","revert.lp-positions/total-irr","e83965","flows'","m","js/parseFloat","irr","js/module$node_modules$$webcarrot$xirr$cjs$index.xirr","cljs.core.clj__GT_js","revert.lp-positions/balance-reducer","state","flow","init-time","next-time","revert.utils/datetime->ts","time-block","next-balance","next-avgbal","revert.lp-positions/average-balance","relevant-flows","p1__83966#","first-deposit","current-state","revert.utils/make-unix-ts","avg-balance","revert.lp-positions/total-apr","e83967","balance-state","total-pnl","first-block","cljs.core.sort","first-ts","timediff","daysdiff","revert.utils/seconds->days","year-portion","multiplier","revert.lp-positions/v3total-apr","e83968","revert.lp-positions/assets-value-all","lp-positions","v3lp-positions","pools","v3pools","p1__83969#","p1__83970#","revert.lp-positions/gas-costs-all","eth-price","revert.tokens/symbol->price","gas-cost-usd","revert.lp-positions/rewards-all","p1__83971#","revert.lp-positions/pool-pnl-all","p1__83972#","p1__83973#","revert.lp-positions/total-pnl-all","p1__83974#","p1__83975#","revert.lp-positions/block-numbers","mint-blocks","burn-blocks","collect-blocks","reward-blocks","blocks"],"sourcesContent":["(ns revert.lp-positions\n  (:require\n   [clojure.string :as string]\n   [bignumber.core :as bn]\n   [\"@webcarrot/xirr\" :as xirr]\n   [revert.utils :as u]\n   [revert.tokens :as tokens]\n   [revert.pools :as pools]\n   [revert.irr :as irr]))\n\n\n\n(defn eth-fees\n  [parsed-tx]\n  (try\n    (let [gas-price (:gas-price parsed-tx)\n          gas-used (:gas-used parsed-tx)\n          eth-paid (if (and (not= nil gas-price) (not= nil gas-used))\n                     (bn/* gas-used gas-price)\n                     (u/bn 0.0))]\n      eth-paid)\n    (catch js/Error err\n      (do (js/console.log \"eth-fees fn err:\" err)\n          (u/bn 0.0)))))\n\n\n(defn fees-paid\n  [lp-position]\n  (let [mints (:mints lp-position)\n        minting-fees (if (empty? mints)\n                       (u/bn 0.0)\n                       (reduce bn/+ (map eth-fees mints)))\n        burns (:burns lp-position)\n        burning-fees (if (empty? burns)\n                       (u/bn 0.0)\n                       (reduce bn/+ (map eth-fees burns)))]\n    (bn/+ burning-fees minting-fees)))\n\n\n\n(defn get-current-earned\n  [lp-snapshot]\n  (if (and (:reward-token-address\n            (:rewards (first (:stakings lp-snapshot))))\n           (not= \"\" (:reward-token-address\n                     (:rewards (first (:stakings lp-snapshot))))))\n    (let [token (string/lower-case (:reward-token-address\n                                    (:rewards (first (:stakings lp-snapshot)))))\n          qty (:pending-rewards\n               (:rewards (first (:stakings lp-snapshot))))\n          qty' (if qty\n                 qty\n                 (u/bn 0.00))]\n      [{:qty qty'\n        :token token}])))\n\n\n(defn token-unclaimed-from-contract\n  [rewards-map]\n  (let [token (string/lower-case (:reward-token-address rewards-map))\n        qty (:pending-rewards rewards-map)]\n    (if (not= \"\" token)\n      {:qty qty\n       :token token}\n      {})))\n\n\n\n(defn all-unclaimed-for-contract\n  [rewards-maps]\n  (token-unclaimed-from-contract rewards-maps))\n\n\n(defn all-snapshot-unclaimed\n  [lp-position]\n  (filter #(not (empty? %))\n          (map (comp all-unclaimed-for-contract :rewards)\n               (:stakings lp-position))))\n\n\n(defn unclaimed-rewards\n  [lp-position tokens]\n  (let [claimed (get-current-earned lp-position)]\n    #_claimed\n    (zipmap (map (comp #(tokens/token-symbol % tokens) :token) claimed)\n            (map :qty claimed))))\n\n\n(defn token-claimed-from-contract\n  [rewards-map]\n  (let [token (string/lower-case (:reward-token-address rewards-map))\n        qtys (map :qty (:paid-rewards rewards-map))\n        claims-summed (if (= qtys '())\n                        (u/bn 0.0)\n                        (reduce bn/+ qtys))]\n    (if (not= \"\" token)\n      {:qty claims-summed\n       :token token}\n      {})))\n\n\n(defn all-claims-for-contract\n  [rewards-maps]\n  (token-claimed-from-contract rewards-maps))\n\n(defn all-snapshot-claimed\n  [lp-position]\n  (filter #(not (empty? %))\n          (map (comp all-claims-for-contract :rewards)\n               (:stakings lp-position))))\n\n\n(defn make-paid-rewards\n  [reward]\n  (let [token (:reward-token-address reward)]\n    (map #(into % {:token token}) (:paid-rewards reward))))\n\n(defn all-paid-rewards\n  [lp-position]\n  (->> (:stakings lp-position)\n       (map :rewards)\n       (map make-paid-rewards)\n       (apply concat)))\n\n\n\n\n(defn claimed-rewards\n  [lp-position tokens]\n  (let [claimed (all-snapshot-claimed lp-position)]\n    #_claimed\n    (zipmap (map (comp #(tokens/token-symbol % tokens) :token) claimed)\n            (map :qty claimed))))\n\n\n(defn minted-lps\n  [lp-position]\n  (let [qtys (map :lp-minted (:mints lp-position))]\n    (if (= qtys '())\n      (u/bn 0.0)\n      (reduce bn/+ qtys))))\n\n\n(defn burned-lps\n  [lp-position]\n  (let [qtys (map :lp-burned (:burns lp-position))]\n    (if (= qtys '())\n      (u/bn 0.0)\n      (reduce bn/+ qtys))))\n\n\n(defn position-lps\n  [lp-position]\n  (let [minted (minted-lps lp-position)\n        burned (burned-lps lp-position)]\n    (u/max-bn [(bn/- minted burned) (u/bn \"0.0\")])))\n\n\n(defn current-assets\n  [lp-position pool]\n  (let [pos-lps (position-lps lp-position)\n        pool-portion (bn// pos-lps (pools/total-lps pool))\n        pool-reserves (pools/reserves pool)]\n    (zipmap (keys pool-reserves)\n            (map (fn [pr] (bn/* pr pool-portion))\n                 (vals pool-reserves)))))\n\n(defn v3current-assets\n  [lp-position pool]\n  (let [token0 (:token0 lp-position)\n        token1 (:token1 lp-position)\n        amount0 (:amount0 lp-position)\n        amount1 (:amount1 lp-position)]\n    {token0 amount0\n     token1 amount1}))\n\n\n(defn v3-uncollected-fees\n  [lp-position tokens]\n  (let [token0-address (:token0 lp-position)\n        token1-address (:token1 lp-position)\n        token0-symbol (:symbol (get tokens token0-address))\n        token1-symbol (:symbol (get tokens token1-address))\n        amount0 (:pending-fees0 lp-position)\n        amount1 (:pending-fees1 lp-position)]\n    {token0-symbol amount0\n     token1-symbol amount1}))\n\n\n(defn v3-uncollected-fees-addys\n  [lp-position tokens]\n  (let [token0-address (:token0 lp-position)\n        token1-address (:token1 lp-position)\n        amount0 (:pending-fees0 lp-position)\n        amount1 (:pending-fees1 lp-position)]\n    {token0-address amount0\n     token1-address amount1}))\n\n\n(defn v3-collected-fees\n  [lp-position tokens]\n  (let [token0-address (:token0 lp-position)\n        token1-address (:token1 lp-position)\n        token0-symbol (:symbol (get tokens token0-address))\n        token1-symbol (:symbol (get tokens token1-address))\n        withdrawals (map :withdrawals (:collects lp-position))\n        zeroed (zipmap [token0-address token1-address] [(u/bn 0.0) (u/bn 0.0)])\n        summed (merge-with bn/+ zeroed\n                           (apply merge-with bn/+ withdrawals))]\n    {token0-symbol (get summed token0-address)\n     token1-symbol (get summed token1-address)}))\n\n\n(defn v3-collected-fees-addys\n  [lp-position tokens]\n  (let [token0-address (:token0 lp-position)\n        token1-address (:token1 lp-position)\n        withdrawals (map :withdrawals (:collects lp-position))\n        zeroed (zipmap [token0-address token1-address] [(u/bn 0.0) (u/bn 0.0)])\n        summed (merge-with bn/+ zeroed\n                           (apply merge-with bn/+ withdrawals))]\n    {token0-address (get summed token0-address)\n     token1-address (get summed token1-address)}))\n\n\n(defn tokens-deposited\n  [lp-position]\n  (let [mints (:mints lp-position)\n        deposits (map :deposits mints)]\n    (apply merge-with bn/+ deposits)))\n\n(defn tokens-withdrawn\n  [lp-position]\n  (let [deposited (tokens-deposited lp-position)\n        zeroed (zipmap (keys deposited) [(u/bn 0.0) (u/bn 0.0)])\n        burns (:burns lp-position)\n        withdrawals (map :withdrawals burns)]\n    (merge-with bn/+ zeroed\n                (apply merge-with bn/+ withdrawals))))\n\n\n(defn invested-assets\n  [lp-position]\n  (tokens-deposited lp-position))\n\n\n(defn withdrawan-assets\n  [lp-position pool]\n  (tokens-withdrawn lp-position))\n\n\n(defn diff-assets\n  [lp-position pool]\n  (let [deposited (tokens-deposited lp-position)\n        withdrawn (tokens-withdrawn lp-position)]\n    (merge-with bn/-\n                (current-assets lp-position pool)\n                (merge-with bn/- deposited withdrawn))))\n\n(defn v3diff-assets\n  [lp-position pool]\n  (let [deposited (tokens-deposited lp-position)\n        withdrawn (tokens-withdrawn lp-position)]\n    (merge-with bn/-\n                (v3current-assets lp-position pool)\n                (merge-with bn/- deposited withdrawn))))\n\n\n(defn compute-assets-value\n  [current tokens]\n  (let [priced-tokens (filter (fn [k] (contains? tokens k)) (keys current))]\n    (if (> (count priced-tokens) 0)\n      (let [res (reduce bn/+\n                        (map (fn [s] (bn/* (get current s)\n                                           (:usd (:prices (get tokens s)))))\n                           priced-tokens))]\n        (if (and (u/bn? res) (not (.isNaN res)))\n          res\n          (u/bn \"0.00\")))\n      (u/bn \"0.00\"))))\n\n(defn assets-value\n  [lp-position pool tokens]\n  (compute-assets-value\n   (current-assets lp-position pool)\n   tokens))\n\n\n(defn v3assets-value\n  [lp-position pool tokens]\n  (compute-assets-value\n   (v3current-assets lp-position pool)\n   tokens))\n\n\n(defn total-rewards\n  [lp-position pool tokens]\n  (let [rewards-claimed (all-snapshot-claimed lp-position)\n        rewards-claimed' (zipmap (map :token rewards-claimed) (map :qty rewards-claimed))\n        rewards-unclaimed (all-snapshot-unclaimed lp-position)\n        rewards-unclaimed' (zipmap (map :token rewards-unclaimed) (map :qty rewards-unclaimed))\n        all-rewards (merge-with bn/+ rewards-claimed' rewards-unclaimed')]\n    (if (> (count all-rewards) 0)\n      (compute-assets-value\n       all-rewards\n       tokens)\n      (u/bn 0.0))))\n\n\n\n(defn pool-pnl\n  [lp-position pool tokens]\n  (compute-assets-value\n   (diff-assets lp-position pool)\n   tokens))\n\n#_(defn v3pool-pnl\n  [lp-position pool tokens]\n  (compute-assets-value\n   (v3diff-assets lp-position pool)\n   tokens))\n\n(defn v3pool-pnl\n  [lp-position pool tokens]\n  (let [ppnl (v3diff-assets lp-position pool)\n        fees-collected (v3-collected-fees-addys lp-position tokens)\n        fees-uncollected (v3-uncollected-fees-addys lp-position tokens)\n        all-fees (merge-with bn/+ fees-collected fees-uncollected)]\n    (compute-assets-value\n     (merge-with bn/+ ppnl all-fees)\n     tokens)))\n\n\n(defn total-pnl\n  [lp-position pool tokens]\n  (let [ppnl (diff-assets lp-position pool)\n        rewards-claimed (all-snapshot-claimed lp-position)\n        rewards-claimed' (zipmap (map :token rewards-claimed) (map :qty rewards-claimed))\n        rewards-unclaimed (all-snapshot-unclaimed lp-position)\n        rewards-unclaimed' (zipmap (map :token rewards-unclaimed) (map :qty rewards-unclaimed))\n        gas-cost-eth (fees-paid lp-position)\n        gas-costs {u/weth-address (bn/* (u/bn \"-1.0\") gas-cost-eth)}\n        all-rewards (merge-with bn/+ rewards-claimed' rewards-unclaimed')]\n    (compute-assets-value\n     (merge-with bn/+ ppnl all-rewards gas-costs)\n     tokens)))\n\n\n(defn v3total-pnl\n  [lp-position pool tokens]\n  (let [ppnl (v3diff-assets lp-position pool)\n        rewards-claimed (all-snapshot-claimed lp-position)\n        rewards-claimed' (zipmap (map :token rewards-claimed) (map :qty rewards-claimed))\n        rewards-unclaimed (all-snapshot-unclaimed lp-position)\n        rewards-unclaimed' (zipmap (map :token rewards-unclaimed) (map :qty rewards-unclaimed))\n        fees-collected (v3-collected-fees-addys lp-position tokens)\n        fees-uncollected (v3-uncollected-fees-addys lp-position tokens)\n\n        gas-cost-eth (fees-paid lp-position)\n        gas-costs {u/weth-address (bn/* (u/bn \"-1.0\") gas-cost-eth)}\n        all-fees (merge-with bn/+ fees-collected fees-uncollected)\n        _ (println all-fees)\n        _ (println gas-costs)\n        _ (println ppnl)]\n    (compute-assets-value\n     (merge-with bn/+ ppnl all-fees gas-costs)\n     tokens)))\n\n(defn deposit-flow\n  [mint tokens blocks-ts]\n  (let [block-ts (u/ts->datetime (get blocks-ts (:block-number mint)))\n        deposit-value (bn/* (u/bn \"-1\") (compute-assets-value (:deposits mint) tokens))]\n    #_{:amount deposit-value :date (js/Date. \"2020-10-12\")}\n    {:amount (.toNumber deposit-value)\n     :date (js/Date. block-ts)\n     :type :deposits}))\n\n(defn gas-flow\n  [mint tokens blocks-ts]\n  (let [block-ts (u/ts->datetime (get blocks-ts (:block-number mint)))\n        eth-paid (bn/* (:gas-price mint) (:gas-used mint))\n        gas-value  (bn/* (u/bn \"-1\") (compute-assets-value {u/weth-address eth-paid} tokens))]\n    {:amount (.toNumber gas-value)\n     :date (js/Date. block-ts)\n     :type :gas-costs}))\n\n(defn mint-flows\n  [lp-position tokens blocks-ts]\n  (let [deposit-flows (map #(deposit-flow % tokens blocks-ts) (:mints lp-position))\n        gas-flows (map #(gas-flow % tokens blocks-ts) (:mints lp-position))]\n    (concat deposit-flows gas-flows)))\n\n(defn withdrawal-flow\n  [burn tokens blocks-ts]\n  (let [block-ts (u/ts->datetime (get blocks-ts (:block-number burn)))\n        withdrawal-value (compute-assets-value (:withdrawals burn) tokens)]\n    {:amount (.toNumber withdrawal-value)\n     :date (js/Date. block-ts)\n     :type :withdrawals}))\n\n\n(defn burn-flows\n  [lp-position tokens blocks-ts]\n  (let [withdrawal-flows (map #(withdrawal-flow % tokens blocks-ts) (:burns lp-position))\n        gas-flows (map #(gas-flow % tokens blocks-ts) (:burns lp-position))]\n    (concat withdrawal-flows gas-flows)))\n\n(defn reward-flow\n  [reward tokens blocks-ts]\n  (let [block-ts (u/ts->datetime (get blocks-ts (:block-number reward)))\n        reward-value (compute-assets-value {(string/lower-case (:token reward)) (:qty reward)} tokens)]\n    {:amount (.toNumber reward-value)\n     :date (js/Date. block-ts)\n     :type :claimed-rewards}))\n\n\n(defn rewards-flows\n  [lp-position tokens blocks-ts]\n  (let [paid-rewards (all-paid-rewards lp-position)\n        flows (map #(reward-flow % tokens blocks-ts) paid-rewards)]\n    flows))\n\n\n(defn pending-rewards-flows\n  [lp-position tokens]\n  (let [unclaimed-rewards (all-snapshot-unclaimed lp-position)\n        unclaimed-rewards' (apply merge-with bn/+ (map (fn [r] {(string/lower-case (:token r)) (:qty r)})\n                                                       unclaimed-rewards))\n        unclaimed-value (compute-assets-value unclaimed-rewards' tokens)]\n    [{:amount (.toNumber unclaimed-value)\n      :date (js/Date.)\n      :type :pending-rewards}]))\n\n\n(defn cash-flows\n  [lp-position pool tokens blocks-ts]\n  (let [mints (mint-flows lp-position tokens blocks-ts)\n        burns (burn-flows lp-position tokens blocks-ts)\n        rewards (rewards-flows lp-position tokens blocks-ts)\n        assets-value (assets-value lp-position pool tokens)\n        assets [{:amount (.toNumber assets-value) :date (js/Date.)}]\n        pending-rewards (pending-rewards-flows lp-position tokens)]\n    (sort-by :date (concat mints burns rewards assets pending-rewards))))\n\n\n(defn total-irr\n  [lp-position pool tokens blocks-ts]\n  (try\n    (let [flows (cash-flows lp-position pool tokens blocks-ts)\n          flows' (map (fn [m] (into m {:amount (js/parseFloat (.toFixed (:amount m) 2))})) flows)\n          irr (xirr/xirr (clj->js flows' 0.1 1e-10 2000 200))]\n      (bn/* (u/bn irr) (u/bn \"100\")))\n    (catch js/Error err\n      (do (js/console.log (str \"xirr error:\" err))\n          (u/bn \"0.0\")))))\n\n(defn balance-reducer\n  [state flow]\n  (let [init-time (:init-time state)\n        next-time (u/datetime->ts (:date flow))\n        time-block (- next-time (:time state))\n        next-balance (+ (:amount flow) (:balance state))\n        next-avgbal (if (= time-block 0)\n                      (:avg-balance state)\n                      (/ (+ (* (:avg-balance state) (- (:time state) init-time))\n                            (* (:balance state) time-block))\n                         (- next-time init-time)))]\n    {:avg-balance next-avgbal\n     :init-time init-time\n     :balance next-balance\n     :time next-time}))\n\n(defn average-balance\n  \"Should return one number, the avg balance for the period\n  in the cash flows.\"\n  [lp-position pool tokens blocks-ts]\n  (let [flows (cash-flows lp-position pool tokens blocks-ts)\n        relevant-flows (filter #(contains? #{:deposits :withdrawals :gas-costs} (:type %)) flows)\n        first-deposit (first relevant-flows)\n        current-state {:amount 0.0 :date (u/ts->datetime (u/make-unix-ts))}\n        avg-balance (reduce balance-reducer {:avg-banace 0.0\n                                             :init-time (u/datetime->ts (:date first-deposit))\n                                             :time (u/datetime->ts (:date first-deposit))\n                                             :balance 0.0}\n                            (concat relevant-flows [current-state]))]\n    avg-balance))\n\n(defn total-apr\n  [lp-position pool tokens blocks-ts]\n  (try\n    (let [balance-state (average-balance lp-position pool tokens blocks-ts)\n          avg-balance (* -1 (:avg-balance balance-state))\n          total-pnl (total-pnl lp-position pool tokens)\n          first-block (first (sort (map :block-number (:mints lp-position))))\n          first-ts (get blocks-ts first-block)\n          timediff (- (u/make-unix-ts) first-ts)\n          daysdiff (u/bn (u/seconds->days timediff))\n          year-portion (bn// daysdiff (u/bn \"365\"))\n          multiplier (bn// (u/bn \"1\") year-portion)]\n      (bn/* (bn/* (bn// total-pnl avg-balance) multiplier)\n            (u/bn \"100.0\")))\n    (catch js/Error err\n      (do (js/console.log (str \"apr error:\" err))\n          (u/bn \"0.0\")))))\n\n\n\n(defn v3total-apr\n  [lp-position pool tokens blocks-ts]\n  (try\n    (let [balance-state (average-balance lp-position pool tokens blocks-ts)\n          avg-balance (* -1 (:avg-balance balance-state))\n          total-pnl (v3total-pnl lp-position pool tokens)\n          first-block (first (sort (map :block-number (:mints lp-position))))\n          first-ts (get blocks-ts first-block)\n          timediff (- (u/make-unix-ts) first-ts)\n          daysdiff (u/bn (u/seconds->days timediff))\n          year-portion (bn// daysdiff (u/bn \"365\"))\n          multiplier (bn// (u/bn \"1\") year-portion)]\n      (bn/* (bn/* (bn// total-pnl avg-balance) multiplier)\n            (u/bn \"100.0\")))\n    (catch js/Error err\n      (do (js/console.log (str \"apr error:\" err))\n          (u/bn \"0.0\")))))\n\n(defn assets-value-all\n  [lp-positions v3lp-positions pools v3pools tokens]\n  (reduce bn/+\n          (concat\n           (map #(assets-value % (get pools (:address %)) tokens)\n                lp-positions)\n           (map #(v3assets-value % (get v3pools (:address %)) tokens)\n                v3lp-positions))))\n\n(defn gas-costs-all\n  [lp-positions pools tokens]\n  (let [gas-cost-eth (reduce bn/+  (map fees-paid lp-positions))\n        eth-price (tokens/symbol->price \"WETH\" tokens \"usd\")\n        gas-cost-usd (bn/* gas-cost-eth eth-price)]\n    gas-cost-usd))\n\n\n(defn rewards-all\n  [lp-positions pools tokens]\n  (reduce bn/+\n          (map #(total-rewards % (get pools (:address %)) tokens)\n               lp-positions)))\n\n\n\n(defn pool-pnl-all\n  [lp-positions v3lp-positions pools v3pools tokens]\n  (reduce bn/+\n          (concat\n           (map #(pool-pnl % (get pools (:address %)) tokens)\n                lp-positions)\n           (map #(v3pool-pnl % (get v3pools (:address %)) tokens)\n                v3lp-positions))))\n\n\n(defn total-pnl-all\n  [lp-positions v3lp-positions pools v3pools tokens]\n  (reduce bn/+\n          (concat\n           (map #(total-pnl % (get pools (:address %)) tokens)\n                lp-positions)\n           (map #(v3total-pnl % (get v3pools (:address %)) tokens)\n                v3lp-positions))))\n\n(defn block-numbers\n  [lp-position]\n  (let [mint-blocks (map :block-number (:mints lp-position))\n        burn-blocks (map :block-number (:burns lp-position))\n        collect-blocks (map :block-number (:collect lp-position))\n        rewards-claimed (all-paid-rewards lp-position)\n        reward-blocks (map :block-number rewards-claimed)\n        blocks (concat mint-blocks burn-blocks reward-blocks collect-blocks)]\n    blocks))\n\n\n"]}