shadow$provide.module$node_modules$asn1_DOT_js$lib$asn1$encoders$der=function(global,require,module,exports){function DEREncoder(entity){this.enc="der";this.name=entity.name;this.entity=entity;this.tree=new DERNode;this.tree._init(entity.body)}function DERNode(parent){Node.call(this,"der",parent)}function two(num){return 10>num?"0"+num:num}global=require("module$node_modules$inherits$inherits_browser");const Buffer=require("module$node_modules$safer_buffer$safer").Buffer,Node=require("module$node_modules$asn1_DOT_js$lib$asn1$base$node"),
der=require("module$node_modules$asn1_DOT_js$lib$asn1$constants$der");module.exports=DEREncoder;DEREncoder.prototype.encode=function(data,reporter){return this.tree._encode(data,reporter).join()};global(DERNode,Node);DERNode.prototype._encodeComposite=function(tag$jscomp$0,primitive,cls,content){a:{var tag=tag$jscomp$0;tag$jscomp$0=this.reporter;"seqof"===tag?tag="seq":"setof"===tag&&(tag="set");if(der.tagByName.hasOwnProperty(tag))tag=der.tagByName[tag];else if("number"!==typeof tag||(tag|0)!==tag){primitive=
tag$jscomp$0.error("Unknown tag: "+tag);break a}31<=tag?primitive=tag$jscomp$0.error("Multi-octet tag encoding unsupported"):(primitive||(tag|=32),primitive=tag|=der.tagClassByName[cls||"universal"]<<6)}if(128>content.length)return cls=Buffer.alloc(2),cls[0]=primitive,cls[1]=content.length,this._createEncoderBuffer([cls,content]);cls=1;for(tag$jscomp$0=content.length;256<=tag$jscomp$0;tag$jscomp$0>>=8)cls++;tag$jscomp$0=Buffer.alloc(2+cls);tag$jscomp$0[0]=primitive;tag$jscomp$0[1]=128|cls;for(let i=
1+cls,j=content.length;0<j;i--,j>>=8)tag$jscomp$0[i]=j&255;return this._createEncoderBuffer([tag$jscomp$0,content])};DERNode.prototype._encodeStr=function(str,tag){if("bitstr"===tag)return this._createEncoderBuffer([str.unused|0,str.data]);if("bmpstr"===tag){tag=Buffer.alloc(2*str.length);for(let i=0;i<str.length;i++)tag.writeUInt16BE(str.charCodeAt(i),2*i);return this._createEncoderBuffer(tag)}return"numstr"===tag?this._isNumstr(str)?this._createEncoderBuffer(str):this.reporter.error("Encoding of string type: numstr supports only digits and space"):
"printstr"===tag?this._isPrintstr(str)?this._createEncoderBuffer(str):this.reporter.error("Encoding of string type: printstr supports only latin upper and lower case letters, digits, space, apostrophe, left and rigth parenthesis, plus sign, comma, hyphen, dot, slash, colon, equal sign, question mark"):/str$/.test(tag)?this._createEncoderBuffer(str):"objDesc"===tag?this._createEncoderBuffer(str):this.reporter.error("Encoding of string type: "+tag+" unsupported")};DERNode.prototype._encodeObjid=function(id,
values,relative){if("string"===typeof id){if(!values)return this.reporter.error("string objid given, but no values map found");if(!values.hasOwnProperty(id))return this.reporter.error("objid not found in values map");id=values[id].split(/[\s.]+/g);for(values=0;values<id.length;values++)id[values]|=0}else if(Array.isArray(id))for(id=id.slice(),values=0;values<id.length;values++)id[values]|=0;if(!Array.isArray(id))return this.reporter.error("objid() should be either array or string, got: "+JSON.stringify(id));
if(!relative){if(40<=id[1])return this.reporter.error("Second objid identifier OOB");id.splice(0,2,40*id[0]+id[1])}relative=0;for(values=0;values<id.length;values++){var ident$jscomp$0=id[values];for(relative++;128<=ident$jscomp$0;ident$jscomp$0>>=7)relative++}relative=Buffer.alloc(relative);values=relative.length-1;for(ident$jscomp$0=id.length-1;0<=ident$jscomp$0;ident$jscomp$0--){let ident=id[ident$jscomp$0];for(relative[values--]=ident&127;0<(ident>>=7);)relative[values--]=128|ident&127}return this._createEncoderBuffer(relative)};
DERNode.prototype._encodeTime=function(time,tag){let str;time=new Date(time);"gentime"===tag?str=[two(time.getUTCFullYear()),two(time.getUTCMonth()+1),two(time.getUTCDate()),two(time.getUTCHours()),two(time.getUTCMinutes()),two(time.getUTCSeconds()),"Z"].join(""):"utctime"===tag?str=[two(time.getUTCFullYear()%100),two(time.getUTCMonth()+1),two(time.getUTCDate()),two(time.getUTCHours()),two(time.getUTCMinutes()),two(time.getUTCSeconds()),"Z"].join(""):this.reporter.error("Encoding "+tag+" time is not supported yet");
return this._encodeStr(str,"octstr")};DERNode.prototype._encodeNull=function(){return this._createEncoderBuffer("")};DERNode.prototype._encodeInt=function(num,values){if("string"===typeof num){if(!values)return this.reporter.error("String int or enum given, but no values map");if(!values.hasOwnProperty(num))return this.reporter.error("Values map doesn't contain: "+JSON.stringify(num));num=values[num]}"number"===typeof num||Buffer.isBuffer(num)||(values=num.toArray(),!num.sign&&values[0]&128&&values.unshift(0),
num=Buffer.from(values));if(Buffer.isBuffer(num))return values=num.length,0===num.length&&values++,values=Buffer.alloc(values),num.copy(values),0===num.length&&(values[0]=0),this._createEncoderBuffer(values);if(128>num)return this._createEncoderBuffer(num);if(256>num)return this._createEncoderBuffer([0,num]);values=1;for(var i=num;256<=i;i>>=8)values++;values=Array(values);for(i=values.length-1;0<=i;i--)values[i]=num&255,num>>=8;values[0]&128&&values.unshift(0);return this._createEncoderBuffer(Buffer.from(values))};
DERNode.prototype._encodeBool=function(value){return this._createEncoderBuffer(value?255:0)};DERNode.prototype._use=function(entity,obj){"function"===typeof entity&&(entity=entity(obj));return entity._getEncoder("der").tree};DERNode.prototype._skipDefault=function(dataBuffer,reporter,parent){const state=this._baseState;if(null===state["default"])return!1;dataBuffer=dataBuffer.join();void 0===state.defaultBuffer&&(state.defaultBuffer=this._encodeValue(state["default"],reporter,parent).join());if(dataBuffer.length!==
state.defaultBuffer.length)return!1;for(reporter=0;reporter<dataBuffer.length;reporter++)if(dataBuffer[reporter]!==state.defaultBuffer[reporter])return!1;return!0}}
//# sourceMappingURL=module$node_modules$asn1_DOT_js$lib$asn1$encoders$der.js.map
