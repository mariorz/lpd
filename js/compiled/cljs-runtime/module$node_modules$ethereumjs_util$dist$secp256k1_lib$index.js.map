{
"version":3,
"file":"module$node_modules$ethereumjs_util$dist$secp256k1_lib$index.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/ethereumjs-util/dist/secp256k1-lib/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$ethereumjs_util$dist$secp256k1_lib$index\"] = function(global,require,module,exports) {\nvar Buffer = require('buffer').Buffer;\n'use strict';\n\n// This file is imported from secp256k1 v3\n// https://github.com/cryptocoinjs/secp256k1-node/blob/master/LICENSE\n\nvar BN = require('bn.js');\nvar EC = require('elliptic').ec;\n\nvar ec = new EC('secp256k1');\nvar ecparams = ec.curve;\n\nexports.privateKeyExport = function (privateKey, compressed) {\n  var d = new BN(privateKey);\n  if (d.ucmp(ecparams.n) >= 0) {\n    throw new Error('couldn\\'t export to DER format');\n  }\n\n  var point = ec.g.mul(d);\n  return toPublicKey(point.getX(), point.getY(), compressed);\n};\n\nexports.privateKeyModInverse = function (privateKey) {\n  var bn = new BN(privateKey);\n  if (bn.ucmp(ecparams.n) >= 0 || bn.isZero()) {\n    throw new Error('private key range is invalid');\n  }\n\n  return bn.invm(ecparams.n).toArrayLike(Buffer, 'be', 32);\n};\n\nexports.signatureImport = function (sigObj) {\n  var r = new BN(sigObj.r);\n  if (r.ucmp(ecparams.n) >= 0) {\n    r = new BN(0);\n  }\n\n  var s = new BN(sigObj.s);\n  if (s.ucmp(ecparams.n) >= 0) {\n    s = new BN(0);\n  }\n\n  return Buffer.concat([r.toArrayLike(Buffer, 'be', 32), s.toArrayLike(Buffer, 'be', 32)]);\n};\n\nexports.ecdhUnsafe = function (publicKey, privateKey, compressed) {\n  var point = ec.keyFromPublic(publicKey);\n\n  var scalar = new BN(privateKey);\n  if (scalar.ucmp(ecparams.n) >= 0 || scalar.isZero()) {\n    throw new Error('scalar was invalid (zero or overflow)');\n  }\n\n  var shared = point.pub.mul(scalar);\n  return toPublicKey(shared.getX(), shared.getY(), compressed);\n};\n\nvar toPublicKey = function toPublicKey(x, y, compressed) {\n  var publicKey = void 0;\n\n  if (compressed) {\n    publicKey = Buffer.alloc(33);\n    publicKey[0] = y.isOdd() ? 0x03 : 0x02;\n    x.toArrayLike(Buffer, 'be', 32).copy(publicKey, 1);\n  } else {\n    publicKey = Buffer.alloc(65);\n    publicKey[0] = 0x04;\n    x.toArrayLike(Buffer, 'be', 32).copy(publicKey, 1);\n    y.toArrayLike(Buffer, 'be', 32).copy(publicKey, 33);\n  }\n\n  return publicKey;\n};\n};"],
"names":["shadow$provide","global","require","module","exports","Buffer","BN","ec","ecparams","curve","privateKeyExport","exports.privateKeyExport","privateKey","compressed","d","ucmp","n","Error","point","g","mul","toPublicKey","getX","getY","privateKeyModInverse","exports.privateKeyModInverse","bn","isZero","invm","toArrayLike","signatureImport","exports.signatureImport","sigObj","r","s","concat","ecdhUnsafe","exports.ecdhUnsafe","publicKey","keyFromPublic","scalar","shared","pub","x","y","alloc","isOdd","copy"]
}
