{
"version":3,
"file":"module$node_modules$pocket_js_core$src$models$dispatch.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,CAAe,sDAAf,CAA2E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CACnH,MAAMC,MAAQH,OAAA,CAAQ,iCAAR,CAAd,CACMI,KAAOJ,OAAA,CAAQ,oDAAR,CAAPI,CAA4BA,IADlC,CAEMC,UAAYL,OAAA,CAAQ,wDAAR,CAQlB,MAAMM,SAAN,CAMEC,WAAW,CAACC,aAAD,CAAgB,CACzB,IAAA,CAAKA,aAAL,CAAqBA,aACrB,KAAA,CAAKC,aAAL,CAAqBN,KAAA,CAAMO,MAAN,CAAa,CAChCC,QAASN,SAATM,CAAmBC,eADa,CAEhCC,KAAMR,SAANQ,CAAgBC,YAFgB,CAGhCC,QAAS,IAATA,CAAcP,aAAdO,CAA4BC,cAHI;AAIhCC,QAAS,CACP,eAAgB,kBADT,CAJuB,CAAb,CAFI,CAiB3BC,eAAe,EAAG,CAChB,IAAIC,gBAAkB,EACtB,KAAA,CAAKX,aAAL,CAAmBY,WAAnB,CAA+BC,OAA/B,CAAuCC,OAAA,EAAW,CAChDH,eAAA,CAAgBI,IAAhB,CAAqBD,OAArB,CADgD,CAAlD,CAGA,OAAOH,gBALS,CAcZK,0BAAoB,CAACC,QAAD,CAAW,CACnC,GAAI,CAEF,IAAIC,SAAW,IAEfA,SAAA,CAAW,MAAM,IAAA,CAAKjB,aAAL,CAAmBkB,IAAnB,CAAwBtB,SAAxB,CAAkCS,YAAlC,CAAgD,CAC/D,MAJac,IAIb,CAAkBpB,aAAlB,CAAgCqB,KAD+B,CAE/D,YALaD,IAKE,CAASV,eAAT,EAFgD,CAAhD,CAKjB,IAAgB,IAAhB,EAAIQ,QAAJ,EAA2C,GAA3C,EAAwBA,QAAxB,CAAiCI,MAAjC,EAAmE,IAAnE,EAAkDJ,QAAlD,CAA2DK,IAA3D,CAAyE,CACvE,IAAIC,MAAQ,IAAA,CAAKC,qBAAL,CAA2BP,QAA3B,CAAoCK,IAApC,CAEZ,IAAIN,QAAJ,CACEA,QAAA,CAASO,KAAT;AAAgB,IAAhB,CADF,KAIE,OAAOA,MAP8D,CAAzE,IAUE,IAAIP,QAAJ,CACEA,QAAA,CAAS,IAAT,CAAmBS,KAAJ,CAAU,+CAAV,CAA4DR,QAA5D,CAAqEK,IAArE,CAAf,CADF,KAIE,OAAWG,MAAJ,CAAU,+CAAV,CAA4DR,QAA5D,CAAqEK,IAArE,CAvBT,CA0BF,MAAOI,GAAP,CAAY,CACZ,GAAIV,QAAJ,CACEA,QAAA,CAAS,IAAT,CAAmBS,KAAJ,CAAU,+CAAV,CAA4DC,GAA5D,CAAf,CADF,KAIE,OAAWD,MAAJ,CAAU,+CAAV,CAA4DC,GAA5D,CALG,CA3BqB,CA4CrCF,qBAAqB,CAACP,QAAD,CAAW,CAC9B,GAAI,CAEF,IAAIM,MAAQ,EAEZ,IAAII,KAAA,CAAMC,OAAN,CAAcX,QAAd,CAAJ,CAEEA,QAAA,CAASL,OAAT,CAAiBC,OAAA,EAAW,CAE1B,IAAIgB,QAAUhB,OAAVgB,CAAkBC,IAAtB;AACIC,MAAQlB,OAARkB,CAAgBC,KAEhBnB,QAAJ,CAAYoB,GAAZ,EAEEpB,OAAA,CAAQoB,GAAR,CAAYrB,OAAZ,CAAoBsB,MAAA,EAAU,CACxBC,MAAAA,CAAO,IAAIxC,IAAJ,CAASkC,OAAT,CAAkBE,KAAlB,CAAyBG,MAAzB,CACXX,MAAA,CAAMT,IAAN,CAAWqB,MAAX,CAF4B,CAA9B,CAPwB,CAA5B,CAFF,KAeO,CAEL,IAAIN,iBAAUZ,QAAVY,CAAmBC,IAAvB,CACIC,eAAQd,QAARc,CAAiBC,KAEjBf,SAAJ,CAAagB,GAAb,EAEEhB,QAAA,CAASgB,GAAT,CAAarB,OAAb,CAAqBsB,MAAA,EAAU,CACzBC,MAAAA,CAAO,IAAIxC,IAAJ,CAASkC,gBAAT,CAAkBE,cAAlB,CAAyBG,MAAzB,CACXX,MAAA,CAAMT,IAAN,CAAWqB,MAAX,CAF6B,CAA/B,CAPG,CAcP,MAAOZ,MAjCL,CAmCF,MAAOa,KAAP,CAAc,CACd,MAAWX,MAAJ,CAAU,6CAAV,CAA0DW,KAA1D,CADO,CApCc,CAjFlC,CA6HA5C,MAAA,CAAOC,OAAP,CAAiB,CACfI,QADe,CAxIkG;",
"sources":["node_modules/pocket-js-core/src/models/dispatch.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pocket_js_core$src$models$dispatch\"] = function(global,require,module,exports) {\nconst axios = require('axios');\nconst Node = require(\"./node.js\").Node;\nconst constants = require(\"../utils/constants.js\");\n\n// Dispatch\n/**\n *\n *\n * @class Dispatch\n */\nclass Dispatch {\n  /**\n   *Creates an instance of Dispatch.\n   * @param {Configuration} configuration - Configuration object.\n   * @memberof Dispatch\n   */\n  constructor(configuration) {\n    this.configuration = configuration;\n    this.axiosInstance = axios.create({\n      baseURL: constants.dispatchNodeURL,\n      path: constants.dispatchPath,\n      timeout: this.configuration.requestTimeOut,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n  }\n  /**\n   *\n   * blockchain object to JSON\n   * @returns {JSON} - JSON Array with the blockchain list.\n   * @memberof Dispatch\n   */\n  blockchainsJSON() {\n    var blockchainArray = []\n    this.configuration.blockchains.forEach(element => {\n      blockchainArray.push(element);\n    });\n    return blockchainArray\n  }\n  /**\n   *\n   * Retrieves a list of service nodes\n   * @param {callback} callback\n   * @returns {Node} - A Node object list.\n   * @memberof Dispatch\n   */\n  async retrieveServiceNodes(callback) {\n    try {\n      var dispatch = this;\n      var response = null;\n\n      response = await this.axiosInstance.post(constants.dispatchPath, {\n        \"DevID\": dispatch.configuration.devID,\n        \"Blockchains\": dispatch.blockchainsJSON()\n      });\n\n      if (response != null && response.status == 200 && response.data != null) {\n        var nodes = this.parseDispatchResponse(response.data);\n\n        if (callback) {\n          callback(nodes, null);\n          return;\n        } else {\n          return nodes;\n        }\n      } else {\n        if (callback) {\n          callback(null, new Error(\"Failed to retrieve service nodes with error: \" + response.data));\n          return;\n        } else {\n          return new Error(\"Failed to retrieve service nodes with error: \" + response.data);\n        }\n      }\n    } catch (err) {\n      if (callback) {\n        callback(null, new Error(\"Failed to retrieve service nodes with error: \" + err));\n        return;\n      } else {\n        return new Error(\"Failed to retrieve service nodes with error: \" + err);\n      }\n    }\n  }\n\n  /**\n   *\n   * Parse the response from the dispatcher\n   * @param {Object} response\n   * @returns {Node} - A Node object list.\n   * @memberof Dispatch\n   */\n  parseDispatchResponse(response) {\n    try {\n      // Variables\n      var nodes = [];\n\n      if (Array.isArray(response)) {\n        // Iterate through the array for different networks results\n        response.forEach(element => {\n          \n          var network = element.name;\n          var netID = element.netid;\n\n          if (element.ips) {\n            // Create a Node object for each item inside the dataKey object, IP:PORT\n            element.ips.forEach(ipPort => {\n              var node = new Node(network, netID, ipPort);\n              nodes.push(node);\n            });\n          }\n        });\n      } else {\n\n        var network = response.name;\n        var netID = response.netid;\n\n        if (response.ips) {\n          // Create a Node object for each item inside the dataKey object, IP:PORT\n          response.ips.forEach(ipPort => {\n            var node = new Node(network, netID, ipPort);\n            nodes.push(node);\n          });\n        }\n\n      }\n      return nodes;\n\n    } catch (error) {\n      return new Error(\"Failed to parsed service nodes with error: \" + error);\n    }\n\n  }\n\n}\n\nmodule.exports = {\n  Dispatch\n}\n};"],
"names":["shadow$provide","global","require","module","exports","axios","Node","constants","Dispatch","constructor","configuration","axiosInstance","create","baseURL","dispatchNodeURL","path","dispatchPath","timeout","requestTimeOut","headers","blockchainsJSON","blockchainArray","blockchains","forEach","element","push","retrieveServiceNodes","callback","response","post","dispatch","devID","status","data","nodes","parseDispatchResponse","Error","err","Array","isArray","network","name","netID","netid","ips","ipPort","node","error"]
}
