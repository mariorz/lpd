{
"version":3,
"file":"module$node_modules$rlp$dist$index.js",
"lineCount":8,
"mappings":"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",
"sources":["node_modules/rlp/dist/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$rlp$dist$index\"] = function(global,require,module,exports) {\nvar Buffer = require('buffer').Buffer;\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getLength = exports.decode = exports.encode = void 0;\nvar BN = require(\"bn.js\");\n/**\n * RLP Encoding based on: https://github.com/ethereum/wiki/wiki/%5BEnglish%5D-RLP\n * This function takes in a data, convert it to buffer if not, and a length for recursion\n * @param input - will be converted to buffer\n * @returns returns buffer of encoded data\n **/\nfunction encode(input) {\n    if (Array.isArray(input)) {\n        var output = [];\n        for (var i = 0; i < input.length; i++) {\n            output.push(encode(input[i]));\n        }\n        var buf = Buffer.concat(output);\n        return Buffer.concat([encodeLength(buf.length, 192), buf]);\n    }\n    else {\n        var inputBuf = toBuffer(input);\n        return inputBuf.length === 1 && inputBuf[0] < 128\n            ? inputBuf\n            : Buffer.concat([encodeLength(inputBuf.length, 128), inputBuf]);\n    }\n}\nexports.encode = encode;\n/**\n * Parse integers. Check if there is no leading zeros\n * @param v The value to parse\n * @param base The base to parse the integer into\n */\nfunction safeParseInt(v, base) {\n    if (v.slice(0, 2) === '00') {\n        throw new Error('invalid RLP: extra zeros');\n    }\n    return parseInt(v, base);\n}\nfunction encodeLength(len, offset) {\n    if (len < 56) {\n        return Buffer.from([len + offset]);\n    }\n    else {\n        var hexLength = intToHex(len);\n        var lLength = hexLength.length / 2;\n        var firstByte = intToHex(offset + 55 + lLength);\n        return Buffer.from(firstByte + hexLength, 'hex');\n    }\n}\nfunction decode(input, stream) {\n    if (stream === void 0) { stream = false; }\n    if (!input || input.length === 0) {\n        return Buffer.from([]);\n    }\n    var inputBuffer = toBuffer(input);\n    var decoded = _decode(inputBuffer);\n    if (stream) {\n        return decoded;\n    }\n    if (decoded.remainder.length !== 0) {\n        throw new Error('invalid remainder');\n    }\n    return decoded.data;\n}\nexports.decode = decode;\n/**\n * Get the length of the RLP input\n * @param input\n * @returns The length of the input or an empty Buffer if no input\n */\nfunction getLength(input) {\n    if (!input || input.length === 0) {\n        return Buffer.from([]);\n    }\n    var inputBuffer = toBuffer(input);\n    var firstByte = inputBuffer[0];\n    if (firstByte <= 0x7f) {\n        return inputBuffer.length;\n    }\n    else if (firstByte <= 0xb7) {\n        return firstByte - 0x7f;\n    }\n    else if (firstByte <= 0xbf) {\n        return firstByte - 0xb6;\n    }\n    else if (firstByte <= 0xf7) {\n        // a list between  0-55 bytes long\n        return firstByte - 0xbf;\n    }\n    else {\n        // a list  over 55 bytes long\n        var llength = firstByte - 0xf6;\n        var length = safeParseInt(inputBuffer.slice(1, llength).toString('hex'), 16);\n        return llength + length;\n    }\n}\nexports.getLength = getLength;\n/** Decode an input with RLP */\nfunction _decode(input) {\n    var length, llength, data, innerRemainder, d;\n    var decoded = [];\n    var firstByte = input[0];\n    if (firstByte <= 0x7f) {\n        // a single byte whose value is in the [0x00, 0x7f] range, that byte is its own RLP encoding.\n        return {\n            data: input.slice(0, 1),\n            remainder: input.slice(1),\n        };\n    }\n    else if (firstByte <= 0xb7) {\n        // string is 0-55 bytes long. A single byte with value 0x80 plus the length of the string followed by the string\n        // The range of the first byte is [0x80, 0xb7]\n        length = firstByte - 0x7f;\n        // set 0x80 null to 0\n        if (firstByte === 0x80) {\n            data = Buffer.from([]);\n        }\n        else {\n            data = input.slice(1, length);\n        }\n        if (length === 2 && data[0] < 0x80) {\n            throw new Error('invalid rlp encoding: byte must be less 0x80');\n        }\n        return {\n            data: data,\n            remainder: input.slice(length),\n        };\n    }\n    else if (firstByte <= 0xbf) {\n        // string is greater than 55 bytes long. A single byte with the value (0xb7 plus the length of the length),\n        // followed by the length, followed by the string\n        llength = firstByte - 0xb6;\n        if (input.length - 1 < llength) {\n            throw new Error('invalid RLP: not enough bytes for string length');\n        }\n        length = safeParseInt(input.slice(1, llength).toString('hex'), 16);\n        if (length <= 55) {\n            throw new Error('invalid RLP: expected string length to be greater than 55');\n        }\n        data = input.slice(llength, length + llength);\n        if (data.length < length) {\n            throw new Error('invalid RLP: not enough bytes for string');\n        }\n        return {\n            data: data,\n            remainder: input.slice(length + llength),\n        };\n    }\n    else if (firstByte <= 0xf7) {\n        // a list between  0-55 bytes long\n        length = firstByte - 0xbf;\n        innerRemainder = input.slice(1, length);\n        while (innerRemainder.length) {\n            d = _decode(innerRemainder);\n            decoded.push(d.data);\n            innerRemainder = d.remainder;\n        }\n        return {\n            data: decoded,\n            remainder: input.slice(length),\n        };\n    }\n    else {\n        // a list  over 55 bytes long\n        llength = firstByte - 0xf6;\n        length = safeParseInt(input.slice(1, llength).toString('hex'), 16);\n        var totalLength = llength + length;\n        if (totalLength > input.length) {\n            throw new Error('invalid rlp: total length is larger than the data');\n        }\n        innerRemainder = input.slice(llength, totalLength);\n        if (innerRemainder.length === 0) {\n            throw new Error('invalid rlp, List has a invalid length');\n        }\n        while (innerRemainder.length) {\n            d = _decode(innerRemainder);\n            decoded.push(d.data);\n            innerRemainder = d.remainder;\n        }\n        return {\n            data: decoded,\n            remainder: input.slice(totalLength),\n        };\n    }\n}\n/** Check if a string is prefixed by 0x */\nfunction isHexPrefixed(str) {\n    return str.slice(0, 2) === '0x';\n}\n/** Removes 0x from a given String */\nfunction stripHexPrefix(str) {\n    if (typeof str !== 'string') {\n        return str;\n    }\n    return isHexPrefixed(str) ? str.slice(2) : str;\n}\n/** Transform an integer into its hexadecimal value */\nfunction intToHex(integer) {\n    if (integer < 0) {\n        throw new Error('Invalid integer as argument, must be unsigned!');\n    }\n    var hex = integer.toString(16);\n    return hex.length % 2 ? \"0\" + hex : hex;\n}\n/** Pad a string to be even */\nfunction padToEven(a) {\n    return a.length % 2 ? \"0\" + a : a;\n}\n/** Transform an integer into a Buffer */\nfunction intToBuffer(integer) {\n    var hex = intToHex(integer);\n    return Buffer.from(hex, 'hex');\n}\n/** Transform anything into a Buffer */\nfunction toBuffer(v) {\n    if (!Buffer.isBuffer(v)) {\n        if (typeof v === 'string') {\n            if (isHexPrefixed(v)) {\n                return Buffer.from(padToEven(stripHexPrefix(v)), 'hex');\n            }\n            else {\n                return Buffer.from(v);\n            }\n        }\n        else if (typeof v === 'number' || typeof v === 'bigint') {\n            if (!v) {\n                return Buffer.from([]);\n            }\n            else {\n                return intToBuffer(v);\n            }\n        }\n        else if (v === null || v === undefined) {\n            return Buffer.from([]);\n        }\n        else if (v instanceof Uint8Array) {\n            return Buffer.from(v);\n        }\n        else if (BN.isBN(v)) {\n            // converts a BN to a Buffer\n            return Buffer.from(v.toArray());\n        }\n        else {\n            throw new Error('invalid type');\n        }\n    }\n    return v;\n}\n//# sourceMappingURL=index.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","encode","input","Array","isArray","output","i","length","push","buf","Buffer","concat","encodeLength","inputBuf","toBuffer","safeParseInt","v","base","slice","Error","parseInt","len","offset","from","hexLength","intToHex","firstByte","_decode","decoded","data","remainder","llength","toString","innerRemainder","d","totalLength","stripHexPrefix","str","integer","hex","padToEven","a","isBuffer","undefined","Uint8Array","BN","isBN","toArray","Object","defineProperty","value","getLength","decode","stream","inputBuffer"]
}
