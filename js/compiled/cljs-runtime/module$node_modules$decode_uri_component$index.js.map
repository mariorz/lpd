{
"version":3,
"file":"module$node_modules$decode_uri_component$index.js",
"lineCount":3,
"mappings":"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",
"sources":["node_modules/decode-uri-component/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$decode_uri_component$index\"] = function(global,require,module,exports) {\n'use strict';\nvar token = '%[a-f0-9]{2}';\nvar singleMatcher = new RegExp(token, 'gi');\nvar multiMatcher = new RegExp('(' + token + ')+', 'gi');\n\nfunction decodeComponents(components, split) {\n\ttry {\n\t\t// Try to decode the entire string first\n\t\treturn decodeURIComponent(components.join(''));\n\t} catch (err) {\n\t\t// Do nothing\n\t}\n\n\tif (components.length === 1) {\n\t\treturn components;\n\t}\n\n\tsplit = split || 1;\n\n\t// Split the array in 2 parts\n\tvar left = components.slice(0, split);\n\tvar right = components.slice(split);\n\n\treturn Array.prototype.concat.call([], decodeComponents(left), decodeComponents(right));\n}\n\nfunction decode(input) {\n\ttry {\n\t\treturn decodeURIComponent(input);\n\t} catch (err) {\n\t\tvar tokens = input.match(singleMatcher);\n\n\t\tfor (var i = 1; i < tokens.length; i++) {\n\t\t\tinput = decodeComponents(tokens, i).join('');\n\n\t\t\ttokens = input.match(singleMatcher);\n\t\t}\n\n\t\treturn input;\n\t}\n}\n\nfunction customDecodeURIComponent(input) {\n\t// Keep track of all the replacements and prefill the map with the `BOM`\n\tvar replaceMap = {\n\t\t'%FE%FF': '\\uFFFD\\uFFFD',\n\t\t'%FF%FE': '\\uFFFD\\uFFFD'\n\t};\n\n\tvar match = multiMatcher.exec(input);\n\twhile (match) {\n\t\ttry {\n\t\t\t// Decode as big chunks as possible\n\t\t\treplaceMap[match[0]] = decodeURIComponent(match[0]);\n\t\t} catch (err) {\n\t\t\tvar result = decode(match[0]);\n\n\t\t\tif (result !== match[0]) {\n\t\t\t\treplaceMap[match[0]] = result;\n\t\t\t}\n\t\t}\n\n\t\tmatch = multiMatcher.exec(input);\n\t}\n\n\t// Add `%C2` at the end of the map to make sure it does not replace the combinator before everything else\n\treplaceMap['%C2'] = '\\uFFFD';\n\n\tvar entries = Object.keys(replaceMap);\n\n\tfor (var i = 0; i < entries.length; i++) {\n\t\t// Replace all decoded components\n\t\tvar key = entries[i];\n\t\tinput = input.replace(new RegExp(key, 'g'), replaceMap[key]);\n\t}\n\n\treturn input;\n}\n\nmodule.exports = function (encodedURI) {\n\tif (typeof encodedURI !== 'string') {\n\t\tthrow new TypeError('Expected `encodedURI` to be of type `string`, got `' + typeof encodedURI + '`');\n\t}\n\n\ttry {\n\t\tencodedURI = encodedURI.replace(/\\+/g, ' ');\n\n\t\t// Try the built in decoder first\n\t\treturn decodeURIComponent(encodedURI);\n\t} catch (err) {\n\t\t// Fallback to a more advanced decoder\n\t\treturn customDecodeURIComponent(encodedURI);\n\t}\n};\n\n};"],
"names":["shadow$provide","global","require","module","exports","decodeComponents","components","split","decodeURIComponent","join","err","length","left","slice","right","Array","prototype","concat","call","singleMatcher","multiMatcher","module.exports","encodedURI","TypeError","replace","replaceMap","match","exec","input","tokens","i","result","entries","Object","keys","key","RegExp"]
}
