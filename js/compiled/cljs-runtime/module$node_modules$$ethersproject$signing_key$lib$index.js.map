{
"version":3,
"file":"module$node_modules$$ethersproject$signing_key$lib$index.js",
"lineCount":7,
"mappings":"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",
"sources":["node_modules/@ethersproject/signing-key/lib/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$ethersproject$signing_key$lib$index\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.computePublicKey = exports.recoverPublicKey = exports.SigningKey = void 0;\nvar elliptic_1 = require(\"./elliptic\");\nvar bytes_1 = require(\"@ethersproject/bytes\");\nvar properties_1 = require(\"@ethersproject/properties\");\nvar logger_1 = require(\"@ethersproject/logger\");\nvar _version_1 = require(\"./_version\");\nvar logger = new logger_1.Logger(_version_1.version);\nvar _curve = null;\nfunction getCurve() {\n    if (!_curve) {\n        _curve = new elliptic_1.EC(\"secp256k1\");\n    }\n    return _curve;\n}\nvar SigningKey = /** @class */ (function () {\n    function SigningKey(privateKey) {\n        properties_1.defineReadOnly(this, \"curve\", \"secp256k1\");\n        properties_1.defineReadOnly(this, \"privateKey\", bytes_1.hexlify(privateKey));\n        var keyPair = getCurve().keyFromPrivate(bytes_1.arrayify(this.privateKey));\n        properties_1.defineReadOnly(this, \"publicKey\", \"0x\" + keyPair.getPublic(false, \"hex\"));\n        properties_1.defineReadOnly(this, \"compressedPublicKey\", \"0x\" + keyPair.getPublic(true, \"hex\"));\n        properties_1.defineReadOnly(this, \"_isSigningKey\", true);\n    }\n    SigningKey.prototype._addPoint = function (other) {\n        var p0 = getCurve().keyFromPublic(bytes_1.arrayify(this.publicKey));\n        var p1 = getCurve().keyFromPublic(bytes_1.arrayify(other));\n        return \"0x\" + p0.pub.add(p1.pub).encodeCompressed(\"hex\");\n    };\n    SigningKey.prototype.signDigest = function (digest) {\n        var keyPair = getCurve().keyFromPrivate(bytes_1.arrayify(this.privateKey));\n        var digestBytes = bytes_1.arrayify(digest);\n        if (digestBytes.length !== 32) {\n            logger.throwArgumentError(\"bad digest length\", \"digest\", digest);\n        }\n        var signature = keyPair.sign(digestBytes, { canonical: true });\n        return bytes_1.splitSignature({\n            recoveryParam: signature.recoveryParam,\n            r: bytes_1.hexZeroPad(\"0x\" + signature.r.toString(16), 32),\n            s: bytes_1.hexZeroPad(\"0x\" + signature.s.toString(16), 32),\n        });\n    };\n    SigningKey.prototype.computeSharedSecret = function (otherKey) {\n        var keyPair = getCurve().keyFromPrivate(bytes_1.arrayify(this.privateKey));\n        var otherKeyPair = getCurve().keyFromPublic(bytes_1.arrayify(computePublicKey(otherKey)));\n        return bytes_1.hexZeroPad(\"0x\" + keyPair.derive(otherKeyPair.getPublic()).toString(16), 32);\n    };\n    SigningKey.isSigningKey = function (value) {\n        return !!(value && value._isSigningKey);\n    };\n    return SigningKey;\n}());\nexports.SigningKey = SigningKey;\nfunction recoverPublicKey(digest, signature) {\n    var sig = bytes_1.splitSignature(signature);\n    var rs = { r: bytes_1.arrayify(sig.r), s: bytes_1.arrayify(sig.s) };\n    return \"0x\" + getCurve().recoverPubKey(bytes_1.arrayify(digest), rs, sig.recoveryParam).encode(\"hex\", false);\n}\nexports.recoverPublicKey = recoverPublicKey;\nfunction computePublicKey(key, compressed) {\n    var bytes = bytes_1.arrayify(key);\n    if (bytes.length === 32) {\n        var signingKey = new SigningKey(bytes);\n        if (compressed) {\n            return \"0x\" + getCurve().keyFromPrivate(bytes).getPublic(true, \"hex\");\n        }\n        return signingKey.publicKey;\n    }\n    else if (bytes.length === 33) {\n        if (compressed) {\n            return bytes_1.hexlify(bytes);\n        }\n        return \"0x\" + getCurve().keyFromPublic(bytes).getPublic(false, \"hex\");\n    }\n    else if (bytes.length === 65) {\n        if (!compressed) {\n            return bytes_1.hexlify(bytes);\n        }\n        return \"0x\" + getCurve().keyFromPublic(bytes).getPublic(true, \"hex\");\n    }\n    return logger.throwArgumentError(\"invalid public or private key\", \"key\", \"[REDACTED]\");\n}\nexports.computePublicKey = computePublicKey;\n//# sourceMappingURL=index.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","getCurve","_curve","elliptic_1","EC","computePublicKey","key","compressed","bytes","bytes_1","arrayify","length","signingKey","SigningKey","keyFromPrivate","getPublic","publicKey","hexlify","keyFromPublic","logger","throwArgumentError","Object","defineProperty","value","recoverPublicKey","properties_1","logger_1","_version_1","Logger","version","privateKey","defineReadOnly","keyPair","prototype","_addPoint","SigningKey.prototype._addPoint","other","p0","p1","pub","add","encodeCompressed","signDigest","SigningKey.prototype.signDigest","digest","digestBytes","signature","sign","canonical","splitSignature","recoveryParam","r","hexZeroPad","toString","s","computeSharedSecret","SigningKey.prototype.computeSharedSecret","otherKey","otherKeyPair","derive","isSigningKey","SigningKey.isSigningKey","_isSigningKey","sig","rs","recoverPubKey","encode"]
}
