{"version":3,"sources":["com/degel/re_frame/storage.cljs"],"mappings":"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","names":["cljs.core/enable-console-print!","com.degel.re-frame.storage/storage-area","session?","js/window","re-frame.core/reg-cofx","p__50382","map__50383","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","coeffects","cljs.core.assoc","cljs.core._EQ_","p__50385","map__50386","names","name","storage","cljs.core.reduce","acc","cljs.core.into","com.degel.re-frame.storage/get-all-pairs","iter__4529__auto__","s__50389","cljs.core/LazySeq","temp__5753__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__50391","cljs.core/chunk-buffer","i__50390","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__50388","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","n","cljs.core.range","p__50392","map__50393","p__50395","map__50396","cljs.core/keys","p__50398","map__50399","cljs.core/vals","p__50401","map__50402","com.degel.re-frame.storage/set-one-item","value","re-frame.core/reg-fx","p__50404","map__50405","pairs","cljs.core/run!","p__50407","map__50408","p__50411","map__50412","p1__50410#","cljs.core/chunk-first"],"sourcesContent":["(ns com.degel.re-frame.storage\n  (:require ;; [clojure.browser.repl :as repl]\n            [re-frame.core :refer [console dispatch reg-cofx reg-fx]]))\n\n;; (defonce conn\n;;   (repl/connect \"http://localhost:9000/repl\"))\n\n(enable-console-print!)\n\n\n;; The Web Storage API offers the ability to store data on the client,\n;; per-session or persistently, and is supported by nearly all modern browsers.\n;; Unlike cookies, web storage is used purely on the client.\n\n(defn storage-area [session?]\n  (aget js/window\n        (if session? \"sessionStorage\" \"localStorage\")))\n\n\n;; A coeffect handler that injects whether there are any stored values for this\n;; document or session.\n\n(reg-cofx\n :storage/empty?\n (fn [coeffects {:keys [session?]}]\n   (assoc coeffects :storage/empty?\n          (= 0 (.-length (storage-area session?))))))\n\n\n;; A coeffect handler that injects the stored value(s) associated with the given\n;; name(s).\n\n(reg-cofx\n :storage/get\n (fn [coeffects {:keys [session? names name]}]\n   (assoc coeffects :storage/get\n          (let [storage (storage-area session?)]\n            (if names\n              (reduce (fn [acc name]\n                        (into acc {name (.getItem storage name)}))\n                      {} names)\n              (.getItem storage name))))))\n\n\n;; Ceoeffect handlers to inject all the key/value pairs or just a seq of\n;; the keys or values. (The latter mostly for compatibility with\n;; com.smxemail/re-frame-cookie-fx).\n\n(defn- get-all-pairs [session?]\n  (let [storage (storage-area session?)]\n    (into {}\n          (for [n (range (.-length storage))]\n            (let [name (.key storage n)]\n              {name (.getItem storage name)})))))\n\n(reg-cofx\n :storage/all\n (fn [coeffects {:keys [session?]}]\n   (assoc coeffects :storage/all\n          (get-all-pairs session?))))\n\n(reg-cofx\n :storage/keys\n (fn [coeffects {:keys [session?]}]\n   (assoc coeffects :storage/keys\n          (keys (get-all-pairs session?)))))\n\n(reg-cofx\n :storage/vals\n (fn [coeffects {:keys [session?]}]\n   (assoc coeffects :storage/keys\n          (vals (get-all-pairs session?)))))\n\n\n;; A coeffect handler that injects the number of stored values.\n\n(reg-cofx\n :storage/count\n (fn [coeffects {:keys [session?]}]\n   (assoc coeffects :storage/count\n          (.-length (storage-area session?)))))\n\n\n;; An effects handler that store one or more items in local or session storage.\n;; To set a value, supply:\n;;   :session? True to store in session storage, or defaults to local\n;;             persistent storage.\n;;   :pairs    Sequence of :name, :value maps.\n;;   :name     Key of the item (will be stored as a string).\n;;   :value    Value of the item (will be stored as a string).\n\n(defn- set-one-item [storage name value]\n  (.setItem storage (str name) (str value)))\n\n(reg-fx\n :storage/set\n (fn storage-set-effect [{:keys [session? pairs name value]}]\n   (let [storage (storage-area session?)]\n     (if pairs\n       (run! (fn [{:keys [name value]}]\n               (set-one-item storage name value))\n             pairs)\n       (set-one-item storage name value)))))\n\n\n;; An effects handler that removes one or more items from local or session\n;; storage.\n\n(reg-fx\n :storage/remove\n (fn storage-remove-effect [{:keys [session? names name]}]\n   (let [storage (storage-area session?)]\n     (if names\n       (run! #(.removeItem storage %) names)\n       (.removeItem storage name)))))\n"]}