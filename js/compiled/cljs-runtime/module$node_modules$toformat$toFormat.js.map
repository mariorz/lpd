{
"version":3,
"file":"module$node_modules$toformat$toFormat.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/toformat/toFormat.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$toformat$toFormat\"] = function(global,require,module,exports) {\n/*\r\n *  toFormat v2.0.0\r\n *  Adds a toFormat instance method to big.js or decimal.js\r\n *  Copyright (c) 2017 Michael Mclaughlin\r\n *  MIT Licence\r\n */\r\n\r\n /*\r\n * Adds a `toFormat` method to `Ctor.prototype` and a `format` object to `Ctor`, where `Ctor` is\r\n * a big number constructor such as `Decimal` (decimal.js) or `Big` (big.js).\r\n */\r\nfunction toFormat(Ctor) {\r\n  'use strict';\r\n\r\n  /*\r\n   *  Returns a string representing the value of this big number in fixed-point notation to `dp`\r\n   *  decimal places using rounding mode `rm`, and formatted according to the properties of the\r\n   * `fmt`, `this.format` and `this.constructor.format` objects, in that order of precedence.\r\n   *\r\n   *  Example:\r\n   *\r\n   *  x = new Decimal('123456789.987654321')\r\n   *\r\n   *  // Add a format object to the constructor...\r\n   *  Decimal.format = {\r\n   *    decimalSeparator: '.',\r\n   *    groupSeparator: ',',\r\n   *    groupSize: 3,\r\n   *    secondaryGroupSize: 0,\r\n   *    fractionGroupSeparator: '',     // '\\xA0' non-breaking space\r\n   *    fractionGroupSize : 0\r\n   *  }\r\n   *\r\n   *  x.toFormat();                // 123,456,789.987654321\r\n   *  x.toFormat(2, 1);            // 123,456,789.98\r\n   *\r\n   *  // And/or add a format object to the big number itself...\r\n   *  x.format = {\r\n   *    decimalSeparator: ',',\r\n   *    groupSeparator: '',\r\n   *  }\r\n   *\r\n   *  x.toFormat();                // 123456789,987654321\r\n   *\r\n   *  format = {\r\n   *    decimalSeparator: '.',\r\n   *    groupSeparator: ' ',\r\n   *    groupSize: 3,\r\n   *    fractionGroupSeparator: ' ',     // '\\xA0' non-breaking space\r\n   *    fractionGroupSize : 5\r\n   *  }\r\n\r\n   *  // And/or pass a format object to the method call.\r\n   *  x.toFormat(format);          // 123 456 789.98765 4321\r\n   *  x.toFormat(4, format);       // 123 456 789.9877\r\n   *  x.toFormat(2, 1, format);    // 123 456 789.98\r\n   *\r\n   *  [dp] {number} Decimal places. Integer.\r\n   *  [rm] {number} Rounding mode. Integer, 0 to 8. (Ignored if using big.js.)\r\n   *  [fmt] {Object} A format object.\r\n   *\r\n   */\r\n  Ctor.prototype.toFormat = function toFormat(dp, rm, fmt) {\r\n\r\n    if (!this.e && this.e !== 0) return this.toString();   // Infinity/NaN\r\n\r\n    var arr, g1, g2, i,\r\n      u,                             // undefined\r\n      nd,                            // number of integer digits\r\n      intd,                          // integer digits\r\n      intp,                          // integer part\r\n      fracp,                         // fraction part\r\n      dsep,                          // decimalSeparator\r\n      gsep,                          // groupSeparator\r\n      gsize,                         // groupSize\r\n      sgsize,                        // secondaryGroupSize\r\n      fgsep,                         // fractionGroupSeparator\r\n      fgsize,                        // fractionGroupSize\r\n      tfmt = this.format || {},\r\n      cfmt = this.constructor.format || {};\r\n\r\n    if (dp != u) {\r\n      if (typeof dp == 'object') {\r\n        fmt = dp;\r\n        dp = u;\r\n      } else if (rm != u) {\r\n        if (typeof rm == 'object') {\r\n          fmt = rm;\r\n          rm = u;\r\n        } else if (typeof fmt != 'object') {\r\n          fmt = {};\r\n        }\r\n      } else {\r\n        fmt = {};\r\n      }\r\n    } else {\r\n      fmt = {};\r\n    }\r\n\r\n    arr = this.toFixed(dp, rm).split('.');\r\n    intp = arr[0];\r\n    fracp = arr[1];\r\n    intd = this.s < 0 ? intp.slice(1) : intp;\r\n    nd = intd.length;\r\n\r\n    dsep = fmt.decimalSeparator;\r\n    if (dsep == u) {\r\n      dsep = tfmt.decimalSeparator;\r\n      if (dsep == u) {\r\n        dsep = cfmt.decimalSeparator;\r\n        if (dsep == u) dsep = '.';\r\n      }\r\n    }\r\n\r\n    gsep = fmt.groupSeparator;\r\n    if (gsep == u) {\r\n      gsep = tfmt.groupSeparator;\r\n      if (gsep == u) gsep = cfmt.groupSeparator;\r\n    }\r\n\r\n    if (gsep) {\r\n      gsize = fmt.groupSize;\r\n      if (gsize == u) {\r\n        gsize = tfmt.groupSize;\r\n        if (gsize == u) {\r\n          gsize = cfmt.groupSize;\r\n          if (gsize == u) gsize = 0;\r\n        }\r\n      }\r\n\r\n      sgsize = fmt.secondaryGroupSize;\r\n      if (sgsize == u) {\r\n        sgsize = tfmt.secondaryGroupSize;\r\n        if (sgsize == u) {\r\n          sgsize = cfmt.secondaryGroupSize;\r\n          if (sgsize == u) sgsize = 0;\r\n        }\r\n      }\r\n\r\n      if (sgsize) {\r\n        g1 = +sgsize;\r\n        g2 = +gsize;\r\n        nd -= g2;\r\n      } else {\r\n        g1 = +gsize;\r\n        g2 = +sgsize;\r\n      }\r\n\r\n      if (g1 > 0 && nd > 0) {\r\n        i = nd % g1 || g1;\r\n        intp = intd.substr(0, i);\r\n        for (; i < nd; i += g1) intp += gsep + intd.substr(i, g1);\r\n        if (g2 > 0) intp += gsep + intd.slice(i);\r\n        if (this.s < 0) intp = '-' + intp;\r\n      }\r\n    }\r\n\r\n    if (fracp) {\r\n      fgsep = fmt.fractionGroupSeparator;\r\n      if (fgsep == u) {\r\n        fgsep = tfmt.fractionGroupSeparator;\r\n        if (fgsep == u) fgsep = cfmt.fractionGroupSeparator;\r\n      }\r\n\r\n      if (fgsep) {\r\n        fgsize = fmt.fractionGroupSize;\r\n        if (fgsize == u) {\r\n          fgsize = tfmt.fractionGroupSize;\r\n          if (fgsize == u) {\r\n            fgsize = cfmt.fractionGroupSize;\r\n            if (fgsize == u) fgsize = 0;\r\n          }\r\n        }\r\n\r\n        fgsize = +fgsize;\r\n\r\n        if (fgsize) {\r\n          fracp = fracp.replace(new RegExp('\\\\d{' + fgsize + '}\\\\B', 'g'), '$&' + fgsep);\r\n        }\r\n      }\r\n\r\n      return intp + dsep + fracp;\r\n    } else {\r\n\r\n      return intp;\r\n    }\r\n  };\r\n\r\n  Ctor.format = {\r\n    decimalSeparator: '.',\r\n    groupSeparator: ',',\r\n    groupSize: 3,\r\n    secondaryGroupSize: 0,\r\n    fractionGroupSeparator: '',\r\n    fractionGroupSize: 0\r\n  };\r\n\r\n  return Ctor;\r\n}\r\n\r\nif (typeof module !== 'undefined' && module.exports) module.exports = toFormat;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","toFormat","Ctor","prototype","Ctor.prototype.toFormat","dp","rm","fmt","e","toString","tfmt","format","cfmt","constructor","u","arr","toFixed","split","intp","fracp","intd","s","slice","nd","length","dsep","decimalSeparator","gsep","groupSeparator","gsize","groupSize","sgsize","secondaryGroupSize","g1","g2","i","substr","fgsep","fractionGroupSeparator","fgsize","fractionGroupSize","replace","RegExp"]
}
