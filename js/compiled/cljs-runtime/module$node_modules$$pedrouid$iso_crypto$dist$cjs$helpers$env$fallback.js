shadow$provide.module$node_modules$$pedrouid$iso_crypto$dist$cjs$helpers$env$fallback=function(global,require,module,exports){var __createBinding=this&&this.__createBinding||(Object.create?function(o,m,k,k2){void 0===k2&&(k2=k);Object.defineProperty(o,k2,{enumerable:!0,get:function(){return m[k]}})}:function(o,m,k,k2){void 0===k2&&(k2=k);o[k2]=m[k]}),__setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(o,v){Object.defineProperty(o,"default",{enumerable:!0,value:v})}:function(o,
v){o["default"]=v});global=this&&this.__importStar||function(mod){if(mod&&mod.__esModule)return mod;var result={};if(null!=mod)for(var k in mod)"default"!==k&&Object.hasOwnProperty.call(mod,k)&&__createBinding(result,mod,k);__setModuleDefault(result,mod);return result};module=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{"default":mod}};Object.defineProperty(exports,"__esModule",{value:!0});exports.fallbackRipemd160=exports.fallbackSha512=exports.fallbackSha256=exports.fallbackHmacSha512Sign=
exports.fallbackHmacSha256Sign=exports.fallbackAesDecrypt=exports.fallbackAesEncrypt=void 0;const aes_js_1=module(require("module$node_modules$aes_js$index")),hash=global(require("module$node_modules$hash_DOT_js$lib$hash")),enc_utils_1=require("module$node_modules$enc_utils$dist$cjs$index"),constants_1=require("module$node_modules$$pedrouid$iso_crypto$dist$cjs$helpers$constants$index"),index_1=require("module$node_modules$$pedrouid$iso_crypto$dist$cjs$helpers$index");exports.fallbackAesEncrypt=function(iv,
key,data){iv=new aes_js_1.default.ModeOfOperation.cbc(key,iv);data=index_1.pkcs7.pad(data);data=iv.encrypt(data);return new Uint8Array(data)};exports.fallbackAesDecrypt=function(iv,key,data){iv=(new aes_js_1.default.ModeOfOperation.cbc(key,iv)).decrypt(data);iv=new Uint8Array(iv);return index_1.pkcs7.unpad(iv)};exports.fallbackHmacSha256Sign=function(key,data){key=hash.hmac(hash[constants_1.SHA256_NODE_ALGO],key).update(data).digest(constants_1.HEX_ENC);return enc_utils_1.hexToArray(key)};exports.fallbackHmacSha512Sign=
function(key,data){key=hash.hmac(hash[constants_1.SHA512_NODE_ALGO],key).update(data).digest(constants_1.HEX_ENC);return enc_utils_1.hexToArray(key)};exports.fallbackSha256=function(msg){msg=hash.sha256().update(msg).digest(constants_1.HEX_ENC);return enc_utils_1.hexToArray(msg)};exports.fallbackSha512=function(msg){msg=hash.sha512().update(msg).digest(constants_1.HEX_ENC);return enc_utils_1.hexToArray(msg)};exports.fallbackRipemd160=function(msg){msg=hash.ripemd160().update(msg).digest(constants_1.HEX_ENC);
return enc_utils_1.hexToArray(msg)}}
//# sourceMappingURL=module$node_modules$$pedrouid$iso_crypto$dist$cjs$helpers$env$fallback.js.map
