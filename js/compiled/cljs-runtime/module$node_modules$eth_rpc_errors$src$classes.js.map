{
"version":3,
"file":"module$node_modules$eth_rpc_errors$src$classes.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAe,8CAAf,CAAmE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAyG3GC,QAASA,kBAAkB,CAACC,CAAD,CAAIC,KAAJ,CAAW,CACpC,GAAc,YAAd,GAAIA,KAAJ,CAGA,MAAOA,MAJ6B,CAvGtC,IAAMC,cAAgBN,OAAA,CAAQ,+CAAR,CAAtB,CAQMO,iBASJC,QAAY,CAACC,IAAD,CAAOC,OAAP,CAAgBC,IAAhB,CAAsB,CAEhC,GAAI,CAACC,MAAA,CAAOC,SAAP,CAAiBJ,IAAjB,CAAL,CACE,KAAUK,MAAJ,CACJ,4BADI,CAAN,CAIF,GAAI,CAACJ,OAAL,EAAmC,QAAnC,GAAgB,MAAOA,QAAvB,CACE,KAAUI,MAAJ,CACJ,sCADI,CAAN,CAKF,OAAA,CAAA,KAAA,CAAA,IAAA,CAAA,IAAA,CAAMJ,OAAN,CAAA,KAAA,CAAA,OAAA;AAAA,OAAA,CAAA,OAAA,QAAA,EAAA,QAAA,GAAA,IAAA,CAAA,KAAA,CAAA,OAAA,CAAA,KAAA,CACA,KAAA,CAAKD,IAAL,CAAYA,IACCM,KAAAA,EAAb,GAAIJ,IAAJ,GACE,IADF,CACOA,IADP,CACcA,IADd,CAfgC,CATLG,QAAAA,CAAAA,QAAAA,CAAzBP,gBAAyBO,CAAAA,KAAAA,CAkC7B,iBAAAE,CAAA,SAAAA,CAAA,SAAAA,CAAAA,QAAU,EAAG,CACX,IAAMC,WAAa,CACjBR,KAAM,IAANA,CAAWA,IADM,CAEjBC,QAAS,IAATA,CAAcA,OAFG,CAIDK,KAAAA,EAAlB,GAAI,IAAJ,CAASJ,IAAT,GACEM,UADF,CACaN,IADb,CACoB,IADpB,CACyBA,IADzB,CAGI,KAAJ,CAASO,KAAT,GACED,UADF,CACaC,KADb,CACqB,IADrB,CAC0BA,KAD1B,CAGA,OAAOD,WAXI,CAoBb,iBAAAE,CAAA,SAAAA,CAAA,QAAAA,CAAAA,QAAS,EAAG,CACV,MAAOb,cAAA,CACL,IAAA,CAAKU,SAAL,EADK,CAELb,iBAFK,CAGL,CAHK,CADG,CAcRiB,OAAAA,CASJZ,QAAY,CAACC,IAAD,CAAOC,OAAP,CAAgBC,IAAhB,CAAsB,CAEhC,GAAI,EAaCC,MAAA,CAAOC,SAAP,CAbuBJ,IAavB,CAbD;AAamC,GAbnC,EAAwBA,IAAxB,EAamD,IAbnD,EAAwBA,IAAxB,CAAJ,CACE,KAAUK,MAAJ,CACJ,uEADI,CAAN,CAH8B,MAQhC,iBAAA,CAAA,IAAA,CAAA,IAAA,CAAML,IAAN,CAAYC,OAAZ,CAAqBC,IAArB,CARgC,EAQhC,IARgC,CATAJ,QAAAA,CAAAA,QAAAA,CAA9Ba,MAA8Bb,CAAAA,gBAAAA,CAoCpCN,OAAA,CAAOC,OAAP,CAAiB,CACfK,iBAAAA,gBADe,CAEfa,sBAAAA,MAFe,CAlH0F;",
"sources":["node_modules/eth-rpc-errors/src/classes.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$eth_rpc_errors$src$classes\"] = function(global,require,module,exports) {\n\nconst safeStringify = require('fast-safe-stringify')\n\n/**\n * @class JsonRpcError\n * Error subclass implementing JSON RPC 2.0 errors and Ethereum RPC errors\n * per EIP 1474.\n * Permits any integer error code.\n */\nclass EthereumRpcError extends Error {\n\n  /**\n   * Create an Ethereum JSON RPC error.\n   *\n   * @param {number} code - The integer error code.\n   * @param {string} message - The string message.\n   * @param {any} [data] - The error data.\n   */\n  constructor (code, message, data) {\n\n    if (!Number.isInteger(code)) {\n      throw new Error(\n        '\"code\" must be an integer.',\n      )\n    }\n    if (!message || typeof message !== 'string') {\n      throw new Error(\n        '\"message\" must be a nonempty string.',\n      )\n    }\n\n    super(message)\n    this.code = code\n    if (data !== undefined) {\n      this.data = data\n    }\n  }\n\n  /**\n   * Returns a plain object with all public class properties.\n   *\n   * @returns {object} The serialized error.\n   */\n  serialize () {\n    const serialized = {\n      code: this.code,\n      message: this.message,\n    }\n    if (this.data !== undefined) {\n      serialized.data = this.data\n    }\n    if (this.stack) {\n      serialized.stack = this.stack\n    }\n    return serialized\n  }\n\n  /**\n   * Return a string representation of the serialized error, omitting\n   * any circular references.\n   *\n   * @returns {string} The serialized error as a string.\n   */\n  toString () {\n    return safeStringify(\n      this.serialize(),\n      stringifyReplacer,\n      2,\n    )\n  }\n}\n\n/**\n * @class EthereumRpcError\n * Error subclass implementing Ethereum Provider errors per EIP 1193.\n * Permits integer error codes in the [ 1000 <= 4999 ] range.\n */\nclass EthereumProviderError extends EthereumRpcError {\n\n  /**\n   * Create an Ethereum JSON RPC error.\n   *\n   * @param {number} code - The integer error code, in the [ 1000 <= 4999 ] range.\n   * @param {string} message - The string message.\n   * @param {any} [data] - The error data.\n   */\n  constructor (code, message, data) {\n\n    if (!isValidEthProviderCode(code)) {\n      throw new Error(\n        '\"code\" must be an integer such that: 1000 <= code <= 4999',\n      )\n    }\n\n    super(code, message, data)\n  }\n}\n\n// Internal\n\nfunction isValidEthProviderCode (code) {\n  return Number.isInteger(code) && code >= 1000 && code <= 4999\n}\n\nfunction stringifyReplacer (_, value) {\n  if (value === '[Circular]') {\n    return undefined\n  }\n  return value\n}\n\n// Exports\n\nmodule.exports = {\n  EthereumRpcError,\n  EthereumProviderError,\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","stringifyReplacer","_","value","safeStringify","EthereumRpcError","constructor","code","message","data","Number","isInteger","Error","undefined","serialize","serialized","stack","toString","EthereumProviderError"]
}
