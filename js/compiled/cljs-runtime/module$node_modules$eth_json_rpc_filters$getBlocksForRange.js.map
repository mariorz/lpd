{
"version":3,
"file":"module$node_modules$eth_json_rpc_filters$getBlocksForRange.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAe,0DAAf,CAA+E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CA8BvHC,QAASA,SAAQ,CAACC,GAAD,CAAM,CACrB,MAAYC,KAAAA,EAAZ,GAAID,GAAJ,EAAiC,IAAjC,GAAyBA,GAAzB,CAA8CA,GAA9C,CAEO,IAFP,CACkBA,GAAAE,CAAIC,QAAJD,CAAa,EAAbA,CAFG,CAMvBE,QAASA,MAAK,CAACC,QAAD,CAAWC,MAAX,CAAmBC,MAAnB,CAA2B,CACvC,MAAO,KAAIC,OAAJ,CAAY,CAACC,OAAD,CAAUC,MAAV,CAAA,EAAqB,CACtCL,QAAA,CAASM,SAAT,CAAmB,CAAEC,GAAI,CAAN,CAASC,QAAS,KAAlB,CAAyBP,MAAzB,CAAiCC,MAAjC,CAAnB,CAA8D,CAACO,GAAD,CAAMC,GAAN,CAAA,EAAc,CAC1E,GAAID,GAAJ,CAAS,MAAOJ,OAAA,CAAOI,GAAP,CAChBL,QAAA,CAAQM,GAAR,CAAYC,MAAZ,CAF0E,CAA5E,CADsC,CAAjC,CADgC,CAnCzCnB,MAAA,CAAOC,OAAP,CAEAmB,cAAgC,CAAC,CAAEZ,QAAF,CAAYa,SAAZ,CAAuBC,OAAvB,CAAD,CAAmC,CAC5DD,SAAL,GAAgBA,SAAhB,CAA4BC,OAA5B,CAEA,OAAMC;AAcYnB,IAAAA,EAAlB,GAdiCiB,SAcjC,EAA6C,IAA7C,GAdiCA,SAcjC,CAdiCA,SAcjC,CACOG,MAAA,CAAOC,QAAP,CAf0BJ,SAe1B,CAA2B,EAA3B,CAdDK,UAAAA,CAaYtB,IAAAA,EAAlB,GAb+BkB,OAa/B,EAA6C,IAA7C,GAb+BA,OAa/B,CAb+BA,OAa/B,CACOE,MAAA,CAAOC,QAAP,CAdwBH,OAcxB,CAA2B,EAA3B,CAXDK,UAAAA,CAAsBC,KAAA,CAFFF,SAEE,CAFcH,eAEd,CAFgC,CAEhC,CAAA,CAAyBM,IAAzB,EAAA,CACCC,GADD,CACK,CAACC,CAAD,CAAGC,KAAH,CAAA,EAAaT,eAAb,CAA+BS,KADpC,CAAA,CAECF,GAFD,CAEK5B,QAFL,CAM5B,OAHoB+B,OAAMtB,OAAA,CAAQuB,GAAR,CACxBP,SAAA,CAAoBG,GAApB,CAAwBK,QAAA,EAAY5B,KAAA,CAAMC,QAAN,CAAgB,sBAAhB,CAAwC,CAAC2B,QAAD,CAAW,CAAA,CAAX,CAAxC,CAApC,CADwB,CAVuC,CAHoD;",
"sources":["node_modules/eth-json-rpc-filters/getBlocksForRange.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$eth_json_rpc_filters$getBlocksForRange\"] = function(global,require,module,exports) {\nmodule.exports = getBlocksForRange\n\nasync function getBlocksForRange({ provider, fromBlock, toBlock }) {\n  if (!fromBlock) fromBlock = toBlock\n\n  const fromBlockNumber = hexToInt(fromBlock)\n  const toBlockNumber = hexToInt(toBlock)\n  const blockCountToQuery = toBlockNumber - fromBlockNumber + 1\n  // load all blocks from old to new (inclusive)\n  const missingBlockNumbers = Array(blockCountToQuery).fill()\n                              .map((_,index) => fromBlockNumber + index)\n                              .map(intToHex)\n  const blockBodies = await Promise.all(\n    missingBlockNumbers.map(blockNum => query(provider, 'eth_getBlockByNumber', [blockNum, false]))\n  )\n  return blockBodies\n}\n\nfunction hexToInt(hexString) {\n  if (hexString === undefined || hexString === null) return hexString\n  return Number.parseInt(hexString, 16)\n}\n\nfunction incrementHexInt(hexString){\n  if (hexString === undefined || hexString === null) return hexString\n  const value = hexToInt(hexString)\n  return intToHex(value + 1)\n}\n\nfunction intToHex(int) {\n  if (int === undefined || int === null) return int\n  const hexString = int.toString(16)\n  return '0x' + hexString\n}\n\nfunction query(provider, method, params) {\n  return new Promise((resolve, reject) => {\n    provider.sendAsync({ id: 1, jsonrpc: '2.0', method, params }, (err, res) => {\n      if (err) return reject(err)\n      resolve(res.result)\n    })\n  })\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","intToHex","int","undefined","hexString","toString","query","provider","method","params","Promise","resolve","reject","sendAsync","id","jsonrpc","err","res","result","getBlocksForRange","fromBlock","toBlock","fromBlockNumber","Number","parseInt","toBlockNumber","missingBlockNumbers","Array","fill","map","_","index","blockBodies","all","blockNum"]
}
