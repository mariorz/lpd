{
"version":3,
"file":"module$node_modules$ws$lib$event_target.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/ws/lib/event-target.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$ws$lib$event_target\"] = function(global,require,module,exports) {\n'use strict';\n\n/**\n * Class representing an event.\n *\n * @private\n */\nclass Event {\n  /**\n   * Create a new `Event`.\n   *\n   * @param {String} type The name of the event\n   * @param {Object} target A reference to the target to which the event was dispatched\n   */\n  constructor (type, target) {\n    this.target = target;\n    this.type = type;\n  }\n}\n\n/**\n * Class representing a message event.\n *\n * @extends Event\n * @private\n */\nclass MessageEvent extends Event {\n  /**\n   * Create a new `MessageEvent`.\n   *\n   * @param {(String|Buffer|ArrayBuffer|Buffer[])} data The received data\n   * @param {WebSocket} target A reference to the target to which the event was dispatched\n   */\n  constructor (data, target) {\n    super('message', target);\n\n    this.data = data;\n  }\n}\n\n/**\n * Class representing a close event.\n *\n * @extends Event\n * @private\n */\nclass CloseEvent extends Event {\n  /**\n   * Create a new `CloseEvent`.\n   *\n   * @param {Number} code The status code explaining why the connection is being closed\n   * @param {String} reason A human-readable string explaining why the connection is closing\n   * @param {WebSocket} target A reference to the target to which the event was dispatched\n   */\n  constructor (code, reason, target) {\n    super('close', target);\n\n    this.wasClean = target._closeFrameReceived && target._closeFrameSent;\n    this.reason = reason;\n    this.code = code;\n  }\n}\n\n/**\n * Class representing an open event.\n *\n * @extends Event\n * @private\n */\nclass OpenEvent extends Event {\n  /**\n   * Create a new `OpenEvent`.\n   *\n   * @param {WebSocket} target A reference to the target to which the event was dispatched\n   */\n  constructor (target) {\n    super('open', target);\n  }\n}\n\n/**\n * Class representing an error event.\n *\n * @extends Event\n * @private\n */\nclass ErrorEvent extends Event {\n  /**\n   * Create a new `ErrorEvent`.\n   *\n   * @param {Object} error The error that generated this event\n   * @param {WebSocket} target A reference to the target to which the event was dispatched\n   */\n  constructor (error, target) {\n    super('error', target);\n\n    this.message = error.message;\n    this.error = error;\n  }\n}\n\n/**\n * This provides methods for emulating the `EventTarget` interface. It's not\n * meant to be used directly.\n *\n * @mixin\n */\nconst EventTarget = {\n  /**\n   * Register an event listener.\n   *\n   * @param {String} method A string representing the event type to listen for\n   * @param {Function} listener The listener to add\n   * @public\n   */\n  addEventListener (method, listener) {\n    if (typeof listener !== 'function') return;\n\n    function onMessage (data) {\n      listener.call(this, new MessageEvent(data, this));\n    }\n\n    function onClose (code, message) {\n      listener.call(this, new CloseEvent(code, message, this));\n    }\n\n    function onError (error) {\n      listener.call(this, new ErrorEvent(error, this));\n    }\n\n    function onOpen () {\n      listener.call(this, new OpenEvent(this));\n    }\n\n    if (method === 'message') {\n      onMessage._listener = listener;\n      this.on(method, onMessage);\n    } else if (method === 'close') {\n      onClose._listener = listener;\n      this.on(method, onClose);\n    } else if (method === 'error') {\n      onError._listener = listener;\n      this.on(method, onError);\n    } else if (method === 'open') {\n      onOpen._listener = listener;\n      this.on(method, onOpen);\n    } else {\n      this.on(method, listener);\n    }\n  },\n\n  /**\n   * Remove an event listener.\n   *\n   * @param {String} method A string representing the event type to remove\n   * @param {Function} listener The listener to remove\n   * @public\n   */\n  removeEventListener (method, listener) {\n    const listeners = this.listeners(method);\n\n    for (var i = 0; i < listeners.length; i++) {\n      if (listeners[i] === listener || listeners[i]._listener === listener) {\n        this.removeListener(method, listeners[i]);\n      }\n    }\n  }\n};\n\nmodule.exports = EventTarget;\n\n};"],
"names":["shadow$provide","global","require","module","exports","Event","constructor","type","target","MessageEvent","data","CloseEvent","code","reason","wasClean","_closeFrameReceived","_closeFrameSent","OpenEvent","ErrorEvent","error","message","EventTarget","addEventListener","method","listener","onMessage","call","onClose","onError","onOpen","_listener","on","removeEventListener","listeners","i","length","removeListener"]
}
