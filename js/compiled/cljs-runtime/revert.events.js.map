{"version":3,"sources":["revert/events.cljs"],"mappings":"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","names":["re_frame.core.reg_event_fx","re_frame.core.inject_cofx","p__90317","map__90318","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","db","all-stored","cljs.core.into","revert.db/default-db","cljs.reader.read_string","re_frame.core.reg_event_db","p__90320","vec__90321","cljs.core.nth","_","new-filter-kw","cljs.core.assoc","p__90324","vec__90325","connected-state","p__90328","vec__90329","current","cljs.core/not","p__90332","vec__90333","lp-address","expanded-logs","cljs.core/set","expanded?","cljs.core/contains?","cljs.core.disj","cljs.core.conj","p__90336","p__90337","map__90338","vec__90339","ignored-pools","ignored?","ignored-pools'","p__90343","p__90344","map__90345","vec__90346","account","cljs.core._EQ_","p__90350","map__90351","p__90353","p__90354","map__90355","vec__90356","pool-address","days","revert.events/pool-day->pool","pool-day","revert.events/pool-histories->pools","pool-histories","addresses","cljs.core/keys","pools","p1__90360#","cljs.core.map","cljs.core/PersistentHashMap","cljs.core/first","cljs.core/merge","revert.events/pool-day->tokens","revert.events/pool-histories->tokens","tokens","p1__90361#","cljs.core.mapcat","t","p__90362","p__90363","map__90364","vec__90365","fetched-histories","prev-histories","prev-pools","prev-tokens","updated-pools","cljs.core.merge","updated-tokens","updated-histories","revert.events/current-lps","mints","burns","minted","burned","lps-minted","cljs.core/count","cljs.core.reduce","bignumber.core/+","revert.utils/bn","lps-burned","revert.utils/max-bn","bignumber.core/-","p__90369","p__90370","map__90371","vec__90372","account-history","user-account","lp-positions","wallet-lps","pool-addresses","cljs.core.filter","cljs.core/some?","cljs.core.comp","lp-positions'","a","lp-shares","revert.events/merge-txs-out","all-txs-out","lp-position","p1__90376#","bignumber.core/>","revert.events/merge-stakings","all-stakings","p1__90377#","cljs.core.dissoc","p1__90378#","revert.events/lppos->reward-tokens","lppos","revert.events/lp-positions->reward-tokens","cljs.core/concat","clojure.string/lower-case","cljs.core.distinct","p__90380","p__90381","map__90382","vec__90383","fetched-stakings","prev-lp-positions","lp-addresses","db'","cljs.core.update_in","reward-tokens","cljs.core/vals","block-numbers","p1__90379#","revert.lp-positions/block-numbers","p__90387","p__90388","map__90389","vec__90390","fetched-tokens","fetched-map","p__90394","p__90395","map__90396","vec__90397","blocks-ts"],"sourcesContent":["(ns revert.events\n  (:require\n   [clojure.string :as string]\n   [re-frame.core :refer [reg-event-db reg-event-fx inject-cofx path after] :as re-frame]\n   [revert.db :as db]\n   [revert.utils :as u]\n   [bignumber.core :as bn]\n   [com.degel.re-frame.storage]\n   [revert.lp-positions :as lp-positions]))\n\n(re-frame/reg-event-fx\n ::initialize-db\n [(re-frame/inject-cofx :storage/all {:session? false})]\n (fn [{db :db all-stored :storage/all}]\n   {:db (into db/default-db {:ignored-pools\n                             (cljs.reader/read-string\n                              (get all-stored \"ignored-pools\"))})}))\n\n\n;; usage:  (dispatch [:set-showing  :about])\n;; This event is dispatched when the user clicks on one of the intra-app links\n(re-frame/reg-event-db      ;; part of the re-frame API\n :set-showing     ;; event-id\n ;; handler\n (fn [db [_ new-filter-kw]]     ;; new-filter-kw is one of :all, :active or :done\n   (assoc db :showing new-filter-kw)))\n\n\n(re-frame/reg-event-db\n :set-connected\n (fn [db [_ connected-state]]\n   (assoc db :connected connected-state)))\n\n\n(re-frame/reg-event-db\n :toggle-exited\n (fn [db [_ _]]\n   (let [current (:include-exited db)]\n     (assoc db :include-exited (not current)))))\n\n\n(re-frame/reg-event-db\n :toggle-logs\n (fn [db [_ lp-address]]\n   (let [expanded-logs (set (:expanded-logs db))\n         expanded? (contains? expanded-logs lp-address)]\n     (if expanded?\n       (assoc db :expanded-logs (disj expanded-logs lp-address))\n       (assoc db :expanded-logs (conj expanded-logs lp-address))))))\n\n\n\n\n(re-frame/reg-event-fx\n :toggle-ignore\n (fn [{:keys [db]} [_ lp-address]]\n   (let [ignored-pools (set (:ignored-pools db))\n         ignored? (contains? ignored-pools lp-address)\n         ignored-pools' (if ignored?\n                          (disj ignored-pools lp-address)\n                          (conj ignored-pools lp-address))]\n     {:db (assoc db :ignored-pools ignored-pools')\n      :storage/set {:session? false\n                    :name \"ignored-pools\"\n                    :value ignored-pools'}})))\n\n\n(re-frame/reg-event-fx\n :set-account\n (fn [{:keys [db]} [_ account]]\n   (if (= (:account db) account)\n     {:db (-> db\n              (assoc :loading-msgs (conj (:loading-msgs db) (str \"Loading account \" account)))\n              (assoc :showing :account)\n              (assoc :account-loaded true)\n              (assoc :ignored-pools (:ignored-pools db))\n              (assoc :loading false)\n              (assoc :pool-histories-loaded true)\n              (assoc :pool-stakings-loaded true))}\n     {:db (-> db\n              (assoc :loading true)\n              (assoc :account account)\n              (assoc :showing :account)\n              (assoc :account-loaded false))\n      :fx [[:fetch-account account]]})))\n\n\n(re-frame/reg-event-fx\n :connect-account\n (fn [{:keys [db]} _]\n   {:db db\n    :fx [[:prompt-select-provider nil]]}))\n\n\n\n(re-frame/reg-event-fx\n :set-pool\n (fn [{:keys [db]} [_ pool-address days]]\n   {:db (-> db\n            (assoc :loading true)\n            (assoc :showing :pool)\n            (assoc :pool-address pool-address)\n            (assoc :pool-days days)\n            (assoc :pool-histories-loaded false))\n    :fx [[:fetch-pool-histories [[pool-address] days]]]}))\n\n\n(defn pool-day->pool\n  [pool-day]\n  {:address (:address pool-day)\n   :exchange (:exchange pool-day)\n   :token0-address (:token0-address pool-day)\n   :token1-address (:token1-address pool-day)\n   :reserve0 (:reserve0 pool-day)\n   :reserve1 (:reserve1 pool-day)\n   :total-supply (:total-supply pool-day)})\n\n\n(defn pool-histories->pools\n  [pool-histories]\n  (let [addresses (keys pool-histories)\n        pools (map #(hash-map % (pool-day->pool (first (get pool-histories %))))\n                   addresses)]\n    (apply merge pools)))\n\n\n\n(defn pool-day->tokens\n  [pool-day]\n  [{:address (:token0-address pool-day)\n    :decimals (:token0-decimals pool-day)\n    :name (:token0-name pool-day)\n    :symbol (:token0-symbol pool-day)\n    :prices {:usd (:token0-price pool-day)\n             :source (:exchange pool-day)}}\n   {:address (:token1-address pool-day)\n    :decimals (:token1-decimals pool-day)\n    :name (:token1-name pool-day)\n    :symbol (:token1-symbol pool-day)\n    :prices {:usd (:token1-price pool-day)\n             :source (:exchange pool-day)}}])\n\n\n(defn pool-histories->tokens\n  [pool-histories]\n  (let [addresses (keys pool-histories)\n        tokens (mapcat #(pool-day->tokens (first (get pool-histories %)))\n                       addresses)]\n    (apply merge (map (fn [t] {(:address t) t}) tokens))))\n\n\n(re-frame/reg-event-fx\n :pool-histories-fecthed\n (fn [{:keys [db]} [_ fetched-histories]]\n   (let [prev-histories (:pool-histories db)\n         prev-pools (:pools db)\n         prev-tokens (:tokens db)\n         pools (pool-histories->pools fetched-histories)\n         tokens (pool-histories->tokens fetched-histories)\n         updated-pools (merge prev-pools pools)\n         updated-tokens (merge prev-tokens tokens)\n         updated-histories (merge prev-histories fetched-histories)]\n     {:db (-> db\n              #_(assoc :loading-msgs (conj (:loading-msgs db) (str \"Pool histories loaded\")))\n              (assoc :loading false)\n              (assoc :pools updated-pools)\n              (assoc :tokens updated-tokens)\n              (assoc :pool-histories-loaded true)\n              (assoc :pool-histories updated-histories))})))\n\n\n(defn current-lps\n  [mints burns]\n  (let [minted (map :lp-minted mints)\n        burned (map :lp-burned burns)\n        lps-minted (if (> (count minted) 0)\n                     (reduce bn/+ minted)\n                     (u/bn \"0\"))\n        lps-burned (if (> (count burned) 0)\n                     (reduce bn/+ burned)\n                     (u/bn \"0\"))]\n    (u/max-bn [(bn/- lps-minted lps-burned) (u/bn \"0.0\")])))\n\n(re-frame/reg-event-fx\n :account-fetched\n (fn [{:keys [db]} [_ account-history]]\n   (let [user-account (:account account-history)\n         lp-positions (:lp-positions account-history)\n         mints (:mints account-history)\n         burns (:burns account-history)\n         wallet-lps (:wallet-lps account-history)\n         pool-addresses (filter some? (map (comp :id :pair) lp-positions))\n         lp-positions' (map (fn [a] (let [lp-shares (current-lps (get mints a) (get burns a))]\n                                      {a {:address a\n                                          :mints (get mints a)\n                                          :burns (get burns a)\n                                          :lp-shares lp-shares}}))\n                            pool-addresses)\n         days 30]\n     {:db (-> db\n              (assoc :loading-msgs (conj (:loading-msgs db) (str \"Loading pool daily snapshots\\nLoading staked LP tokens\")))\n              (assoc :lp-positions (apply merge lp-positions'))\n              (assoc :account-loaded true)\n              (assoc :pool-histories-loaded false)\n              (assoc :pool-stakings-loaded false))\n      :fx [[:fetch-pool-histories [pool-addresses days]]\n           [:fetch-pool-stakings [user-account pool-addresses]]]})))\n\n\n(defn merge-txs-out\n  [lp-positions all-txs-out]\n  (apply merge\n         (map (fn [lp-address]\n                (let [lp-position (get lp-positions lp-address)]\n                  {lp-address (into lp-position {:txs-out (filter #(and (= (:token %) lp-address)\n                                                                        (bn/> (:amount %) (u/bn 0.0)))\n                                                                  all-txs-out)})}))\n              (keys lp-positions))))\n\n\n(defn merge-stakings\n  [lp-positions all-stakings]\n  (apply merge\n         (map (fn [lp-address]\n                (let [lp-position (get lp-positions lp-address)]\n                  {lp-address (into lp-position\n                                    {:stakings\n                                     (map #(dissoc % :token)\n                                          (filter #(= (:token %) lp-address) all-stakings))})}))\n              (keys lp-positions))))\n\n(defn lppos->reward-tokens\n  [lppos]\n  (->> (:stakings lppos)\n       (map :rewards)\n       (map :reward-token-address)))\n\n\n(defn lp-positions->reward-tokens\n  [lp-positions]\n  (->> (map lppos->reward-tokens lp-positions)\n       (apply concat)\n       (map string/lower-case)\n       distinct))\n\n\n(re-frame/reg-event-fx\n :pool-stakings-fetched\n (fn [{:keys [db]} [_ fetched-stakings]]\n   (let [prev-lp-positions (:lp-positions db)\n         lp-addresses (keys prev-lp-positions)\n         db' (-> db\n                 #_(assoc :loading-msgs (conj (:loading-msgs db) (str \"LP stakings loaded\")))\n                 (update-in [:lp-positions] merge-txs-out (:txs-out fetched-stakings))\n                 (update-in [:lp-positions] merge-stakings (:stakings fetched-stakings))\n                 (assoc :pool-stakings-loaded true)\n                 (assoc :tokens-loaded false))\n         reward-tokens (lp-positions->reward-tokens (vals (:lp-positions db')))\n         block-numbers (mapcat #(lp-positions/block-numbers %)\n                               (vals (:lp-positions db')))]\n     {:db db'\n      :fx [[:fetch-token-infos reward-tokens]\n           [:fetch-block-timestamps block-numbers]]})))\n\n\n(re-frame/reg-event-fx\n :token-infos-fetched\n (fn [{:keys [db]} [_ fetched-tokens]]\n   (let [prev-tokens (:tokens db)\n         fetched-map (apply merge (map (fn [t] {(:address t) t}) fetched-tokens))\n         updated-tokens (merge prev-tokens fetched-map)]\n     {:db (-> db\n              (assoc :loading-msgs (conj (:loading-msgs db) (str \"ERC20s information loaded\")))\n              (assoc :tokens updated-tokens)\n              (assoc :tokens-loaded true))})))\n\n\n\n\n(re-frame/reg-event-fx\n :block-timestamps-fetched\n (fn [{:keys [db]} [_ blocks-ts]]\n     {:db (-> db\n              (assoc :blocks-ts blocks-ts))}))\n\n"]}