{"version":3,"sources":["revert/events.cljs"],"mappings":"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","names":["re_frame.core.reg_event_fx","re_frame.core.inject_cofx","p__116489","map__116490","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","db","all-stored","cljs.core.println","cljs.core.into","revert.db/default-db","cljs.reader.read_string","cljs.core/set","re_frame.core.reg_event_db","p__116492","vec__116493","cljs.core.nth","_","new-filter-kw","cljs.core.assoc","p__116496","vec__116497","connected-state","p__116500","vec__116501","current","cljs.core/not","p__116504","vec__116505","lp-address","expanded-logs","expanded?","cljs.core/contains?","cljs.core.disj","cljs.core.conj","p__116508","p__116509","map__116510","vec__116511","ignored-pools","ignored?","ignored-pools'","p__116515","p__116516","map__116517","vec__116518","nft-id","ignored-pools-strings","cljs.core.map","cljs.core/str","p__116522","p__116523","map__116524","vec__116525","account","cljs.core._EQ_","p__116529","map__116530","p__116532","p__116533","map__116534","vec__116535","pool-address","days","revert.events/pool-day->pool","pool-day","revert.events/pool-histories->pools","pool-histories","addresses","cljs.core/keys","pools","p1__116539#","cljs.core/PersistentHashMap","cljs.core/first","cljs.core/merge","revert.events/pool-day->tokens","revert.events/pool-histories->tokens","tokens","p1__116540#","cljs.core.mapcat","t","p__116541","p__116542","map__116543","vec__116544","fetched-histories","prev-histories","prev-pools","prev-tokens","updated-pools","cljs.core.merge","updated-tokens","updated-histories","p__116548","p__116549","map__116550","vec__116551","revert.events/current-lps","mints","burns","minted","burned","lps-minted","cljs.core/count","cljs.core.reduce","bignumber.core/+","revert.utils/bn","lps-burned","revert.utils/max-bn","bignumber.core/-","p__116555","p__116556","map__116557","vec__116558","account-history","user-account","lp-positions","wallet-lps","pool-addresses","cljs.core.filter","cljs.core/some?","cljs.core.comp","lp-positions'","a","lp-shares","revert.events/merge-txs-out","all-txs-out","lp-position","p1__116562#","bignumber.core/>","revert.events/merge-stakings","all-stakings","p1__116563#","cljs.core.dissoc","p1__116564#","revert.events/lppos->reward-tokens","lppos","revert.events/lp-positions->reward-tokens","cljs.core/concat","clojure.string/lower-case","cljs.core.distinct","p__116566","p__116567","map__116568","vec__116569","fetched-stakings","prev-lp-positions","lp-addresses","db'","cljs.core.update_in","cljs.core.update","cljs.core/+","reward-tokens","cljs.core/vals","block-numbers","p1__116565#","revert.lp-positions/block-numbers","p__116573","p__116574","map__116575","vec__116576","fetched-tokens","fetched-map","p__116580","p__116581","map__116582","vec__116583","blocks-ts","prev-blocks-ts","updated-blocks-ts","cljs.core/-","p__116588","p__116589","map__116590","vec__116591","v3state","p1__116587#"],"sourcesContent":["(ns revert.events\n  (:require\n   [clojure.string :as string]\n   [re-frame.core :refer [reg-event-db reg-event-fx inject-cofx path after] :as re-frame]\n   [revert.db :as db]\n   [revert.utils :as u]\n   [bignumber.core :as bn]\n   [com.degel.re-frame.storage]\n   [revert.lp-positions :as lp-positions]))\n\n\n(re-frame/reg-event-fx\n ::initialize-db\n [(re-frame/inject-cofx :storage/all {:session? false})]\n (fn [{db :db all-stored :storage/all}]\n   (println \"all-stored:\" all-stored)\n   {:db (into db/default-db {:ignored-pools\n                             (cljs.reader/read-string\n                              (get all-stored \"ignored-pools\"))\n                             :v3ignored-pools\n                             (set (cljs.reader/read-string\n                                        (get all-stored \"v3ignored-pools\")))})}))\n\n\n;; usage:  (dispatch [:set-showing  :about])\n;; This event is dispatched when the user clicks on one of the intra-app links\n(re-frame/reg-event-db      ;; part of the re-frame API\n :set-showing     ;; event-id\n ;; handler\n (fn [db [_ new-filter-kw]]     ;; new-filter-kw is one of :all, :active or :done\n   (assoc db :showing new-filter-kw)))\n\n\n(re-frame/reg-event-db\n :set-connected\n (fn [db [_ connected-state]]\n   (assoc db :connected connected-state)))\n\n\n(re-frame/reg-event-db\n :toggle-exited\n (fn [db [_ _]]\n   (let [current (:include-exited db)]\n     (assoc db :include-exited (not current)))))\n\n\n(re-frame/reg-event-db\n :toggle-logs\n (fn [db [_ lp-address]]\n   (let [expanded-logs (set (:expanded-logs db))\n         expanded? (contains? expanded-logs lp-address)]\n     (if expanded?\n       (assoc db :expanded-logs (disj expanded-logs lp-address))\n       (assoc db :expanded-logs (conj expanded-logs lp-address))))))\n\n\n\n\n(re-frame/reg-event-fx\n :toggle-ignore\n (fn [{:keys [db]} [_ lp-address]]\n   (let [ignored-pools (set (:ignored-pools db))\n         ignored? (contains? ignored-pools lp-address)\n         ignored-pools' (if ignored?\n                          (disj ignored-pools lp-address)\n                          (conj ignored-pools lp-address))]\n     {:db (assoc db :ignored-pools ignored-pools')\n      :storage/set {:session? false\n                    :name \"ignored-pools\"\n                    :value ignored-pools'}})))\n\n(re-frame/reg-event-fx\n :v3toggle-ignore\n (fn [{:keys [db]} [_ nft-id]]\n   (let [ignored-pools (set (:v3ignored-pools db))\n         nft-id (str nft-id)\n         ignored? (contains? ignored-pools nft-id)\n         ignored-pools' (if ignored?\n                          (disj ignored-pools nft-id)\n                          (conj ignored-pools nft-id))\n         ignored-pools-strings (map str ignored-pools')]\n     {:db (assoc db :v3ignored-pools ignored-pools')\n      :storage/set {:session? false\n                    :name \"v3ignored-pools\"\n                    :value ignored-pools-strings}})))\n\n\n(re-frame/reg-event-fx\n :set-account\n (fn [{:keys [db]} [_ account]]\n   (if (= (:account db) account)\n     {:db (-> db\n              (assoc :loading-msgs (conj (:loading-msgs db) (str \"Loading account \" account)))\n              (assoc :showing :account)\n              (assoc :account-loaded true)\n              (assoc :ignored-pools (:ignored-pools db))\n              (assoc :v3ignored-pools (:v3ignored-pools db))\n              (assoc :loading false)\n              (assoc :pool-histories-loaded true)\n              (assoc :pool-stakings-loaded true))}\n     {:db (-> db\n              (assoc :loading true)\n              (assoc :account account)\n              (assoc :showing :account)\n              (assoc :account-loaded false))\n      :fx [[:fetch-account account]\n           [:fetch-univ3-account-state account]]})))\n\n\n(re-frame/reg-event-fx\n :connect-account\n (fn [{:keys [db]} _]\n   {:db db\n    :fx [[:prompt-select-provider nil]]}))\n\n\n\n(re-frame/reg-event-fx\n :set-pool\n (fn [{:keys [db]} [_ pool-address days]]\n   {:db (-> db\n            (assoc :loading true)\n            (assoc :showing :pool)\n            (assoc :pool-address pool-address)\n            (assoc :pool-days days)\n            (assoc :pool-histories-loaded false))\n    :fx [[:fetch-pool-histories [[pool-address] days]]]}))\n\n\n(defn pool-day->pool\n  [pool-day]\n  {:address (:address pool-day)\n   :exchange (:exchange pool-day)\n   :token0-address (:token0-address pool-day)\n   :token1-address (:token1-address pool-day)\n   :reserve0 (:reserve0 pool-day)\n   :reserve1 (:reserve1 pool-day)\n   :total-supply (:total-supply pool-day)})\n\n\n(defn pool-histories->pools\n  [pool-histories]\n  (let [addresses (keys pool-histories)\n        pools (map #(hash-map % (pool-day->pool (first (get pool-histories %))))\n                   addresses)]\n    (apply merge pools)))\n\n\n\n(defn pool-day->tokens\n  [pool-day]\n  [{:address (:token0-address pool-day)\n    :decimals (:token0-decimals pool-day)\n    :name (:token0-name pool-day)\n    :symbol (:token0-symbol pool-day)\n    :prices {:usd (:token0-price pool-day)\n             :source (:exchange pool-day)}}\n   {:address (:token1-address pool-day)\n    :decimals (:token1-decimals pool-day)\n    :name (:token1-name pool-day)\n    :symbol (:token1-symbol pool-day)\n    :prices {:usd (:token1-price pool-day)\n             :source (:exchange pool-day)}}])\n\n\n(defn pool-histories->tokens\n  [pool-histories]\n  (let [addresses (keys pool-histories)\n        tokens (mapcat #(pool-day->tokens (first (get pool-histories %)))\n                       addresses)]\n    (apply merge (map (fn [t] {(:address t) t}) tokens))))\n\n\n(re-frame/reg-event-fx\n :pool-histories-fecthed\n (fn [{:keys [db]} [_ fetched-histories]]\n   (let [prev-histories (:pool-histories db)\n         prev-pools (:pools db)\n         prev-tokens (:tokens db)\n         pools (pool-histories->pools fetched-histories)\n         tokens (pool-histories->tokens fetched-histories)\n         updated-pools (merge prev-pools pools)\n         updated-tokens (merge prev-tokens tokens)\n         updated-histories (merge prev-histories fetched-histories)]\n     {:db (-> db\n              #_(assoc :loading-msgs (conj (:loading-msgs db) (str \"Pool histories loaded\")))\n              (assoc :loading false)\n              (assoc :pools updated-pools)\n              (assoc :tokens updated-tokens)\n              (assoc :pool-histories-loaded true)\n              (assoc :pool-histories updated-histories))})))\n\n\n\n(re-frame/reg-event-fx\n :v3pool-histories-fecthed\n (fn [{:keys [db]} [_ fetched-histories]]\n   (let [prev-histories (:v3pool-histories db)\n         ;;prev-pools (:v3pools db)\n         ;;prev-tokens (:tokens db)\n         ;;pools (pool-histories->pools fetched-histories)\n         ;;tokens (pool-histories->tokens fetched-histories)\n         ;;updated-pools (merge prev-pools pools)\n         ;;updated-tokens (merge prev-tokens tokens)\n         updated-histories (merge prev-histories fetched-histories)]\n     {:db (-> db\n              #_(assoc :loading-msgs (conj (:loading-msgs db) (str \"Pool histories loaded\")))\n              (assoc :loading false)\n              (assoc :pool-histories-loaded true)\n              (assoc :v3pool-histories updated-histories))})))\n\n\n(defn current-lps\n  [mints burns]\n  (let [minted (map :lp-minted mints)\n        burned (map :lp-burned burns)\n        lps-minted (if (> (count minted) 0)\n                     (reduce bn/+ minted)\n                     (u/bn \"0\"))\n        lps-burned (if (> (count burned) 0)\n                     (reduce bn/+ burned)\n                     (u/bn \"0\"))]\n    (u/max-bn [(bn/- lps-minted lps-burned) (u/bn \"0.0\")])))\n\n(re-frame/reg-event-fx\n :account-fetched\n (fn [{:keys [db]} [_ account-history]]\n   (let [user-account (:account account-history)\n         lp-positions (:lp-positions account-history)\n         mints (:mints account-history)\n         burns (:burns account-history)\n         wallet-lps (:wallet-lps account-history)\n         pool-addresses (filter some? (map (comp :id :pair) lp-positions))\n         lp-positions' (map (fn [a] (let [lp-shares (current-lps (get mints a) (get burns a))]\n                                      {a {:address a\n                                          :mints (get mints a)\n                                          :burns (get burns a)\n                                          :lp-shares lp-shares}}))\n                            pool-addresses)\n         days 30]\n     {:db (-> db\n              (assoc :loading-msgs (conj (:loading-msgs db) (str \"Loading pool daily snapshots\\nLoading staked LP tokens\")))\n              (assoc :lp-positions (apply merge lp-positions'))\n              (assoc :account-loaded true)\n              (assoc :pool-histories-loaded false)\n              (assoc :pool-stakings-loaded false))\n      :fx [[:fetch-pool-histories [pool-addresses days]]\n           [:fetch-pool-stakings [user-account pool-addresses]]]})))\n\n\n(defn merge-txs-out\n  [lp-positions all-txs-out]\n  (apply merge\n         (map (fn [lp-address]\n                (let [lp-position (get lp-positions lp-address)]\n                  {lp-address (into lp-position {:txs-out (filter #(and (= (:token %) lp-address)\n                                                                        (bn/> (:amount %) (u/bn 0.0)))\n                                                                  all-txs-out)})}))\n              (keys lp-positions))))\n\n\n(defn merge-stakings\n  [lp-positions all-stakings]\n  (apply merge\n         (map (fn [lp-address]\n                (let [lp-position (get lp-positions lp-address)]\n                  {lp-address (into lp-position\n                                    {:stakings\n                                     (map #(dissoc % :token)\n                                          (filter #(= (:token %) lp-address) all-stakings))})}))\n              (keys lp-positions))))\n\n(defn lppos->reward-tokens\n  [lppos]\n  (->> (:stakings lppos)\n       (map :rewards)\n       (map :reward-token-address)))\n\n\n(defn lp-positions->reward-tokens\n  [lp-positions]\n  (->> (map lppos->reward-tokens lp-positions)\n       (apply concat)\n       (map string/lower-case)\n       distinct))\n\n\n(re-frame/reg-event-fx\n :pool-stakings-fetched\n (fn [{:keys [db]} [_ fetched-stakings]]\n   (let [prev-lp-positions (:lp-positions db)\n         lp-addresses (keys prev-lp-positions)\n         db' (-> db\n                 #_(assoc :loading-msgs (conj (:loading-msgs db) (str \"LP stakings loaded\")))\n                 (update-in [:lp-positions] merge-txs-out (:txs-out fetched-stakings))\n                 (update-in [:lp-positions] merge-stakings (:stakings fetched-stakings))\n                 (assoc :pool-stakings-loaded true)\n                 (assoc :tokens-loaded false)\n                 (update :blocks-ts-loaded + 1))\n         reward-tokens (lp-positions->reward-tokens (vals (:lp-positions db')))\n         block-numbers (mapcat #(lp-positions/block-numbers %)\n                               (vals (:lp-positions db')))]\n     {:db db'\n      :fx [[:fetch-token-infos reward-tokens]\n           [:fetch-block-timestamps block-numbers]]})))\n\n\n(re-frame/reg-event-fx\n :token-infos-fetched\n (fn [{:keys [db]} [_ fetched-tokens]]\n   (let [prev-tokens (:tokens db)\n         fetched-map (apply merge (map (fn [t] {(:address t) t}) fetched-tokens))\n         updated-tokens (merge prev-tokens fetched-map)]\n     {:db (-> db\n              (assoc :loading-msgs (conj (:loading-msgs db) (str \"ERC20s information loaded\")))\n              (assoc :tokens updated-tokens)\n              (assoc :tokens-loaded true))})))\n\n\n\n\n(re-frame/reg-event-fx\n :block-timestamps-fetched\n (fn [{:keys [db]} [_ blocks-ts]]\n   (let [prev-blocks-ts (:blocks-ts db)\n         updated-blocks-ts (merge prev-blocks-ts blocks-ts)]\n   {:db (-> db\n            (update :blocks-ts-loaded - 1)\n            (assoc :blocks-ts updated-blocks-ts))})))\n\n\n\n(re-frame/reg-event-fx\n :univ3-account-state-fetched\n (fn [{:keys [db]} [_ v3state]]\n   (let [prev-tokens (:tokens db)\n         updated-tokens (merge prev-tokens (:tokens v3state))\n         block-numbers (mapcat #(lp-positions/block-numbers %)\n                               (:v3lp-positions v3state))]\n     {:db (-> db\n              (assoc :v3lp-positions (:v3lp-positions v3state))\n              (assoc :v3pools (:v3pools v3state))\n              (assoc :v3pool-histories (:v3pool-histories v3state))\n              (assoc :tokens updated-tokens)\n              #_(assoc :loading-msgs (conj (:loading-msgs db) (str \"Fetched Uniswap v3 account state\")))\n              (assoc :univ3-state-loaded true)\n              (update :blocks-ts-loaded + 1))\n      :fx [[:fetch-block-timestamps block-numbers]]})))\n\n\n"]}