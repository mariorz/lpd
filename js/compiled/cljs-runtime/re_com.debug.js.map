{"version":3,"sources":["re_com/debug.cljs"],"mappings":"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","names":["re-com.debug/short-component-name","component-name","clojure.string.split","cljs.core/last","clojure.string/replace","re-com.debug/loggable-args","args","cljs.core/map?","cljs.core.dissoc","cljs.core.remove","cljs.core.comp","cljs.core/nil?","cljs.core/second","cljs.core.into","p__58173","map__58175","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","re-com.debug/->attr","src","debug-as","cljs.core/not","re-com.config/debug?","map__58189","rc-component","or__4126__auto__","reagent.impl.component/component-name","reagent.core/current-component","rc-args","ref-fn","el","goog.object/set","temp__5753__auto__","user-ref-fn","cljs.core.get_in","cljs.core/fn?","file","line","G__58196","cljs.core.assoc","var_args","G__58199","re-com.debug/component-stack","js/Error","re_com.debug.component_stack","stack","component","parent","cljs.core._EQ_","cljs.core.conj","goog.object/get","re-com.debug/validate-args-problems-style","re-com.debug/h1-style","re-com.debug/h2-style","re-com.debug/code-style","re-com.debug/error-style","re-com.debug/index-style","re-com.debug/collision-icon","re-com.debug/gear-icon","re-com.debug/blue-book-icon","re-com.debug/confused-icon","re-com.debug/globe-icon","re-com.debug/log-component-stack","js/console.groupCollapsed","seq__58213","cljs.core/seq","chunk__58214","count__58215","i__58216","map__58233","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","map__58240","cljs.core/first","cljs.core/next","i","p1__58209#","p2__58208#","cljs.core.map_indexed","vec__58237","cljs.core.nth","vec__58242","js/console.log","js/console.groupEnd","re-com.debug/log-validate-args-error-problems","problems","seq__58248","chunk__58249","count__58250","i__58251","map__58265","map__58271","problem","arg-name","expected","actual","validate-fn-result","G__58267","cljs.core/Keyword","G__58275","p__58276","map__58277","re-com.debug/log-validate-args-error","element","source-url","cljs.core/empty?","re-com.config/root-url-for-compiler-output","js/console.group","cljs.core/deref","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","re-com.debug/validate-args-error","p__58285","map__58286","seq58281","self__4724__auto__","cljs.core.atom","cljs.core/reset!","internal-problems","internal-component","internal-args","reagent.core.create_class","this","argv","old-state","snapshot","p__58292","map__58294","cljs.core.merge","re-com.debug/stack-spy","p__58300","map__58301","seq58299","log-fn","first-child","p__58303","map__58304"],"sourcesContent":["(ns re-com.debug\n  (:require\n    [goog.object            :as    gobj]\n    [cljs.reader            :refer [read-string]]\n    [clojure.string         :as    string]\n    [reagent.core           :as    r]\n    [reagent.impl.component :as    component]\n    [re-com.config          :refer [debug? root-url-for-compiler-output]]))\n\n(defn short-component-name\n  \"Returns the interesting part of component-name\"\n  [component-name]\n  ;; reagent.impl.component/component-name is used to obtain the component name, which returns\n  ;; e.g. re_com.checkbox.checkbox. We are only interested in the last part.\n  ;;\n  ;; Also some components are form-2 or form-3 so will return -return from the anonymous render\n  ;; function name. We keep the -render in the anonymous function name for JavaScript stack\n  ;; traces for non-validation errors (i.e. exceptions), but we are not interested in that here.\n  (-> component-name\n      (string/split #\"\\.\")\n      (last)\n      (string/replace #\"_render\" \"\")\n      (string/replace #\"_\" \"-\")))\n\n(defn loggable-args\n  \"Return a version of args which is stripped of uninteresting values, suitable for logging.\"\n  [args]\n  (if (map? args)\n    (->> ;; Remove args already represented in component hierarchy\n      (dissoc args :src :child :children :panel-1 :panel-2 :debug-as)\n      ;; Remove args with nil value\n      (remove (comp nil? second))\n      (into {}))\n    args))\n\n(defn ->attr\n  [{:keys [src debug-as] :as args}]\n  (if-not debug? ;; This is in a separate `if` so Google Closure dead code elimination can run...\n    {}\n    (let [rc-component        (or (:component debug-as)\n                                  (short-component-name (component/component-name (r/current-component))))\n          rc-args             (loggable-args\n                                (or (:args debug-as)\n                                    args))\n          ref-fn              (fn [^js/Element el]\n                                ;; If the ref callback is defined as an inline function, it will get called twice during updates,\n                                ;; first with null and then again with the DOM element.\n                                ;;\n                                ;; See: 'Caveats with callback refs' at\n                                ;; https://reactjs.org/docs/refs-and-the-dom.html#caveats-with-callback-refs\n                                (when el\n                                  ;; Remember args so they can be logged later:\n                                  (gobj/set el \"__rc-args\" rc-args))\n                                ;; User may have supplied their own ref like so: {:attr {:ref (fn ...)}}\n                                (when-let [user-ref-fn (get-in args [:attr :ref])]\n                                  (when (fn? user-ref-fn)\n                                    (user-ref-fn el))))\n          {:keys [file line]} src]\n      (cond->\n        {:ref     ref-fn\n         :data-rc rc-component}\n        src\n        (assoc :data-rc-src (str file \":\" line))))))\n\n(defn component-stack\n  ([el]\n   (component-stack [] el))\n  ([stack ^js/Element el]\n   (if-not el ;; termination condition\n     stack\n     (let [component          (.. el -dataset -rc)\n           ^js/Element parent (.-parentElement el)]\n       (->\n         (if (= \"stack-spy\" component)\n           stack\n           (conj stack\n                 {:el        el\n                  :src       (.. el -dataset -rcSrc)\n                  :component component\n                  :args      (gobj/get el \"__rc-args\")}))\n         (component-stack parent))))))\n\n(defn validate-args-problems-style\n  []\n  ;; [IJ] TODO: take min-width, min-height, height, width, size etc from valid args if present; w/ a floor for min-width/min-height\n  ;; [IJ] TODO: verify flexbox support in all cases.\n  {:min-width      \"32px\"\n   :min-height     \"32px\"\n   :font-size      \"1.4em\"\n   :text-align     \"center\"\n   :vertical-align \"center\"\n   :background      \"#FF4136\"})\n\n(def h1-style \"background: #FF4136; color: white; font-size: 1.4em; padding: 3px\")\n(def h2-style \"background: #0074D9; color: white; padding: 0.25em\")\n(def code-style \"font-family: monospace; font-weight: bold; background: #eee; color: #333; padding: 3px\")\n(def error-style \"font-weight: bold\")\n(def index-style \"font-weight: bold; font-size: 1.1em\")\n\n(def collision-icon \"\\uD83D\\uDCA5\")\n(def gear-icon \"\u2699\ufe0f\") ;; the trailing 'space' is an intentional modifier, not an actual space, so do not delete it!\n(def blue-book-icon \"\\uD83D\\uDCD8\")\n(def confused-icon \"\\uD83D\\uDE15\")\n(def globe-icon \"\\uD83C\\uDF10\")\n\n(defn log-component-stack\n  [stack]\n  (js/console.groupCollapsed (str \"\u2022 %c Component stack (click me)\") h2-style)\n  (doseq [{:keys [i el component src args]} (map-indexed #(assoc %2 :i (inc %1)) stack)]\n    (if component\n      (if src\n        (let [[file line] (string/split src #\":\")]\n          (if args\n            (js/console.log\n              (str \"%c\" i \"%c \" gear-icon \" %c[\" component \" ...]%c in file %c\" file \"%c at line %c\" line \"%c\\n      Parameters: %O\\n      DOM: %o\")\n              index-style \"\" code-style \"\" code-style \"\" code-style \"\" args el)\n            (js/console.log\n              (str \"%c\" i \"%c \" gear-icon \" %c[\" component \" ...]%c in file %c\" file \"%c at line %c\" line \"%c\\n      DOM: %o\")\n              index-style \"\" code-style \"\" code-style \"\" code-style \"\" el)))\n        (js/console.log\n          (str \"%c\" i \"%c \" gear-icon \" %c[\" component \" ...]%c\\n      Parameters: %O\\n      DOM: %o\")\n          index-style \"\" code-style \"\" args el))\n      (js/console.log (str \"%c\" i \"%c \" globe-icon \" %o\") index-style \"\" el)))\n  (js/console.groupEnd))\n\n(defn log-validate-args-error-problems\n  [problems]\n  (doseq [{:keys [problem arg-name expected actual validate-fn-result]} problems]\n    (case problem\n      ;; [IJ] TODO: :validate-fn-return\n      :unknown         (js/console.log\n                         (str \"\u2022 %cUnknown parameter: %c\" arg-name)\n                         error-style code-style)\n      :required        (js/console.log\n                         (str \"\u2022 %cMissing required parameter: %c\" arg-name)\n                         error-style code-style)\n      :validate-fn     (js/console.log\n                         (str \"\u2022 %cParameter %c\" arg-name \"%c expected %c\" (:type expected ) \"%c but got %c\" actual)\n                         error-style code-style error-style code-style error-style code-style)\n      :validate-fn-map (js/console.log\n                         (str \"\u2022 %c\" (:message validate-fn-result))\n                         error-style)\n      (js/console.log \"\u2022 \" confused-icon \" Unknown problem reported\"))))\n\n(defn log-validate-args-error\n  [element problems component-name {:keys [file line] :as src}]\n  (let [source-url    (when (not (empty? root-url-for-compiler-output)) (str root-url-for-compiler-output file \":\" line))]\n    (js/console.group (str \"%c\" collision-icon \" re-com validation error \") h1-style)\n    (if src\n      (if source-url\n        (js/console.log\n          (str \"\u2022 \" gear-icon \"%c[\" (short-component-name component-name) \" ...]%c in file %c\" file \"%c at line %c\" line \"%c see \" source-url)\n          code-style \"\" code-style \"\" code-style \"\")\n        (do\n          (js/console.log\n            (str \"\u2022 \" gear-icon \"%c[\" (short-component-name component-name) \" ...]%c in file %c\" file \"%c at line %c\" line)\n            code-style \"\" code-style \"\" code-style)\n          (js/console.log\n            (str \"\u2022 \" blue-book-icon \" Add %cre-com.config/root-url-for-compiler-output%c to your %c:closure-defines%c to enable clickable source urls\")\n            code-style \"\" code-style \"\")))\n      (do\n        (js/console.log\n          (str \"\u2022 \" gear-icon \"%c[\" (short-component-name component-name) \" ...]\")\n          code-style)\n        (js/console.log (str \"\u2022 \" blue-book-icon \" Learn how to add source coordinates to your components at https://re-com.day8.com.au/#/debug\"))))\n    (log-validate-args-error-problems problems)\n    (log-component-stack (component-stack @element))\n    (js/console.groupEnd)))\n\n(defn validate-args-error\n  [& {:keys [problems component args]}]\n  (let [element            (atom nil)\n        ref-fn             (fn [el]\n                             (when el\n                               (reset! element el)))\n        internal-problems  (atom problems)\n        internal-component (atom component)\n        internal-args      (atom args)]\n    (r/create-class\n      {:display-name \"validate-args-error\"\n\n       :component-did-mount\n       (fn [this]\n         (log-validate-args-error element @internal-problems @internal-component (:src @internal-args)))\n\n       :component-did-update\n       (fn [this argv old-state snapshot]\n         (log-validate-args-error element @internal-problems @internal-component (:src @internal-args)))\n\n       :reagent-render\n       (fn [& {:keys [problems component args]}]\n         (reset! internal-problems problems)\n         (reset! internal-component component)\n         (reset! internal-args args)\n         [:div\n          (merge\n            (->attr {:src      (:src args)\n                     :debug-as {:component component\n                                :args      args}\n                     :attr     {:ref ref-fn}})  ;; important that this ref-fn doesn't get overridden by (->attr ...)\n            {:title    \"re-com validation error. Look in the DevTools console.\"\n             :style    (validate-args-problems-style)})\n\n          collision-icon])})))\n\n(defn stack-spy\n  [& {:keys [component src]}]\n  (let [element (atom nil)\n        ref-fn  (fn [el]\n                  ;; If the ref callback is defined as an inline function, it will get called twice during updates,\n                  ;; first with null and then again with the DOM element.\n                  ;;\n                  ;; See: 'Caveats with callback refs' at\n                  ;; https://reactjs.org/docs/refs-and-the-dom.html#caveats-with-callback-refs\n                  (when el\n                    (reset! element el)))\n        log-fn  (fn []\n                  (let [el @element]\n                    (when el\n                      (let [first-child (first (.-children el))]\n                        (js/console.group \"%c[stack-spy ...]\" code-style)\n                        (log-component-stack (component-stack first-child))\n                        (js/console.groupEnd)))))]\n    (r/create-class\n      {:display-name         \"stack-spy\"\n       :component-did-mount  log-fn\n       :component-did-update log-fn\n       :reagent-render\n       (fn [& {:keys [component src]}]\n         [:div\n          (->attr {:src src :attr {:ref ref-fn}}) ;; important that this ref-fn doesn't get overridden by (->attr ...)\n          component])})))\n"]}