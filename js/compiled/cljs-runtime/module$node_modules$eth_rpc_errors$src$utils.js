shadow$provide.module$node_modules$eth_rpc_errors$src$utils=function(global,require,module,exports){function getMessageFromCode(code,fallbackMessage){fallbackMessage=void 0===fallbackMessage?"Unspecified error message. This is a bug, please report it.":fallbackMessage;if(Number.isInteger(code)){var codeString=code.toString();if(errorValues[codeString])return errorValues[codeString].message;if(-32099<=code&&-32E3>=code)return"Unspecified server error."}return fallbackMessage}function isValidCode(code){return Number.isInteger(code)?
errorValues[code.toString()]||-32099<=code&&-32E3>=code?!0:!1:!1}function assignOriginalError(error){return error&&"object"===typeof error&&!Array.isArray(error)?Object.assign({},error):error}var errorValues=require("module$node_modules$eth_rpc_errors$src$errorValues_json");global=require("module$node_modules$eth_rpc_errors$src$errorCodes_json").rpc.internal;var EthereumRpcError=require("module$node_modules$eth_rpc_errors$src$classes").EthereumRpcError,FALLBACK_ERROR={code:global,message:getMessageFromCode(global)};
module.exports={getMessageFromCode:getMessageFromCode,isValidCode:isValidCode,serializeError:function(error,$jscomp$destructuring$var2){var $jscomp$destructuring$var3=void 0===$jscomp$destructuring$var2?{}:$jscomp$destructuring$var2;$jscomp$destructuring$var2=void 0===$jscomp$destructuring$var3.fallbackError?FALLBACK_ERROR:$jscomp$destructuring$var3.fallbackError;$jscomp$destructuring$var3=void 0===$jscomp$destructuring$var3.shouldIncludeStack?!1:$jscomp$destructuring$var3.shouldIncludeStack;if(!$jscomp$destructuring$var2||
!Number.isInteger($jscomp$destructuring$var2.code)||"string"!==typeof $jscomp$destructuring$var2.message)throw Error("Must provide fallback error with integer number code and string message.");if(error instanceof EthereumRpcError)return error.serialize();var serialized={};error&&isValidCode(error.code)?(serialized.code=error.code,error.message&&"string"===typeof error.message?(serialized.message=error.message,"data"in error&&(serialized.data=error.data)):(serialized.message=getMessageFromCode(serialized.code),
serialized.data={originalError:assignOriginalError(error)})):(serialized.code=$jscomp$destructuring$var2.code,serialized.message=error&&error.message?error.message:$jscomp$destructuring$var2.message,serialized.data={originalError:assignOriginalError(error)});$jscomp$destructuring$var3&&error&&"string"===typeof error.stack&&(serialized.stack=error.stack);return serialized},JSON_RPC_SERVER_ERROR_MESSAGE:"Unspecified server error."}}
//# sourceMappingURL=module$node_modules$eth_rpc_errors$src$utils.js.map
