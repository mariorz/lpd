{
"version":3,
"file":"module$node_modules$qrcode$lib$core$reed_solomon_encoder.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAe,wDAAf,CAA6E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAKrHC,QAASA,mBAAmB,CAACC,MAAD,CAAS,CACnC,IAAA,CAAKC,OAAL,CAAeC,IAAAA,EAGf,EAFA,IAEA,CAFKF,MAEL,CAFcA,MAEd,GAAiB,IAAA,CAAKG,UAAL,CAAgB,IAAhB,CAAqBH,MAArB,CAJkB,CAJrC,IAAII,WAAaR,OAAA,CAAQ,wDAAR,CAAjB,CACIS,WAAaT,OAAA,CAAQ,gDAAR,CADjB,CAEIU,OAASV,OAAA,CAAQ,kCAAR,CAATU,CAA2BA,MAe/BP,mBAAA,CAAmBQ,SAAnB,CAA6BJ,UAA7B,CAA0CK,QAAoB,CAACR,MAAD,CAAS,CAErE,IAAA,CAAKA,MAAL,CAAcA,MACd;IAAA,CAAKC,OAAL,CAAeI,UAAA,CAAWI,oBAAX,CAAgC,IAAhC,CAAqCT,MAArC,CAHsD,CAYvED,mBAAA,CAAmBQ,SAAnB,CAA6BG,MAA7B,CAAsCC,QAAgB,CAACC,IAAD,CAAO,CAC3D,GAAI,CAAC,IAAD,CAAMX,OAAV,CACE,KAAUY,MAAJ,CAAU,yBAAV,CAAN,CAKF,IAAIC,IAAMV,UAAA,CAAWW,KAAX,CAAiB,IAAjB,CAAsBf,MAAtB,CACNgB,KAAAA,CAAaV,MAAA,CAAOW,MAAP,CAAc,CAACL,IAAD,CAAOE,GAAP,CAAd,CAA2BF,IAA3B,CAAgCM,MAAhC,CAAyC,IAAzC,CAA8ClB,MAA9C,CAIbmB,KAAAA,CAAYd,UAAA,CAAWe,GAAX,CAAeJ,IAAf,CAA2B,IAA3B,CAAgCf,OAAhC,CAKZoB,IAAAA,CAAQ,IAARA,CAAarB,MAAbqB,CAAsBF,IAAtBE,CAAgCH,MACpC,IAAY,CAAZ,CAAIG,GAAJ,CAAe,CACb,IAAIC,KAAOlB,UAAA,CAAWW,KAAX,CAAiB,IAAjB,CAAsBf,MAAtB,CACXmB,KAAA,CAAUI,IAAV,CAAeD,IAAf,CAAqBD,GAArB,CAEA,OAAOC,KAJM,CAOf,MAAOH,KAzBoD,CA4B7DtB,OAAA,CAAOC,OAAP,CAAiBC,kBA1DoG;",
"sources":["node_modules/qrcode/lib/core/reed-solomon-encoder.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$qrcode$lib$core$reed_solomon_encoder\"] = function(global,require,module,exports) {\nvar BufferUtil = require('../utils/buffer')\nvar Polynomial = require('./polynomial')\nvar Buffer = require('buffer').Buffer\n\nfunction ReedSolomonEncoder (degree) {\n  this.genPoly = undefined\n  this.degree = degree\n\n  if (this.degree) this.initialize(this.degree)\n}\n\n/**\n * Initialize the encoder.\n * The input param should correspond to the number of error correction codewords.\n *\n * @param  {Number} degree\n */\nReedSolomonEncoder.prototype.initialize = function initialize (degree) {\n  // create an irreducible generator polynomial\n  this.degree = degree\n  this.genPoly = Polynomial.generateECPolynomial(this.degree)\n}\n\n/**\n * Encodes a chunk of data\n *\n * @param  {Buffer} data Buffer containing input data\n * @return {Buffer}      Buffer containing encoded data\n */\nReedSolomonEncoder.prototype.encode = function encode (data) {\n  if (!this.genPoly) {\n    throw new Error('Encoder not initialized')\n  }\n\n  // Calculate EC for this data block\n  // extends data size to data+genPoly size\n  var pad = BufferUtil.alloc(this.degree)\n  var paddedData = Buffer.concat([data, pad], data.length + this.degree)\n\n  // The error correction codewords are the remainder after dividing the data codewords\n  // by a generator polynomial\n  var remainder = Polynomial.mod(paddedData, this.genPoly)\n\n  // return EC data blocks (last n byte, where n is the degree of genPoly)\n  // If coefficients number in remainder are less than genPoly degree,\n  // pad with 0s to the left to reach the needed number of coefficients\n  var start = this.degree - remainder.length\n  if (start > 0) {\n    var buff = BufferUtil.alloc(this.degree)\n    remainder.copy(buff, start)\n\n    return buff\n  }\n\n  return remainder\n}\n\nmodule.exports = ReedSolomonEncoder\n\n};"],
"names":["shadow$provide","global","require","module","exports","ReedSolomonEncoder","degree","genPoly","undefined","initialize","BufferUtil","Polynomial","Buffer","prototype","ReedSolomonEncoder.prototype.initialize","generateECPolynomial","encode","ReedSolomonEncoder.prototype.encode","data","Error","pad","alloc","paddedData","concat","length","remainder","mod","start","buff","copy"]
}
