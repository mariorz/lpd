{"version":3,"sources":["re_com/multi_select.cljs"],"mappings":"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","names":["re-com.multi-select/items-with-group-headings","items","group-fn","id-fn","groups","cljs.core.partition_by","group-headers","cljs.core.map","cljs.core/first","p1__60973#","cljs.core/PersistentHashMap","re-com.multi-select/filter-items","label-fn","filter-text","lower-filter-text","clojure.string/lower-case","item","group","or__4126__auto__","label","clojure.string/includes?","re-com.multi-select/filter-items-regex","re","e60978","js/RegExp","js/Object","e","cljs.core.partial","p1__60980#","re-com.multi-select/filter-text-box","*filter-text","placeholder","*warning-message","disabled?","parts","re-com.box/h-box","cljs.core.get_in","cljs.core.merge","re-com.input-text/input-text","cljs.core/reset!","re-com.close-button/close-button","re-com.multi-select/group-heading-item","*mouse-over?","reagent.core.atom","p__60987","map__60988","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","heading","click-callback","double-click-callback","selected-item-id","id","selected?","cljs.core._EQ_","class","cljs.core/deref","event","re-com.multi-select/list-item","p__61001","map__61002","group-selected?","cljs.core/not","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","re-com.multi-select/list-box","p__61020","map__61021","seq61015","self__4724__auto__","cljs.core/seq","*current-item-id","group-heading-selected?","filter-choices-text","src","vec__61028","cljs.core.nth","group-names","group-item-lists","has-group-names?","cljs.core/count","make-list-item","make-items","cljs.core.doall","make-group-heading-item","make-heading-then-items","cljs.core/cons","re-com.box/box","cljs.core/concat","clojure.string/blank?","re-com.multi-select/multi-select-parts-desc","re-com.config/include-args-desc?","re-com.multi-select/multi-select-parts","cljs.core/set","re-com.multi-select/multi-select-args-desc","re-com.validate/vector-of-maps?","cljs.core/ifn?","re-com.validate/string-or-hiccup?","cljs.core/fn?","cljs.core/string?","re-com.validate/number-or-string?","re-com.validate/css-style?","re-com.validate/html-attr?","re-com.validate/parts?","cljs.core/map?","re-com.multi-select/multi-select","p__61070","map__61071","seq61061","model","sort-fn","cljs.core/identity","args","js/goog.DEBUG","re-com.validate/validate-args","re-com.validate/extract-arg-data","*external-model","re-com.util/deref-or-value","*internal-model","*current-choice-id","*current-selection-id","*choice-group-heading-selected?","*selection-group-heading-selected?","*filter-choices-text","*filter-selections-text","button-style","p__61102","map__61103","choices","required?","max-selected-items","left-label","right-label","on-change","filter-box?","regex-filter?","width","height","max-height","tab-index","style","attr","cljs.core/compare","min-msg","max-msg","*latest-ext-model","_","cljs.core.not_EQ_","changeable?","and__4115__auto__","excludable?","choices-filter-fn","filtered-choices","cljs.core.into","p1__61047#","cljs.core.remove","cljs.core/contains?","cljs.core.filter","cljs.core.sort_by","selections","p1__61051#","re_com.util.item_for_id","selections-filter-fn","filtered-selections","potential-count","clojure.set.difference","chosen-count","choice-click","selection-click","include-filtered-click","cljs.core.concat","G__61117","include-click","choices-to-include","cljs.core.swap_BANG_","cljs.core/conj","G__61123","exclude-click","new-internal-model","cljs.core/empty?","cljs.core/PersistentHashSet","cljs.core/disj","G__61130","exclude-filtered-click","G__61132","re-com.box/flex-child-style","re-com.box/align-style","re-com.debug/->attr","re-com.box/v-box","re-com.util/pluralize","re-com.box/gap","re-com.text/label","goog.string/unescapeEntities","re_com.util.pluralize","re-com.buttons/button","cljs.core.gensym"],"sourcesContent":["(ns re-com.multi-select\n  (:require-macros\n    [re-com.core     :refer [handler-fn at]]\n    [re-com.validate :refer [validate-args-macro]])\n  (:require\n    [clojure.set                 :as set]\n    [clojure.string              :as string]\n    [goog.string                 :as gstring]\n    [re-com.config               :refer [include-args-desc?]]\n    [re-com.debug                :refer [->attr]]\n    [re-com.input-text           :refer [input-text]]\n    [re-com.box                  :as box]\n    [re-com.text                 :as text]\n    [re-com.buttons              :as buttons]\n    [re-com.close-button         :as close-button]\n    [re-com.util                 :as rc.util :refer [deref-or-value]]\n    [re-com.validate             :as validate :refer [string-or-hiccup? parts?]]\n    [reagent.core                :as reagent]))\n\n(defn items-with-group-headings\n  \"Split a list of maps by a group key then return both the group\"\n  [items group-fn id-fn]\n  (let [groups         (partition-by group-fn items)\n        group-headers  (->> groups\n                            (map first)\n                            (map #(hash-map :id    [(group-fn %) (id-fn %)]\n                                            :group (group-fn %))))]\n    ;; Sample output:\n    ;; group-headers    ({:group \"Fruits\"     :id \"Fruits\"}\n    ;;                   {:group \"Vegetables\" :id \"Vegetables\"})\n    ;;\n    ;; groups           (({:short \"Watermelon\" :id \"0001\" :display-type \"fruit\"     :sort 110 ...}\n    ;;                    {:short \"Strawberry\" :id \"0002\" :display-type \"fruit\"     :sort 120 ...}\n    ;;                    {:short \"Cherry\"     :id \"0003\" :display-type \"fruit\"     :sort 130 ...})\n    ;;                   ({:short \"Corn\"       :id \"0004\" :display-type \"vegetable\" :sort 430 ...}))\n    [group-headers groups]))\n\n\n(defn filter-items\n  \"Filter a list of items based on a filter string using plain string searches (case insensitive). Less powerful\n   than regex's but no confusion with reserved characters\"\n  [group-fn label-fn filter-text]\n  (let [lower-filter-text (string/lower-case filter-text)]\n    (fn [item]\n      (let [group (or (group-fn item) \"\")\n            label (str (label-fn item))] ;; Need str for non-string labels like hiccup\n        (or\n          (string/includes? (string/lower-case group) lower-filter-text)\n          (string/includes? (string/lower-case label) lower-filter-text))))))\n\n\n(defn filter-items-regex\n  \"Filter a list of items based on a filter string using regex's (case insensitive). More powerful but can cause\n   confusion for users entering reserved characters such as [ ] * + . ( ) etc.\"\n  [group-fn label-fn filter-text]\n  (let [re (try\n             (js/RegExp. filter-text \"i\")\n             (catch js/Object e nil))]\n    (partial (fn [re item]\n               (when-not (nil? re)\n                 (or (.test re (group-fn item)) (.test re (label-fn item)))))\n             re)))\n\n\n(defn filter-text-box\n  \"Base function (before lifecycle metadata) to render a filter text box\"\n  [*filter-text placeholder *warning-message disabled? parts]\n  [box/h-box\n   :class    (str \"rc-multi-select-filter-text-box \" (get-in parts [:filter-text-box :class]))\n   :attr     (get-in parts [:filter-text-box :attr])\n   :width    \"100%\"\n   :align    :center\n   :style    (merge {:position \"relative\"}\n                    (get-in parts [:filter-text-box :style]))\n   :children [[input-text\n               :class           (str \"rc-multi-select-filter-input-text \" (get-in parts [:filter-input-text :class]))\n               :model           *filter-text\n               :change-on-blur? false\n               :placeholder     placeholder\n               ;:disabled?       disabled? ;; Left here just in case we DO want to prevent searches while disabled\n               :width           \"100%\"\n               :height          \"28px\"\n               :style           (merge {:padding \"3px 4px\"}\n                                       (get-in parts [:filter-input-text :style]))\n               :attr            (get-in parts [:filter-input-text :attr])\n               :on-change       #(do (reset! *filter-text %)\n                                     (reset! *warning-message nil))]\n              [close-button/close-button\n               :class       (get-in parts [:filter-reset-button :class])\n               :style       (get-in parts [:filter-reset-button :style])\n               :attr        (get-in parts [:filter-reset-button :attr])\n               :on-click    #(reset! *filter-text \"\")\n               :div-size    0\n               :font-size   20\n               :left-offset -13]]])\n\n\n(defn group-heading-item\n  \"Render a group heading and set up appropriate mouse events\"\n  []\n  (let [*mouse-over? (reagent/atom false)]\n    (fn group-heading-render\n      [& {:keys [heading disabled? click-callback double-click-callback selected-item-id]}]\n      (let [id        (:id heading)\n            selected? (= selected-item-id id)\n            class     (if selected?\n                        \"highlighted\"\n                        (when @*mouse-over? \"mouseover\"))]\n        [:li.group-result\n         {:class           class\n          :style           (merge {:padding-left \"6px\"\n                                   :cursor       (when-not disabled? \"pointer\")\n                                   :color        (if selected? \"white\" \"#444\")}\n                                  (when disabled?\n                                    {:pointer-events \"none\"}))\n          :on-mouse-over   (handler-fn (reset! *mouse-over? true))\n          :on-mouse-out    (handler-fn (reset! *mouse-over? false))\n          :on-click        (when-not disabled? (handler-fn (click-callback id true))) ;; true = group-heading item selected\n          :on-double-click (when-not disabled? (handler-fn (double-click-callback id)))}\n         (:group heading)]))))\n\n\n(defn list-item\n  \"Render a list item and set up appropriate mouse events\"\n  []\n  (let [*mouse-over? (reagent/atom false)]\n    (fn list-item-render\n      [& {:keys [item id-fn label-fn disabled? click-callback double-click-callback selected-item-id group-selected?]}]\n      (let [id              (id-fn item)\n            selected?       (= id selected-item-id)\n            class           (if (and selected? (not disabled?))\n                              \"highlighted\"\n                              (when @*mouse-over? \"mouseover\"))]\n        [:li\n         {:class           (str \"active-result group-option \" class)\n          :style           (merge (when group-selected? {:background-color \"hsl(208, 56%, 92%)\"})\n                                  (when disabled? {:cursor         \"default\"\n                                                   :pointer-events \"none\"}))\n          :on-mouse-over   (handler-fn (reset! *mouse-over? true))\n          :on-mouse-out    (handler-fn (reset! *mouse-over? false))\n          :on-click        (when-not disabled? (handler-fn (click-callback id false))) ;; false = group-heading item NOT selected\n          :on-double-click (when-not disabled? (handler-fn (double-click-callback id)))}\n         (label-fn item)]))))\n\n\n(defn list-box\n  \"Render a list box which can be a single list or a grouped list\"\n  [& {:keys [items id-fn label-fn group-fn disabled? *current-item-id group-heading-selected? click-callback double-click-callback filter-choices-text src]}]\n  (let [[group-names group-item-lists] (items-with-group-headings items group-fn id-fn)\n        has-group-names?               (not (and (nil? (:group (first group-names))) (= 1 (count group-item-lists)))) ;; if 0 or 1 group names, no headings to display\n        make-list-item                 (fn [item]\n                                         ^{:key (str (id-fn item))}\n                                         [list-item\n                                          :item                  item\n                                          :id-fn                 id-fn\n                                          :label-fn              label-fn\n                                          :disabled?             disabled?\n                                          :click-callback        click-callback\n                                          :double-click-callback double-click-callback\n                                          :selected-item-id      @*current-item-id\n                                          :group-selected?       (when group-heading-selected? (= (first @*current-item-id) (group-fn item)))]) ;; for group headings, group-label is the first item in the vector\n        make-items                     (fn [items] (doall (map make-list-item items)))\n        make-group-heading-item        (fn [heading]\n                                         ^{:key (:id heading)}\n                                         [group-heading-item\n                                          :heading               heading\n                                          :disabled?             disabled?\n                                          :click-callback        click-callback\n                                          :double-click-callback double-click-callback\n                                          :selected-item-id      @*current-item-id])\n        make-heading-then-items        (fn [heading items]\n                                         (cons (make-group-heading-item heading) (make-items items)))]\n    [box/box\n     :src   src\n     :size  \"1\"\n     :class (if disabled? \"bm-multi-select-list-disabled\" \"bm-multi-select-list\")\n     :style {:background-color \"#fafafa\"\n             :border           \"1px solid #ccc\"\n             :border-radius    \"4px\"}\n     :child [:ul.chosen-results\n             {:style {:max-height \"none\"}} ;; Override the 240px in the class\n             (if (-> items count pos?)\n               (if has-group-names?\n                 (apply concat (doall (map make-heading-then-items group-names group-item-lists)))\n                 (make-items (first group-item-lists)))\n               (if (string/blank? filter-choices-text)\n                 \"\"\n                 [:li.no-results (str \"No results match \\\"\" filter-choices-text \"\\\"\")]))]]))\n\n\n;;--------------------------------------------------------------------------------------------------\n;; Component: multi-select\n;;--------------------------------------------------------------------------------------------------\n\n;; Set of candidates (sorted externally)\n;; a set of ids\n\n;; LHS: set of candidates with selected id set removed, sorted/grouped by fn\n;; RHS: set of candidates selecting on id, sorted/grouped by fn\n\n(def multi-select-parts-desc\n  (when include-args-desc?\n    [{:type :legacy                    :level 0 :class \"rc-multi-select\"                           :impl \"[multi-select]\"}\n     {:name :container                 :level 1 :class \"rc-multi-select-container\"                 :impl \"[h-box]\"}\n     {:name :left                      :level 2 :class \"rc-multi-select-left\"                      :impl \"[v-box]\"}\n     {:name :left-label-container      :level 3 :class \"rc-multi-select-left-label-container\"      :impl \"[h-box]\"}\n     {:name :left-label                :level 4 :class \"rc-multi-select-left-label\"                :impl \"[:span]\"}\n     {:name :left-label-item-count     :level 4 :class \"rc-multi-select-left-label-item-count\"     :impl \"[:span]\"}\n     {:name :left-list-box             :level 3 :class \"rc-multi-select-left-list-box\"             :impl \"[list-box]\"}\n     {:name :filter-text-box           :level 3 :class \"rc-multi-select-filter-text-box\"           :impl \"[h-box]\"}\n     {:name :filter-input-text         :level 4 :class \"rc-multi-select-filter-input-text\"         :impl \"[input-text]\"}\n     {:name :filter-reset-button       :level 4 :class \"rc-multi-select-filter-reset-button\"       :impl \"[close-button]\"}\n     {:name :left-filter-result-count  :level 3 :class \"rc-multi-select-left-filter-result-count\"  :impl \"[label]\"}\n     {:name :middle-container          :level 2 :class \"rc-multi-select-middle-container\"          :impl \"[v-box]\"}\n     {:name :middle-top-spacer         :level 3 :class \"rc-multi-select-middle-top-spacer\"         :impl \"[box]\"}\n     {:name :middle                    :level 3 :class \"rc-multi-select-middle\"                    :impl \"[v-box]\"}\n     {:name :include-all-button        :level 4 :class \"rc-multi-select-include-all-button\"        :impl \"[button]\"}\n     {:name :include-selected-button   :level 4 :class \"rc-multi-select-include-selected-button\"   :impl \"[button]\"}\n     {:name :exclude-selected-button   :level 4 :class \"rc-multi-select-exclude-selected-button\"   :impl \"[button]\"}\n     {:name :exclude-all-button        :level 4 :class \"rc-multi-select-exclude-all-button\"        :impl \"[button]\"}\n     {:name :middle-bottom-spacer      :level 3 :class \"rc-multi-select-middle-bottom-spacer\"      :impl \"[box]\"}\n     {:name :right                     :level 2 :class \"rc-multi-select-right\"                     :impl \"[v-box]\"}\n     {:name :warning-message           :level 3 :class \"rc-multi-select-warning-message\"           :impl \"[label]\"}\n     {:name :right-label-container     :level 3 :class \"rc-multi-select-right-label-container\"     :impl \"[h-box]\"}\n     {:name :right-label               :level 4 :class \"rc-multi-select-right-label\"               :impl \"[:span]\"}\n     {:name :right-label-item-count    :level 4 :class \"rc-multi-select-right-label-item-count\"    :impl \"[:span]\"}\n     {:name :right-list-box            :level 3 :class \"rc-multi-select-right-list-box\"            :impl \"[list-box]\"}\n     {:name :filter-text-box           :level 3 :class \"rc-multi-select-filter-text-box\"           :impl \"[h-box]\"}\n     {:name :filter-input-text         :level 4 :class \"rc-multi-select-filter-input-text\"         :impl \"[input-text]\"}\n     {:name :filter-reset-button       :level 4 :class \"rc-multi-select-filter-reset-button\"       :impl \"[close-button]\"}\n     {:name :right-filter-result-count :level 3 :class \"rc-multi-select-right-filter-result-count\" :impl \"[label]\"}]))\n\n(def multi-select-parts\n  (when include-args-desc?\n    (-> (map :name multi-select-parts-desc) set)))\n\n(def multi-select-args-desc\n  (when include-args-desc?\n    [{:name :choices            :required true                      :type \"vector of maps | r/atom\"  :validate-fn validate/vector-of-maps?    :description [:span \"Each map represents a choice. Values corresponding to id, label and, optionally, a group, are extracted by the functions \" [:code \":id-fn\"] \", \" [:code \":label-fn\"] \" & \" [:code \":group-fn\"]  \". See below.\"]}\n     {:name :id-fn              :required false :default :id        :type \"map -> anything\"          :validate-fn ifn?                        :description [:span \"a function taking one argument (a map) and returns the unique identifier for that map. Called for each element in \" [:code \":choices\"]]}\n     {:name :label-fn           :required false :default :label     :type \"map -> string | hiccup\"   :validate-fn ifn?                        :description [:span \"a function taking one argument (a map) and returns the displayable label for that map. Called for each element in \" [:code \":choices\"]]}\n     {:name :group-fn           :required false :default :group     :type \"map -> string | hiccup\"   :validate-fn ifn?                        :description [:span \"a function taking one argument (a map) and returns the group identifier for that map. Called for each element in \" [:code \":choices\"]]}\n     {:name :sort-fn            :required false :default \"compare\"  :type \"map, map -> integer\"      :validate-fn ifn?                        :description [:span \"The comparator function used with \" [:code \"cljs.core/sort-by\"] \" to sort choices.\"]}\n     {:name :model              :required true                      :type \"a set of ids | r/atom\"                                             :description [:span \"a set of the ids for currently selected choices. If nil, see \" [:code \":placeholder\"] \".\"]}\n     {:name :required?          :required false :default false      :type \"boolean | r/atom\"                                                  :description \"when true, at least one item must be selected\"}\n     {:name :max-selected-items :required false :default nil        :type \"integer\"                                                           :description \"maximum number of items that can be selected\"}\n     {:name :left-label         :required false                     :type \"string | hiccup\"          :validate-fn string-or-hiccup?           :description \"label displayed above the left list\"}\n     {:name :right-label        :required false                     :type \"string | hiccup\"          :validate-fn string-or-hiccup?           :description \"label displayed above the right list\"}\n     {:name :on-change          :required true                      :type \"id -> nil\"                :validate-fn fn?                         :description [:span \"a function that will be called when the selection changes. Passed the set of selected ids. See \" [:code \":model\"] \".\"]}\n     {:name :disabled?          :required false :default false      :type \"boolean | r/atom\"                                                  :description \"if true, no user selection is allowed\"}\n     {:name :filter-box?        :required false :default false      :type \"boolean | r/atom\"                                                  :description \"if true, a filter text field is placed at the bottom of the component\"}\n     {:name :regex-filter?      :required false :default false      :type \"boolean | r/atom\"                                                  :description \"if true, the filter text field will support JavaScript regular expressions. If false, just plain text\"}\n     {:name :placeholder        :required false                     :type \"string\"                   :validate-fn string?                     :description \"background text when no selection\"} ;; TODO this is actually broken, does not display background text\n     {:name :width              :required false :default \"100%\"     :type \"string\"                   :validate-fn string?                     :description \"the CSS width. e.g.: \\\"500px\\\" or \\\"20em\\\"\"}\n     {:name :height             :required false                     :type \"string\"                   :validate-fn string?                     :description \"the specific height of the component\"}\n     {:name :max-height         :required false                     :type \"string\"                   :validate-fn string?                     :description \"the maximum height of the component\"}\n     {:name :tab-index          :required false                     :type \"integer | string\"         :validate-fn validate/number-or-string?  :description \"component's tabindex. A value of -1 removes from the tab order\"}\n     {:name :class              :required false                     :type \"string\"                   :validate-fn string?                     :description \"CSS class names, space separated\"}\n     {:name :style              :required false                     :type \"CSS style map\"            :validate-fn validate/css-style?         :description \"CSS styles to add or override\"}\n     {:name :attr               :required false                     :type \"HTML attr map\"            :validate-fn validate/html-attr?         :description [:span \"HTML attributes, like \" [:code \":on-mouse-move\"] [:br] \"No \" [:code \":class\"] \" or \" [:code \":style\"] \"allowed\"]}\n     {:name :parts              :required false                     :type \"map\"                      :validate-fn (parts? multi-select-parts) :description \"See Parts section below.\"}\n     {:name :src                :required false                     :type \"map\"                      :validate-fn map?                        :description [:span \"Used in dev builds to assist with debugging. Source code coordinates map containing keys\" [:code \":file\"] \"and\" [:code \":line\"]  \". See 'Debugging'.\"]}\n     {:name :debug-as           :required false                     :type \"map\"                      :validate-fn map?                        :description [:span \"Used in dev builds to assist with debugging, when one component is used implement another component, and we want the implementation component to masquerade as the original component in debug output, such as component stacks. A map optionally containing keys\" [:code \":component\"] \"and\" [:code \":args\"] \".\"]}]))\n\n(defn multi-select\n  \"Render a multi-select component which emulates the bootstrap-choosen style. Sample choices object:\n  [{:id \\\"AU\\\" :label \\\"Australia\\\"      :group \\\"Group 1\\\"}\n   {:id \\\"US\\\" :label \\\"United States\\\"  :group \\\"Group 1\\\"}\n   {:id \\\"GB\\\" :label \\\"United Kingdom\\\" :group \\\"Group 1\\\"}\n   {:id \\\"AF\\\" :label \\\"Afghanistan\\\"    :group \\\"Group 2\\\"}]\"\n  [& {:keys [model sort-fn src]\n      :or   {sort-fn identity}\n      :as   args}]\n  \"Internal glossary:\n  LHS - choices    - comes from choices                 - the full list of items to select from\n  RHS - selections - comes from model => internal-model - the selected items from choices collection\n  \"\n  (or\n    (validate-args-macro multi-select-args-desc args)\n    (let [*external-model                    (reagent/atom (deref-or-value model)) ;; Holds the last known external value of model, to detect external model changes\n          *internal-model                    (reagent/atom @*external-model) ;; Create a new atom from the model to be used internally\n          *current-choice-id                 (reagent/atom nil)\n          *current-selection-id              (reagent/atom nil)\n          *choice-group-heading-selected?    (reagent/atom false)\n          *selection-group-heading-selected? (reagent/atom false)\n          *warning-message                   (reagent/atom nil)\n          *filter-choices-text               (reagent/atom \"\")\n          *filter-selections-text            (reagent/atom \"\")\n          button-style                       {:width        \"86px\"\n                                              :height       \"24px\"\n                                              :padding      \"0px 8px 2px 8px\"\n                                              :margin       \"8px 6px\"\n                                              :text-align   \"left\"\n                                              :font-variant \"small-caps\"\n                                              :font-size    11}]\n      (fn multi-select-render\n        [& {:keys [choices model required? max-selected-items left-label right-label on-change disabled? filter-box? regex-filter?\n                   placeholder width height max-height tab-index id-fn label-fn group-fn sort-fn class style attr parts src]\n            :or   {id-fn     :id\n                   label-fn  :label\n                   group-fn  :group\n                   sort-fn   compare\n                   required? false}\n            :as   args}]\n        (or\n          (validate-args-macro multi-select-args-desc args)\n          (let [required?              (deref-or-value required?)\n                filter-box?            (deref-or-value filter-box?)\n                regex-filter?          (deref-or-value regex-filter?)\n                min-msg                \"Must have at least one\"\n                max-msg                (str \"Max items allowed is \" max-selected-items)\n                group-fn               (or group-fn ::$$$) ;; TODO: If nil is passed because of a when, this will prevent exceptions...smelly!\n                choices                (set (deref-or-value choices))\n                disabled?              (deref-or-value disabled?)\n                regex-filter?          (deref-or-value regex-filter?)\n                *latest-ext-model      (reagent/atom (deref-or-value model))\n                _                      (when (not= @*external-model @*latest-ext-model) ;; Has model changed externally?\n                                         (reset! *external-model @*latest-ext-model)\n                                         (reset! *internal-model @*latest-ext-model))\n                changeable?            (and on-change (not disabled?))\n                excludable?            (and @*current-selection-id (> (count @*internal-model) (if required? 1 0)))\n                choices-filter-fn      (if regex-filter?\n                                         (filter-items-regex group-fn label-fn @*filter-choices-text)\n                                         (filter-items group-fn label-fn @*filter-choices-text))\n                filtered-choices       (into []\n                                             (->> choices\n                                                  (remove #(contains? @*internal-model (id-fn %)))\n                                                  (filter choices-filter-fn)\n                                                  (sort-by sort-fn)))\n                selections             (into []\n                                             (->> @*internal-model\n                                                  (map #(rc.util/item-for-id % choices :id-fn id-fn))\n                                                  (sort-by sort-fn)))\n                selections-filter-fn   (if regex-filter?\n                                         (filter-items-regex group-fn label-fn @*filter-selections-text)\n                                         (filter-items group-fn label-fn @*filter-selections-text))\n                filtered-selections    (into []\n                                             (->> selections\n                                                  (filter selections-filter-fn)\n                                                  (sort-by sort-fn)))\n                potential-count        (->> @*internal-model\n                                            (set/difference (set (map id-fn choices)))\n                                            count)\n                chosen-count           (count selections)\n                choice-click           (fn [id group-heading-selected?]\n                                         (reset! *current-choice-id id)\n                                         (reset! *choice-group-heading-selected? group-heading-selected?)\n                                         (reset! *warning-message nil))\n                selection-click        (fn [id group-heading-selected?]\n                                         (reset! *current-selection-id id)\n                                         (reset! *selection-group-heading-selected? group-heading-selected?)\n                                         (reset! *warning-message nil))\n                include-filtered-click #(do (if (and (some? max-selected-items) (> (+ (count @*internal-model) (count filtered-choices)) max-selected-items))\n                                              (reset! *warning-message max-msg)\n                                              (do\n                                                (reset! *internal-model (set (concat @*internal-model (map id-fn filtered-choices))))\n                                                (reset! *warning-message nil)))\n                                            (when (and changeable? (not= @*internal-model @*latest-ext-model))\n                                              (reset! *external-model @*internal-model)\n                                              (on-change @*internal-model))\n                                            (reset! *current-choice-id nil))\n                include-click          #(do (if @*choice-group-heading-selected?\n                                              (let [choices-to-include (->> filtered-choices\n                                                                            (filter (fn [item] (= (first @*current-choice-id) (group-fn item))))\n                                                                            (map id-fn) ;; TODO: Need to realise map output for prod build (dev doesn't need it). Why?\n                                                                            set)]       ;; TODO: See https://github.com/day8/apps-lib/issues/35\n                                                (if (and (some? max-selected-items) (> (+ (count @*internal-model) (count choices-to-include)) max-selected-items))\n                                                  (reset! *warning-message max-msg)\n                                                  (do\n                                                    (reset! *internal-model (set (concat @*internal-model choices-to-include)))\n                                                    (reset! *choice-group-heading-selected? false))))\n                                              (if (and (some? max-selected-items) (>= (count @*internal-model) max-selected-items))\n                                                (reset! *warning-message max-msg)\n                                                (do\n                                                  (swap! *internal-model conj @*current-choice-id)\n                                                  (reset! *warning-message nil))))\n                                            (when (and changeable? (not= @*internal-model @*latest-ext-model))\n                                              (reset! *external-model @*internal-model)\n                                              (on-change @*internal-model))\n                                            (reset! *current-choice-id nil))\n                exclude-click          #(do (if excludable?\n                                              (if @*selection-group-heading-selected?\n                                                (let [new-internal-model (->> filtered-selections\n                                                                              (filter (fn [item] (= (first @*current-selection-id) (group-fn item))))\n                                                                              (map id-fn)\n                                                                              set\n                                                                              (set/difference @*internal-model))]\n                                                  (if (and required? (empty? new-internal-model))\n                                                    (do\n                                                      (reset! *internal-model (hash-set (first @*internal-model)))\n                                                      (reset! *warning-message min-msg))\n                                                    (do\n                                                      (reset! *internal-model new-internal-model)\n                                                      (reset! *selection-group-heading-selected? false)\n                                                      (reset! *warning-message nil))))\n                                                (do\n                                                  (swap! *internal-model disj @*current-selection-id)\n                                                  (reset! *warning-message nil)))\n                                              (reset! *warning-message min-msg))\n                                            (when (and changeable? (not= @*internal-model @*latest-ext-model))\n                                              (reset! *external-model @*internal-model)\n                                              (on-change @*internal-model))\n                                            (reset! *current-selection-id nil))\n                exclude-filtered-click #(let [new-internal-model (set/difference @*internal-model (set (map id-fn filtered-selections)))]\n                                          (if (and required? (zero? (count new-internal-model)))\n                                            (do\n                                              (reset! *internal-model (hash-set (first @*internal-model)))\n                                              (reset! *warning-message min-msg))\n                                            (do\n                                              (reset! *internal-model new-internal-model)\n                                              (reset! *warning-message nil)))\n                                          (when (and changeable? (not= @*internal-model @*latest-ext-model))\n                                            (reset! *external-model @*internal-model)\n                                            (on-change @*internal-model))\n                                          (reset! *current-selection-id nil))]\n            [:div\n             (merge\n               {:class (str \"rc-multi-select noselect chosen-container chosen-container-single \" class)\n                :style (merge (box/flex-child-style (if width \"0 0 auto\" \"auto\"))\n                              (box/align-style :align-self :start)\n                              {:overflow \"hidden\"\n                               :width    width}\n                              style)}\n               (->attr args)\n               attr) ;; Prevent user text selection\n             [box/h-box\n              :src        (at)\n              :class      (str \"rc-multi-select-container \" (get-in parts [:container :class]))\n              :style      (get-in parts [:container :class])\n              :attr       (get-in parts [:container :attr])\n              :height     height\n              :max-height max-height\n              :gap        \"4px\"\n              :children   [[box/v-box\n                            :src      (at)\n                            :class    (str \"rc-multi-select-left \" (get-in parts [:left :class]))\n                            :style    (get-in parts [:left :style])\n                            :attr     (get-in parts [:left :attr])\n                            :size     \"50%\"\n                            :gap      \"4px\"\n                            :children [(when left-label\n                                         (if (string? left-label)\n                                           [box/h-box\n                                            :src      (at)\n                                            :class    (str \"rc-multi-select-left-label-container \" (get-in parts [:left-label-container :class]))\n                                            :style    (get-in parts [:left-label-container :style])\n                                            :attr     (get-in parts [:left-label-container :attr])\n                                            :justify  :between\n                                            :children [[:span\n                                                        (merge\n                                                          {:class (str \"rc-multi-select-left-label \" (get-in parts [:left-label :class]))\n                                                           :style (merge {:font-size   \"small\"\n                                                                          :font-weight \"bold\"}\n                                                                         (get-in parts [:left-label :style]))}\n                                                          (get-in parts [:left-label :attr]))\n                                                        left-label]\n                                                       [:span\n                                                        (merge\n                                                          {:class (str \"rc-multi-select-left-label-item-count \" (get-in parts [:left-label-item-count :class]))\n                                                           :style (merge {:font-size \"smaller\"}\n                                                                         (get-in parts [:left-label-item-count :style]))}\n                                                          (get-in parts [:left-label-item-count :attr]))\n                                                        (if (string/blank? @*filter-choices-text)\n                                                          (rc.util/pluralize potential-count \"item\")\n                                                          (str \"showing \" (count filtered-choices) \" of \" potential-count))]]]\n                                           left-label))\n                                       [list-box\n                                        :src                     (at)\n                                        :class                   (str \"rc-multi-select-left-list-box \" (get-in parts [:left-list-box :class]))\n                                        :items                   filtered-choices\n                                        :id-fn                   id-fn\n                                        :label-fn                label-fn\n                                        :group-fn                group-fn\n                                        :disabled?               disabled?\n                                        :*current-item-id        *current-choice-id\n                                        :group-heading-selected? @*choice-group-heading-selected?\n                                        :click-callback          choice-click\n                                        :double-click-callback   include-click\n                                        :filter-choices-text     @*filter-choices-text]\n                                       (when filter-box?\n                                         [:<>\n                                          [box/gap\n                                           :src  (at)\n                                           :size \"4px\"]\n                                          [filter-text-box *filter-choices-text placeholder *warning-message disabled? parts]\n                                          [box/gap\n                                           :src  (at)\n                                           :size \"4px\"]\n                                          (if (string/blank? @*filter-choices-text)\n                                            [text/label\n                                             :src   (at)\n                                             :label (gstring/unescapeEntities \"&nbsp;\")\n                                             :style {:font-size \"smaller\"}]\n                                            [text/label\n                                             :src   (at)\n                                             :class (str \"rc-multi-select-left-filter-result-count \" (get-in parts [:left-filter-result-count :class]))\n                                             :style (merge {:font-size \"smaller\"}\n                                                           (get-in parts [:left-filter-result-count :style]))\n                                             :attr  (get-in parts [:left-filter-result-count :attr])\n                                             :label [:span \"Found \" (rc.util/pluralize (count filtered-choices) \"match\" \"matches\") \" containing \" [:strong @*filter-choices-text]]])])]]\n\n                           [box/v-box\n                            :src      (at)\n                            :class    (str \"rc-multi-select-middle-container \" (get-in parts [:middle-container :class]))\n                            :style    (get-in parts [:middle-container :style])\n                            :attr     (get-in parts [:middle-container :attr])\n                            :justify  :between\n                            :children [[box/box\n                                        :src   (at)\n                                        :class (str \"rc-multi-select-middle-spacer \" (get-in parts [:middle-spacer :class]))\n                                        :style (get-in parts [:middle-spacer :style])\n                                        :attr  (get-in parts [:middle-spacer :attr])\n                                        :size  \"0 1 22px\" ;; 22 = (+ 18 4) - height of the top components\n                                        :child \"\"]\n                                       [box/v-box\n                                        :src      (at)\n                                        :class    (str \"rc-multi-select-middle \" (get-in parts [:middle :class]))\n                                        :style    (get-in parts [:middle :style])\n                                        :attr     (get-in parts [:middle :attr])\n                                        :justify  :center\n                                        :children [[buttons/button\n                                                    :src       (at)\n                                                    :class     (str \"rc-multi-select-include-all-button \" (get-in parts [:include-all-button :class]))\n                                                    :label     [:span\n                                                                [:i {:class (str \"zmdi zmdi-hc-fw-rc zmdi-fast-forward\")}]\n                                                                [:span\n                                                                 {:style {:position \"relative\" :top \"-1px\"}}\n                                                                 (str \" include \" (if (string/blank? @*filter-choices-text) potential-count (count filtered-choices)))]]\n                                                    :disabled? (or disabled? (zero? (count filtered-choices)))\n                                                    :style     (merge button-style\n                                                                      (get-in parts [:include-all-button :style]))\n                                                    :attr      (get-in parts [:include-all-button :attr])\n                                                    :on-click  include-filtered-click]\n                                                   [buttons/button\n                                                    :src       (at)\n                                                    :class     (str \"rc-multi-select-include-selected-button \" (get-in parts [:include-selected-button :class]))\n                                                    :label     [:span\n                                                                [:i {:class (str \"zmdi zmdi-hc-fw-rc zmdi-play\")}]\n                                                                [:span\n                                                                 {:style {:position \"relative\" :top \"-1px\"}}\n                                                                 (str \" include \" (when @*choice-group-heading-selected?\n                                                                                    (->> filtered-choices ;; TODO: Inefficient\n                                                                                         (filter (fn [item] (= (first @*current-choice-id) (group-fn item))))\n                                                                                         count)))]]\n                                                    :disabled? (or disabled? (not @*current-choice-id))\n                                                    :style     (merge button-style\n                                                                      (get-in parts [:include-selected-button :style]))\n                                                    :attr      (get-in parts [:include-selected-button :attr])\n                                                    :on-click  include-click]\n                                                   [buttons/button\n                                                    :src       (at)\n                                                    :class     (str \"rc-multi-select-exclude-selected-button \" (get-in parts [:exclude-selected-button :class]))\n                                                    :label     [:span\n                                                                [:i {:class (str \"zmdi zmdi-hc-fw-rc zmdi-play zmdi-hc-rotate-180\")}]\n                                                                [:span\n                                                                 {:style {:position \"relative\" :top \"-1px\"}}\n                                                                 (str \" exclude \" (when @*selection-group-heading-selected?\n                                                                                    (->> filtered-selections ;; TODO: Inefficient\n                                                                                         (filter (fn [item] (= (first @*current-selection-id) (group-fn item))))\n                                                                                         count)))]]\n                                                    :disabled? (or disabled? (not excludable?))\n                                                    :style     (merge button-style\n                                                                      (get-in parts [:exclude-selected-button :style]))\n                                                    :attr      (get-in parts [:exclude-selected-button :attr])\n                                                    :on-click  exclude-click]\n                                                   [buttons/button\n                                                    :src       (at)\n                                                    :class     (str \"rc-multi-select-exclude-all-button \" (get-in parts [:exclude-all-button :class]))\n                                                    :label     [:span\n                                                                [:i {:class (str \"zmdi zmdi-hc-fw-rc zmdi-fast-rewind\")}]\n                                                                [:span\n                                                                 {:style {:position \"relative\" :top \"-1px\"}}\n                                                                 (str \" exclude \" (if (string/blank? @*filter-selections-text) chosen-count (count filtered-selections)))]]\n                                                    :disabled? (or disabled? (zero? (count filtered-selections)) (not (> (count @*internal-model) (if required? 1 0))))\n                                                    :style     (merge button-style\n                                                                      (get-in parts [:exclude-all-button :style]))\n                                                    :attr      (get-in parts [:exclude-all-button :attr])\n                                                    :on-click  exclude-filtered-click]]]\n                                       [box/box\n                                        :src   (at)\n                                        :size  (str \"0 2 \" (if filter-box? \"55px\" \"0px\")) ;; 55 = (+ 4 4 28 4 15) - height of the bottom components\n                                        ;:style {:background-color \"lightblue\"}\n                                        :child \"\"]]]\n                           [box/v-box\n                            :src      (at)\n                            :class    (str \"rc-multi-select-right \" (get-in parts [:right :class]))\n                            :size     \"50%\"\n                            :gap      \"4px\"\n                            :style    (merge {:position \"relative\"}\n                                             (get-in parts [:right :style]))\n                            :attr     (get-in parts [:right :attr])\n                            :children [^{:key (gensym)}\n                                       [text/label\n                                        :src   (at)\n                                        :label @*warning-message\n                                        :class (str \"rc-multi-select-warning-message \" (get-in parts [:warning-message :class]))\n                                        :style (when @*warning-message\n                                                 (merge\n                                                   {:color            \"white\"\n                                                    :background-color \"green\"\n                                                    :border-radius    \"0px\"\n                                                    :opacity            \"0\"\n                                                    :position           \"absolute\"\n                                                    :right              \"0px\"\n                                                    :z-index            1\n                                                    :height             \"25px\"\n                                                    :padding            \"3px 6px\"\n                                                    :animation-name     \"rc-multi-select-fade-warning-msg\"\n                                                    :animation-duration \"5000ms\"}\n                                                   (get-in parts [:warning-message :style])))\n                                        :attr  (get-in parts [:warning-message :attr])]\n                                       (when right-label\n                                         (if (string? right-label)\n                                           [box/h-box\n                                            :src      (at)\n                                            :class    (str \"rc-multi-select-right-label-container \" (get-in parts [:right-label-container :class]))\n                                            :style    (get-in parts [:right-label-container :style])\n                                            :attr     (get-in parts [:right-label-container :attr])\n                                            :justify  :between\n                                            :children [[:span\n                                                        (merge\n                                                          {:class (str \"rc-multi-select-right-label \" (get-in parts [:right-label :class]))\n                                                           :style (merge {:font-size \"small\"\n                                                                          :font-weight \"bold\"}\n                                                                         (get-in parts [:right-label :style]))}\n                                                          (get-in parts [:right-label :attr]))\n                                                        right-label]\n                                                       [:span\n                                                        (merge\n                                                          {:class (str \"rc-multi-select-right-label-item-count \" (get-in parts [:right-label-item-count :class]))\n                                                           :style (merge {:font-size \"smaller\"}\n                                                                         (get-in parts [:right-label-item-count :style]))}\n                                                          (get-in parts [:right-label-item-count :attr]))\n                                                        (if (string/blank? @*filter-selections-text)\n                                                          (rc.util/pluralize chosen-count \"item\")\n                                                          (str \"showing \" (count filtered-selections) \" of \" chosen-count))]]]\n                                           right-label))\n                                       [list-box\n                                        :src                     (at)\n                                        :class                   (str \"rc-multi-select-right-list-box \" (get-in parts [:right-list-box :class]))\n                                        :style                   (get-in parts [:right-list-box :style])\n                                        :attr                    (get-in parts [:right-list-box :attr])\n                                        :items                   filtered-selections\n                                        :id-fn                   id-fn\n                                        :label-fn                label-fn\n                                        :group-fn                group-fn\n                                        :disabled?               disabled?\n                                        :*current-item-id        *current-selection-id\n                                        :group-heading-selected? @*selection-group-heading-selected?\n                                        :click-callback          selection-click\n                                        :double-click-callback   exclude-click\n                                        :filter-choices-text     @*filter-selections-text]\n                                       (when filter-box?\n                                         [:<>\n                                          [box/gap\n                                           :src  (at)\n                                           :size \"4px\"]\n                                          [filter-text-box *filter-selections-text placeholder *warning-message disabled? parts]\n                                          [box/gap\n                                           :src  (at)\n                                           :size \"4px\"]\n                                          (if (string/blank? @*filter-selections-text)\n                                            [text/label\n                                             :src   (at)\n                                             :label (gstring/unescapeEntities \"&nbsp;\")\n                                             :style {:font-size \"smaller\"}]\n                                            [text/label\n                                             :src   (at)\n                                             :label [:span \"Found \" (rc.util/pluralize (count filtered-selections) \"match\" \"matches\") \" containing \" [:strong @*filter-selections-text]]\n                                             :class (str \"rc-multi-select-right-filter-result-count \" (get-in parts [:right-filter-result-count :class]))\n                                             :style (merge {:font-size \"smaller\"} (get-in parts [:right-filter-result-count :style]))\n                                             :attr  (get-in parts [:right-filter-result-count :attr])])])]]]]]))))))\n"]}