{"version":3,"sources":["re_frisk/ui/events.cljs"],"mappings":";AAaA,AAAA,AAAMA,AAAYC,AAAEC;AAApB,AACE,AAAAC,AAAsEF;AAAtE,AAAA,AAAAG,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAAA,AAAgEW;AAAhE,AAAAP,AAAAJ,AAAA,AAAaK;AAAb,AAAAD,AAAAJ,AAAA,AAAmBM;AAAnB,AAAAF,AAAAJ,AAAA,AAAwBO;AAAxB,AAAAH,AAAAJ,AAAA,AAAoCQ;AAApC,AAAAJ,AAAAJ,AAAA,AAA8CS;AAA9C,AAAAL,AAAAJ,AAAA,AAAsDU;AAAtD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAGc,AAAA,AAAwBA,AACxB,AAAA,AAAuB,AAAA,AAAA,AAAA,AAAMF,AAC7B,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACI,AAEM,AAAA,AAAA,AAAA,AAAA,AAAA,AAAM,AAAK,AAAA,AAAML,AAAa,AAACM,AAAIL,AAEnC,AAAA,AAAA,AAAA,AAAA,AAAU,AAACM,AAAcT,AACH,AAAA,AAASA,AACtC,AAAKU;AAAL,AACE,AAAA,AAACC,AAAMlB,AAAWmB,AAAsBN;;AACxC,AAACO,AAAiC,AAAA,AAAA,AAAAC,AAAOrB,AAAYY;;AACrD,AAAiBK;AAC9B,AAAA,AAAA,AAAA,AAAIN,AACDW,AAAuBT,AACjBL;;;AAEd,AAAA,AAAMe,AAAiBxB,AAAEC;AAAzB,AACE,AAAAwB,AAAuCzB;AAAvC,AAAA,AAAA0B,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAtB,AAAA,AAAAsB,AAAA,AAAA,AAAA,AAAA,AAAArB,AAAAC,AAAAoB,AAAAA;AAAAA,AAAiCZ;AAAjC,AAAAP,AAAAmB,AAAA,AAAaC;AAAb,AAAApB,AAAAmB,AAAA,AAAoBd;AAApB,AACE,AAAI,AAAAgB,AAAKD;AAAL,AAAA,AAAAC;AAAY,AAAA,AAACC,AAAYjB;;AAAzBgB;;;AAAJ,AACGE,AAAiBhB,AAAKb;;AADzB,AAEGF,AAAWe,AAAKb;;;;AAEvB,AAAA,AAAM8B,AAAiBC,AAAgB/B;AAAvC,AACE,AAAA,AAAA,AAAA,AAAA,AAACgC,AAGC,AAAKC;AAAL,AACE,AAAMC,AAAE,AAACC,AAAcF;AAAvB,AACE,AAAM,AAAA,AAAA,AAAAZ,AAAkBrB;AAAxB,AACE,AAAM,AAAakC,AAAG,AAAgBA;;AADxC;;AALN,AAQE;AAAA,AAAA,AAAA,AAAA,AAAA,AAAAE,AACGC;AADH,AAEgB,AAAMC,AAAE,AAAAF;AAAR,AACE,AAAA,AAAClB,AAAMlB,AAAWmB,AAEX,AAACoB,AAAE,AAAG,AAAgBD,AAAG,AAAgBA,AAAI,AAAaA;AAChF,AAAAE,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAD,AAAAA;;AAAA,AAAA,AAAAE,AAAA,AAAAC,AAAAH;AAAA,AAAA,AAAAE;AAAA,AAAA,AAAAF,AAAAE;AAAA,AAAA,AAAA,AAAAE,AAAAJ;AAAA,AAAAK,AA+4E4C,AAAAsE,AAAA3E;AA/4E5CM,AAAA,AAAAC,AAAAF;AAAAG,AAAA,AAAAC,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAI,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAJ;AAAA,AAAA,AAAAK,AAAAN,AAAAK,AAAMtC;AAAN,AAAA,AAAA,AAAAwC,AAAAJ,AAAA,AAAA,AAAA,AAAA,AACS,AAAA,AAAY,AAAA,AAAOpC,AACzBU,AAAgBV,AAAKb;;AAFxB,AAAA,AAAAmD,AAAA;;;;AAAA;;;;;AAAA,AAAAG,AAAA,AAAAC,AAAAN,AAAA,AAAAO,AAAA,AAAAC,AAAAhB;;AAAA,AAAAa,AAAA,AAAAC,AAAAN,AAAA;;;AAAA,AAAA,AAAAS,AAAAjB,AAAM5B;AAAN,AAAA,AAAA8C,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAAI,AAAAnB,AACS,AAAA,AAAY,AAAA,AAAO5B,AACzBU,AAAgBV,AAAKb;;;AAFxB;;;;AAAA,AAAA;;AAAA,AAAA,AAAAwC,AAAA,AAAAnB,AAAYU;;;;AAInB,AAAA,AAAM8B,AAAkBC,AAAc9D;AAAtC,AACE,AAAM+D,AAAsB,AAAA,AAACC;AACvBC,AAAsB,AAAA,AAACD;AACvBE,AAAsB,AAAA,AAACF;AACvBG,AAAsB,AAAA,AAACH;AACvBI,AAAsB,AAAA,AAASN;AAC/BO,AACA,AAAAC,AAAA;AAAA,AACC,AAAMC,AAAK,AAAA,AAAA,AAAAlD,AAAiBrB;AAA5B,AACE,AAACwE,AACA,AAAA,AAAAC,AAACC;AAAD,AAAM,AAAAD,AAAA,AAAA,AAAA,AAACE,AAAmB,AAACpC,AAAE,AAAA,AAAAlB,AAAA,AAAA,AAAA,AAACuD,AAAQ5E,AAAoC,AAAA,AAAAyE,AACrD,AAAA,AAAApD,AAAK0C,AAAsB,AAAA,AAAAU,AAAoB,AAAK,AAACf,AAAM,AAAA,AAAAe,AAC1D,AAACnE,AAAIiE,AAAK,AAACb,AAAM,AAAA,AAAAe;AAFvC,AAAApD,AAGM+C;;AACVS,AACA,AAAAP,AAAA;AAAA,AACC,AAAA,AAAAjD,AAAK4C;AAAL,AAAA5C,AACGgD;;AACD,AAAA,AAAA,AAAAhD,AAACyD,AAAgBT;;;AACpBU,AACA,AAAAT,AAAA;AAAA,AACC,AAAI,AAAA,AAAG,AAAA,AAAAjD,AAAA,AAAM8C;AACX,AAAA,AAAA9C,AAAC2D,AAAU,AAAA,AAAA3D,AAAA,AAAM8C,AAAeU;;AADlC,AAAAxD,AAEGwD;;;AACJ9C,AACA,AAAAuC,AAAA;AAAA,AACC,AAAI,AAAA,AAAAjD,AAAA,AAACkB,AAAG2B;AAAR,AAAA7C,AACG0D;;AACD,AAAA,AAAA1D,AAAC4D,AAAO,AAAA,AAAA5D,AAAC6D,AAAoBhB,AAAWa;;;AA3BjD,AA4BE;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAI,AACGI,AAGEC,AAEEC,AAECC,AACOxB;AATf,AAUoB,AAAAiB,AAACQ,AAAOzB;AAV5B,AAAA,AAAA,AAAA,AAWO0B;AAXP,AAW2C,AAAA,AAACD,AAAOzB;AAXnD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAkB,AAaKI,AAEEK,AACO9B;AAhBd,AAiBmB,AAAAqB,AAACO,AAAO5B;AAjB3B,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAsB,AAmBOQ,AACO5B;AApBd,AAqBmB,AAAAoB,AAACM,AAAO1B;AArB3B,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAqB,AAuBOQ,AACAN,AAEEE,AACOvB;AA3BhB,AA4BqB,AAAAmB,AAACK,AAAOxB;AA5B7B,AAAA,AAAA,AAAA,AA6BSyB;AA7BT,AA6B6C,AAAA,AAACD,AAAOxB;AA7BrD,AAAA,AAAA,AAAA,AA+BKrC,AAAgBC,AAAgB/B;;;AAEzC,AAAA,AAAM+F,AAAW/F;AAAjB,AACE,AAAMgG,AAAS,AAAA1B,AAAA;AAAA,AAAU,AAACZ,AAAM,AAAA,AAAArC,AAAA,AAAA,AAAA,AAACuD,AAAQ5E;;AACnCiG,AAAS,AAAA3B,AAAA;AAAA,AAAU,AAAA,AAAAjD,AAAA,AAAA,AAAA,AAACuD,AAAQ5E;;AAC5BkG,AAAoB,AAAA5B,AAAA;AAAA,AAAU,AAAA,AAAAjD,AAAA,AAACf,AAAKN;;AACpCO,AAAS,AAAA+D,AAAA;AAAA,AAAU,AAAA,AAAAjD,AAAK2E;AAAS,AAAAG,AAAW,AAAA,AAAA,AAAA9E,AAAiBrB;AAA5BoG,AAAA,AAAA/E,AAAE2E;AAAF,AAAA,AAAAI,AAAAA,AAAAD,AAAAC,AAAAD;;AAAd;;;AAHzB,AAIE;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACGX,AAEEa,AACO,AAAA,AAAAhF,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAO2E,AACAC;AAEf,AAAA,AAAA5E,AAAA,AAAA,AAAA,AAAA,AAAA,AAAO4E,AACJK;AADH,AACuC,AAAA,AAACpF,AAAMlB,AAAWuG,AAA2BxF;AADpF,AAAA,AAAAM,AAAA,AAAA,AAEsC6E,AAEtC,AAAA,AAAA7E,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAmF,AAAOR,AACJR,AAEEa,AAAqBL,AACrBK,AAGa9F;AAPlB,AAQkB,AAAA,AAAA,AAAA,AAAAc,AAACH,AAAMlB,AAAWyG,AACMT,AACjB,AAAA,AAAAQ;AAVzB;;;AAYR,AAAA,AAAME,AAAY1G;AAAlB,AACE,AAAM2G,AAAW,AAAC3C,AAAa4C;AAA/B,AACE,AAAK7G;AAAL,AACE,AAAMmG,AAAmB,AAAA,AAAA,AAAA7E,AAAsBrB;AAA/C6G,AAGM,AAAA,AAAA,AAAAxF,AAAkBrB;AAHxB6G,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA1G,AAAA,AAAA0G,AAAA,AAAA,AAAA,AAAA,AAAAzG,AAAAC,AAAAwG,AAAAA;AAAAA,AAEwChG;AAFxC,AAAAP,AAAAuG,AAAA,AACc5F;AADd,AAAAX,AAAAuG,AAAA,AACoBpG;AADpB,AAAAH,AAAAuG,AAAA,AACgCnF;AADhC,AAAApB,AAAAuG,AAAA,AACuCC;AADvC,AAAAxG,AAAAuG,AAAA,AACmDE;AADnD,AAAAzG,AAAAuG,AAAA,AAEcG;AAFd,AAAA1G,AAAAuG,AAAA,AAE6BZ;AAF7B,AAIE,AAAMpF;AAAN,AACE,AAAIoF;AACF,AAAIC;AAAJ,AACGe,AAAgCpG;;AADnC,AAEGqG,AAAmBrG;;;AAHxB,AAAA,AAIGsG,AAAW,AAAIzF,AACFb,AACA,AAAA,AAAA,AAAA,AAACC,AAAoBG,AACAR,AACd,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAMqG,AACuBA,AACAC,AACAC,AAC/CL;;;AAbP","names":["re-frisk.ui.events/event-item","_","tool-state","p__63661","map__63662","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","color","name","app-db-diff","selected?","op-type","indx","item","cljs.core.merge","cljs.core/not","clojure.string/blank?","event","cljs.core.swap_BANG_","cljs.core/assoc","re-frisk.utils/scroll-timeline-event-item","cljs.core/deref","re-frisk.ui.trace/trace-event-item","re-frisk.ui.events/event-list-item","p__63669","map__63670","trace?","and__4115__auto__","cljs.core.not_EQ_","re-frisk.ui.trace/trace-item","re-frisk.ui.events/events-scroller","filtered-events","reagent.core.create_class","this","n","reagent.dom/dom-node","p1__63675#","re-frisk.ui.components.components/scroller","t","cljs.core._EQ_","iter__4529__auto__","s__63681","cljs.core/LazySeq","temp__5753__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__63683","cljs.core/chunk-buffer","i__63682","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__63680","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","re-frisk.ui.events/events-list-view","re-frame-data","truncate-checkbox-val","reagent.core.atom","checkbox-trace-val","text-val","max-text-val","re-frame-events","colored-and-selected","reagent.ratom/make-reaction","clrs","cljs.core.doall","p1__63685#","cljs.core.map","cljs.core.assoc","cljs.core.get_in","traces-filtered-events","cljs.core.remove","max-traces-filtered-events","cljs.core/take-last","cljs.core.filter","re-frisk.utils/filter-event","p1__63686#","p1__63687#","p1__63688#","p1__63689#","re-com.core/v-box","re-com.core/h-box","re-com.core/box","re-com.core/input-text","cljs.core/reset!","re-frisk.ui.components.components/small-button","re-com.core/checkbox","re-com.core/gap","re-frisk.ui.events/event-bar","evnt-key","subs?","subs-graph-opened?","G__63702","fexpr__63701","re-com.core/label","re-frisk.ui.components.components/label-button","cljs.core/update","p1__63697#","cljs.core/assoc-in","re-frisk.ui.events/frisk-view","state-atom","re-frisk.ui.components.frisk/expand-by-default","map__63706","duration-ms","handler-duration-ms","fx-duration-ms","re-frisk.ui.subs/event-subs-graph-container","re-frisk.ui.trace/subs-details","re-frisk.ui.components.frisk/Root","cljs.core/chunk-first"],"sourcesContent":["(ns re-frisk.ui.events\n  (:require-macros [reagent.ratom :refer [reaction]])\n  (:require\n   [reagent.core :as reagent]\n   [reagent.dom :as rdom]\n   [clojure.string :as string]\n   [re-com.core :as re-com]\n   [re-frisk.ui.components.frisk :as frisk]\n   [re-frisk.ui.components.components :as components]\n   [re-frisk.ui.trace :as trace]\n   [re-frisk.utils :as utils]\n   [re-frisk.ui.subs :as subs]))\n\n(defn event-item [_ tool-state]\n  (fn [{:keys [color name app-db-diff selected? op-type indx] :as item} _]\n    [:a\n     {:href     \"#\"\n      :id       (str \"events-list-item\" indx)\n      :class    (str \"list-group-item\" (when selected? \" active\"))\n      :style    (merge {:padding     5 :font-size 13 :border-left-width 2\n                        :white-space :pre :width \"100%\"}\n                       (when (and (nil? app-db-diff) (not selected?))\n                         {:opacity \"0.7\"})\n                       (when-not (string/blank? color)\n                         {:border-left-color (str \"#\" color)}))\n      :on-click (fn [event]\n                  (swap! tool-state assoc :selected-event item)\n                  (utils/scroll-timeline-event-item (:doc @tool-state) indx)\n                  (.preventDefault event))}\n     (if op-type\n       [trace/trace-event-item item]\n       [:span name])]))\n\n(defn event-list-item [_ tool-state]\n  (fn [{:keys [trace? op-type] :as item} _]\n    (if (and trace? (not= :event op-type))\n      [trace/trace-item item tool-state]\n      [event-item item tool-state])))\n\n(defn events-scroller [filtered-events tool-state]\n  (reagent/create-class\n   {:display-name \"re_frisk.debugger-messages\"\n    :component-did-update\n    (fn [this]\n      (let [n (rdom/dom-node this)]\n        (when (:scroll-bottom? @tool-state)\n          (set! (.-scrollTop n) (.-scrollHeight n)))))\n    :reagent-render\n    (fn []\n      [components/scroller\n       {:on-scroll #(let [t (.-target %)]\n                      (swap! tool-state assoc\n                             :scroll-bottom?\n                             (= (- (.-scrollHeight t) (.-offsetHeight t)) (.-scrollTop t))))}\n       (for [item @filtered-events]\n         ^{:key (str \"item\" (:indx item))}\n         [event-list-item item tool-state])])}))\n\n(defn events-list-view [re-frame-data tool-state]\n  (let [truncate-checkbox-val (reagent/atom true)\n        checkbox-trace-val    (reagent/atom false)\n        text-val              (reagent/atom \"\")\n        max-text-val          (reagent/atom \"\")\n        re-frame-events       (:events re-frame-data)\n        colored-and-selected\n        (reaction\n         (let [clrs (:events-colors @tool-state)]\n           (doall\n            (map #(assoc % :selected? (= (get-in @tool-state [:selected-event :indx]) (:indx %))\n                           :name (if @truncate-checkbox-val (:truncated-name %) (str (first (:event %))))\n                           :color (get clrs (first (:event %))))\n                 @re-frame-events))))\n        traces-filtered-events\n        (reaction\n         (if @checkbox-trace-val\n           @colored-and-selected\n           (remove :trace? @colored-and-selected)))\n        max-traces-filtered-events\n        (reaction\n         (if (> (int @max-text-val) 0)\n           (take-last (int @max-text-val) @traces-filtered-events)\n           @traces-filtered-events))\n        filtered-events\n        (reaction\n         (if (= @text-val \"\")\n           @max-traces-filtered-events\n           (filter (utils/filter-event @text-val) @max-traces-filtered-events)))]\n    (fn []\n      [re-com/v-box :size \"1\"\n       :children\n       [;events filter\n        [re-com/h-box\n         :children\n         [[re-com/box :size \"1\"\n           :child\n           [re-com/input-text :style {:height :auto :padding \"0\" }  :width \"100%\"\n            :model text-val :change-on-blur? false :placeholder \"Filter events\"\n            :on-change #(reset! text-val %)]]\n          [components/small-button {:on-click #(reset! text-val \"\") :active? false} \"X\"]]]\n        ;truncate checkbox\n        [re-com/h-box :gap \"5px\"\n         :children\n         [[re-com/checkbox\n           :model truncate-checkbox-val\n           :on-change #(reset! truncate-checkbox-val %)\n           :label \"truncate\"]\n          [re-com/checkbox\n           :model checkbox-trace-val\n           :on-change #(reset! checkbox-trace-val %)\n           :label \"traces\"]\n          [re-com/gap :size \"100%\"]\n          [re-com/h-box\n           :children\n           [[re-com/input-text :style {:height \"20px\" :padding \"0\"} :width \"30px\"\n             :model max-text-val :change-on-blur? false :placeholder \"max\"\n             :on-change #(reset! max-text-val %)]\n            [components/small-button {:on-click #(reset! max-text-val nil) :active? false} \"X\"]]]]]\n        ;events\n        [events-scroller filtered-events tool-state]]])))\n\n(defn event-bar [tool-state]\n  (let [evnt-key (reaction (first (get-in @tool-state [:selected-event :event])))\n        subs?    (reaction (get-in @tool-state [:selected-event :subs?]))\n        subs-graph-opened?  (reaction (get @tool-state :subs-graph-opened?))\n        color    (reaction (if @evnt-key (@evnt-key (:events-colors @tool-state)) \"\"))]\n    (fn []\n      [re-com/h-box :align :center :style {:background-color \"#4e5d6c\"}\n       :children\n       [[re-com/label :style {:margin \"4px\"}\n         :label (cond @evnt-key \"Event\"\n                      @subs? \"Subscriptions\"\n                      :else \"Event / Trace\")]\n        (when @subs?\n          [components/label-button {:on-click #(swap! tool-state update :subs-graph-opened? not)\n                                    :active? @subs-graph-opened?}\n           \"Graph\"])\n        (when @evnt-key\n          [re-com/h-box\n           :children\n           [[re-com/label :label @evnt-key :style {:margin \"4px\" :color \"#df691a\"}]\n            [re-com/label :label \"#\" :style {:margin \"4px\"}]\n            [:input\n             {:style     {:width \"60px\"} :placeholder \"000000\" :type \"text\" :max-length \"6\"\n              :value     @color\n              :on-change #(swap! tool-state assoc-in\n                                 [:events-colors @evnt-key]\n                                 (-> % .-target .-value))}]]])]])))\n\n(defn frisk-view [tool-state]\n  (let [state-atom (reagent/atom frisk/expand-by-default)]\n    (fn [_]\n      (let [subs-graph-opened? (:subs-graph-opened? @tool-state)\n            {:keys [event app-db-diff trace? duration-ms handler-duration-ms\n                    fx-duration-ms subs?] :as item}\n            (:selected-event @tool-state)]\n        (when item\n          (if subs?\n            (if subs-graph-opened?\n              [subs/event-subs-graph-container item]\n              [trace/subs-details item])\n            [frisk/Root (if trace?\n                          item\n                          (merge {:event       event\n                                  :app-db-diff app-db-diff}\n                                 (when duration-ms\n                                   {:trace {:duration         duration-ms\n                                            :handler-duration handler-duration-ms\n                                            :fx-duration      fx-duration-ms}})))\n             0 state-atom]))))))"]}