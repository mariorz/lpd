{"version":3,"sources":["re_graph/internals.cljc"],"mappings":"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","names":["re-graph.internals/default-instance-name","re-graph.internals/cons-interceptor","ctx","interceptor","p1__39175#","cljs.core.update","cljs.core.into","re-frame.interop/empty-queue","re-graph.internals/encode","obj","js/JSON.stringify","cljs.core/clj->js","re-graph.internals/message->data","m","js/JSON.parse","cljs.core.js__GT_clj","re-graph.internals/generate-query-id","Math/random","re-graph.internals/ensure-query-id","event-name","trimmed-event","cljs.core/contains?","cljs.core._EQ_","cljs.core/count","cljs.core/vec","cljs.core/cons","re-graph.internals/deep-merge","a","b","cljs.core.merge_with","cljs.core/every?","cljs.core/map?","re-graph.internals/build-impl","impl","cljs.core/fn?","re-graph.internals/instantiate-impl","re_frame.interceptor.__GT_interceptor","db","re_frame.interceptor.get_coeffect","http-impl","cljs.core.get_in","ws-impl","cljs.core.assoc","re-frame.interceptor/update-coeffect","G__39180","cljs.core.update_in","map__39182","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","db-effect","re_frame.interceptor.get_effect","G__39187","cljs.core.dissoc","re-frame.interceptor/assoc-effect","G__39188","cljs.core/assoc-in","re-graph.internals/re-graph-instance","re-graph","event","provided-instance-name","cljs.core/first","instance-name","instance","cljs.core.subvec","re-frame.interceptor/assoc-coeffect","re_frame.std_interceptors.path","re_graph.logging.error","cljs.core/keys","re-graph.internals/interceptors","re-frame.core/trim-v","re-graph.internals/valid-graphql-errors?","response","cljs.core/vector?","cljs.core/seq","re-graph.internals/insert-http-status","status","f","errors","cljs.core.mapv","error","p1__39194#","or__4126__auto__","default-errors","cljs.core.merge","re_frame.core.reg_event_fx","p__39199","p__39200","map__39201","vec__39202","cljs.core.nth","query-id","payload","callback-event","cljs.core/dissoc","cljs.core.conj","G__39209","G__39210","re-frame.core/reg-fx","abort-fn","re_frame.core.reg_event_db","p__39214","vec__39215","re-graph.internals/unexceptional-status?","G__39222","G__39223","p__39226","vec__39227","map__39230","http-url","request","response-chan","cljs_http.client.post","G__39246","re-frame.core/dispatch","cljs-http.core/abort!","c__36744__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__36745__auto__","switch__36652__auto__","state_39307","state_val_39310","statearr-39318","cljs.core.async.impl.ioc-helpers/take!","statearr-39327","inst_39289","inst_39288","inst_39298","statearr-39335","statearr-39336","inst_39259","inst_39271","inst_39272","inst_39273","inst_39274","inst_39275","statearr-39343","statearr-39346","statearr-39350","inst_39264","inst_39265","cljs.core/not","statearr-39351","statearr-39352","statearr-39353","inst_39287","inst_39291","inst_39292","cljs.core/PersistentVector","inst_39295","statearr-39354","statearr-39357","statearr-39360","inst_39284","statearr-39364","inst_39282","statearr-39366","statearr-39368","inst_39300","inst_39301","inst_39302","inst_39303","cljs.core.async.impl.ioc-helpers/return-chan","statearr-39375","inst_39279","statearr-39377","statearr-39379","state-machine__36653__auto__","ret-value__36654__auto__","result__36655__auto__","cljs.core/keyword-identical?","ex__36656__auto__","e39380","statearr-39381","statearr-39384","state__36746__auto__","statearr-39390","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","G__39396","G__39397","p__39399","vec__39401","websocket","re_graph.logging.debug","G__39407","G__39408","p__39413","vec__39414","callback-fn","p__39417","vec__39430","_","p__39436","p__39437","map__39438","vec__39439","cofx","subscription-id","temp__5733__auto__","cljs.core/name","re_graph.logging.warn","p__39456","vec__39457","p__39469","map__39470","ws","p__39487","p__39488","map__39489","vec__39490","cljs.core/assoc","resume?","subscriptions","cljs.core/vals","cljs.core.map","queue","to-send","cljs.core.concat","re-graph.internals/deactivate-subscriptions","cljs.core/reduce-kv","subs","sub-id","sub","p__39511","map__39512","new-db","temp__5735__auto__","reconnect-timeout","re-graph.internals/on-ws-message","map__39543","type","id","data","pred__39549","expr__39550","cljs.core/=","G__39557","G__39558","G__39559","var_args","G__39570","re-graph.internals/on-open","js/Error","fexpr__39574","re_graph.internals.on_open","re_graph.logging.info","G__39579","re-graph.internals/on-close","args","G__39582","re-graph.internals/on-error","e","p__39593","map__39594","G__39600","G__39601","p__39606","vec__39607","map__39610","map__39611","url","sub-protocol","js/WebSocket","G__39626","G__39627","p__39630","vec__39635","re-graph.internals/default-url","protocol","path","js/window","host-and-port","js/window.location","ssl?","cljs.core/re-find","re-graph.internals/ws-default-options","re-graph.internals/ws-initial-state","p__39642","map__39643","re-graph.internals/ws-options","_options","map__39645","ws-options","re-graph.internals/http-default-options","re-graph.internals/http-initial-state","p__39657","map__39658","re-graph.internals/http-options","http","options","map__39660","http-options"],"sourcesContent":["(ns re-graph.internals\n  (:require [re-frame.core :as re-frame]\n            [re-frame.interceptor :refer [->interceptor get-coeffect assoc-coeffect update-coeffect get-effect assoc-effect enqueue]]\n            [re-frame.std-interceptors :as rfi]\n            [re-frame.interop :refer [empty-queue]]\n            [re-graph.logging :as log]\n            #?@(:cljs [[cljs-http.client :as http]\n                       [cljs-http.core :as http-core]]\n                :clj  [[re-graph.interop :as interop]])\n            #?(:cljs [clojure.core.async :as a])\n            #?(:clj [cheshire.core :as json]))\n  #?(:cljs (:require-macros [cljs.core.async.macros :refer [go]]))\n  #?(:clj (:import [java.util UUID])))\n\n(def default-instance-name ::default)\n\n(defn- cons-interceptor [ctx interceptor]\n  (update ctx :queue #(into (into empty-queue [interceptor]) %)))\n\n(defn- encode [obj]\n  #?(:cljs (js/JSON.stringify (clj->js obj))\n     :clj (json/encode obj)))\n\n(defn- message->data [m]\n  #?(:cljs (-> (aget m \"data\")\n               (js/JSON.parse)\n               (js->clj :keywordize-keys true))\n     :clj (json/decode m keyword)))\n\n(defn generate-query-id []\n  #?(:cljs (.substr (.toString (Math/random) 36) 2 8)\n     :clj (str (UUID/randomUUID))))\n\n(defn- ensure-query-id [event-name trimmed-event]\n  (if (contains? #{:re-graph.core/query :re-graph.core/mutate} event-name)\n    (if (= 3 (count trimmed-event)) ;; query, variables, callback-event\n      (vec (cons (generate-query-id) trimmed-event))\n      trimmed-event)\n    trimmed-event))\n\n(defn deep-merge [a b]\n  (merge-with\n   (fn [a b]\n     (if (every? map? [a b])\n       (deep-merge a b)\n       b))\n   a b))\n\n(defn- build-impl [impl]\n  (if (fn? impl)\n    (impl)\n    impl))\n\n(def instantiate-impl\n  (->interceptor\n   :id ::instantiate-impl\n   :before (fn [ctx]\n             (let [db (get-coeffect ctx :db)\n                   http-impl (get-in db [:http :impl])\n                   ws-impl (get-in db [:ws :impl])]\n               (-> (assoc ctx\n                          ::http-impl http-impl\n                          ::ws-impl ws-impl)\n                   (update-coeffect :db (fn [db]\n                                          (cond-> db\n                                            http-impl (update-in [:http :impl] build-impl)\n                                            ws-impl (update-in [:ws :impl] build-impl)))))))\n   :after (fn [ctx]\n            (let [{::keys [http-impl ws-impl]} ctx\n                  db-effect (get-effect ctx :db)]\n              (cond-> (dissoc ctx ::http-impl ::ws-impl)\n                db-effect (assoc-effect :db (cond-> db-effect\n                                              http-impl (assoc-in [:http :impl] http-impl)\n                                              ws-impl (assoc-in [:ws :impl] ws-impl))))))))\n\n(def re-graph-instance\n  (->interceptor\n   :id ::instance\n   :before (fn [ctx]\n             (let [re-graph  (:re-graph (get-coeffect ctx :db))\n                   event (get-coeffect ctx :event)\n                   provided-instance-name (first event)\n                   instance-name (if (contains? re-graph provided-instance-name) provided-instance-name default-instance-name)\n                   instance (get re-graph instance-name)\n                   event-name (first (get-coeffect ctx ::rfi/untrimmed-event))\n                   trimmed-event (->> (if (= provided-instance-name instance-name)\n                                        (subvec event 1)\n                                        event)\n                                      (ensure-query-id event-name))]\n\n               (cond\n                 (:destroyed? instance)\n                 ctx\n\n                 instance\n                 (-> ctx\n                     (assoc-coeffect :instance-name instance-name)\n                     (assoc-coeffect :dispatchable-event (into [event-name instance-name] trimmed-event))\n                     (cons-interceptor (rfi/path :re-graph instance-name))\n                     (assoc-coeffect :event trimmed-event))\n\n                 :default\n                 (do (log/error \"No default instance of re-graph found but no valid instance name was provided. Valid instance names are:\" (keys re-graph)\n                                \"but was provided with\" provided-instance-name\n                                \"handling event\" event-name)\n                     ctx))))))\n\n(def interceptors\n  [re-frame/trim-v re-graph-instance instantiate-impl])\n\n(defn- valid-graphql-errors?\n  \"Validates that response has a valid GraphQL errors map\"\n  [response]\n  (and (map? response)\n       (vector? (:errors response))\n       (seq (:errors response))\n       (every? map? (:errors response))))\n\n(defn- insert-http-status\n  \"Inserts the HTTP status into the response for 3 conditions:\n   1. Response contains a valid GraphQL errors map: update the map with HTTP status\n   2. Response is a map but does not contain a valid errors map: merge in default errors\n   3. Response is anything else: return default errors map\"\n  [response status]\n  (let [f (fn [errors] (mapv (fn [error] (update-in error [:extensions :status] #(or % status))) errors))\n        default-errors {:errors [{:message \"The HTTP call failed.\"\n                                  :extensions {:status status}}]}]\n    (cond\n      (valid-graphql-errors? response) (update response :errors f)\n      (map? response) (merge response default-errors)\n      :else default-errors)))\n\n(re-frame/reg-event-fx\n ::http-complete\n interceptors\n (fn [{:keys [db]} [query-id payload]]\n   (let [callback-event (get-in db [:http :requests query-id :callback])]\n     {:db       (-> db\n                    (update :subscriptions dissoc query-id)\n                    (update-in [:http :requests] dissoc query-id))\n      :dispatch (conj callback-event payload)})))\n\n(re-frame/reg-fx\n ::call-abort\n (fn [abort-fn]\n   (abort-fn)))\n\n(re-frame/reg-event-db\n ::register-abort\n interceptors\n (fn [db [query-id abort-fn]]\n   (assoc-in db [:http :requests query-id :abort] abort-fn)))\n\n(def unexceptional-status?\n  #{200 201 202 203 204 205 206 207 300 301 302 303 304 307})\n\n(re-frame/reg-fx\n ::send-http\n (fn [[instance-name query-id http-url {:keys [request payload]}]]\n   #?(:cljs (let [response-chan (http/post http-url (assoc request :json-params payload))]\n              (re-frame/dispatch [::register-abort instance-name query-id #(http-core/abort! response-chan)])\n\n              (go (let [{:keys [status body error-code]} (a/<! response-chan)]\n                    (re-frame/dispatch [::http-complete\n                                        instance-name\n                                        query-id\n                                        (if (= :no-error error-code)\n                                          body\n                                          (insert-http-status body status))]))))\n\n      :clj (let [future (interop/send-http http-url\n                                           request\n                                           (encode payload)\n                                           (fn [{:keys [status body]}]\n                                             (re-frame/dispatch [::http-complete\n                                                                 instance-name\n                                                                 query-id\n                                                                 (if (unexceptional-status? status)\n                                                                   body\n                                                                   (insert-http-status body status))]))\n                                           (fn [exception]\n                                             (let [{:keys [status body]} (ex-data exception)]\n                                               (re-frame/dispatch [::http-complete instance-name query-id (insert-http-status body status)]))))]\n             (re-frame/dispatch [::register-abort instance-name query-id #(.cancel future)])))))\n\n(re-frame/reg-fx\n ::send-ws\n (fn [[websocket payload]]\n   (log/debug \"Send ws\" websocket payload)\n   #?(:cljs (.send websocket (encode payload))\n      :clj (interop/send-ws websocket (encode payload)))))\n\n(re-frame/reg-fx\n ::call-callback\n (fn [[callback-fn payload]]\n   (callback-fn payload)))\n\n(re-frame/reg-event-fx\n ::callback\n (fn [_ [_ callback-fn payload]]\n   {::call-callback [callback-fn payload]}))\n\n(re-frame/reg-event-fx\n ::on-ws-data\n interceptors\n (fn [{:keys [db] :as cofx} [subscription-id payload :as event]]\n   (if-let [callback-event (get-in db [:subscriptions (name subscription-id) :callback])]\n     {:dispatch (conj callback-event payload)}\n     (log/warn \"No callback-event found for subscription\" subscription-id))))\n\n(re-frame/reg-event-db\n ::on-ws-complete\n interceptors\n (fn [db [subscription-id]]\n   (update-in db [:subscriptions] dissoc (name subscription-id))))\n\n(re-frame/reg-event-fx\n ::connection-init\n interceptors\n  (fn [{:keys [db]} _]\n    (let [ws (get-in db [:ws :connection])\n          payload (get-in db [:ws :connection-init-payload])]\n      (when payload\n        {::send-ws [ws {:type \"connection_init\"\n                        :payload payload}]}))))\n\n(re-frame/reg-event-fx\n ::on-ws-open\n interceptors\n (fn [{:keys [db instance-name]} [ws]]\n   (merge\n    {:db (update db :ws\n                    assoc\n                    :connection ws\n                    :ready? true\n                    :queue [])}\n\n    (let [resume? (get-in db [:ws :resume-subscriptions?])\n          subscriptions (when resume? (->> db :subscriptions vals (map :event)))\n          queue (get-in db [:ws :queue])\n          to-send (concat [[::connection-init instance-name]] subscriptions queue)]\n      {:dispatch-n to-send}))))\n\n(defn- deactivate-subscriptions [subscriptions]\n  (reduce-kv (fn [subs sub-id sub]\n               (assoc subs sub-id (assoc sub :active? false)))\n             {}\n             subscriptions))\n\n(re-frame/reg-event-fx\n ::on-ws-close\n interceptors\n (fn [{:keys [db instance-name]} _]\n   (merge\n    {:db (let [new-db (-> db\n                          (assoc-in [:ws :ready?] false)\n                          (update :subscriptions deactivate-subscriptions))]\n           new-db)}\n    (when-let [reconnect-timeout (get-in db [:ws :reconnect-timeout])]\n      {:dispatch-later [{:ms reconnect-timeout\n                         :dispatch [::reconnect-ws instance-name]}]}))))\n\n(defn- on-ws-message [instance-name]\n  (fn [m]\n    (let [{:keys [type id payload] :as data} (message->data m)]\n      (condp = type\n        \"data\"\n        (re-frame/dispatch [::on-ws-data instance-name id payload])\n\n        \"complete\"\n        (re-frame/dispatch [::on-ws-complete instance-name id])\n\n        \"error\"\n        (re-frame/dispatch [::on-ws-data instance-name id {:errors payload}])\n\n        (log/debug \"Ignoring graphql-ws event \" instance-name \" - \" type)))))\n\n(defn- on-open\n  ([instance-name]\n   (fn [websocket]\n     ((on-open instance-name websocket))))\n  ([instance-name websocket]\n   (fn []\n     (log/info \"opened ws\" websocket)\n     (re-frame/dispatch [::on-ws-open instance-name websocket]))))\n\n(defn- on-close [instance-name]\n  (fn [& args]\n    (re-frame/dispatch [::on-ws-close instance-name])))\n\n(defn- on-error [instance-name]\n  (fn [e]\n    (log/warn \"GraphQL websocket error\" instance-name e)))\n\n(re-frame/reg-event-fx\n ::reconnect-ws\n interceptors\n (fn [{:keys [db instance-name]} _]\n   (when-not (get-in db [:ws :ready?])\n     {::connect-ws [instance-name db]})))\n\n(re-frame/reg-fx\n  ::connect-ws\n  (fn [[instance-name {{:keys [url sub-protocol impl]} :ws}]]\n    #?(:cljs (let [ws (cond\n                       (nil? sub-protocol)\n                       (js/WebSocket. url)\n                       :else ;; non-nil sub protocol\n                       (js/WebSocket. url sub-protocol))]\n              (aset ws \"onmessage\" (on-ws-message instance-name))\n              (aset ws \"onopen\" (on-open instance-name ws))\n              (aset ws \"onclose\" (on-close instance-name))\n              (aset ws \"onerror\" (on-error instance-name)))\n       :clj  (interop/create-ws url (merge (build-impl impl)\n                                           {:on-open      (on-open instance-name)\n                                            :on-message   (on-ws-message instance-name)\n                                            :on-close     (on-close instance-name)\n                                            :on-error     (on-error instance-name)\n                                            :subprotocols [sub-protocol]})))))\n\n(re-frame/reg-fx\n ::disconnect-ws\n (fn [[ws]]\n   #?(:cljs (.close ws)\n      :clj (interop/close-ws ws))))\n\n(defn default-url\n  [protocol path]\n  #?(:cljs\n          (when (and (exists? js/window) (exists? (.-location js/window)))\n            (let [host-and-port (.-host js/window.location)\n                  ssl? (re-find #\"^https\" (.-origin js/window.location))]\n              (str protocol (if ssl? \"s\" \"\") \"://\" host-and-port \"/\" path)))\n     :clj\n          (str protocol \"://localhost/\" path)))\n\n(def ws-default-options\n  {:url (default-url \"ws\" \"graphql-ws\")\n   :sub-protocol \"graphql-ws\"\n   :reconnect-timeout 5000\n   :resume-subscriptions? true\n   :connection-init-payload {}\n   :impl {}\n   :supported-operations #{:subscribe :mutate :query}})\n\n(def ws-initial-state\n  {:ready? false\n   :queue []\n   :connection nil})\n\n(defn ws-options\n  [{:keys [ws] :or {ws {}} :as _options}]\n  (when ws\n    (let [{:keys [url] :as ws-options} (merge ws-default-options ws ws-initial-state)]\n      (when url\n        {:ws ws-options}))))\n\n(def http-default-options\n  {:url (default-url \"http\" \"graphql\")\n   :supported-operations #{:mutate :query}\n   :impl {}})\n\n(def http-initial-state\n  {:requests {}})\n\n(defn http-options\n  [{:keys [http] :or {http {}} :as options}]\n  (when http\n    (let [{:keys [url] :as http-options} (merge http-default-options http http-initial-state)]\n      (when url\n        {:http http-options}))))\n\n#?(:clj\n   (defn sync-wrapper\n     \"Wraps the given function to allow the GraphQL result to be returned\n      synchronously. Will return a GraphQL error response if no response is\n      received before the timeout (default 3000ms) expires. Will throw if the\n      call returns an exception.\"\n     [f & args]\n     (let [timeout  (when (int? (last args)) (last args))\n           timeout' (or timeout 3000)\n           p        (promise)\n           callback (fn [result] (deliver p result))\n           args'    (conj (vec (if timeout (butlast args) args))\n                          callback)]\n       (apply f args')\n\n       ;; explicit timeout to avoid unreliable aborts from underlying implementations\n       (let [result (deref p timeout' ::timeout)]\n         (if (= ::timeout result)\n           {:errors [{:message \"re-graph did not receive response from server\"\n                      :timeout timeout'\n                      :args args}]}\n           result)))))\n"]}