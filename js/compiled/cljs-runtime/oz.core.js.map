{"version":3,"sources":["oz/core.cljs"],"mappings":"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","names":["cljs.core/enable-console-print!","var_args","G__67005","oz.core/embed-vega","js/Error","elem","doc","oz.core.embed_vega","opts","cljs.core/clj->js","cljs.core.merge","js/module$node_modules$vega_embed$build$vega_embed","err","js/console.log","oz.core/update-vega","old-doc","new-doc","old-opts","new-opts","G__67009","cljs.core._EQ_","or__4126__auto__","cljs.core.not_EQ_","cljs.core.dissoc","G__67022","oz.core/vega","oz.core.vega","reagent.core.create_class","this","reagent.dom/dom-node","p__67025","vec__67026","cljs.core.nth","_","G__67035","oz.core/vega-lite","oz.core.vega_lite","oz.core/live-viewers-state","reagent.core.atom","oz.core/register-live-view","key","component","cljs.core.swap_BANG_","cljs.core/assoc","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","oz.core/register-live-views","p__67050","map__67051","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","seq67048","self__4724__auto__","cljs.core/seq","live-views","cljs.core/merge","oz.core/default-data-table-opts","G__67066","oz.core/data-table","p__67073","map__67074","cljs.core.get","data","oz.core.data_table","page","sort-key","sort-order","state","header","cljs.core.take","cljs.core.map","cljs.core.comp","cljs.core/set","cljs.core/keys","cljs.core.reduce","clojure.set/union","map__67082","cljs.core/deref","map__67083","per-page","tr-style","td-style","th-style","cljs.core.merge_with","opt1","opt2","cljs.core/map?","scoped-data","G__67094","cljs.core.sort_by","cljs.core/reverse","cljs.core.drop","last-page","cljs.core/quot","cljs.core/count","cljs.core/update","cljs.core/dec","cljs.core/inc","iter__4529__auto__","s__67107","cljs.core/LazySeq","temp__5753__auto__","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","b__67109","cljs.core/chunk-buffer","i__67108","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__67106","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","cljs.core/name","G__67120","cljs.core/Keyword","G__67125","s__67127","b__67129","i__67128","iter__67126","row","cljs.core/hash","s__67134","b__67136","i__67135","iter__67133","s__67152","b__67154","i__67153","iter__67151","oz.core.register_live_views","oz.core/live-view","live-viewers","live-viewer-keys","clojure.walk/prewalk","x","cljs.core/coll?","G__67165","cljs.core.into","oz.core/view-spec","cljs.core/chunk-first"],"sourcesContent":["(ns oz.core\n  (:require [\"vega-embed\" :as vegaEmbed]\n            [\"leaflet-vega\" :as leafletVega]\n            [\"leaflet\" :as leaflet]\n            [clojure.string :as str]\n            [clojure.spec.alpha :as s]\n            [reagent.core :as r]\n            [reagent.dom :as rd]))\n\n\n\n(enable-console-print!)\n\n(defn ^:no-doc embed-vega\n  ([elem doc] (embed-vega elem doc {}))\n  ([elem doc opts]\n   (when doc\n     (let [doc (clj->js doc)\n           opts (merge {:renderer :canvas\n                        ;; Have to think about how we want the defaults here to behave\n                        :mode \"vega-lite\"}\n                       opts)]\n       (-> (vegaEmbed elem doc (clj->js opts))\n           (.catch (fn [err]\n                     (js/console.log err))))))))\n\n;; WIP; TODO Finish figuring this out; A little thornier than I thought, because data can come in so many\n;; different shapes; Should clojure.spec this out:\n;; * url\n;; * named data\n;; * vega vs lite\n;; * data nested in layers\n;; * other?\n(defn ^:no-doc update-vega\n  ([elem old-doc new-doc old-opts new-opts]\n   (case\n     ;; Only rerender from scratch if the viz specification has actually changed, or if always rerender is\n     ;; specified\n     (or (:always-rerender new-opts)\n         (not= (dissoc old-doc :data) (dissoc new-doc :data))\n         (not= old-opts new-opts))\n     (embed-vega new-doc new-opts)\n     ;; Otherwise, just update the data component\n     ;; TODO This is the hard part to figure out\n     ;(= ())\n     ;()\n     ;; Otherwise, do nothing\n     :else\n     nil)))\n\n(defn vega\n  \"Reagent component that renders vega\"\n  ([doc] (vega doc {}))\n  ([doc opts]\n   ;; Is this the right way to do this? So vega component behaves abstractly like a vega-lite potentially?\n   (let [opts (merge {:mode \"vega\"} opts)]\n     (r/create-class\n      {:display-name \"vega\"\n       :component-did-mount (fn [this]\n                              (embed-vega (rd/dom-node this) doc opts))\n       ;; Need to look into this further to see how these args even work; may not be doing new-opts right here?\n       ;; (http://reagent-project.github.io/docs/master/reagent.core.html)\n       ;; (https://reactjs.org/docs/react-component.html#unsafe_componentwillupdate)\n       :component-will-update (fn [this [_ new-doc new-opts]]\n                                ;(update-vega (rd/dom-node this) doc new-doc opts new-opts)\n                                (embed-vega (rd/dom-node this) new-doc new-opts))\n       :reagent-render (fn [doc]\n                         [:div.viz])}))))\n\n(defn vega-lite\n  \"Reagent component that renders vega-lite.\"\n  ([doc] (vega-lite doc {}))\n  ([doc opts]\n   ;; Which way should the merge go?\n   (vega doc (merge opts {:mode \"vega-lite\"}))))\n\n\n(def ^:private live-viewers-state\n  (r/atom {:vega vega\n           :vega-lite vega-lite}))\n\n(defn register-live-view\n  [key component]\n  (swap! live-viewers-state assoc key component))\n\n(defn register-live-views\n  [& {:as live-views}]\n  (swap! live-viewers-state merge live-views))\n\n\n(def default-data-table-opts\n  {:per-page 50\n   :tr-style {}\n   :td-style {:padding-right 10}\n   :th-style {:padding-right 10\n              :cursor :pointer}})\n\n(defn data-table\n  ([data] (data-table data {}))\n  ([data {:keys [page sort-key sort-order]}]\n   (let [state (r/atom {:page (or page 0) :sort-key sort-key :sort-order (or sort-order :ascending)})\n         header (->> data (take 10) (map (comp set keys)) (reduce clojure.set/union))]\n     (fn [data opts]\n       (let [{:keys [page sort-key sort-order]} @state\n             {:keys [per-page tr-style td-style th-style]}\n             (merge-with (fn [opt1 opt2]\n                           (if (and (map? opt1) (map? opt2))\n                             (merge opt1 opt2)\n                             opt2))\n               default-data-table-opts\n               opts)\n             scoped-data (cond->> data\n                           sort-key (sort-by sort-key)\n                           (= :descending sort-order) (reverse)\n                           per-page (drop (* per-page page))\n                           per-page (take per-page))\n             last-page (quot (count data) per-page)]\n         [:div\n          (when (> (count data) per-page)\n            [:p\n             {:style {:margin-bottom 10}}\n             [:span\n              {:style {:padding-right 20}}\n              \"Current page: \" (inc page)]\n             (when (> page 0)\n               [:a\n                {:on-click (fn [& _] (swap! state update :page dec))\n                 :style {:padding-right 10\n                         :cursor :pointer}}\n                \"prev\"])\n             (when (< page last-page)\n               [:a\n                {:on-click (fn [& _] (swap! state update :page inc))\n                 :style {:padding-right 10\n                         :cursor :pointer}}\n                \"next\"])])\n          [:table\n           ;; header row\n           [:tr\n            {:style tr-style}\n            (for [key header]\n              ^{:key key}\n              [:th {:style th-style\n                    :on-click (fn [& _]\n                                (swap! state merge {:sort-key key\n                                                    :sort-order (if (and (= key sort-key) (= sort-order :ascending))\n                                                                  :descending\n                                                                  :ascending)}))}\n                (name key)\n                (when (= sort-key key)\n                  (case sort-order\n                    :ascending \"\u2303\"\n                    :descending \"\u2304\"))])]\n           (for [row scoped-data]\n             ^{:key (hash row)}\n             [:tr\n              {:style tr-style}\n              (for [key header]\n                ^{:key key}\n                [:td {:style td-style} (get row key)])])]])))))\n\n\n(register-live-views\n  :vega vega\n  :vega-lite vega-lite\n  :data-table data-table)\n\n(defn ^:no-doc live-view\n  ;; should handle sharing data with nodes that need it?\n  [doc]\n  ;; prewalk spec, rendering special hiccup tags like :vega and :vega-lite, and potentially other composites,\n  ;; rendering using the components above. Leave regular hiccup unchanged).\n  ;; TODO finish writing; already hooked in below so will break now\n  (let [live-viewers @live-viewers-state\n        live-viewer-keys (set (keys live-viewers))]\n    (clojure.walk/prewalk\n      (fn [x] (if (and (coll? x) (live-viewer-keys (first x)))\n                (into\n                  [(get live-viewers (first x))]\n                  (rest x))\n                x))\n      doc)))\n\n\n;; TODO Rename this to live-view; But need to make sure to edit in the repl tooling application code as well,\n;; since that's what actually uses this\n(def ^:no-doc view-spec live-view)\n  ;; should handle sharing data with nodes that need it?\n\n\n\n(comment\n  ;; This is still a work in progress\n  (defn ^:private render-leaflet-vega [dom-node]\n    ;(.map leaflet dom-node)\n    (let [m (.map leaflet \"map\")\n          _ (.setView m (clj->js [51.505 -0.09]) 4)\n          tile (.tileLayer leaflet\n                           \"https://maps.wikimedia.org/osm-intl/{z}/{x}/{y}.png\"\n                           (clj->js {:attribution \"&copy; <a href=\\\"http://osm.org/copyright\\\">OpenStreetMap</a> contributors\"}))\n\n          _ (.addTo tile m)\n          marker (.marker leaflet (clj->js [40.7128 -74.0059]))]\n      ;(js/console.log (clj->js [40.7128 -74.0059]))\n      (.addTo marker m)))\n      ;(.bindPopup marker \"a red-headed rhino\")))\n\n  ;; This is still a work in progress\n  (defn ^:private leaflet-vega\n    \"WIP/Alpha wrapper around leaflet-vega\"\n    []\n    (r/create-class\n      {:display-name \"leaflet-vega\"\n       :component-did-mount (fn [this]\n                              (render-leaflet-vega (rd/dom-node this)))\n       :component-did-update (fn [this [_]]\n                               (render-leaflet-vega (rd/dom-node this)))\n       :reagent-render (fn []\n                         [:div#map])})))\n\n\n"]}