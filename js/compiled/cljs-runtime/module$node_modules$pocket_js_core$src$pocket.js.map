{
"version":3,
"file":"module$node_modules$pocket_js_core$src$pocket.js",
"lineCount":8,
"mappings":"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",
"sources":["node_modules/pocket-js-core/src/pocket.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pocket_js_core$src$pocket\"] = function(global,require,module,exports) {\nconst Models = require(\"./models/index\");\nconst Blockchain = Models.Blockchain;\nconst Dispatch = Models.Dispatch;\nconst Relay = Models.Relay;\nconst Report = Models.Report;\n\n/**\n *\n *\n * @class Configuration\n */\nclass Configuration {\n  /**\n   * Configuration stores settings.\n   * @constructor\n   * @param {string} devID - Unique developer ID.\n   * @param {string} blockchains - Blockchain class type list.\n   * @param {string} maxNodes - (optional) Maximun amount of nodes to store in instance, default 5.\n   * @param {string} requestTimeOut - (optional) Maximun timeout for every request in miliseconds, default 10000.\n   */\n  constructor(devID, blockchains, maxNodes, requestTimeOut) {\n    this.devID = devID;\n    this.blockchains = blockchains;\n    this.maxNodes = maxNodes || 5;\n    this.nodes = [];\n    this.requestTimeOut = requestTimeOut || 10000;\n    this.dispatch = null;\n  }\n  /**\n   * Verify if the nodes list is empty\n   *\n   * @returns {Boolean}\n   * @memberof Configuration\n   */\n  nodesIsEmpty() {\n    if (this.nodes == null || this.nodes.length == 0) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n/**\n *\n *\n * @class Pocket\n */\nclass Pocket {\n  /**\n   * Creates an instance of Pocket.\n   * @param {Object} opts - Options for the initializer, devID, networkName, netIDs, maxNodes, requestTimeOut.\n   * @memberof Pocket\n   */\n  constructor(opts) {\n    var blockchains = [];\n\n    if (opts.devID == null || opts.networkName == null || opts.netIDs == null) {\n      return new Error(\"Invalid number of arguments\");\n    }\n\n    if (Array.isArray(opts.netIDs)) {\n      opts.netIDs.forEach(element => {\n        var blockchain = new Blockchain(opts.networkName, element);\n        blockchains.push(blockchain.toJSON());\n      });\n    } else {\n      var blockchain = new Blockchain(opts.networkName, opts.netIDs);\n      blockchains.push(blockchain.toJSON());\n    }\n\n    this.configuration = new Configuration(opts.devID, blockchains, opts.maxNodes || 5, opts.requestTimeOut || 10000);\n\n  }\n  /**\n   *\n   * Create a Relay instance\n   * @param {Blockchain} blockchain - Blockchain object.\n   * @param {String} netID - Network Idenfifier.\n   * @param {String} data - String holding the json rpc call.\n   * @returns {Relay} - New Relay instance.\n   * @memberof Pocket\n   */\n  createRelay(blockchain, netID, data) {\n    // Check if data is a json tring\n    if (typeof data == 'string') {\n      return new Relay(blockchain, netID, data, this.configuration); \n    }\n    return new Relay(blockchain, netID, JSON.stringify(data), this.configuration);\n  }\n  /**\n   *\n   * Create a Report instance\n   * @param {String} ip - Internet protocol address.\n   * @param {String} message - Brief description for the report.\n   * @returns {Report} - New Report instance.\n   * @memberof Pocket\n   */\n  createReport(ip, message) {\n    return new Report(ip, message, this.configuration);\n  }\n  /**\n   *\n   * Get a Dispatch instance or creates one\n   * @returns {Dispatch} - New or existing Dispatch instance.\n   * @memberof Pocket\n   */\n  getDispatch() {\n    if (this.dispatch == null) {\n      this.dispatch = new Dispatch(this.configuration);\n    }\n    return this.dispatch;\n  }\n  /**\n   *\n   * Filter nodes by netID and blockchain name\n   * @param {String} netID - Network Idenfifier.\n   * @param {String} network - Network Name.\n   * @returns {Node} - New Node instance.\n   * @memberof Pocket\n   */\n  async getNode(netID, network) {\n    try {\n      var nodes = [];\n\n      if (this.configuration.nodesIsEmpty()) {\n        var response = await this.retrieveNodes();\n\n        if (response instanceof Error == true) {\n          throw response;\n        }else {\n          // Save the nodes to the configuration.\n          this.configuration.nodes = response;\n        }\n      }\n      \n      this.configuration.nodes.forEach(node => {\n        if (node.isEqual(netID, network)) {\n          nodes.push(node);\n        }\n      });\n\n      if (nodes.length <= 0) {\n        return null\n      }\n\n      return nodes[Math.floor(Math.random() * nodes.length)];\n    } catch (error) {\n      return null;\n    }\n  }\n  /**\n   *\n   * Send a report\n   * @param {Report} report - Report instance with the information.\n   * @param {callback} callback - callback handler.\n   * @returns {String} - A String with the response.\n   * @memberof Pocket\n   */\n  async sendReport(report, callback) {\n    try {\n      // Check for report\n      if (report == null) {\n        throw new Error(\"Report is null\");\n      }\n      // Verify all report properties are set\n      if (!report.isValid()) {\n        throw new Error(\"One or more Report properties are empty.\");\n      }\n      // Send Report\n      var response = await report.send();\n      // Response\n      if (response instanceof Error == false) {\n        if (callback) {\n          callback(null, response);\n          return;\n        } else {\n          return response;\n        }\n      } else {\n        if (callback) {\n          callback(response);\n          return;\n        } else {\n          return response;\n        }\n      }\n    } catch (error) {\n      if (callback) {\n        callback(error);\n        return;\n      } else {\n        return error;\n      }\n    }\n  }\n  /**\n   *\n   * Send an already created Relay\n   * @param {Relay} relay - Relay instance with the information.\n   * @param {callback} callback - callback handler.\n   * @returns {String} - A String with the response.\n   * @memberof Pocket\n   */\n  async sendRelay(relay, callback) {\n    try {\n      // Check for relay\n      if (relay == null || relay.data == null) {\n        if (callback) {\n          callback(new Error(\"Relay is null or data field is missing\"));\n          return;\n        } else {\n          return new Error(\"Relay is null or data field is missing\");\n        }\n      }\n      // Verify all relay properties are set\n      if (!relay.isValid()) {\n        if (callback) {\n          callback(new Error(\"Relay is missing a property, please verify all properties.\"));\n          return;\n        } else {\n          return new Error(\"Relay is missing a property, please verify all properties.\");\n        }\n      }\n\n      // Filter nodes for specified blockchain\n      var node = await this.getNode(relay.netID,\n        relay.blockchain);\n\n      if (node == null) {\n        if (callback) {\n          callback(new Error(\"Node is empty.\"));\n          return;\n        } else {\n          return new Error(\"Node is empty.\");\n        }\n      }\n\n      // Send relay\n      var response = await node.sendRelay(relay);\n      // Response\n      if (response instanceof Error == false) {\n        if (callback) {\n          callback(null, response);\n          return;\n        } else {\n          return response;\n        }\n      } else {\n        if (callback) {\n          callback(response);\n          return;\n        } else {\n          return response;\n        }\n      }\n\n    } catch (error) {\n      if (callback) {\n        callback(new Error(\"Failed to send relay with error: \" + error));\n        return;\n      } else {\n        return new Error(\"Failed to send relay with error: \" + error);\n      }\n    }\n\n  }\n  /**\n   *\n   * Retrieve a list of service nodes from the Node Dispatcher\n   * @param {callback} callback\n   * @returns {Node} - A list of Nodes.\n   * @memberof Pocket\n   */\n  async retrieveNodes(callback) {\n    try {\n      var dispatch = this.getDispatch();\n      var nodes = await dispatch.retrieveServiceNodes();\n      \n      if (nodes instanceof Error == false && nodes.length != 0) {\n        // Save the nodes to the configuration.\n        this.configuration.nodes = nodes;\n        // Return a list of nodes\n        if (callback) {\n          callback(null, nodes);\n          return;\n        } else {\n          return nodes;\n        }\n      } else {\n        // Returns an Error;\n        if (callback) {\n          callback(new Error(\"Failed to retrieve a list of nodes.\"), null);\n          return;\n        } else {\n          return new Error(\"Failed to retrieve a list of nodes.\");\n        }\n      }\n\n    } catch (error) {\n      if (callback) {\n        callback(new Error(\"Failed to retrieve a list of nodes with error: \"+error), null);\n        return;\n      } else {\n        return new Error(\"Failed to retrieve a list of nodes with error: \"+error);\n      }\n    }\n  }\n\n}\n\nmodule.exports = Pocket;\n};"],
"names":["shadow$provide","global","require","module","exports","Models","Blockchain","Dispatch","Relay","Report","Configuration","constructor","devID","blockchains","maxNodes","requestTimeOut","nodes","dispatch","nodesIsEmpty","length","Pocket","opts","networkName","netIDs","Error","Array","isArray","forEach","element","blockchain","push","toJSON","configuration","createRelay","netID","data","JSON","stringify","createReport","ip","message","getDispatch","getNode","network","response","retrieveNodes","node","isEqual","Math","floor","random","error","sendReport","report","callback","isValid","send","sendRelay","relay","retrieveServiceNodes"]
}
