{
"version":3,
"file":"module$node_modules$pocket_js_core$src$models$node.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAe,kDAAf,CAAuE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAC/G,MAAMC,MAAQH,OAAA,CAAQ,iCAAR,CAAd,CACMI,UAAYJ,OAAA,CAAQ,wDAAR,CASlB,MAAMK,KAAN,CAQIC,WAAW,CAACC,OAAD,CAAUC,KAAV,CAAiBC,MAAjB,CAAyB,CAChC,IAAA,CAAKF,OAAL,CAAeA,OACf,KAAA,CAAKC,KAAL,CAAaA,KACTE,QAAAA,CAAYD,MAAA,CAAOE,KAAP,CAAa,GAAb,CAChB,KAAA,CAAKC,EAAL,CAAUF,OAAA,CAAU,CAAV,CACV,KAAA,CAAKG,IAAL,CAAYH,OAAA,CAAU,CAAV,CACRD,OAAA,CAAOK,QAAP,CAtBiBC,UAsBjB,CAAJ,EAA6CN,MAAA,CAAOK,QAAP,CArBzBE,SAqByB,CAA7C,CACI,IADJ,CACSP,MADT,CACkBA,MADlB,CAIQ,IAJR,CAIaA,MAJb,CAGsB,KAAlB,GAAI,IAAJ,CAASI,IAAT,EAAyC,GAAzC,GAA2B,IAA3B,CAAgCA,IAAhC;AAzBiBE,UAyBjB,CACyCN,MADzC,CAxBgBO,SAwBhB,CAGwCP,MAZZ,CAuBpCQ,OAAO,EAAG,CACN,IAAKC,IAAIA,QAAT,GAAqB,KAArB,CACI,GAAI,CAAC,IAAA,CAAKC,cAAL,CAAoBD,QAApB,CAAL,EAAwD,EAAxD,EAAsC,IAAA,CAAKA,QAAL,CAAtC,CACI,MAAO,CAAA,CAGf,OAAO,CAAA,CAND,CAiBVE,OAAO,CAACZ,KAAD,CAAQD,OAAR,CAAiB,CACpB,MAAI,KAAJ,CAASC,KAAT,EAAkBA,KAAA,CAAMa,QAAN,EAAlB,EAAsC,IAAtC,CAA2Cd,OAA3C,EAAsDA,OAAA,CAAQc,QAAR,EAAtD,CACW,CAAA,CADX,CAGO,CAAA,CAJa,CAelBC,eAAS,CAACC,KAAD,CAAQC,QAAR,CAAkB,CAC7B,GAAI,CASA,IAAIC,SAAW,MAROtB,KAAAuB,CAAMC,MAAND,CAAa,CAC/BE,QAAS,IAATA,CAAcnB,MADiB,CAE/BoB,QAASN,KAATM,CAAeC,aAAfD,CAA6BE,cAFE,CAG/BC,QAAS,CACL,eAAgB,kBADX,CAHsB,CAAbN,CAQD,CAAcO,IAAd,CAAmB7B,SAAnB,CAA6B8B,SAA7B,CACjBX,KAAA,CAAMY,MAAN,EADiB,CAIrB,IAAuB,GAAvB,EAAIV,QAAJ,CAAaW,MAAb,EAA+C,IAA/C,EAA8BX,QAA9B,CAAuCY,IAAvC,CAAqD,CACjD,IAAIC;AAASb,QAATa,CAAkBD,IAEtB,IAAIb,QAAJ,CACIA,QAAA,CAASc,MAAT,CAAiB,IAAjB,CADJ,KAII,OAAOA,OAPsC,CAArD,IAUI,IAAId,QAAJ,CACIA,QAAA,CAAS,IAAT,CAAmBe,KAAJ,CAAU,mCAAV,CAAgDd,QAAhD,CAAyDY,IAAzD,CAAf,CADJ,KAII,OAAWE,MAAJ,CAAU,mCAAV,CAAgDd,QAAhD,CAAyDY,IAAzD,CA3Bf,CA8BF,MAAOG,KAAP,CAAc,CACZ,GAAIhB,QAAJ,CACIA,QAAA,CAAS,IAAT,CAAmBe,KAAJ,CAAU,mCAAV,CAAgDC,KAAhD,CAAf,CADJ,KAII,OAAWD,MAAJ,CAAU,mCAAV,CAAgDC,KAAhD,CALC,CA/Ba,CA/DrC,CAyGAvC,MAAA,CAAOC,OAAP,CAAiB,CACbG,IADa,CApH8F;",
"sources":["node_modules/pocket-js-core/src/models/node.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pocket_js_core$src$models$node\"] = function(global,require,module,exports) {\nconst axios = require('axios');\nconst constants = require(\"../utils/constants.js\");\nconst httpsRequestProtocol = \"https://\";\nconst httpRequestProtocol = \"http://\";\n// Dispatch\n/**\n *\n *\n * @class Node\n */\nclass Node {\n    /**\n     * Creates an instance of Node.\n     * @param {String} network - Network name.\n     * @param {String} netID - Network Identifier.\n     * @param {String} ipPort - Ip and port string (\"10.0.0.1:80\")\n     * @memberof Node\n     */\n    constructor(network, netID, ipPort) {\n        this.network = network;\n        this.netID = netID;\n        var ipPortArr = ipPort.split(\":\");\n        this.ip = ipPortArr[0];\n        this.port = ipPortArr[1];\n        if (ipPort.includes(httpsRequestProtocol) || ipPort.includes(httpRequestProtocol)) {\n            this.ipPort = ipPort;\n        } else {\n            if (this.port === \"443\" || this.port === 443) {\n                this.ipPort = httpsRequestProtocol + ipPort;\n            } else {\n                this.ipPort = httpRequestProtocol + ipPort;\n            }\n        }\n    }\n\n    /**\n     *\n     * Verify if all properties are valid\n     * @returns {boolean} - True or false.\n     * @memberof Node\n     */\n    isValid() {\n        for (var property in this) {\n            if (!this.hasOwnProperty(property) || this[property] == \"\") {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     *\n     * Checks if params are equal to stored properties\n     * @param {String} netID - Network Identifier.\n     * @param {String} network - Network name.\n     * @returns {boolean} - True or false.\n     * @memberof Node\n     */\n    isEqual(netID, network) {\n        if (this.netID == netID.toString() && this.network == network.toString()) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     *\n     * Sends a relay to a service node\n     * @param {Relay} relay - Relay object with the information.\n     * @param {callback} callback - callback handler.\n     * @returns {Object} - Object with the response.\n     * @memberof Node\n     */\n    async sendRelay(relay, callback) {\n        try {\n            const axiosInstance = axios.create({\n                baseURL: this.ipPort,\n                timeout: relay.configuration.requestTimeOut,\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            });\n\n            var response = await axiosInstance.post(constants.relayPath,\n                relay.toJSON()\n            );\n\n            if (response.status == 200 && response.data != null) {\n                var result = response.data;\n\n                if (callback) {\n                    callback(result, null);\n                    return;\n                } else {\n                    return result;\n                }\n            } else {\n                if (callback) {\n                    callback(null, new Error(\"Failed to send relay with error: \" + response.data));\n                    return;\n                } else {\n                    return new Error(\"Failed to send relay with error: \" + response.data);\n                }\n            }\n        } catch (error) {\n            if (callback) {\n                callback(null, new Error(\"Failed to send relay with error: \" + error));\n                return;\n            } else {\n                return new Error(\"Failed to send relay with error: \" + error);\n            }\n        }\n    }\n}\n\nmodule.exports = {\n    Node\n}\n};"],
"names":["shadow$provide","global","require","module","exports","axios","constants","Node","constructor","network","netID","ipPort","ipPortArr","split","ip","port","includes","httpsRequestProtocol","httpRequestProtocol","isValid","property","hasOwnProperty","isEqual","toString","sendRelay","relay","callback","response","axiosInstance","create","baseURL","timeout","configuration","requestTimeOut","headers","post","relayPath","toJSON","status","data","result","Error","error"]
}
