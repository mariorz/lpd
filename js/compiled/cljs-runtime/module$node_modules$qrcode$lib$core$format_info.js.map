{
"version":3,
"file":"module$node_modules$qrcode$lib$core$format_info.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,CAAe,+CAAf,CAAoE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAC5G,IAAIC,MAAQH,OAAA,CAAQ,2CAAR,CAAZ,CAIII,QAAUD,KAAA,CAAME,WAAN,CAFJC,IAEI,CAYdJ,QAAA,CAAQK,cAAR,CAAyBC,QAAwB,CAACC,oBAAD,CAAuBC,IAAvB,CAA6B,CACxEC,oBAAAA,CAASF,oBAATE,CAA8BC,GAA9BD,EAAqC,CAArCA,CAA0CD,IAG9C,KAFIG,IAEJ,CAFQF,oBAER,EAFgB,EAEhB,CAAyC,CAAzC,EAAOR,KAAA,CAAME,WAAN,CAAkBQ,IAAlB,CAAP,CAA8BT,OAA9B,CAAA,CACES,IAAA,EAnBMP,IAmBN,EAAcH,KAAA,CAAME,WAAN,CAAkBQ,IAAlB,CAAd,CAAqCT,OAMvC,QAASO,oBAAT,EAAiB,EAAjB,CAAuBE,IAAvB,EAxBaC,KAa+D,CAjB8B;",
"sources":["node_modules/qrcode/lib/core/format-info.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$qrcode$lib$core$format_info\"] = function(global,require,module,exports) {\nvar Utils = require('./utils')\n\nvar G15 = (1 << 10) | (1 << 8) | (1 << 5) | (1 << 4) | (1 << 2) | (1 << 1) | (1 << 0)\nvar G15_MASK = (1 << 14) | (1 << 12) | (1 << 10) | (1 << 4) | (1 << 1)\nvar G15_BCH = Utils.getBCHDigit(G15)\n\n/**\n * Returns format information with relative error correction bits\n *\n * The format information is a 15-bit sequence containing 5 data bits,\n * with 10 error correction bits calculated using the (15, 5) BCH code.\n *\n * @param  {Number} errorCorrectionLevel Error correction level\n * @param  {Number} mask                 Mask pattern\n * @return {Number}                      Encoded format information bits\n */\nexports.getEncodedBits = function getEncodedBits (errorCorrectionLevel, mask) {\n  var data = ((errorCorrectionLevel.bit << 3) | mask)\n  var d = data << 10\n\n  while (Utils.getBCHDigit(d) - G15_BCH >= 0) {\n    d ^= (G15 << (Utils.getBCHDigit(d) - G15_BCH))\n  }\n\n  // xor final data with mask pattern in order to ensure that\n  // no combination of Error Correction Level and data mask pattern\n  // will result in an all-zero data string\n  return ((data << 10) | d) ^ G15_MASK\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","Utils","G15_BCH","getBCHDigit","G15","getEncodedBits","exports.getEncodedBits","errorCorrectionLevel","mask","data","bit","d","G15_MASK"]
}
