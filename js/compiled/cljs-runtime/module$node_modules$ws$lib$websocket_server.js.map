{
"version":3,
"file":"module$node_modules$ws$lib$websocket_server.js",
"lineCount":11,
"mappings":"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",
"sources":["node_modules/ws/lib/websocket-server.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$ws$lib$websocket_server\"] = function(global,require,module,exports) {\nvar Buffer = require('buffer').Buffer;\n'use strict';\n\nconst EventEmitter = require('events');\nconst crypto = require('crypto');\nconst http = require('http');\nconst url = require('url');\n\nconst PerMessageDeflate = require('./permessage-deflate');\nconst extension = require('./extension');\nconst constants = require('./constants');\nconst WebSocket = require('./websocket');\n\n/**\n * Class representing a WebSocket server.\n *\n * @extends EventEmitter\n */\nclass WebSocketServer extends EventEmitter {\n  /**\n   * Create a `WebSocketServer` instance.\n   *\n   * @param {Object} options Configuration options\n   * @param {String} options.host The hostname where to bind the server\n   * @param {Number} options.port The port where to bind the server\n   * @param {http.Server} options.server A pre-created HTTP/S server to use\n   * @param {Function} options.verifyClient An hook to reject connections\n   * @param {Function} options.handleProtocols An hook to handle protocols\n   * @param {String} options.path Accept only connections matching this path\n   * @param {Boolean} options.noServer Enable no server mode\n   * @param {Boolean} options.clientTracking Specifies whether or not to track clients\n   * @param {(Boolean|Object)} options.perMessageDeflate Enable/disable permessage-deflate\n   * @param {Number} options.maxPayload The maximum allowed message size\n   * @param {Function} callback A listener for the `listening` event\n   */\n  constructor (options, callback) {\n    super();\n\n    options = Object.assign({\n      maxPayload: 100 * 1024 * 1024,\n      perMessageDeflate: false,\n      handleProtocols: null,\n      clientTracking: true,\n      verifyClient: null,\n      noServer: false,\n      backlog: null, // use default (511 as implemented in net.js)\n      server: null,\n      host: null,\n      path: null,\n      port: null\n    }, options);\n\n    if (options.port == null && !options.server && !options.noServer) {\n      throw new TypeError(\n        'One of the \"port\", \"server\", or \"noServer\" options must be specified'\n      );\n    }\n\n    if (options.port != null) {\n      this._server = http.createServer((req, res) => {\n        const body = http.STATUS_CODES[426];\n\n        res.writeHead(426, {\n          'Content-Length': body.length,\n          'Content-Type': 'text/plain'\n        });\n        res.end(body);\n      });\n      this._server.listen(options.port, options.host, options.backlog, callback);\n    } else if (options.server) {\n      this._server = options.server;\n    }\n\n    if (this._server) {\n      this._removeListeners = addListeners(this._server, {\n        listening: this.emit.bind(this, 'listening'),\n        error: this.emit.bind(this, 'error'),\n        upgrade: (req, socket, head) => {\n          this.handleUpgrade(req, socket, head, (ws) => {\n            this.emit('connection', ws, req);\n          });\n        }\n      });\n    }\n\n    if (options.perMessageDeflate === true) options.perMessageDeflate = {};\n    if (options.clientTracking) this.clients = new Set();\n    this.options = options;\n  }\n\n  /**\n   * Returns the bound address, the address family name, and port of the server\n   * as reported by the operating system if listening on an IP socket.\n   * If the server is listening on a pipe or UNIX domain socket, the name is\n   * returned as a string.\n   *\n   * @return {(Object|String|null)} The address of the server\n   * @public\n   */\n  address () {\n    if (this.options.noServer) {\n      throw new Error('The server is operating in \"noServer\" mode');\n    }\n\n    if (!this._server) return null;\n    return this._server.address();\n  }\n\n  /**\n   * Close the server.\n   *\n   * @param {Function} cb Callback\n   * @public\n   */\n  close (cb) {\n    //\n    // Terminate all associated clients.\n    //\n    if (this.clients) {\n      for (const client of this.clients) client.terminate();\n    }\n\n    const server = this._server;\n\n    if (server) {\n      this._removeListeners();\n      this._removeListeners = this._server = null;\n\n      //\n      // Close the http server if it was internally created.\n      //\n      if (this.options.port != null) return server.close(cb);\n    }\n\n    if (cb) cb();\n  }\n\n  /**\n   * See if a given request should be handled by this server instance.\n   *\n   * @param {http.IncomingMessage} req Request object to inspect\n   * @return {Boolean} `true` if the request is valid, else `false`\n   * @public\n   */\n  shouldHandle (req) {\n    if (this.options.path && url.parse(req.url).pathname !== this.options.path) {\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Handle a HTTP Upgrade request.\n   *\n   * @param {http.IncomingMessage} req The request object\n   * @param {net.Socket} socket The network socket between the server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Function} cb Callback\n   * @public\n   */\n  handleUpgrade (req, socket, head, cb) {\n    socket.on('error', socketOnError);\n\n    const version = +req.headers['sec-websocket-version'];\n    const extensions = {};\n\n    if (\n      req.method !== 'GET' || req.headers.upgrade.toLowerCase() !== 'websocket' ||\n      !req.headers['sec-websocket-key'] || (version !== 8 && version !== 13) ||\n      !this.shouldHandle(req)\n    ) {\n      return abortHandshake(socket, 400);\n    }\n\n    if (this.options.perMessageDeflate) {\n      const perMessageDeflate = new PerMessageDeflate(\n        this.options.perMessageDeflate,\n        true,\n        this.options.maxPayload\n      );\n\n      try {\n        const offers = extension.parse(\n          req.headers['sec-websocket-extensions']\n        );\n\n        if (offers[PerMessageDeflate.extensionName]) {\n          perMessageDeflate.accept(offers[PerMessageDeflate.extensionName]);\n          extensions[PerMessageDeflate.extensionName] = perMessageDeflate;\n        }\n      } catch (err) {\n        return abortHandshake(socket, 400);\n      }\n    }\n\n    //\n    // Optionally call external client verification handler.\n    //\n    if (this.options.verifyClient) {\n      const info = {\n        origin: req.headers[`${version === 8 ? 'sec-websocket-origin' : 'origin'}`],\n        secure: !!(req.connection.authorized || req.connection.encrypted),\n        req\n      };\n\n      if (this.options.verifyClient.length === 2) {\n        this.options.verifyClient(info, (verified, code, message, headers) => {\n          if (!verified) {\n            return abortHandshake(socket, code || 401, message, headers);\n          }\n\n          this.completeUpgrade(extensions, req, socket, head, cb);\n        });\n        return;\n      }\n\n      if (!this.options.verifyClient(info)) return abortHandshake(socket, 401);\n    }\n\n    this.completeUpgrade(extensions, req, socket, head, cb);\n  }\n\n  /**\n   * Upgrade the connection to WebSocket.\n   *\n   * @param {Object} extensions The accepted extensions\n   * @param {http.IncomingMessage} req The request object\n   * @param {net.Socket} socket The network socket between the server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Function} cb Callback\n   * @private\n   */\n  completeUpgrade (extensions, req, socket, head, cb) {\n    //\n    // Destroy the socket if the client has already sent a FIN packet.\n    //\n    if (!socket.readable || !socket.writable) return socket.destroy();\n\n    const key = crypto.createHash('sha1')\n      .update(req.headers['sec-websocket-key'] + constants.GUID, 'binary')\n      .digest('base64');\n\n    const headers = [\n      'HTTP/1.1 101 Switching Protocols',\n      'Upgrade: websocket',\n      'Connection: Upgrade',\n      `Sec-WebSocket-Accept: ${key}`\n    ];\n\n    const ws = new WebSocket(null);\n    var protocol = req.headers['sec-websocket-protocol'];\n\n    if (protocol) {\n      protocol = protocol.trim().split(/ *, */);\n\n      //\n      // Optionally call external protocol selection handler.\n      //\n      if (this.options.handleProtocols) {\n        protocol = this.options.handleProtocols(protocol, req);\n      } else {\n        protocol = protocol[0];\n      }\n\n      if (protocol) {\n        headers.push(`Sec-WebSocket-Protocol: ${protocol}`);\n        ws.protocol = protocol;\n      }\n    }\n\n    if (extensions[PerMessageDeflate.extensionName]) {\n      const params = extensions[PerMessageDeflate.extensionName].params;\n      const value = extension.format({\n        [PerMessageDeflate.extensionName]: [params]\n      });\n      headers.push(`Sec-WebSocket-Extensions: ${value}`);\n      ws._extensions = extensions;\n    }\n\n    //\n    // Allow external modification/inspection of handshake headers.\n    //\n    this.emit('headers', headers, req);\n\n    socket.write(headers.concat('\\r\\n').join('\\r\\n'));\n    socket.removeListener('error', socketOnError);\n\n    ws.setSocket(socket, head, this.options.maxPayload);\n\n    if (this.clients) {\n      this.clients.add(ws);\n      ws.on('close', () => this.clients.delete(ws));\n    }\n\n    cb(ws);\n  }\n}\n\nmodule.exports = WebSocketServer;\n\n/**\n * Add event listeners on an `EventEmitter` using a map of <event, listener>\n * pairs.\n *\n * @param {EventEmitter} server The event emitter\n * @param {Object.<String, Function>} map The listeners to add\n * @return {Function} A function that will remove the added listeners when called\n * @private\n */\nfunction addListeners (server, map) {\n  for (const event of Object.keys(map)) server.on(event, map[event]);\n\n  return function removeListeners () {\n    for (const event of Object.keys(map)) {\n      server.removeListener(event, map[event]);\n    }\n  };\n}\n\n/**\n * Handle premature socket errors.\n *\n * @private\n */\nfunction socketOnError () {\n  this.destroy();\n}\n\n/**\n * Close the connection when preconditions are not fulfilled.\n *\n * @param {net.Socket} socket The socket of the upgrade request\n * @param {Number} code The HTTP response status code\n * @param {String} [message] The HTTP response body\n * @param {Object} [headers] Additional HTTP response headers\n * @private\n */\nfunction abortHandshake (socket, code, message, headers) {\n  if (socket.writable) {\n    message = message || http.STATUS_CODES[code];\n    headers = Object.assign({\n      'Connection': 'close',\n      'Content-type': 'text/html',\n      'Content-Length': Buffer.byteLength(message)\n    }, headers);\n\n    socket.write(\n      `HTTP/1.1 ${code} ${http.STATUS_CODES[code]}\\r\\n` +\n      Object.keys(headers).map(h => `${h}: ${headers[h]}`).join('\\r\\n') +\n      '\\r\\n\\r\\n' +\n      message\n    );\n  }\n\n  socket.removeListener('error', socketOnError);\n  socket.destroy();\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","addListeners","server","map","event","Object","keys","on","removeListeners","removeListener","socketOnError","destroy","abortHandshake","socket","code","message","headers","writable","http","STATUS_CODES","assign","Buffer","byteLength","write","h","join","EventEmitter","crypto","url","PerMessageDeflate","extension","constants","WebSocket","WebSocketServer","constructor","options","callback","maxPayload","perMessageDeflate","handleProtocols","clientTracking","verifyClient","noServer","backlog","host","path","port","TypeError","_server","createServer","req","res","body","writeHead","length","end","listen","_removeListeners","listening","emit","bind","error","upgrade","head","handleUpgrade","ws","clients","Set","address","Error","close","cb","client","terminate","shouldHandle","parse","pathname","version","extensions","method","toLowerCase","offers","extensionName","accept","err","info","origin","secure","authorized","connection","encrypted","verified","completeUpgrade","readable","createHash","update","GUID","key","digest","protocol","trim","split","push","value","format","params","_extensions","concat","setSocket","add","delete"]
}
