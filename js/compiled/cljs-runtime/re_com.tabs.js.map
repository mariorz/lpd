{"version":3,"sources":["re_com/tabs.cljs"],"mappings":";AAmmGK,AACAC,AACAC,AACAA,AACAC,AACAC,AACAC,AACA,AAACC,AAAOV,AACRW,AACAA;AAE3G,AAAA,AAAA,AAAAC,AAAMM;AAAN,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAK,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAAG,AAAMD;AAAN,AAAA,AAAAE,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAAA,AAGYiB;AAHZ,AAAAb,AAAAJ,AAAA,AACwBU;AADxB,AAAAN,AAAAJ,AAAA,AACaQ;AADb,AAAAJ,AAAAJ,AAAA,AAC6De;AAD7D,AAAAX,AAAAJ,AAAA,AAAA,AACwCY;AADxC,AAAAR,AAAAJ,AAAA,AACmBS;AADnB,AAAAL,AAAAJ,AAAA,AACkEgB;AADlE,AAAAZ,AAAAJ,AAAA,AAAA,AACkCW;AADlC,AAAAP,AAAAJ,AAAA,AACuDc;AADvD,AAAAV,AAAAJ,AAAA,AACiDa;AADjD,AAIE,AAAAK,AACE,AAAA,AAAAC,AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAqBtC,AAA0BkC;AADjD,AAAA,AAAAC;AAAAA;;AAEE,AAAMI,AAAS,AAACC,AAAef;AACzBC,AAAS,AAACc,AAAed;AACzBe,AAAS,AAAQ,AAACE,AAAU,AAAA,AAAAC,AAACC;AAAD,AAAS,AAACC,AAAEP,AAAQ,AAAAK,AAAAA,AAAChB,AAAAA,AAAAA;AAAxC,AAAA,AAAA,AAAA,AAAAc,AAAA,AAAA,AAAA,AAAA,AAAA,AAAkDhB;AAFjE,AAAA,AAAA,AAIG,AAAA,AAAA,AAAA,AAACqB,AAAc,AAAA,AAAsCjB,AACtC,AAACiB,AAAM,AAAA,AAACC,AACD,AAAA,AAAA,AAAA,AAACC,AAAOhB,AACvB,AAACiB,AAAOhB,AACRF,AACP,AAAAmB,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAD,AAAAA;;AAAA,AAAA,AAAAE,AAAA,AAAA9B,AAAA4B;AAAA,AAAA,AAAAE;AAAA,AAAA,AAAAF,AAAAE;AAAA,AAAA,AAAA,AAAAC,AAAAH;AAAA,AAAAI,AAy4E4C,AAAAyF,AAAA7F;AAz4E5CK,AAAA,AAAAC,AAAAF;AAAAG,AAAA,AAAAC,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAI,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAJ;AAAA,AAAA,AAAAK,AAAAN,AAAAK,AAAMU;AAAN,AAAA,AAAA,AAAAR,AAAAJ,AACE,AAAMa,AAAU,AAAC5C,AAAAA,AAAAA,AAAO2C,AAAAA;AAClBE,AAAU,AAAC5C,AAAAA,AAAAA,AAAU0C,AAAAA;AACrBG,AAAU,AAAC5B,AAAE0B,AAAGjC;AAFtB,AAAA,AAAA,AAAA,AAAA,AAIG,AAAA,AAAA,AAAA,AAAA,AAACQ,AACS,AAAK,AAAA,AAAA,AAAI2B,AAA4B,AAAA,AAAA,AAAA,AAACzB,AAAOhB,AAC7C,AAAA,AAAA,AAAA,AAACgB,AAAOhB,AACR,AAAKuC,AACb,AAAA,AAAA,AAAA,AAACvB,AAAOhB,AAET,AAAA,AAAA,AAAA,AAAA,AAACc,AACY,AAAA,AAAsB,AAAA,AAAA,AAAA,AAACE,AAAOhB,AAC9B,AAAA,AAAA,AAAA,AAACc,AACMhB,AACP,AAAA,AAAMJ,AAAU;AAAAgD;AAAA,AAAY,AAAChD,AAAAA,AAAAA,AAAU6C,AAAAA;;AAAvB;;AAAhB,AACX,AAAA,AAAA,AAAA,AAACvB,AAAOhB,AACVwC;;;AAjBN,AAAA,AAAAZ,AAAA;;;;AAAA;;;;;AAAA,AAAAG,AAAA,AAAAC,AAAAN,AAAA,AAAAO,AAAA,AAAAC,AAAAf;;AAAA,AAAAY,AAAA,AAAAC,AAAAN,AAAA;;;AAAA,AAAA,AAAAS,AAAAhB,AAAMmB;AAAN,AAAA,AAAAF,AACE,AAAMG,AAAU,AAAC5C,AAAAA,AAAAA,AAAO2C,AAAAA;AAClBE,AAAU,AAAC5C,AAAAA,AAAAA,AAAU0C,AAAAA;AACrBG,AAAU,AAAC5B,AAAE0B,AAAGjC;AAFtB,AAAA,AAAA,AAAA,AAAA,AAIG,AAAA,AAAA,AAAA,AAAA,AAACQ,AACS,AAAK,AAAA,AAAA,AAAI2B,AAA4B,AAAA,AAAA,AAAA,AAACzB,AAAOhB,AAC7C,AAAA,AAAA,AAAA,AAACgB,AAAOhB,AACR,AAAKuC,AACb,AAAA,AAAA,AAAA,AAACvB,AAAOhB,AAET,AAAA,AAAA,AAAA,AAAA,AAACc,AACY,AAAA,AAAsB,AAAA,AAAA,AAAA,AAACE,AAAOhB,AAC9B,AAAA,AAAA,AAAA,AAACc,AACMhB,AACP,AAAA,AAAMJ,AAAU;AAAAgD;AAAA,AAAY,AAAChD,AAAAA,AAAAA,AAAU6C,AAAAA;;AAAvB;;AAAhB,AACX,AAAA,AAAA,AAAA,AAACvB,AAAOhB,AACVwC;AAjBN,AAAAP,AAAA,AAAAI,AAAAlB;;;AAAA;;;;AAAA,AAAA;;AAAA,AAAA,AAAAD,AAAQzB;;;;;AAff,AAAA,AAAA,AAAMX;;AAAN;AAAA,AAAA,AAAA,AAAAO,AAAMP;AAAN,AAAA,AAAAQ,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAC,AAAAF;;;AAAA,AAuCA,AAAKsD,AACH,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAMhF;AAOR,AAAKiF,AACH,AAAA,AAAA,AAAMjF,AACJ,AAAI,AAAA,AAACE,AAAUH,AAA4BI;AAE/C,AAAK+E,AACH,AAAA,AAAMlF,AAEF,AAAA,AAAAmF,AAACC,AACD,AAACC,AACD,AAACC;AAFD,AAAS,AAAA,AAACpC,AAAS,AAAA,AAAAiC;AAFvB,AAEkC/E,AAE9B,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAC8GG,AACAgF,AAA0GC,AAE1G,AAAC7E,AAAOsE;AAE5H,AAAA,AAAA,AAAApE,AAAO4E;AAAP,AAAA,AAAA3E,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA2E,AAAAxE;;;AAAA,AAAA,AAAA,AAAA,AAAAyE,AAAOD;AAAP,AAAA,AAAAE,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAArE,AAAA,AAAAqE,AAAA,AAAA,AAAA,AAAA,AAAApE,AAAAC,AAAAmE,AAAAA;AAAAA,AAC6HrD;AAD7H,AAAAb,AAAAkE,AAAA,AAC8GK;AAD9G,AAAAvE,AAAAkE,AAAA,AACwB5D;AADxB,AAAAN,AAAAkE,AAAA,AACa9D;AADb,AAAAJ,AAAAkE,AAAA,AACmGvD;AADnG,AAAAX,AAAAkE,AAAA,AACwC1D;AADxC,AAAAR,AAAAkE,AAAA,AACmB7D;AADnB,AAAAL,AAAAkE,AAAA,AACwGtD;AADxG,AAAAZ,AAAAkE,AAAA,AACiDE;AADjD,AAAApE,AAAAkE,AAAA,AACkC3D;AADlC,AAAAP,AAAAkE,AAAA,AAC6FxD;AAD7F,AAAAV,AAAAkE,AAAA,AACuFzD;AADvF,AAAAT,AAAAkE,AAAA,AAC6EI;AAD7E,AAAAtE,AAAAkE,AAAA,AAC4DG;AAD5D,AAEE,AAAMG,AAAQ,AAAA,AAACC;AAAf,AACE;AAAAC;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA9E,AAAA,AAAA8E,AAAA,AAAA,AAAA,AAAA,AAAA7E,AAAAC,AAAA4E,AAAAA;AAAA,AAAA3E,AAAA2E,AAAA,AAAevE;AAAf,AAAAJ,AAAA2E,AAAA,AAAqBtE;AAArB,AACE,AAAMa,AAAS,AAACC,AAAef;AACzBC,AAAS,AAACc,AAAed;AACzBe,AAAS,AAAQ,AAAAN,AAAI,AAAC8D,AAAIL;AAAT,AAAA,AAAAzD;AAAAA;;AAAoB,AAACQ,AAAU,AAAA,AAAAuD,AAACrD;AAAD,AAAS,AAACC,AAAEP,AAAQ,AAAA2D,AAAAA,AAACtE,AAAAA,AAAAA;AAAUF;;AAAtE,AAAA,AAAA,AAAA,AAAAgB,AAAA,AAAA,AAAA,AAAA,AAAA;AAFf,AAGE,AAAA,AAAA,AAACyD,AACM,AAAA,AAAA,AAAA,AAACpD,AACS,AAAA,AAAA,AAA0B,AAAA,AAAA,AAAI4C,AAAmC7D,AACjE,AAACiB,AAAM,AAAA,AAACC,AACD,AAAA,AAAA,AAAA,AAACC,AAAOhB,AACvB,AAACiB,AAAOhB,AACRF,AACR,AAAAmB,AAAA,AAAAiD;AAAA,AAAA,AAAA/C,AAAA,AAAA;AAAA,AAAA,AAAA+C,AAAAA;;AAAA,AAAA,AAAA9C,AAAA,AAAA9B,AAAA4E;AAAA,AAAA,AAAA9C;AAAA,AAAA,AAAA8C,AAAA9C;AAAA,AAAA,AAAA,AAAAC,AAAA6C;AAAA,AAAA5C,AA40E0C,AAAAyF,AAAA7C;AA50E1C3C,AAAA,AAAAC,AAAAF;AAAA6C,AAAA,AAAAzC,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAA6C,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAA7C;AAAA,AAAA,AAAAK,AAAAN,AAAA8C,AAAM/B;AAAN,AAAA,AAAA,AAAAR,AAAAsC,AACE,AAAM7B,AAAU,AAAC5C,AAAAA,AAAAA,AAAM2C,AAAAA;AACjBE,AAAU,AAAC5C,AAAAA,AAAAA,AAAS0C,AAAAA;AACpBiC,AAAU,AAAA,AAAA,AAAMf,AAAW,AAACA,AAAAA,AAAAA,AAAWlB,AAAAA;AACvCG,AAAU,AAAC5B,AAAE0B,AAAGjC;AAHtB,AAAA,AAIMkE,AACY,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAC1D,AAEY,AAAKyB,AACL,AAAA,AAAA,AAAwB,AAAA,AAAA,AAAIE,AAAoC,AAAA,AAAA,AAAA,AAACzB,AAAOhB,AACxEF,AACA,AAAA,AAAMJ,AAAU;AAAAgD;AAAA,AAAY,AAAChD,AAAAA,AAAAA,AAAU6C,AAAAA;;AAAvB;;AAAhB,AACX,AAAA,AAAA,AAAA,AAAMgC,AACY;AAAA7B;AAAA,AAAY,AAAC+B,AAAOb,AAAQrB;;AAA5B;;AADlB,AAEkB;AAAAG;AAAA,AAAY,AAAA,AAACiC,AAAMf;AAAPc;AAAA,AAAgB,AAAU,AAAAA,AAAC7D,AAAE0B;AAAb;;AAAA,AAAAmC;;;;;AAA5B;;AAFlB,AAGA,AAAA,AAAA,AAAA,AAAC1D,AAAOhB,AACVwC;AAflB,AAgBE,AAAI+B;AAAJ,AAAA,AAAA,AAAA,AACGK,AACU,AAAA,AAAAzE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACAoE,AACA,AAAArE,AAAIuD;AAAJ,AAAA,AAAAvD;AAAAA;;AAAA;;AAJb,AAKa,AAAA,AAAC2E;;AAAD,AAAgB,AAAA,AAAAC,AAACjE,AAAE0B,AAAIqB;;AALpC,AAAA,AAAA,AAAA,AAMaY,AACA,AAAA,AAAwB,AAAA,AAAA,AAAA,AAACxD,AAAOhB,AAChC,AAAA,AAAA,AAAA,AAACgB,AAAOhB,AACR,AAAA,AAAA,AAAA,AAACgB,AAAOhB;;AACnBwE;;;;AA3BN,AAAA,AAAAH,AAAA;;;;AAAA;;;;;AAAA,AAAAtC,AAAA,AAAAC,AAAAoC,AAAA,AAAAE,AAAA,AAAApC,AAAAiC;;AAAA,AAAApC,AAAA,AAAAC,AAAAoC,AAAA;;;AAAA,AAAA,AAAAjC,AAAAgC,AAAM7B;AAAN,AAAA,AAAAF,AACE,AAAMG,AAAU,AAAC5C,AAAAA,AAAAA,AAAM2C,AAAAA;AACjBE,AAAU,AAAC5C,AAAAA,AAAAA,AAAS0C,AAAAA;AACpBiC,AAAU,AAAA,AAAA,AAAMf,AAAW,AAACA,AAAAA,AAAAA,AAAWlB,AAAAA;AACvCG,AAAU,AAAC5B,AAAE0B,AAAGjC;AAHtB,AAAA,AAIMkE,AACY,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAC1D,AAEY,AAAKyB,AACL,AAAA,AAAA,AAAwB,AAAA,AAAA,AAAIE,AAAoC,AAAA,AAAA,AAAA,AAACzB,AAAOhB,AACxEF,AACA,AAAA,AAAMJ,AAAU;AAAAgD;AAAA,AAAY,AAAChD,AAAAA,AAAAA,AAAU6C,AAAAA;;AAAvB;;AAAhB,AACX,AAAA,AAAA,AAAA,AAAMgC,AACY;AAAA7B;AAAA,AAAY,AAAC+B,AAAOb,AAAQrB;;AAA5B;;AADlB,AAEkB;AAAAG;AAAA,AAAY,AAAA,AAAAgC,AAACC,AAAMf;AAAP,AAAgB,AAAU,AAAAc,AAAC7D,AAAE0B;AAAb;;AAAA,AAAAmC;;;;AAA5B;;AAFlB,AAGA,AAAA,AAAA,AAAA,AAAC1D,AAAOhB,AACVwC;AAflB,AAgBE,AAAI+B;AAAJ,AAAA,AAAA,AAAA,AACGK,AACU,AAAA,AAAAzE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACAoE,AACA,AAAArE,AAAIuD;AAAJ,AAAA,AAAAvD;AAAAA;;AAAA;;AAJb,AAKa,AAAA,AAAC2E;;AAAD,AAAgB,AAAA,AAAAC,AAACjE,AAAE0B,AAAIqB;;AALpC,AAAA,AAAA,AAAA,AAMaY,AACA,AAAA,AAAwB,AAAA,AAAA,AAAA,AAACxD,AAAOhB,AAChC,AAAA,AAAA,AAAA,AAACgB,AAAOhB,AACR,AAAA,AAAA,AAAA,AAACgB,AAAOhB;;AACnBwE;;AA3BN,AAAAF,AAAA,AAAAjC,AAAA8B;;;AAAA;;;;AAAA,AAAA;;AAAA,AAAA,AAAAjD,AAAQzB;;;;AAXbqE;;;;AAAAA;;AAAAA;;;AAAAA;AAAAA;;;;;;;;AAHJ,AAAA,AAAA,AAAOV;;AAAP;AAAA,AAAA,AAAA,AAAAG,AAAOH;AAAP,AAAA,AAAA9D,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAC,AAAAgE;;;AAAA,AA4CA,AAAA,AAAA,AAAA/E,AAAMuG;AAAN,AAAA,AAAAtG,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAsG,AAAAnG;;;AAAA,AAAA,AAAA,AAAA,AAAAoG,AAAMD;AAAN,AAAA,AAAAE,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAhG,AAAA,AAAAgG,AAAA,AAAA,AAAA,AAAA,AAAA/F,AAAAC,AAAA8F,AAAAA;AAAAA,AAGYhF;AAHZ,AAAAb,AAAA6F,AAAA,AACiHtB;AADjH,AAAAvE,AAAA6F,AAAA,AACwBvF;AADxB,AAAAN,AAAA6F,AAAA,AACazF;AADb,AAAAJ,AAAA6F,AAAA,AACyFlF;AADzF,AAAAX,AAAA6F,AAAA,AAAA,AACwCrF;AADxC,AAAAR,AAAA6F,AAAA,AACmBxF;AADnB,AAAAL,AAAA6F,AAAA,AAC8FjF;AAD9F,AAAAZ,AAAA6F,AAAA,AAAA,AACiDzB;AADjD,AAAApE,AAAA6F,AAAA,AACoGE;AADpG,AAAA/F,AAAA6F,AAAA,AAAA,AACkCtF;AADlC,AAAAP,AAAA6F,AAAA,AACmFnF;AADnF,AAAAV,AAAA6F,AAAA,AACwGG;AADxG,AAAAhG,AAAA6F,AAAA,AAC6EpF;AAD7E,AAAAT,AAAA6F,AAAA,AAC4DxB;AAD5D,AAIE,AAAAvD,AACE,AAAA,AAAAC,AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAqBwC,AAAmB5C;AAD1C,AAAA,AAAAC;AAAAA;;AAEE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACmF,AACmB7F,AACAC,AACAC,AACAC,AACAC,AACA4D,AACAC,AAEA5D,AACAC,AACAC,AACAC,AACAmF,AACAC,AACAzB;;;;AArBxB,AAAA,AAAA,AAAMoB;;AAAN;AAAA,AAAA,AAAA,AAAAG,AAAMH;AAAN,AAAA,AAAAzF,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAC,AAAA2F;;;AAAA,AAuBA,AAAA,AAAA,AAAA1G,AAAM8G;AAAN,AAAA,AAAA7G,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA6G,AAAA1G;;;AAAA,AAAA,AAAA,AAAA,AAAA2G,AAAMD;AAAN,AAAA,AAAAE,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAvG,AAAA,AAAAuG,AAAA,AAAA,AAAA,AAAA,AAAAtG,AAAAC,AAAAqG,AAAAA;AAAAA,AAGYvF;AAHZ,AAAAb,AAAAoG,AAAA,AACqF7B;AADrF,AAAAvE,AAAAoG,AAAA,AACwB9F;AADxB,AAAAN,AAAAoG,AAAA,AACahG;AADb,AAAAJ,AAAAoG,AAAA,AAC6DzF;AAD7D,AAAAX,AAAAoG,AAAA,AAAA,AACwC5F;AADxC,AAAAR,AAAAoG,AAAA,AACmB/F;AADnB,AAAAL,AAAAoG,AAAA,AACkExF;AADlE,AAAAZ,AAAAoG,AAAA,AACwEL;AADxE,AAAA/F,AAAAoG,AAAA,AAAA,AACkC7F;AADlC,AAAAP,AAAAoG,AAAA,AACuD1F;AADvD,AAAAV,AAAAoG,AAAA,AAC4EJ;AAD5E,AAAAhG,AAAAoG,AAAA,AACiD3F;AADjD,AAIE,AAAAK,AACE,AAAA,AAAAC,AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAqBwC,AAAmB5C;AAD1C,AAAA,AAAAC;AAAAA;;AAEE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACmF,AACY7F,AACAC,AACAC,AACAC,AACAC,AAEAC,AACAC,AACAC,AACAC,AACAmF,AACAC,AACAzB;;;;AAnBjB,AAAA,AAAA,AAAM2B;;AAAN;AAAA,AAAA,AAAA,AAAAG,AAAMH;AAAN,AAAA,AAAAhG,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAC,AAAAkG;;;AAAA,AA0BA,AAAKC,AACH,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAM/H;AAOR,AAAKgI,AACH,AAAA,AAAA,AAAMhI,AACJ,AAAI,AAAA,AAACE,AAAUH,AAA4BI;AAE/C,AAAK8H,AACH,AAAA,AAAMjI,AAEF,AAAA,AAAAkI,AAAC9C,AACD,AAACC,AACD,AAACC;AAFD,AAAS,AAAA,AAACpC,AAAS,AAAA,AAAAgF;AAFvB,AAEkC9H,AAE9B,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACgH,AAACO,AAAOqH;AAG9H,AAAA,AAAA,AAAAnH,AAAOsH;AAAP,AAAA,AAAArH,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAqH,AAAAlH;;;AAAA,AAAA,AAAA,AAAA,AAAAmH,AAAOD;AAAP,AAAA,AAAAE,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA/G,AAAA,AAAA+G,AAAA,AAAA,AAAA,AAAA,AAAA9G,AAAAC,AAAA6G,AAAAA;AAAAA,AAC2F/F;AAD3F,AAAAb,AAAA4G,AAAA,AACwBtG;AADxB,AAAAN,AAAA4G,AAAA,AACaxG;AADb,AAAAJ,AAAA4G,AAAA,AACuEjG;AADvE,AAAAX,AAAA4G,AAAA,AACwCpG;AADxC,AAAAR,AAAA4G,AAAA,AACmBvG;AADnB,AAAAL,AAAA4G,AAAA,AAC4EhG;AAD5E,AAAAZ,AAAA4G,AAAA,AACkFb;AADlF,AAAA/F,AAAA4G,AAAA,AACkCrG;AADlC,AAAAP,AAAA4G,AAAA,AACiElG;AADjE,AAAAV,AAAA4G,AAAA,AAC2DnG;AAD3D,AAAAT,AAAA4G,AAAA,AACiDtC;AADjD,AAEE,AAAMpD,AAAS,AAACC,AAAef;AACzBC,AAAS,AAACc,AAAed;AACzBe,AAAS,AAAQ,AAACE,AAAU,AAAA,AAAAwF,AAACtF;AAAD,AAAS,AAACC,AAAEP,AAAQ,AAAA4F,AAAAA,AAACvG,AAAAA,AAAAA;AAAxC,AAAA,AAAA,AAAA,AAAAc,AAAA,AAAA,AAAA,AAAA,AAAA,AAAkDhB;AAFjE,AAAA,AAAA,AAIG,AAAA,AAAA,AAAA,AAAA,AAAA,AAACqB,AACS,AAAA,AAAA,AAAsC,AAAA,AAAA,AAAA,AAAM4C,AAA8B7D,AAC1E,AAACiB,AAAM,AAAA,AAACC,AACD,AAAA,AAAA,AAAA,AAACC,AAAOhB,AAEvB,AAACiB,AAAOhB,AACRF,AACF,AAAAmB,AAAA,AAAAiF;AAAA,AAAA,AAAA/E,AAAA,AAAA;AAAA,AAAA,AAAA+E,AAAAA;;AAAA,AAAA,AAAA9E,AAAA,AAAA9B,AAAA4G;AAAA,AAAA,AAAA9E;AAAA,AAAA,AAAA8E,AAAA9E;AAAA,AAAA,AAAA,AAAAC,AAAA6E;AAAA,AAAA5E,AA2tE8C,AAAAyF,AAAAb;AA3tE9C3E,AAAA,AAAAC,AAAAF;AAAA6E,AAAA,AAAAzE,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAA6E,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAA7E;AAAA,AAAA,AAAAK,AAAAN,AAAA8E,AAAM/D;AAAN,AAAA,AAAA,AAAAR,AAAAsE,AACE,AAAM7D,AAAU,AAAC5C,AAAAA,AAAAA,AAAO2C,AAAAA;AAClBE,AAAU,AAAC5C,AAAAA,AAAAA,AAAU0C,AAAAA;AACrBG,AAAU,AAAC5B,AAAE0B,AAAGjC;AAFtB,AAAA,AAAA,AAAA,AAAA,AAIG,AAAA,AAAA,AAAA,AAAA,AAACQ,AACY,AAAA,AAAqB,AAAA,AAAA,AAAI2B,AAAwB,AAAA,AAAA,AAAA,AAACzB,AAAOhB,AACzD,AAAA,AAAA,AAAA,AAACgB,AAAOhB,AACR,AAAKuC,AAChB,AAAA,AAAA,AAAA,AAACvB,AAAOhB,AAET,AAAA,AAAA,AAAA,AAAA,AAACc,AACa,AAAA,AAAuB,AAAA,AAAA,AAAA,AAACE,AAAOhB,AAC/B,AAAA,AAAA,AAAA,AAACc,AACMhB,AACP,AAAA,AAAMJ,AAAU;AAAAgD;AAAA,AAAY,AAAChD,AAAAA,AAAAA,AAAU6C,AAAAA;;AAAvB;;AAAhB,AACZ,AAAA,AAAA,AAAA,AAACvB,AAAOhB,AACVwC;;;AAjBN,AAAA,AAAA6D,AAAA;;;;AAAA;;;;;AAAA,AAAAtE,AAAA,AAAAC,AAAAoE,AAAA,AAAAE,AAAA,AAAApE,AAAAiE;;AAAA,AAAApE,AAAA,AAAAC,AAAAoE,AAAA;;;AAAA,AAAA,AAAAjE,AAAAgE,AAAM7D;AAAN,AAAA,AAAAF,AACE,AAAMG,AAAU,AAAC5C,AAAAA,AAAAA,AAAO2C,AAAAA;AAClBE,AAAU,AAAC5C,AAAAA,AAAAA,AAAU0C,AAAAA;AACrBG,AAAU,AAAC5B,AAAE0B,AAAGjC;AAFtB,AAAA,AAAA,AAAA,AAAA,AAIG,AAAA,AAAA,AAAA,AAAA,AAACQ,AACY,AAAA,AAAqB,AAAA,AAAA,AAAI2B,AAAwB,AAAA,AAAA,AAAA,AAACzB,AAAOhB,AACzD,AAAA,AAAA,AAAA,AAACgB,AAAOhB,AACR,AAAKuC,AAChB,AAAA,AAAA,AAAA,AAACvB,AAAOhB,AAET,AAAA,AAAA,AAAA,AAAA,AAACc,AACa,AAAA,AAAuB,AAAA,AAAA,AAAA,AAACE,AAAOhB,AAC/B,AAAA,AAAA,AAAA,AAACc,AACMhB,AACP,AAAA,AAAMJ,AAAU;AAAAgD;AAAA,AAAY,AAAChD,AAAAA,AAAAA,AAAU6C,AAAAA;;AAAvB;;AAAhB,AACZ,AAAA,AAAA,AAAA,AAACvB,AAAOhB,AACVwC;AAjBN,AAAA8D,AAAA,AAAAjE,AAAA8D;;;AAAA;;;;AAAA,AAAA;;AAAA,AAAA,AAAAjF,AAAQzB;;;;AAbb,AAAA,AAAA,AAAOqG;;AAAP;AAAA,AAAA,AAAA,AAAAG,AAAOH;AAAP,AAAA,AAAAxG,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAC,AAAA0G;;;AAAA,AAiCA,AAAA,AAAA,AAAAzH,AAAM+H;AAAN,AAAA,AAAA9H,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA8H,AAAA3H;;;AAAA,AAAA,AAAA,AAAA,AAAA4H,AAAMD;AAAN,AAAA,AAAAE,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAxH,AAAA,AAAAwH,AAAA,AAAA,AAAA,AAAA,AAAAvH,AAAAC,AAAAsH,AAAAA;AAAAA,AAGYxG;AAHZ,AAAAb,AAAAqH,AAAA,AACwB/G;AADxB,AAAAN,AAAAqH,AAAA,AACajH;AADb,AAAAJ,AAAAqH,AAAA,AAC6D1G;AAD7D,AAAAX,AAAAqH,AAAA,AAAA,AACwC7G;AADxC,AAAAR,AAAAqH,AAAA,AACmBhH;AADnB,AAAAL,AAAAqH,AAAA,AACkEzG;AADlE,AAAAZ,AAAAqH,AAAA,AACwEtB;AADxE,AAAA/F,AAAAqH,AAAA,AAAA,AACkC9G;AADlC,AAAAP,AAAAqH,AAAA,AACuD3G;AADvD,AAAAV,AAAAqH,AAAA,AAC4ErB;AAD5E,AAAAhG,AAAAqH,AAAA,AACiD5G;AADjD,AAIE,AAAAK,AACE,AAAA,AAAAC,AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAqBuF,AAAoB3F;AAD3C,AAAA,AAAAC;AAAAA;;AAEE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACyG,AACYnH,AACAC,AACAC,AACAC,AACAC,AAEAC,AACAC,AACAC,AACAC,AACAmF,AACAC;;;;AAlBjB,AAAA,AAAA,AAAMmB;;AAAN;AAAA,AAAA,AAAA,AAAAG,AAAMH;AAAN,AAAA,AAAAjH,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAC,AAAAmH;;;AAAA,AAqBA,AAAA,AAAA,AAAAlI,AAAMoI;AAAN,AAAA,AAAAnI,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAmI,AAAAhI;;;AAAA,AAAA,AAAA,AAAA,AAAAiI,AAAMD;AAAN,AAAA,AAAAE,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA7H,AAAA,AAAA6H,AAAA,AAAA,AAAA,AAAA,AAAA5H,AAAAC,AAAA2H,AAAAA;AAAAA,AAGY7G;AAHZ,AAAAb,AAAA0H,AAAA,AACwBpH;AADxB,AAAAN,AAAA0H,AAAA,AACatH;AADb,AAAAJ,AAAA0H,AAAA,AAC6D/G;AAD7D,AAAAX,AAAA0H,AAAA,AAAA,AACwClH;AADxC,AAAAR,AAAA0H,AAAA,AACmBrH;AADnB,AAAAL,AAAA0H,AAAA,AACkE9G;AADlE,AAAAZ,AAAA0H,AAAA,AACwE3B;AADxE,AAAA/F,AAAA0H,AAAA,AAAA,AACkCnH;AADlC,AAAAP,AAAA0H,AAAA,AACuDhH;AADvD,AAAAV,AAAA0H,AAAA,AAC4E1B;AAD5E,AAAAhG,AAAA0H,AAAA,AACiDjH;AADjD,AAIE,AAAAK,AACE,AAAA,AAAAC,AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAqBuF,AAAoB3F;AAD3C,AAAA,AAAAC;AAAAA;;AAEE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACyG,AACYnH,AACAC,AACAC,AACAC,AACAC,AAEAC,AACAC,AACAC,AACAC,AACAmF,AACAC;;;;AAlBjB,AAAA,AAAA,AAAMwB;;AAAN;AAAA,AAAA,AAAA,AAAAG,AAAMH;AAAN,AAAA,AAAAtH,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAC,AAAAwH;;;AAAA","names":["re-com.tabs/horizontal-tabs-parts-desc","re-com.config/include-args-desc?","re-com.tabs/horizontal-tabs-parts","cljs.core.map","cljs.core/set","re-com.tabs/horizontal-tabs-args-desc","re-com.validate/vector-of-maps?","cljs.core/fn?","cljs.core/ifn?","cljs.core/string?","re-com.validate/css-style?","re-com.validate/html-attr?","re-com.validate/parts?","cljs.core/map?","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","re-com.tabs/horizontal-tabs","p__61138","map__61139","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","seq61136","self__4724__auto__","cljs.core/seq","model","tabs","on-change","id-fn","label-fn","class","style","attr","parts","args","or__4126__auto__","js/goog.DEBUG","re-com.validate/validate-args","re-com.validate/extract-arg-data","current","re-com.util/deref-or-value","_","js/Error","cljs.core/not-empty","p1__61134#","cljs.core.filter","cljs.core._EQ_","cljs.core.merge","re-com.box/flex-child-style","cljs.core.get_in","re-com.debug/->attr","iter__4529__auto__","s__61144","cljs.core/LazySeq","temp__5753__auto__","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__61146","cljs.core/chunk-buffer","i__61145","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__61143","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","t","id","label","selected?","event","re-com.tabs/bar-tabs-parts-desc","re-com.tabs/bar-tabs-parts","re-com.tabs/bar-tabs-args-desc","p1__61159#","cljs.core.remove","cljs.core/vec","cljs.core.conj","re-com.validate/position?","re-com.validate/position-options-list","re-com.tabs/bar-tabs","p__61164","map__61165","seq61163","tooltip-fn","tooltip-position","vertical?","validate?","showing","reagent.core.atom","p__61171","map__61172","cljs.core/not","p1__61160#","cljs.core.into","s__61178","b__61180","i__61179","iter__61177","tooltip","the-button","cljs.core/reset!","p1__61162#","cljs.core.swap_BANG_","re-com.popover/popover-tooltip","reagent.core/track","cljs.core/deref","re-com.tabs/horizontal-bar-tabs","p__61205","map__61208","seq61200","src","debug-as","re_com.tabs.bar_tabs","re-com.tabs/vertical-bar-tabs","p__61212","map__61213","seq61211","re-com.tabs/pill-tabs-parts-desc","re-com.tabs/pill-tabs-parts","re-com.tabs/pill-tabs-args-desc","p1__61225#","re-com.tabs/pill-tabs","p__61250","map__61252","seq61246","p1__61238#","s__61259","b__61261","i__61260","iter__61258","re-com.tabs/horizontal-pill-tabs","p__61293","map__61294","seq61289","re_com.tabs.pill_tabs","re-com.tabs/vertical-pill-tabs","p__61307","map__61308","seq61303","cljs.core/chunk-first"],"sourcesContent":["(ns re-com.tabs\n  (:require-macros\n    [re-com.core     :refer [handler-fn at]]\n    [re-com.validate :refer [validate-args-macro]])\n  (:require\n    [re-com.config   :refer [include-args-desc?]]\n    [re-com.debug    :refer [->attr]]\n    [re-com.util     :refer [deref-or-value]]\n    [re-com.box      :refer [flex-child-style]]\n    [re-com.validate :refer [css-style? html-attr? parts? vector-of-maps?\n                             position? position-options-list]]\n    [re-com.popover  :refer [popover-tooltip]]\n    [reagent.core    :as    reagent]))\n\n\n;;--------------------------------------------------------------------------------------------------\n;; Component: horizontal-tabs\n;;--------------------------------------------------------------------------------------------------\n\n(def horizontal-tabs-parts-desc\n  (when include-args-desc?\n    [{:name :wrapper :level 0 :class \"rc-tabs\"       :impl \"[:ul]\"\n      :notes [:span \"Only \" [:code \":style\"] \" is supported in \" [:code \":parts :wrapper\"] \". Otherwise, use top level \" [:code \":class\"] \" and \" [:code \":attr\"] \" arguments.\"]}\n     {:name :tab     :level 1 :class \"rc-tab\"        :impl \"[:li]\"}\n     {:name :anchor  :level 2 :class \"rc-tab-anchor\" :impl \"[:a]\"\n      :notes [:span \"Only \" [:code \":class\"] \" and \" [:code \":attr\"] \" are supported in \" [:code \":parts :anchor\"] \". Otherwise, use top level \" [:code \":style\"] \" argument.\"]}]))\n\n(def horizontal-tabs-parts\n  (when include-args-desc?\n    (-> (map :name horizontal-tabs-parts-desc) set)))\n\n(def horizontal-tabs-args-desc\n  (when include-args-desc?\n    [{:name :model            :required true                  :type \"unique-id | r/atom\"                                                  :description \"the unique identifier of the currently selected tab\"}\n     {:name :tabs             :required true                  :type \"vector of tabs | r/atom\" :validate-fn vector-of-maps?                :description \"one element in the vector for each tab. Typically, each element is a map with :id and :label keys\"}\n     {:name :on-change        :required true                  :type \"unique-id -> nil\"        :validate-fn fn?                            :description \"called when user alters the selection. Passed the unique identifier of the selection\"}\n     {:name :id-fn            :required false :default :id    :type \"tab -> anything\"         :validate-fn ifn?                           :description [:span \"given an element of \" [:code \":tabs\"] \", returns its unique identifier (aka id)\"]}\n     {:name :label-fn         :required false :default :label :type \"tab -> string | hiccup\"  :validate-fn ifn?                           :description [:span \"given an element of \" [:code \":tabs\"] \", returns its displayable label\"]}\n     {:name :class            :required false                 :type \"string\"                  :validate-fn string?                        :description \"CSS class names, space separated (applies to the outer container)\"}\n     {:name :style            :required false                 :type \"CSS style map\"           :validate-fn css-style?                     :description [:span \"CSS styles to add or override (aplies to \" [:span.bold \"each individual tab\"] \" rather than the container)\"]}\n     {:name :attr             :required false                 :type \"HTML attr map\"           :validate-fn html-attr?                     :description [:span \"HTML attributes, like \" [:code \":on-mouse-move\"] [:br] \"No \" [:code \":class\"] \" or \" [:code \":style\"] \"allowed (applies to the outer container)\"]}\n     {:name :parts            :required false                 :type \"map\"                     :validate-fn (parts? horizontal-tabs-parts) :description \"See Parts section below.\"}\n     {:name :src              :required false                 :type \"map\"                     :validate-fn map?                           :description [:span \"Used in dev builds to assist with debugging. Source code coordinates map containing keys\" [:code \":file\"] \"and\" [:code \":line\"]  \". See 'Debugging'.\"]}\n     {:name :debug-as         :required false                 :type \"map\"                     :validate-fn map?                           :description [:span \"Used in dev builds to assist with debugging, when one component is used implement another component, and we want the implementation component to masquerade as the original component in debug output, such as component stacks. A map optionally containing keys\" [:code \":component\"] \"and\" [:code \":args\"] \".\"]}]))\n\n(defn horizontal-tabs\n  [& {:keys [model tabs on-change id-fn label-fn class style attr parts]\n      :or   {id-fn :id label-fn :label}\n      :as   args}]\n  (or\n    (validate-args-macro horizontal-tabs-args-desc args)\n    (let [current  (deref-or-value model)\n          tabs     (deref-or-value tabs)\n          _        (assert (not-empty (filter #(= current (id-fn %)) tabs)) \"model not found in tabs vector\")]\n      [:ul\n       (merge {:class (str \"nav nav-tabs noselect rc-tabs \" class)\n               :style (merge (flex-child-style \"none\")\n                             (get-in parts [:wrapper :style]))}\n              (->attr args)\n              attr)\n       (for [t tabs]\n         (let [id        (id-fn  t)\n               label     (label-fn  t)\n               selected? (= id current)]                   ;; must use current instead of @model to avoid reagent warnings\n           [:li\n            (merge\n              {:class (str (if selected? \"active rc-tab \") (get-in parts [:tab :class]))\n               :style (get-in parts [:tab :style])\n               :key   (str id)}\n              (get-in parts [:tab :attr]))\n            [:a\n             (merge\n               {:class    (str \"rc-tab-anchor \" (get-in parts [:anchor :class]))\n                :style    (merge {:cursor \"pointer\"}\n                                 style)\n                :on-click (when on-change (handler-fn (on-change id)))}\n               (get-in parts [:anchor :attr]))\n             label]]))])))\n\n\n;;--------------------------------------------------------------------------------------------------\n;; Component: horizontal-bar-tabs\n;;--------------------------------------------------------------------------------------------------\n\n(def bar-tabs-parts-desc\n  (when include-args-desc?\n    [{:name :wrapper :level 0 :class \"rc-tabs\"         :impl \"[:div]\"\n      :notes [:span \"Only \" [:code \":style\"] \" is supported in \" [:code \":parts :wrapper\"] \". Otherwise, use top level \" [:code \":class\"] \" and \" [:code \":attr\"] \" arguments.\"]}\n     {:name :tooltip :level 1 :class \"rc-tabs-tooltip\" :impl \"[popover-tooltip]\"}\n     {:name :button  :level 2 :class \"rc-tabs-btn\"     :impl \"[:button]\"\n      :notes [:span \"Only \" [:code \":class\"] \" and \" [:code \":attr\"] \" are supported in \" [:code \":parts :anchor\"] \". Otherwise, use top level \" [:code \":style\"] \" argument.\"]}]))\n\n(def bar-tabs-parts\n  (when include-args-desc?\n    (-> (map :name horizontal-tabs-parts-desc) set)))\n\n(def bar-tabs-args-desc\n  (when include-args-desc?\n    (->\n      (remove #(= :parts (:name %)) horizontal-tabs-args-desc)\n      (vec)\n      (conj\n        {:name :tooltip-fn       :required false :default :tooltip      :type \"tab -> string | hiccup\" :validate-fn ifn?                    :description [:span \"[horizontal-bar-tabs only] given an element of \" [:code \":tabs\"] \", returns its tooltip\"]}\n        {:name :tooltip-position :required false :default :below-center :type \"keyword\"                :validate-fn position?               :description [:span \"[horizontal-bar-tabs only] relative to this anchor. One of \" position-options-list]}\n        {:name :validate?        :required false :default true          :type \"boolean\"                                                     :description [:span \"Validate \" [:code \":model\"] \" against \" [:code \":tabs\"]]}\n        {:name :parts            :required false                        :type \"map\"                    :validate-fn (parts? bar-tabs-parts) :description \"See Parts section below.\"}))))\n\n(defn- bar-tabs\n  [& {:keys [model tabs on-change id-fn label-fn tooltip-fn tooltip-position vertical? class style attr parts validate?] :as args}]\n  (let [showing (reagent/atom nil)]\n    (fn [& {:keys [model tabs]}]\n      (let [current  (deref-or-value model)\n            tabs     (deref-or-value tabs)\n            _        (assert (or (not validate?) (not-empty (filter #(= current (id-fn %)) tabs))) \"model not found in tabs vector\")]\n        (into [:div\n               (merge\n                 {:class (str \"noselect btn-group\" (if vertical? \"-vertical\") \" rc-tabs \" class)\n                  :style (merge (flex-child-style \"none\")\n                                (get-in parts [:wrapper :style]))}\n                 (->attr args)\n                 attr)]\n         (for [t tabs]\n           (let [id        (id-fn t)\n                 label     (label-fn t)\n                 tooltip   (when tooltip-fn (tooltip-fn t))\n                 selected? (= id current)\n                 the-button [:button\n                             (merge\n                               {:type     \"button\"\n                                :key      (str id)\n                                :class    (str \"btn btn-default \" (if selected? \"active \") \"rc-tabs-btn \" (get-in parts [:button :class]))\n                                :style    style\n                                :on-click (when on-change (handler-fn (on-change id)))}\n                               (when tooltip\n                                 {:on-mouse-over (handler-fn (reset! showing id))\n                                  :on-mouse-out  (handler-fn (swap! showing #(when-not (= id %) %)))})\n                               (get-in parts [:button :attr]))\n                             label]]\n             (if tooltip\n               [popover-tooltip\n                :src      (at)\n                :label    tooltip\n                :position (or tooltip-position :below-center)\n                :showing? (reagent/track #(= id @showing))\n                :anchor   the-button\n                :class    (str \"rc-tabs-tooltip \" (get-in parts [:tooltip :class]))\n                :style    (get-in parts [:tooltip :style])\n                :attr     (get-in parts [:tooltip :attr])]\n               the-button))))))))\n\n\n(defn horizontal-bar-tabs\n  [& {:keys [model tabs on-change id-fn label-fn tooltip-fn tooltip-position class style attr parts src debug-as validate?]\n      :or   {id-fn :id label-fn :label tooltip-fn :tooltip}\n      :as   args}]\n  (or\n    (validate-args-macro bar-tabs-args-desc args)\n    (bar-tabs\n      :model            model\n      :tabs             tabs\n      :on-change        on-change\n      :id-fn            id-fn\n      :label-fn         label-fn\n      :tooltip-fn       tooltip-fn\n      :tooltip-position tooltip-position\n      :vertical?        false\n      :class            class\n      :style            style\n      :attr             attr\n      :parts            parts\n      :src              src\n      :debug-as         debug-as\n      :validate?        validate?)))\n\n(defn vertical-bar-tabs\n  [& {:keys [model tabs on-change id-fn label-fn class style attr parts src debug-as validate?]\n      :or   {id-fn :id label-fn :label}\n      :as   args}]\n  (or\n    (validate-args-macro bar-tabs-args-desc args)\n    (bar-tabs\n      :model     model\n      :tabs      tabs\n      :on-change on-change\n      :id-fn     id-fn\n      :label-fn  label-fn\n      :vertical? true\n      :class     class\n      :style     style\n      :attr      attr\n      :parts     parts\n      :src       src\n      :debug-as  debug-as\n      :validate? validate?)))\n\n\n;;--------------------------------------------------------------------------------------------------\n;; Component: pill-tabs\n;;--------------------------------------------------------------------------------------------------\n\n(def pill-tabs-parts-desc\n  (when include-args-desc?\n    [{:name :wrapper :level 0 :class \"rc-tabs\"         :impl \"[:ul]\"\n      :notes [:span \"Only \" [:code \":style\"] \" is supported in \" [:code \":parts :wrapper\"] \". Otherwise, use top level \" [:code \":class\"] \" and \" [:code \":attr\"] \" arguments.\"]}\n     {:name :tab     :level 1 :class \"rc-tabs-pill\"    :impl \"[:li]\"}\n     {:name :anchor  :level 2 :class \"rc-tabs-anchor\"  :impl \"[:a]\"\n      :notes [:span \"Only \" [:code \":class\"] \" and \" [:code \":attr\"] \" are supported in \" [:code \":parts :anchor\"] \". Otherwise, use top level \" [:code \":style\"] \" argument.\"]}]))\n\n(def pill-tabs-parts\n  (when include-args-desc?\n    (-> (map :name horizontal-tabs-parts-desc) set)))\n\n(def pill-tabs-args-desc\n  (when include-args-desc?\n    (->\n      (remove #(= :parts (:name %)) horizontal-tabs-args-desc)\n      (vec)\n      (conj\n        {:name :parts            :required false                        :type \"map\"                      :validate-fn (parts? pill-tabs-parts) :description \"See Parts section below.\"}))))\n\n\n(defn- pill-tabs    ;; tabs-like in action\n  [& {:keys [model tabs on-change id-fn label-fn vertical? class style attr parts src] :as args}]\n  (let [current  (deref-or-value model)\n        tabs     (deref-or-value tabs)\n        _        (assert (not-empty (filter #(= current (id-fn %)) tabs)) \"model not found in tabs vector\")]\n    [:ul\n     (merge\n       {:class (str \"rc-tabs noselect nav nav-pills\" (when vertical? \" nav-stacked\") \" \" class)\n        :style (merge (flex-child-style \"none\")\n                      (get-in parts [:wrapper :style]))\n        :role  \"tabslist\"}\n       (->attr args)\n       attr)\n     (for [t tabs]\n       (let [id        (id-fn  t)\n             label     (label-fn  t)\n             selected? (= id current)]                   ;; must use 'current' instead of @model to avoid reagent warnings\n         [:li\n          (merge\n            {:class    (str \"rc-tabs-pill \" (if selected? \"active \" \"\") (get-in parts [:tab :class]))\n             :style    (get-in parts [:tab :style])\n             :key      (str id)}\n            (get-in parts [:tab :attr]))\n          [:a\n           (merge\n             {:class     (str \"rc-tabs-anchor \" (get-in parts [:anchor :class]))\n              :style     (merge {:cursor \"pointer\"}\n                                style)\n              :on-click  (when on-change (handler-fn (on-change id)))}\n             (get-in parts [:anchor :attr]))\n           label]]))]))\n\n\n(defn horizontal-pill-tabs\n  [& {:keys [model tabs on-change id-fn label-fn class style attr parts src debug-as]\n      :or   {id-fn :id label-fn :label}\n      :as   args}]\n  (or\n    (validate-args-macro pill-tabs-args-desc args)\n    (pill-tabs\n      :model     model\n      :tabs      tabs\n      :on-change on-change\n      :id-fn     id-fn\n      :label-fn  label-fn\n      :vertical? false\n      :class     class\n      :style     style\n      :attr      attr\n      :parts     parts\n      :src       src\n      :debug-as  debug-as)))\n\n\n(defn vertical-pill-tabs\n  [& {:keys [model tabs on-change id-fn label-fn class style attr parts src debug-as]\n      :or   {id-fn :id label-fn :label}\n      :as   args}]\n  (or\n    (validate-args-macro pill-tabs-args-desc args)\n    (pill-tabs\n      :model     model\n      :tabs      tabs\n      :on-change on-change\n      :id-fn     id-fn\n      :label-fn  label-fn\n      :vertical? true\n      :class     class\n      :style     style\n      :attr      attr\n      :parts     parts\n      :src       src\n      :debug-as  debug-as)))\n"]}