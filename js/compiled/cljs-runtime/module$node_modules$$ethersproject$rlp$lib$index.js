shadow$provide.module$node_modules$$ethersproject$rlp$lib$index=function(global,require,module,exports){function arrayifyInteger(value){for(var result=[];value;)result.unshift(value&255),value>>=8;return result}function unarrayifyInteger(data,offset,length){for(var result=0,i=0;i<length;i++)result=256*result+data[offset+i];return result}function _encode(object){if(Array.isArray(object)){var payload_1=[];object.forEach(function(child){payload_1=payload_1.concat(_encode(child))});if(55>=payload_1.length)return payload_1.unshift(192+
payload_1.length),payload_1;object=arrayifyInteger(payload_1.length);object.unshift(247+object.length);return object.concat(payload_1)}bytes_1.isBytesLike(object)||logger.throwArgumentError("RLP object must be BytesLike","object",object);object=Array.prototype.slice.call(bytes_1.arrayify(object));if(1===object.length&&127>=object[0])return object;if(55>=object.length)return object.unshift(128+object.length),object;var length=arrayifyInteger(object.length);length.unshift(183+length.length);return length.concat(object)}
function _decodeChildren(data,offset,childOffset,length){for(var result=[];childOffset<offset+1+length;){var decoded=_decode(data,childOffset);result.push(decoded.result);childOffset+=decoded.consumed;childOffset>offset+1+length&&logger.throwError("child data too short",logger_1.Logger.errors.BUFFER_OVERRUN,{})}return{consumed:1+length,result}}function _decode(data,offset){0===data.length&&logger.throwError("data too short",logger_1.Logger.errors.BUFFER_OVERRUN,{});if(248<=data[offset]){var lengthLength=
data[offset]-247;offset+1+lengthLength>data.length&&logger.throwError("data short segment too short",logger_1.Logger.errors.BUFFER_OVERRUN,{});var length_2=unarrayifyInteger(data,offset+1,lengthLength);offset+1+lengthLength+length_2>data.length&&logger.throwError("data long segment too short",logger_1.Logger.errors.BUFFER_OVERRUN,{});return _decodeChildren(data,offset,offset+1+lengthLength,lengthLength+length_2)}return 192<=data[offset]?(lengthLength=data[offset]-192,offset+1+lengthLength>data.length&&
logger.throwError("data array too short",logger_1.Logger.errors.BUFFER_OVERRUN,{}),_decodeChildren(data,offset,offset+1,lengthLength)):184<=data[offset]?(lengthLength=data[offset]-183,offset+1+lengthLength>data.length&&logger.throwError("data array too short",logger_1.Logger.errors.BUFFER_OVERRUN,{}),length_2=unarrayifyInteger(data,offset+1,lengthLength),offset+1+lengthLength+length_2>data.length&&logger.throwError("data array too short",logger_1.Logger.errors.BUFFER_OVERRUN,{}),data=bytes_1.hexlify(data.slice(offset+
1+lengthLength,offset+1+lengthLength+length_2)),{consumed:1+lengthLength+length_2,result:data}):128<=data[offset]?(lengthLength=data[offset]-128,offset+1+lengthLength>data.length&&logger.throwError("data too short",logger_1.Logger.errors.BUFFER_OVERRUN,{}),data=bytes_1.hexlify(data.slice(offset+1,offset+1+lengthLength)),{consumed:1+lengthLength,result:data}):{consumed:1,result:bytes_1.hexlify(data[offset])}}Object.defineProperty(exports,"__esModule",{value:!0});exports.decode=exports.encode=void 0;
var bytes_1=require("module$node_modules$$ethersproject$bytes$lib$index"),logger_1=require("module$node_modules$$ethersproject$logger$lib$index");global=require("module$node_modules$$ethersproject$rlp$lib$_version");var logger=new logger_1.Logger(global.version);exports.encode=function(object){return bytes_1.hexlify(_encode(object))};exports.decode=function(data){var bytes=bytes_1.arrayify(data),decoded=_decode(bytes,0);decoded.consumed!==bytes.length&&logger.throwArgumentError("invalid rlp data",
"data",data);return decoded.result}}
//# sourceMappingURL=module$node_modules$$ethersproject$rlp$lib$index.js.map
