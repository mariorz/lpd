{
"version":3,
"file":"module$node_modules$eth_json_rpc_filters$subscriptionManager.js",
"lineCount":7,
"mappings":"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",
"sources":["node_modules/eth-json-rpc-filters/subscriptionManager.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$eth_json_rpc_filters$subscriptionManager\"] = function(global,require,module,exports) {\nconst SafeEventEmitter = require('safe-event-emitter')\nconst createScaffoldMiddleware = require('eth-json-rpc-middleware/scaffold')\nconst createAsyncMiddleware = require('json-rpc-engine/src/createAsyncMiddleware')\nconst createFilterMiddleware = require('./index.js')\nconst { unsafeRandomBytes, incrementHexInt } = require('./hexUtils.js')\nconst getBlocksForRange = require('./getBlocksForRange.js')\n\nmodule.exports = createSubscriptionMiddleware\n\n\nfunction createSubscriptionMiddleware({ blockTracker, provider }) {\n  // state and utilities for handling subscriptions\n  const subscriptions = {}\n  const filterManager = createFilterMiddleware({ blockTracker, provider })\n\n  // internal flag\n  let isDestroyed = false\n\n  // create subscriptionManager api object\n  const events = new SafeEventEmitter()\n  const middleware = createScaffoldMiddleware({\n    eth_subscribe: createAsyncMiddleware(subscribe),\n    eth_unsubscribe: createAsyncMiddleware(unsubscribe),\n  })\n  middleware.destroy = destroy\n  return { events, middleware }\n\n  async function subscribe(req, res) {\n\n    if (isDestroyed) throw new Error(\n      'SubscriptionManager - attempting to use after destroying'\n    )\n\n    const subscriptionType = req.params[0]\n    // subId is 16 byte hex string\n    const subId = unsafeRandomBytes(16)\n\n    // create sub\n    let sub\n    switch (subscriptionType) {\n      case 'newHeads':\n        sub = createSubNewHeads({ subId })\n        break\n      case 'logs':\n        const filterParams = req.params[1]\n        const filter = await filterManager.newLogFilter(filterParams)\n        sub = createSubFromFilter({ subId, filter })\n        break\n      default:\n        throw new Error(`SubscriptionManager - unsupported subscription type \"${subscriptionType}\"`)\n\n    }\n    subscriptions[subId] = sub\n\n    res.result = subId\n    return\n\n    function createSubNewHeads({ subId }) {\n      const sub = {\n        type: subscriptionType,\n        destroy: async () => {\n          blockTracker.removeListener('sync', sub.update)\n        },\n        update: async ({ oldBlock, newBlock }) => {\n          // for newHeads\n          const toBlock = newBlock\n          const fromBlock = incrementHexInt(oldBlock)\n          const rawBlocks = await getBlocksForRange({ provider, fromBlock, toBlock })\n          const results = rawBlocks.map(normalizeBlock)\n          results.forEach((value) => {\n            _emitSubscriptionResult(subId, value)\n          })\n        }\n      }\n      // check for subscription updates on new block\n      blockTracker.on('sync', sub.update)\n      return sub\n    }\n\n    function createSubFromFilter({ subId, filter }){\n      filter.on('update', result => _emitSubscriptionResult(subId, result))\n      const sub = {\n        type: subscriptionType,\n        destroy: async () => {\n          return await filterManager.uninstallFilter(filter.idHex)\n        },\n      }\n      return sub\n    }\n  }\n\n  async function unsubscribe(req, res) {\n\n    if (isDestroyed) throw new Error(\n      'SubscriptionManager - attempting to use after destroying'\n    )\n\n    const id = req.params[0]\n    const subscription = subscriptions[id]\n    // if missing, return \"false\" to indicate it was not removed\n    if (!subscription) {\n      res.result = false\n      return\n    }\n    // cleanup subscription\n    delete subscriptions[id]\n    await subscription.destroy()\n    res.result = true\n  }\n\n  function _emitSubscriptionResult(filterIdHex, value) {\n    events.emit('notification', {\n      jsonrpc: '2.0',\n      method: 'eth_subscription',\n      params: {\n        subscription: filterIdHex,\n        result: value,\n      },\n    })\n  }\n\n  function destroy () {\n    events.removeAllListeners()\n    for (const id in subscriptions) {\n      subscriptions[id].destroy()\n      delete subscriptions[id]\n    }\n    isDestroyed = true\n  }\n}\n\nfunction normalizeBlock(block) {\n  return {\n    hash: block.hash,\n    parentHash: block.parentHash,\n    sha3Uncles: block.sha3Uncles,\n    miner: block.miner,\n    stateRoot: block.stateRoot,\n    transactionsRoot: block.transactionsRoot,\n    receiptsRoot: block.receiptsRoot,\n    logsBloom: block.logsBloom,\n    difficulty: block.difficulty,\n    number: block.number,\n    gasLimit: block.gasLimit,\n    gasUsed: block.gasUsed,\n    nonce: block.nonce,\n    mixHash: block.mixHash,\n    timestamp: block.timestamp,\n    extraData: block.extraData,\n  }\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","normalizeBlock","block","hash","parentHash","sha3Uncles","miner","stateRoot","transactionsRoot","receiptsRoot","logsBloom","difficulty","number","gasLimit","gasUsed","nonce","mixHash","timestamp","extraData","SafeEventEmitter","createScaffoldMiddleware","createAsyncMiddleware","createFilterMiddleware","unsafeRandomBytes","incrementHexInt","getBlocksForRange","createSubscriptionMiddleware","blockTracker","provider","_emitSubscriptionResult","filterIdHex","value","events","emit","jsonrpc","method","params","subscription","result","subscriptions","filterManager","isDestroyed","middleware","eth_subscribe","subscribe","req","res","createSubNewHeads","subId","sub","type","subscriptionType","destroy","removeListener","update","oldBlock","newBlock","fromBlock","results","rawBlocks","toBlock","map","forEach","on","createSubFromFilter","filter","uninstallFilter","idHex","Error","newLogFilter","filterParams","eth_unsubscribe","unsubscribe","id","removeAllListeners"]
}
