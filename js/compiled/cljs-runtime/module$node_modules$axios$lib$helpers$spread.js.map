{
"version":3,
"file":"module$node_modules$axios$lib$helpers$spread.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,CAAe,4CAAf,CAAiE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAuBzGD,MAAA,CAAOC,OAAP,CAAiBC,QAAe,CAACC,QAAD,CAAW,CACzC,MAAOC,SAAa,CAACC,GAAD,CAAM,CACxB,MAAOF,SAAA,CAASG,KAAT,CAAe,IAAf,CAAqBD,GAArB,CADiB,CADe,CAvB8D;",
"sources":["node_modules/axios/lib/helpers/spread.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$axios$lib$helpers$spread\"] = function(global,require,module,exports) {\n'use strict';\n\n/**\n * Syntactic sugar for invoking a function and expanding an array for arguments.\n *\n * Common use case would be to use `Function.prototype.apply`.\n *\n *  ```js\n *  function f(x, y, z) {}\n *  var args = [1, 2, 3];\n *  f.apply(null, args);\n *  ```\n *\n * With `spread` this example can be re-written.\n *\n *  ```js\n *  spread(function(x, y, z) {})([1, 2, 3]);\n *  ```\n *\n * @param {Function} callback\n * @returns {Function}\n */\nmodule.exports = function spread(callback) {\n  return function wrap(arr) {\n    return callback.apply(null, arr);\n  };\n};\n\n};"],
"names":["shadow$provide","global","require","module","exports","module.exports","callback","wrap","arr","apply"]
}
