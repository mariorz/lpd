shadow$provide.module$node_modules$eth_json_rpc_filters$getBlocksForRange=function(global,require,module,exports){function intToHex(int){return void 0===int||null===int?int:"0x"+int.toString(16)}function query(provider,method,params){return new Promise((resolve,reject)=>{provider.sendAsync({id:1,jsonrpc:"2.0",method,params},(err,res)=>{if(err)return reject(err);resolve(res.result)})})}module.exports=async function({provider,fromBlock,toBlock}){fromBlock||(fromBlock=toBlock);const fromBlockNumber=
void 0===fromBlock||null===fromBlock?fromBlock:Number.parseInt(fromBlock,16);fromBlock=void 0===toBlock||null===toBlock?toBlock:Number.parseInt(toBlock,16);fromBlock=Array(fromBlock-fromBlockNumber+1).fill().map((_,index)=>fromBlockNumber+index).map(intToHex);return await Promise.all(fromBlock.map(blockNum=>query(provider,"eth_getBlockByNumber",[blockNum,!1])))}}
//# sourceMappingURL=module$node_modules$eth_json_rpc_filters$getBlocksForRange.js.map
