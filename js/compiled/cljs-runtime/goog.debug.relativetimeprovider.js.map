{
"version":3,
"file":"goog.debug.relativetimeprovider.js",
"lineCount":21,
"mappings":"AAmBAA,IAAA,CAAKC,OAAL,CAAa,iCAAb,CAAA;AAeAD,IAAA,CAAKE,KAAL,CAAWC,oBAAX,GAAkCC,QAAQ,EAAG;AAM3C,MAAA,CAAKC,kBAAL,GAA0BL,IAAA,CAAKM,GAAL,EAA1B;AAN2C,CAA7C;AAeAN,IAAA,CAAKE,KAAL,CAAWC,oBAAX,CAAgCI,gBAAhC,GAAmD,IAAnD;AAOAP,IAAA,CAAKE,KAAL,CAAWC,oBAAX,CAAgCK,SAAhC,CAA0CC,GAA1C,GAAgDC,QAAQ,CAACC,SAAD,CAAY;AAClE,MAAA,CAAKN,kBAAL,GAA0BM,SAA1B;AADkE,CAApE;AAQAX,IAAA,CAAKE,KAAL,CAAWC,oBAAX,CAAgCK,SAAhC,CAA0CI,KAA1C,GAAkDC,QAAQ,EAAG;AAC3D,MAAA,CAAKJ,GAAL,CAAST,IAAA,CAAKM,GAAL,EAAT,CAAA;AAD2D,CAA7D;AAQAN,IAAA,CAAKE,KAAL,CAAWC,oBAAX,CAAgCK,SAAhC,CAA0CM,GAA1C,GAAgDC,QAAQ,EAAG;AACzD,SAAO,IAAP,CAAYV,kBAAZ;AADyD,CAA3D;AAQAL,IAAA,CAAKE,KAAL,CAAWC,oBAAX,CAAgCa,kBAAhC,GAAqDC,QAAQ,EAAG;AAC9D,MAAI,CAACjB,IAAD,CAAME,KAAN,CAAYC,oBAAZ,CAAiCI,gBAArC;AACEP,QAAA,CAAKE,KAAL,CAAWC,oBAAX,CAAgCI,gBAAhC,GACI,IAAIP,IAAJ,CAASE,KAAT,CAAeC,oBADnB;AADF;AAIA,SAAOH,IAAP,CAAYE,KAAZ,CAAkBC,oBAAlB,CAAuCI,gBAAvC;AAL8D,CAAhE;;",
"sources":["goog/debug/relativetimeprovider.js"],
"sourcesContent":["// Copyright 2007 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Definition the goog.debug.RelativeTimeProvider class.\n *\n */\n\ngoog.provide('goog.debug.RelativeTimeProvider');\n\n\n\n/**\n * A simple object to keep track of a timestamp considered the start of\n * something. The main use is for the logger system to maintain a start time\n * that is occasionally reset. For example, in Gmail, we reset this relative\n * time at the start of a user action so that timings are offset from the\n * beginning of the action. This class also provides a singleton as the default\n * behavior for most use cases is to share the same start time.\n *\n * @constructor\n * @final\n */\ngoog.debug.RelativeTimeProvider = function() {\n  /**\n   * The start time.\n   * @type {number}\n   * @private\n   */\n  this.relativeTimeStart_ = goog.now();\n};\n\n\n/**\n * Default instance.\n * @type {?goog.debug.RelativeTimeProvider}\n * @private\n */\ngoog.debug.RelativeTimeProvider.defaultInstance_ = null;\n\n\n/**\n * Sets the start time to the specified time.\n * @param {number} timeStamp The start time.\n */\ngoog.debug.RelativeTimeProvider.prototype.set = function(timeStamp) {\n  this.relativeTimeStart_ = timeStamp;\n};\n\n\n/**\n * Resets the start time to now.\n */\ngoog.debug.RelativeTimeProvider.prototype.reset = function() {\n  this.set(goog.now());\n};\n\n\n/**\n * @return {number} The start time.\n */\ngoog.debug.RelativeTimeProvider.prototype.get = function() {\n  return this.relativeTimeStart_;\n};\n\n\n/**\n * @return {goog.debug.RelativeTimeProvider} The default instance.\n */\ngoog.debug.RelativeTimeProvider.getDefaultInstance = function() {\n  if (!goog.debug.RelativeTimeProvider.defaultInstance_) {\n    goog.debug.RelativeTimeProvider.defaultInstance_ =\n        new goog.debug.RelativeTimeProvider();\n  }\n  return goog.debug.RelativeTimeProvider.defaultInstance_;\n};\n"],
"names":["goog","provide","debug","RelativeTimeProvider","goog.debug.RelativeTimeProvider","relativeTimeStart_","now","defaultInstance_","prototype","set","goog.debug.RelativeTimeProvider.prototype.set","timeStamp","reset","goog.debug.RelativeTimeProvider.prototype.reset","get","goog.debug.RelativeTimeProvider.prototype.get","getDefaultInstance","goog.debug.RelativeTimeProvider.getDefaultInstance"]
}
