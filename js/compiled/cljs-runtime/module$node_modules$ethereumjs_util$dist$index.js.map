{
"version":3,
"file":"module$node_modules$ethereumjs_util$dist$index.js",
"lineCount":19,
"mappings":"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",
"sources":["node_modules/ethereumjs-util/dist/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$ethereumjs_util$dist$index\"] = function(global,require,module,exports) {\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _require = require('ethereum-cryptography/keccak'),\n    keccak224 = _require.keccak224,\n    keccak384 = _require.keccak384,\n    k256 = _require.keccak256,\n    keccak512 = _require.keccak512;\n\nvar secp256k1 = require('./secp256k1-adapter');\nvar assert = require('assert');\nvar rlp = require('rlp');\nvar BN = require('bn.js');\nvar createHash = require('create-hash');\nvar Buffer = require('safe-buffer').Buffer;\nObject.assign(exports, require('ethjs-util'));\n\n/**\n * the max integer that this VM can handle (a ```BN```)\n * @var {BN} MAX_INTEGER\n */\nexports.MAX_INTEGER = new BN('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', 16);\n\n/**\n * 2^256 (a ```BN```)\n * @var {BN} TWO_POW256\n */\nexports.TWO_POW256 = new BN('10000000000000000000000000000000000000000000000000000000000000000', 16);\n\n/**\n * Keccak-256 hash of null (a ```String```)\n * @var {String} KECCAK256_NULL_S\n */\nexports.KECCAK256_NULL_S = 'c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';\nexports.SHA3_NULL_S = exports.KECCAK256_NULL_S;\n\n/**\n * Keccak-256 hash of null (a ```Buffer```)\n * @var {Buffer} KECCAK256_NULL\n */\nexports.KECCAK256_NULL = Buffer.from(exports.KECCAK256_NULL_S, 'hex');\nexports.SHA3_NULL = exports.KECCAK256_NULL;\n\n/**\n * Keccak-256 of an RLP of an empty array (a ```String```)\n * @var {String} KECCAK256_RLP_ARRAY_S\n */\nexports.KECCAK256_RLP_ARRAY_S = '1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347';\nexports.SHA3_RLP_ARRAY_S = exports.KECCAK256_RLP_ARRAY_S;\n\n/**\n * Keccak-256 of an RLP of an empty array (a ```Buffer```)\n * @var {Buffer} KECCAK256_RLP_ARRAY\n */\nexports.KECCAK256_RLP_ARRAY = Buffer.from(exports.KECCAK256_RLP_ARRAY_S, 'hex');\nexports.SHA3_RLP_ARRAY = exports.KECCAK256_RLP_ARRAY;\n\n/**\n * Keccak-256 hash of the RLP of null  (a ```String```)\n * @var {String} KECCAK256_RLP_S\n */\nexports.KECCAK256_RLP_S = '56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421';\nexports.SHA3_RLP_S = exports.KECCAK256_RLP_S;\n\n/**\n * Keccak-256 hash of the RLP of null (a ```Buffer```)\n * @var {Buffer} KECCAK256_RLP\n */\nexports.KECCAK256_RLP = Buffer.from(exports.KECCAK256_RLP_S, 'hex');\nexports.SHA3_RLP = exports.KECCAK256_RLP;\n\n/**\n * [`BN`](https://github.com/indutny/bn.js)\n * @var {Function}\n */\nexports.BN = BN;\n\n/**\n * [`rlp`](https://github.com/ethereumjs/rlp)\n * @var {Function}\n */\nexports.rlp = rlp;\n\n/**\n * [`secp256k1`](https://github.com/cryptocoinjs/secp256k1-node/)\n * @var {Object}\n */\nexports.secp256k1 = secp256k1;\n\n/**\n * Returns a buffer filled with 0s\n * @method zeros\n * @param {Number} bytes  the number of bytes the buffer should be\n * @return {Buffer}\n */\nexports.zeros = function (bytes) {\n  return Buffer.allocUnsafe(bytes).fill(0);\n};\n\n/**\n  * Returns a zero address\n  * @method zeroAddress\n  * @return {String}\n  */\nexports.zeroAddress = function () {\n  var addressLength = 20;\n  var zeroAddress = exports.zeros(addressLength);\n  return exports.bufferToHex(zeroAddress);\n};\n\n/**\n * Left Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.\n * Or it truncates the beginning if it exceeds.\n * @method lsetLength\n * @param {Buffer|Array} msg the value to pad\n * @param {Number} length the number of bytes the output should be\n * @param {Boolean} [right=false] whether to start padding form the left or right\n * @return {Buffer|Array}\n */\nexports.setLengthLeft = exports.setLength = function (msg, length, right) {\n  var buf = exports.zeros(length);\n  msg = exports.toBuffer(msg);\n  if (right) {\n    if (msg.length < length) {\n      msg.copy(buf);\n      return buf;\n    }\n    return msg.slice(0, length);\n  } else {\n    if (msg.length < length) {\n      msg.copy(buf, length - msg.length);\n      return buf;\n    }\n    return msg.slice(-length);\n  }\n};\n\n/**\n * Right Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.\n * Or it truncates the beginning if it exceeds.\n * @param {Buffer|Array} msg the value to pad\n * @param {Number} length the number of bytes the output should be\n * @return {Buffer|Array}\n */\nexports.setLengthRight = function (msg, length) {\n  return exports.setLength(msg, length, true);\n};\n\n/**\n * Trims leading zeros from a `Buffer` or an `Array`\n * @param {Buffer|Array|String} a\n * @return {Buffer|Array|String}\n */\nexports.unpad = exports.stripZeros = function (a) {\n  a = exports.stripHexPrefix(a);\n  var first = a[0];\n  while (a.length > 0 && first.toString() === '0') {\n    a = a.slice(1);\n    first = a[0];\n  }\n  return a;\n};\n/**\n * Attempts to turn a value into a `Buffer`. As input it supports `Buffer`, `String`, `Number`, null/undefined, `BN` and other objects with a `toArray()` method.\n * @param {*} v the value\n */\nexports.toBuffer = function (v) {\n  if (!Buffer.isBuffer(v)) {\n    if (Array.isArray(v)) {\n      v = Buffer.from(v);\n    } else if (typeof v === 'string') {\n      if (exports.isHexString(v)) {\n        v = Buffer.from(exports.padToEven(exports.stripHexPrefix(v)), 'hex');\n      } else {\n        v = Buffer.from(v);\n      }\n    } else if (typeof v === 'number') {\n      v = exports.intToBuffer(v);\n    } else if (v === null || v === undefined) {\n      v = Buffer.allocUnsafe(0);\n    } else if (BN.isBN(v)) {\n      v = v.toArrayLike(Buffer);\n    } else if (v.toArray) {\n      // converts a BN to a Buffer\n      v = Buffer.from(v.toArray());\n    } else {\n      throw new Error('invalid type');\n    }\n  }\n  return v;\n};\n\n/**\n * Converts a `Buffer` to a `Number`\n * @param {Buffer} buf\n * @return {Number}\n * @throws If the input number exceeds 53 bits.\n */\nexports.bufferToInt = function (buf) {\n  return new BN(exports.toBuffer(buf)).toNumber();\n};\n\n/**\n * Converts a `Buffer` into a hex `String`\n * @param {Buffer} buf\n * @return {String}\n */\nexports.bufferToHex = function (buf) {\n  buf = exports.toBuffer(buf);\n  return '0x' + buf.toString('hex');\n};\n\n/**\n * Interprets a `Buffer` as a signed integer and returns a `BN`. Assumes 256-bit numbers.\n * @param {Buffer} num\n * @return {BN}\n */\nexports.fromSigned = function (num) {\n  return new BN(num).fromTwos(256);\n};\n\n/**\n * Converts a `BN` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.\n * @param {BN} num\n * @return {Buffer}\n */\nexports.toUnsigned = function (num) {\n  return Buffer.from(num.toTwos(256).toArray());\n};\n\n/**\n * Creates Keccak hash of the input\n * @param {Buffer|Array|String|Number} a the input data\n * @param {Number} [bits=256] the Keccak width\n * @return {Buffer}\n */\nexports.keccak = function (a, bits) {\n  a = exports.toBuffer(a);\n  if (!bits) bits = 256;\n\n  switch (bits) {\n    case 224:\n      {\n        return keccak224(a);\n      }\n    case 256:\n      {\n        return k256(a);\n      }\n    case 384:\n      {\n        return keccak384(a);\n      }\n    case 512:\n      {\n        return keccak512(a);\n      }\n    default:\n      {\n        throw new Error('Invald algorithm: keccak' + bits);\n      }\n  }\n};\n\n/**\n * Creates Keccak-256 hash of the input, alias for keccak(a, 256)\n * @param {Buffer|Array|String|Number} a the input data\n * @return {Buffer}\n */\nexports.keccak256 = function (a) {\n  return exports.keccak(a);\n};\n\n/**\n * Creates SHA-3 (Keccak) hash of the input [OBSOLETE]\n * @param {Buffer|Array|String|Number} a the input data\n * @param {Number} [bits=256] the SHA-3 width\n * @return {Buffer}\n */\nexports.sha3 = exports.keccak;\n\n/**\n * Creates SHA256 hash of the input\n * @param {Buffer|Array|String|Number} a the input data\n * @return {Buffer}\n */\nexports.sha256 = function (a) {\n  a = exports.toBuffer(a);\n  return createHash('sha256').update(a).digest();\n};\n\n/**\n * Creates RIPEMD160 hash of the input\n * @param {Buffer|Array|String|Number} a the input data\n * @param {Boolean} padded whether it should be padded to 256 bits or not\n * @return {Buffer}\n */\nexports.ripemd160 = function (a, padded) {\n  a = exports.toBuffer(a);\n  var hash = createHash('rmd160').update(a).digest();\n  if (padded === true) {\n    return exports.setLength(hash, 32);\n  } else {\n    return hash;\n  }\n};\n\n/**\n * Creates SHA-3 hash of the RLP encoded version of the input\n * @param {Buffer|Array|String|Number} a the input data\n * @return {Buffer}\n */\nexports.rlphash = function (a) {\n  return exports.keccak(rlp.encode(a));\n};\n\n/**\n * Checks if the private key satisfies the rules of the curve secp256k1.\n * @param {Buffer} privateKey\n * @return {Boolean}\n */\nexports.isValidPrivate = function (privateKey) {\n  return secp256k1.privateKeyVerify(privateKey);\n};\n\n/**\n * Checks if the public key satisfies the rules of the curve secp256k1\n * and the requirements of Ethereum.\n * @param {Buffer} publicKey The two points of an uncompressed key, unless sanitize is enabled\n * @param {Boolean} [sanitize=false] Accept public keys in other formats\n * @return {Boolean}\n */\nexports.isValidPublic = function (publicKey, sanitize) {\n  if (publicKey.length === 64) {\n    // Convert to SEC1 for secp256k1\n    return secp256k1.publicKeyVerify(Buffer.concat([Buffer.from([4]), publicKey]));\n  }\n\n  if (!sanitize) {\n    return false;\n  }\n\n  return secp256k1.publicKeyVerify(publicKey);\n};\n\n/**\n * Returns the ethereum address of a given public key.\n * Accepts \"Ethereum public keys\" and SEC1 encoded keys.\n * @param {Buffer} pubKey The two points of an uncompressed key, unless sanitize is enabled\n * @param {Boolean} [sanitize=false] Accept public keys in other formats\n * @return {Buffer}\n */\nexports.pubToAddress = exports.publicToAddress = function (pubKey, sanitize) {\n  pubKey = exports.toBuffer(pubKey);\n  if (sanitize && pubKey.length !== 64) {\n    pubKey = secp256k1.publicKeyConvert(pubKey, false).slice(1);\n  }\n  assert(pubKey.length === 64);\n  // Only take the lower 160bits of the hash\n  return exports.keccak(pubKey).slice(-20);\n};\n\n/**\n * Returns the ethereum public key of a given private key\n * @param {Buffer} privateKey A private key must be 256 bits wide\n * @return {Buffer}\n */\nvar privateToPublic = exports.privateToPublic = function (privateKey) {\n  privateKey = exports.toBuffer(privateKey);\n  // skip the type flag and use the X, Y points\n  return secp256k1.publicKeyCreate(privateKey, false).slice(1);\n};\n\n/**\n * Converts a public key to the Ethereum format.\n * @param {Buffer} publicKey\n * @return {Buffer}\n */\nexports.importPublic = function (publicKey) {\n  publicKey = exports.toBuffer(publicKey);\n  if (publicKey.length !== 64) {\n    publicKey = secp256k1.publicKeyConvert(publicKey, false).slice(1);\n  }\n  return publicKey;\n};\n\n/**\n * ECDSA sign\n * @param {Buffer} msgHash\n * @param {Buffer} privateKey\n * @return {Object}\n */\nexports.ecsign = function (msgHash, privateKey) {\n  var sig = secp256k1.sign(msgHash, privateKey);\n\n  var ret = {};\n  ret.r = sig.signature.slice(0, 32);\n  ret.s = sig.signature.slice(32, 64);\n  ret.v = sig.recovery + 27;\n  return ret;\n};\n\n/**\n * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.\n * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`\n * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key\n * used to produce the signature.\n * @param message\n * @returns {Buffer} hash\n */\nexports.hashPersonalMessage = function (message) {\n  var prefix = exports.toBuffer('\\x19Ethereum Signed Message:\\n' + message.length.toString());\n  return exports.keccak(Buffer.concat([prefix, message]));\n};\n\n/**\n * ECDSA public key recovery from signature\n * @param {Buffer} msgHash\n * @param {Number} v\n * @param {Buffer} r\n * @param {Buffer} s\n * @return {Buffer} publicKey\n */\nexports.ecrecover = function (msgHash, v, r, s) {\n  var signature = Buffer.concat([exports.setLength(r, 32), exports.setLength(s, 32)], 64);\n  var recovery = v - 27;\n  if (recovery !== 0 && recovery !== 1) {\n    throw new Error('Invalid signature v value');\n  }\n  var senderPubKey = secp256k1.recover(msgHash, signature, recovery);\n  return secp256k1.publicKeyConvert(senderPubKey, false).slice(1);\n};\n\n/**\n * Convert signature parameters into the format of `eth_sign` RPC method\n * @param {Number} v\n * @param {Buffer} r\n * @param {Buffer} s\n * @return {String} sig\n */\nexports.toRpcSig = function (v, r, s) {\n  // NOTE: with potential introduction of chainId this might need to be updated\n  if (v !== 27 && v !== 28) {\n    throw new Error('Invalid recovery id');\n  }\n\n  // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin\n  // FIXME: this might change in the future - https://github.com/ethereum/go-ethereum/issues/2053\n  return exports.bufferToHex(Buffer.concat([exports.setLengthLeft(r, 32), exports.setLengthLeft(s, 32), exports.toBuffer(v - 27)]));\n};\n\n/**\n * Convert signature format of the `eth_sign` RPC method to signature parameters\n * NOTE: all because of a bug in geth: https://github.com/ethereum/go-ethereum/issues/2053\n * @param {String} sig\n * @return {Object}\n */\nexports.fromRpcSig = function (sig) {\n  sig = exports.toBuffer(sig);\n\n  // NOTE: with potential introduction of chainId this might need to be updated\n  if (sig.length !== 65) {\n    throw new Error('Invalid signature length');\n  }\n\n  var v = sig[64];\n  // support both versions of `eth_sign` responses\n  if (v < 27) {\n    v += 27;\n  }\n\n  return {\n    v: v,\n    r: sig.slice(0, 32),\n    s: sig.slice(32, 64)\n  };\n};\n\n/**\n * Returns the ethereum address of a given private key\n * @param {Buffer} privateKey A private key must be 256 bits wide\n * @return {Buffer}\n */\nexports.privateToAddress = function (privateKey) {\n  return exports.publicToAddress(privateToPublic(privateKey));\n};\n\n/**\n * Checks if the address is a valid. Accepts checksummed addresses too\n * @param {String} address\n * @return {Boolean}\n */\nexports.isValidAddress = function (address) {\n  return (/^0x[0-9a-fA-F]{40}$/.test(address)\n  );\n};\n\n/**\n  * Checks if a given address is a zero address\n  * @method isZeroAddress\n  * @param {String} address\n  * @return {Boolean}\n  */\nexports.isZeroAddress = function (address) {\n  var zeroAddress = exports.zeroAddress();\n  return zeroAddress === exports.addHexPrefix(address);\n};\n\n/**\n * Returns a checksummed address\n * @param {String} address\n * @return {String}\n */\nexports.toChecksumAddress = function (address) {\n  address = exports.stripHexPrefix(address).toLowerCase();\n  var hash = exports.keccak(address).toString('hex');\n  var ret = '0x';\n\n  for (var i = 0; i < address.length; i++) {\n    if (parseInt(hash[i], 16) >= 8) {\n      ret += address[i].toUpperCase();\n    } else {\n      ret += address[i];\n    }\n  }\n\n  return ret;\n};\n\n/**\n * Checks if the address is a valid checksummed address\n * @param {Buffer} address\n * @return {Boolean}\n */\nexports.isValidChecksumAddress = function (address) {\n  return exports.isValidAddress(address) && exports.toChecksumAddress(address) === address;\n};\n\n/**\n * Generates an address of a newly created contract\n * @param {Buffer} from the address which is creating this new address\n * @param {Buffer} nonce the nonce of the from account\n * @return {Buffer}\n */\nexports.generateAddress = function (from, nonce) {\n  from = exports.toBuffer(from);\n  nonce = new BN(nonce);\n\n  if (nonce.isZero()) {\n    // in RLP we want to encode null in the case of zero nonce\n    // read the RLP documentation for an answer if you dare\n    nonce = null;\n  } else {\n    nonce = Buffer.from(nonce.toArray());\n  }\n\n  // Only take the lower 160bits of the hash\n  return exports.rlphash([from, nonce]).slice(-20);\n};\n\n/**\n * Returns true if the supplied address belongs to a precompiled account (Byzantium)\n * @param {Buffer|String} address\n * @return {Boolean}\n */\nexports.isPrecompiled = function (address) {\n  var a = exports.unpad(address);\n  return a.length === 1 && a[0] >= 1 && a[0] <= 8;\n};\n\n/**\n * Adds \"0x\" to a given `String` if it does not already start with \"0x\"\n * @param {String} str\n * @return {String}\n */\nexports.addHexPrefix = function (str) {\n  if (typeof str !== 'string') {\n    return str;\n  }\n\n  return exports.isHexPrefixed(str) ? str : '0x' + str;\n};\n\n/**\n * Validate ECDSA signature\n * @method isValidSignature\n * @param {Buffer} v\n * @param {Buffer} r\n * @param {Buffer} s\n * @param {Boolean} [homestead=true]\n * @return {Boolean}\n */\n\nexports.isValidSignature = function (v, r, s, homestead) {\n  var SECP256K1_N_DIV_2 = new BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);\n  var SECP256K1_N = new BN('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141', 16);\n\n  if (r.length !== 32 || s.length !== 32) {\n    return false;\n  }\n\n  if (v !== 27 && v !== 28) {\n    return false;\n  }\n\n  r = new BN(r);\n  s = new BN(s);\n\n  if (r.isZero() || r.gt(SECP256K1_N) || s.isZero() || s.gt(SECP256K1_N)) {\n    return false;\n  }\n\n  if (homestead === false && new BN(s).cmp(SECP256K1_N_DIV_2) === 1) {\n    return false;\n  }\n\n  return true;\n};\n\n/**\n * Converts a `Buffer` or `Array` to JSON\n * @param {Buffer|Array} ba\n * @return {Array|String|null}\n */\nexports.baToJSON = function (ba) {\n  if (Buffer.isBuffer(ba)) {\n    return '0x' + ba.toString('hex');\n  } else if (ba instanceof Array) {\n    var array = [];\n    for (var i = 0; i < ba.length; i++) {\n      array.push(exports.baToJSON(ba[i]));\n    }\n    return array;\n  }\n};\n\n/**\n * Defines properties on a `Object`. It make the assumption that underlying data is binary.\n * @param {Object} self the `Object` to define properties on\n * @param {Array} fields an array fields to define. Fields can contain:\n * * `name` - the name of the properties\n * * `length` - the number of bytes the field can have\n * * `allowLess` - if the field can be less than the length\n * * `allowEmpty`\n * @param {*} data data to be validated against the definitions\n */\nexports.defineProperties = function (self, fields, data) {\n  self.raw = [];\n  self._fields = [];\n\n  // attach the `toJSON`\n  self.toJSON = function (label) {\n    if (label) {\n      var obj = {};\n      self._fields.forEach(function (field) {\n        obj[field] = '0x' + self[field].toString('hex');\n      });\n      return obj;\n    }\n    return exports.baToJSON(this.raw);\n  };\n\n  self.serialize = function serialize() {\n    return rlp.encode(self.raw);\n  };\n\n  fields.forEach(function (field, i) {\n    self._fields.push(field.name);\n    function getter() {\n      return self.raw[i];\n    }\n    function setter(v) {\n      v = exports.toBuffer(v);\n\n      if (v.toString('hex') === '00' && !field.allowZero) {\n        v = Buffer.allocUnsafe(0);\n      }\n\n      if (field.allowLess && field.length) {\n        v = exports.stripZeros(v);\n        assert(field.length >= v.length, 'The field ' + field.name + ' must not have more ' + field.length + ' bytes');\n      } else if (!(field.allowZero && v.length === 0) && field.length) {\n        assert(field.length === v.length, 'The field ' + field.name + ' must have byte length of ' + field.length);\n      }\n\n      self.raw[i] = v;\n    }\n\n    Object.defineProperty(self, field.name, {\n      enumerable: true,\n      configurable: true,\n      get: getter,\n      set: setter\n    });\n\n    if (field.default) {\n      self[field.name] = field.default;\n    }\n\n    // attach alias\n    if (field.alias) {\n      Object.defineProperty(self, field.alias, {\n        enumerable: false,\n        configurable: true,\n        set: setter,\n        get: getter\n      });\n    }\n  });\n\n  // if the constuctor is passed data\n  if (data) {\n    if (typeof data === 'string') {\n      data = Buffer.from(exports.stripHexPrefix(data), 'hex');\n    }\n\n    if (Buffer.isBuffer(data)) {\n      data = rlp.decode(data);\n    }\n\n    if (Array.isArray(data)) {\n      if (data.length > self._fields.length) {\n        throw new Error('wrong number of fields in data');\n      }\n\n      // make sure all the items are buffers\n      data.forEach(function (d, i) {\n        self[self._fields[i]] = exports.toBuffer(d);\n      });\n    } else if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) === 'object') {\n      var keys = Object.keys(data);\n      fields.forEach(function (field) {\n        if (keys.indexOf(field.name) !== -1) self[field.name] = data[field.name];\n        if (keys.indexOf(field.alias) !== -1) self[field.alias] = data[field.alias];\n      });\n    } else {\n      throw new Error('invalid data');\n    }\n  }\n};\n};"],
"names":["shadow$provide","global","require","module","exports","_typeof","Symbol","iterator","obj","constructor","prototype","_require","keccak224","keccak384","k256","keccak256","keccak512","secp256k1","assert","rlp","BN","createHash","Buffer","Object","assign","MAX_INTEGER","TWO_POW256","KECCAK256_NULL_S","SHA3_NULL_S","KECCAK256_NULL","from","SHA3_NULL","KECCAK256_RLP_ARRAY_S","SHA3_RLP_ARRAY_S","KECCAK256_RLP_ARRAY","SHA3_RLP_ARRAY","KECCAK256_RLP_S","SHA3_RLP_S","KECCAK256_RLP","SHA3_RLP","zeros","exports.zeros","bytes","allocUnsafe","fill","zeroAddress","exports.zeroAddress","addressLength","bufferToHex","setLengthLeft","setLength","exports.setLength","msg","length","right","buf","toBuffer","copy","slice","setLengthRight","exports.setLengthRight","unpad","stripZeros","exports.stripZeros","a","stripHexPrefix","first","toString","exports.toBuffer","v","isBuffer","Array","isArray","isHexString","padToEven","intToBuffer","undefined","isBN","toArrayLike","toArray","Error","bufferToInt","exports.bufferToInt","toNumber","exports.bufferToHex","fromSigned","exports.fromSigned","num","fromTwos","toUnsigned","exports.toUnsigned","toTwos","keccak","exports.keccak","bits","exports.keccak256","sha3","sha256","exports.sha256","update","digest","ripemd160","exports.ripemd160","padded","hash","rlphash","exports.rlphash","encode","isValidPrivate","exports.isValidPrivate","privateKey","privateKeyVerify","isValidPublic","exports.isValidPublic","publicKey","sanitize","publicKeyVerify","concat","pubToAddress","publicToAddress","exports.publicToAddress","pubKey","publicKeyConvert","privateToPublic","exports.privateToPublic","publicKeyCreate","importPublic","exports.importPublic","ecsign","exports.ecsign","msgHash","sig","sign","ret","r","signature","s","recovery","hashPersonalMessage","exports.hashPersonalMessage","message","prefix","ecrecover","exports.ecrecover","senderPubKey","recover","toRpcSig","exports.toRpcSig","fromRpcSig","exports.fromRpcSig","privateToAddress","exports.privateToAddress","isValidAddress","exports.isValidAddress","address","test","isZeroAddress","exports.isZeroAddress","addHexPrefix","toChecksumAddress","exports.toChecksumAddress","toLowerCase","i","parseInt","toUpperCase","isValidChecksumAddress","exports.isValidChecksumAddress","generateAddress","exports.generateAddress","nonce","isZero","isPrecompiled","exports.isPrecompiled","exports.addHexPrefix","str","isHexPrefixed","isValidSignature","exports.isValidSignature","homestead","SECP256K1_N_DIV_2","SECP256K1_N","gt","cmp","baToJSON","exports.baToJSON","ba","array","push","defineProperties","exports.defineProperties","self","fields","data","raw","_fields","toJSON","self.toJSON","label","forEach","field","serialize","self.serialize","getter","setter","allowZero","allowLess","name","defineProperty","enumerable","configurable","get","set","default","alias","decode","d","keys","indexOf"]
}
