{
"version":3,
"file":"module$node_modules$eth_json_rpc_filters$hexUtils.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAe,iDAAf,CAAsE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAwB9GC,QAASA,cAAa,CAACC,IAAD,CAAO,CAC3B,MAAOA,KAAA,CAAKC,IAAL,CAAU,CAACC,IAAD,CAAOC,IAAP,CAAA,EACF,QAAb,GAAID,IAAJ,EAAkC,UAAlC,GAAyBC,IAAzB,CAAqD,CAArD,CACa,QAAb,GAAIA,IAAJ,EAAkC,UAAlC,GAAyBD,IAAzB,CAAqD,EAArD,CACOE,QAAA,CAASF,IAAT,CADP,CACwBE,QAAA,CAASD,IAAT,CAHnB,CADoB,CAgB7BC,QAASA,SAAQ,CAACC,SAAD,CAAY,CAC3B,MAAkBC,KAAAA,EAAlB,GAAID,SAAJ,EAA6C,IAA7C,GAA+BA,SAA/B,CAA0DA,SAA1D,CACOE,MAAA,CAAOC,QAAP,CAAgBH,SAAhB,CAA2B,EAA3B,CAFoB,CAW7BI,QAASA,SAAQ,CAACC,GAAD,CAAM,CACrB,GAAYJ,IAAAA,EAAZ,GAAII,GAAJ,EAAiC,IAAjC,GAAyBA,GAAzB,CAAuC,MAAOA,IAC1CL,IAAAA,CAAYK,GAAA,CAAIC,QAAJ,CAAa,EAAb,CACKN,IACrB,CAD+BO,MAC/B,CADwC,CACxC,GAAkBP,GAAlB,CAA8B,GAA9B,CAAoCA,GAApC,CACA,OAAO,IAAP;AAAcA,GALO,CAjDvBR,MAAA,CAAOC,OAAP,CAAiB,CACfe,YAWFA,QAAoB,CAAC,GAAGb,IAAJ,CAAU,CAE5B,MADmBD,cAAAe,CAAcd,IAAdc,CACZ,CAAW,CAAX,CAFqB,CAZb,CAEfC,YAeFA,QAAoB,CAAC,GAAGf,IAAJ,CAAU,CACtBc,IAAAA,CAAaf,aAAA,CAAcC,IAAd,CACnB,OAAOc,KAAA,CAAWA,IAAX,CAAsBF,MAAtB,CAA6B,CAA7B,CAFqB,CAjBb,CAGfb,aAHe,CAIfiB,QA0BFA,QAAgB,CAACC,EAAD,CAAK,CACnB,MAAO,IAAP,CAAcA,EAAA,CAAGN,QAAH,CAAY,EAAZ,CADK,CA9BJ,CAKfO,iBA6BFA,QAAyB,CAACC,QAAD,CAAU,CACjC,MAAOA,SAAP,EAAmB,CAAC,CAAC,UAAD,CAAa,QAAb,CAAuB,SAAvB,CAAA,CAAkCC,QAAlC,CAA2CD,QAA3C,CADa,CAlClB,CAMff,QANe,CAOfiB,gBAoCFA,QAAwB,CAAChB,SAAD,CAAW,CACjC,GAAkBC,IAAAA,EAAlB,GAAID,SAAJ,EAA6C,IAA7C,GAA+BA,SAA/B,CAAmD,MAAOA,UACpDiB,UAAAA,CAAQlB,QAAA,CAASC,SAAT,CACd,OAAOI,SAAA,CAASa,SAAT,CAAiB,CAAjB,CAH0B,CA3ClB,CAQfb,QARe;AASfc,kBAgDFA,QAA0B,CAACC,SAAD,CAAY,CACpC,IAAIC,OAAS,IACb,KAAK,IAAIC,EAAI,CAAb,CAAgBA,CAAhB,CAAoBF,SAApB,CAA+BE,CAAA,EAA/B,CACED,MACA,EAMKE,IAAA,CAAKC,KAAL,CAA2B,EAA3B,CAAWD,IAAA,CAAKE,MAAL,EAAX,CAAA,CAA+BlB,QAA/B,CAAwC,EAAxC,CANL,CAAAc,MAAA,EAMKE,IAAA,CAAKC,KAAL,CAA2B,EAA3B,CAAWD,IAAA,CAAKE,MAAL,EAAX,CAAA,CAA+BlB,QAA/B,CAAwC,EAAxC,CAJP,OAAOc,OAN6B,CAzDrB,CAF6F;",
"sources":["node_modules/eth-json-rpc-filters/hexUtils.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$eth_json_rpc_filters$hexUtils\"] = function(global,require,module,exports) {\n\nmodule.exports = {\n  minBlockRef,\n  maxBlockRef,\n  sortBlockRefs,\n  bnToHex,\n  blockRefIsNumber,\n  hexToInt,\n  incrementHexInt,\n  intToHex,\n  unsafeRandomBytes,\n}\n\nfunction minBlockRef(...refs) {\n  const sortedRefs = sortBlockRefs(refs)\n  return sortedRefs[0]\n}\n\nfunction maxBlockRef(...refs) {\n  const sortedRefs = sortBlockRefs(refs)\n  return sortedRefs[sortedRefs.length-1]\n}\n\nfunction sortBlockRefs(refs) {\n  return refs.sort((refA, refB) => {\n    if (refA === 'latest' || refB === 'earliest') return 1\n    if (refB === 'latest' || refA === 'earliest') return -1\n    return hexToInt(refA) - hexToInt(refB)\n  })\n}\n\nfunction bnToHex(bn) {\n  return '0x' + bn.toString(16)\n}\n\nfunction blockRefIsNumber(blockRef){\n  return blockRef && !['earliest', 'latest', 'pending'].includes(blockRef)\n}\n\nfunction hexToInt(hexString) {\n  if (hexString === undefined || hexString === null) return hexString\n  return Number.parseInt(hexString, 16)\n}\n\nfunction incrementHexInt(hexString){\n  if (hexString === undefined || hexString === null) return hexString\n  const value = hexToInt(hexString)\n  return intToHex(value + 1)\n}\n\nfunction intToHex(int) {\n  if (int === undefined || int === null) return int\n  let hexString = int.toString(16)\n  const needsLeftPad = hexString.length % 2\n  if (needsLeftPad) hexString = '0' + hexString\n  return '0x' + hexString\n}\n\nfunction unsafeRandomBytes(byteCount) {\n  let result = '0x'\n  for (let i = 0; i < byteCount; i++) {\n    result += unsafeRandomNibble()\n    result += unsafeRandomNibble()\n  }\n  return result\n}\n\nfunction unsafeRandomNibble() {\n  return Math.floor(Math.random() * 16).toString(16)\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","sortBlockRefs","refs","sort","refA","refB","hexToInt","hexString","undefined","Number","parseInt","intToHex","int","toString","length","minBlockRef","sortedRefs","maxBlockRef","bnToHex","bn","blockRefIsNumber","blockRef","includes","incrementHexInt","value","unsafeRandomBytes","byteCount","result","i","Math","floor","random"]
}
