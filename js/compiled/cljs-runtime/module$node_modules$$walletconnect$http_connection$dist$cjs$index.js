shadow$provide.module$node_modules$$walletconnect$http_connection$dist$cjs$index=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});global=require("module$node_modules$tslib$tslib").__importDefault(require("module$node_modules$eventemitter3$index"));module=require("module$node_modules$xhr2_cookies$dist$index");const XHR=require("module$node_modules$$walletconnect$utils$dist$cjs$index").getFromWindow("XMLHttpRequest")||module.XMLHttpRequest;class HTTPConnection extends global.default{constructor(url){super();
this.url=url}formatError(payload,message,code=-1){return{error:{message,code},id:payload.id,jsonrpc:payload.jsonrpc}}send(payload,internal){return new Promise(resolve=>{if("eth_subscribe"===payload.method){const error=this.formatError(payload,"Subscriptions are not supported by this HTTP endpoint");this.emit("error",error);return resolve(error)}const xhr=new XHR;let responded=!1;const res=(err,result)=>{if(!responded)if(xhr.abort(),responded=!0,internal)internal(err,result);else{const {id,jsonrpc}=
payload;err=err?{id,jsonrpc,error:{message:err.message,code:err.code}}:{id,jsonrpc,result};this.emit("payload",err);resolve(err)}};xhr.open("POST",this.url,!0);xhr.setRequestHeader("Content-Type","application/json");xhr.timeout=6E4;xhr.onerror=res;xhr.ontimeout=res;xhr.onreadystatechange=()=>{if(4===xhr.readyState)try{const response=JSON.parse(xhr.responseText);res(response.error,response.result)}catch(e){res(e)}};xhr.send(JSON.stringify(payload))})}}exports.default=HTTPConnection}
//# sourceMappingURL=module$node_modules$$walletconnect$http_connection$dist$cjs$index.js.map
