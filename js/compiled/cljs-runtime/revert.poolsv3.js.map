{"version":3,"sources":["revert/poolsv3.cljs"],"mappings":"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","names":["revert.poolsv3/mngr-abi","js/module$node_modules$$uniswap$v3_periphery$artifacts$contracts$NonfungiblePositionManager_sol$NonfungiblePositionManager_json","revert.poolsv3/mngr-iface-abi","js/module$node_modules$$uniswap$v3_periphery$artifacts$contracts$interfaces$INonfungiblePositionManager_sol$INonfungiblePositionManager_json","revert.poolsv3/mgmt-contract","revert.ethereum/make-contract","revert.poolsv3/mgmt-iface","revert.ethereum/make-interface","revert.poolsv3/pstate-abi","js/module$node_modules$$uniswap$v3_core$artifacts$contracts$interfaces$pool$IUniswapV3PoolState_sol$IUniswapV3PoolState_json","revert.poolsv3/pstate-iface","revert.poolsv3/counterfactual-fees-old","fee-growth-global","fee-growth-outside-lower","fee-growth-outside-upper","fee-growth-insinde-last","pool","liquidity","tick-lower","tick-upper","fee-growth-below","fee-growth-above","fee-growth-inside","current-fee-growth","Math/pow","revert.poolsv3/total-fees","position","fees0","fees1","bignumber.core/+","bignumber.core/*","revert.utils/bn","revert.utils/ebn->bn","revert.poolsv3/<account-balance","account","c__52208__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__52209__auto__","switch__52185__auto__","state_115031","state_val_115032","inst_115015","inst_115016","cljs.core.async.interop/p->c","cljs.core.async.impl.ioc-helpers/take!","inst_115018","inst_115019","cljs.core/ExceptionInfo","inst_115020","cljs.core/ex-data","inst_115021","inst_115022","cljs.core._EQ_","inst_115023","statearr-115033","statearr-115034","statearr-115035","inst_115025","statearr-115036","statearr-115037","inst_115028","inst_115029","cljs.core.async.impl.ioc-helpers/return-chan","statearr-115038","state-machine__52186__auto__","ret-value__52187__auto__","result__52188__auto__","cljs.core/keyword-identical?","ex__52189__auto__","e115039","statearr-115040","cljs.core/seq","statearr-115041","cljs.core/first","state__52210__auto__","statearr-115042","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","revert.poolsv3/<account-token-by-index","i","state_115059","state_val_115060","inst_115043","inst_115044","inst_115046","inst_115047","inst_115048","inst_115049","inst_115050","inst_115051","statearr-115061","statearr-115062","statearr-115063","inst_115053","statearr-115064","statearr-115065","inst_115056","inst_115057","statearr-115066","e115067","statearr-115068","statearr-115069","statearr-115070","revert.poolsv3/<account-token-ids","n","cljs.core.map","state_115075","state_val_115076","inst_115071","inst_115073","statearr-115077","e115078","statearr-115079","statearr-115080","statearr-115081","cljs.core.range","cljs.core.async.merge","cljs.core.async/reduce","cljs.core/conj","revert.poolsv3/tokens0-owed","revert.poolsv3/tokens1-owed","revert.poolsv3/fee-growth-inside0","revert.poolsv3/fee-growth-inside1","revert.poolsv3/fee-growth-outside0","fee-growths","revert.poolsv3/fee-growth-outside1","revert.poolsv3/<fee-growth-global0","pool-state","state_115097","state_val_115098","inst_115082","inst_115083","inst_115085","inst_115086","inst_115087","inst_115088","inst_115089","inst_115090","statearr-115099","statearr-115100","statearr-115101","inst_115092","statearr-115102","statearr-115103","inst_115095","statearr-115104","e115105","statearr-115106","statearr-115107","statearr-115108","revert.poolsv3/<fee-growth-global1","state_115124","state_val_115125","inst_115109","inst_115110","inst_115112","inst_115113","inst_115114","inst_115115","inst_115116","inst_115117","statearr-115126","statearr-115127","statearr-115128","inst_115119","statearr-115129","statearr-115130","inst_115122","statearr-115131","e115132","statearr-115133","statearr-115134","statearr-115135","revert.poolsv3/<token-position","v3state","token-id","state_115247","state_val_115248","inst_115150","inst_115170","inst_115160","inst_115181","inst_115182","inst_115183","inst_115184","inst_115185","inst_115186","statearr-115249","inst_115136","inst_115137","inst_115138","inst_115140","statearr-115250","inst_115178","inst_115174","inst_115200","inst_115172","inst_115169","inst_115202","inst_115157","inst_115218","inst_115219","inst_115220","inst_115221","inst_115222","inst_115223","inst_115224","inst_115225","inst_115226","inst_115227","inst_115228","inst_115229","inst_115230","inst_115231","inst_115232","inst_115233","inst_115234","inst_115235","inst_115236","inst_115237","inst_115238","inst_115239","inst_115240","inst_115241","inst_115242","inst_115243","inst_115244","inst_115245","cljs.core/PersistentHashMap","inst_115208","inst_115215","statearr-115251","inst_115177","inst_115179","statearr-115252","inst_115147","statearr-115253","inst_115209","inst_115210","inst_115211","inst_115212","inst_115213","statearr-115254","statearr-115255","statearr-115256","inst_115141","inst_115142","inst_115143","inst_115144","inst_115145","statearr-115257","statearr-115258","statearr-115259","inst_115198","inst_115199","inst_115201","inst_115203","inst_115204","inst_115205","inst_115206","statearr-115260","inst_115188","inst_115195","statearr-115261","inst_115151","inst_115152","inst_115153","inst_115154","inst_115155","inst_115156","inst_115158","inst_115159","inst_115161","js/module$node_modules$$uniswap$sdk_core$dist$index.Token","inst_115162","inst_115163","inst_115164","inst_115165","inst_115166","inst_115167","inst_115168","inst_115171","inst_115173","inst_115175","statearr-115262","statearr-115263","statearr-115264","inst_115189","inst_115190","inst_115191","inst_115192","inst_115193","statearr-115265","statearr-115266","statearr-115267","statearr-115268","e115269","statearr-115270","statearr-115271","statearr-115272","clojure.string/lower-case","cljs.core.get","js/module$node_modules$$uniswap$v3_sdk$dist$index.computePoolAddress","cljs.core/clj->js","js/module$node_modules$$uniswap$v3_sdk$dist$index.FACTORY_ADDRESS","revert.poolsv3/<token-positions","token-ids","state_115277","state_val_115278","inst_115273","inst_115275","statearr-115279","e115280","statearr-115281","statearr-115282","statearr-115283","revert.poolsv3/decode-liquidity-event","event","token1-decimals","token2-decimals","e115284","event-obj","event-type","G__115285","js/Error","args","amount0","amount1","err","js/console.log","revert.poolsv3/make-liqevent-map","liqevent-txr","tx","re","txhash","block-number","gas-decimals","eth-decimals","gas-price","gas-used","event-logs","cljs.core.filter","cljs.core/some?","p1__115286#","gas-used'","bignumber.core//","cljs.core/count","p1__115287#","cljs.core.into","revert.poolsv3/<get-nft-events","tx-hashes","state_115296","state_val_115297","inst_115289","inst_115291","inst_115292","p1__115288#","inst_115293","inst_115294","statearr-115298","e115299","statearr-115300","statearr-115301","statearr-115302","token0-decimals","nft-txrs","revert.ethereum/<get-trxs","cljs.core.mapcat","revert.poolsv3/parse-token","token","eth-price","js/parseInt","revert.poolsv3/parse-pool","address0","address1","decimals0","decimals1","network","token0","token1","fee-string","address","revert.poolsv3/pool-by-attrs","pools","fee-tier","cljs.core/vals","revert.poolsv3/parse-liqevent-tx","liqevent","tx-hash","type-key","token0-qty","token1-qty","revert.poolsv3/parse-position","tokens","revert.poolsv3/position-reducer","positions","p","matched-position","p1__115303#","matched-liquidity","other-positions","p1__115304#","cljs.core.not_EQ_","new-mints","cljs.core.concat","new-burns","liquidity-minted","cljs.core.reduce","liquidity-burned","new-pos","bignumber.core/-","cljs.core.conj","revert.poolsv3/parse-liqevents","mint-liqevents","burn-liqevents","mints","p1__115305#","burns","p1__115306#","events","p1__115307#","cljs.core.comp","cljs.core.juxt","tokens'","cljs.core.distinct","p1__115308#","cljs.core.apply","cljs.core/merge","p1__115309#","pools'","p1__115310#","v3positions","p1__115311#","v3positions'","revert.poolsv3/nft-reducer","nft-event","events-type","G__115316","cljs.core/Keyword","p1__115312#","cljs.core/contains?","cljs.core/set","p1__115313#","possible-events","matched-event","p1__115314#","other-events","p1__115315#","updated-event","seperated-position","cljs.core/not","bignumber.core/=","updated-position","revert.poolsv3/merge-nfts","nft-events","positions'","revert.poolsv3/make-position-collect","parsed-event","tx-args","revert.poolsv3/make-gaspaid-map","txr","revert.poolsv3/<nft-collects","nft-id","user-filter","G__115318","_","state_115346","state_val_115347","inst_115319","cljs.core/deref","inst_115320","inst_115321","inst_115323","inst_115324","inst_115325","inst_115326","inst_115327","inst_115328","statearr-115348","statearr-115349","statearr-115350","inst_115330","statearr-115351","statearr-115352","inst_115333","inst_115334","inst_115335","inst_115336","statearr-115353","inst_115338","inst_115339","inst_115340","p1__115317#","inst_115341","inst_115342","inst_115343","inst_115344","statearr-115354","e115355","statearr-115356","statearr-115357","statearr-115358","filtered-txs","revert.ethereum/provider","parsed-collects","collect-txrs","collect-gases","cljs.core/group-by","revert.poolsv3/<multi-nft-collects","nft-ids","state_115363","state_val_115364","inst_115359","inst_115361","statearr-115365","e115366","statearr-115367","statearr-115368","statearr-115369","cljs.core/concat","revert.poolsv3/collects-reducer","collect-event","p1__115370#","p1__115371#","qty0","qty1","collect","updated-collects","revert.poolsv3/merge-collects","nft-collects","v3state'","revert.poolsv3/position-price-lower","e115372","revert.poolsv3/position-price-upper","e115373","revert.poolsv3/posstate-reducer","position-state","p1__115374#","p1__115375#","token0-obj","token1-obj","sq-price","revert.utils/ethpu","tick","pool-obj","js/module$node_modules$$uniswap$v3_sdk$dist$index.Pool","my-pos","js/module$node_modules$$uniswap$v3_sdk$dist$index.Position","token0-pl","token0-pu","parsed-state","pool'","cljs.core.assoc","revert.poolsv3/merge-position-states","nft-positions","revert.poolsv3/token-fees","tokens-owed","fee-growth-inside-last","current-tick","bignumber.core/>=","bignumber.core/<","revert.poolsv3/counterfactual-fees","nft-position","p1__115376#","fee-growth-global0","tokens-owed0","fee-growth-outside-lower0","fee-growth-outside-upper0","fee-growth-inside-last0","fee-growth-global1","tokens-owed1","fee-growth-outside-lower1","fee-growth-outside-upper1","fee-growth-inside-last1","revert.poolsv3/merge-pending-fees","fees","revert.poolsv3/<pools-dailys","pool-attrs","p__115377","vec__115378","cljs.core.nth","paddress","t0address","t1address","state_115385","state_val_115386","inst_115381","inst_115383","statearr-115387","e115388","statearr-115389","statearr-115390","statearr-115391","revert.thegraph/<v3-pool-days","revert.poolsv3/make-history-snapshots","pool-dailys","pool-dailys'","cljs.core/butlast","cljs.core/reverse","cljs.core.sort_by","init-date","cljs.core/last","init-price0-usd","init-price1-usd","d","revert.utils/price-divergence","revert.poolsv3/merge-pool-dailys","pools-grouped","pool-hists","v","revert.poolsv3/<pool-histories","pool-address","days","state_115408","state_val_115409","inst_115395","inst_115397","inst_115398","inst_115399","inst_115400","inst_115402","inst_115403","inst_115404","inst_115405","inst_115406","statearr-115410","e115411","statearr-115412","statearr-115413","statearr-115414","revert.thegraph/<v3-pool-tokens","revert.thegraph._LT_v3_pool_days","revert.poolsv3/<fetch-account-state","account-or-ens","state_115468","state_val_115469","inst_115430","inst_115433","inst_115434","statearr-115470","statearr-115471","inst_115415","inst_115416","inst_115417","inst_115418","cljs.core/PersistentVector","inst_115419","inst_115420","inst_115421","inst_115422","statearr-115472","statearr-115473","inst_115431","statearr-115474","inst_115466","inst_115459","inst_115462","inst_115463","statearr-115475","cljs.core/rest","statearr-115476","statearr-115477","cljs.core/cons","inst_115428","inst_115454","inst_115457","inst_115458","inst_115460","statearr-115479","inst_115437","inst_115450","inst_115448","inst_115447","inst_115449","inst_115451","statearr-115480","statearr-115481","ex115478","statearr-115482","statearr-115483","inst_115453","inst_115455","statearr-115484","inst_115436","inst_115438","inst_115439","inst_115440","inst_115441","inst_115442","inst_115443","inst_115444","inst_115445","statearr-115485","statearr-115486","e115487","statearr-115488","statearr-115489","statearr-115490","revert.ethereum/<resolve-address","revert.thegraph/<v3-user-mints","revert.thegraph/<v3-user-burns"],"sourcesContent":["(ns revert.poolsv3\n  (:require\n   [clojure.string :as string]\n   [cljs.core.async :refer [go]]\n   [cljs.core.async.interop :refer-macros [<p!]]\n   [bignumber.core :as bn]\n   [\"@uniswap/sdk-core\" :as sdk-core]\n   [\"@uniswap/v3-sdk\" :as univ3]\n   [\"@uniswap/v3-periphery/artifacts/contracts/NonfungiblePositionManager.sol/NonfungiblePositionManager.json\" :as nftmgmt-abi]\n   [\"@uniswap/v3-core/artifacts/contracts/interfaces/pool/IUniswapV3PoolState.sol/IUniswapV3PoolState.json\" :as pool-state-abi]\n   [\"@uniswap/v3-periphery/artifacts/contracts/interfaces/INonfungiblePositionManager.sol/INonfungiblePositionManager.json\" :as mgmt-iface-abi]\n   [revert.utils :as u]\n   [revert.ethereum :as ethereum]\n   [revert.thegraph :as thegraph]))\n\n\n\n(def mngr-abi (.-abi nftmgmt-abi))\n(def mngr-iface-abi (.-abi mgmt-iface-abi))\n(def mgmt-contract (ethereum/make-contract mngr-abi \"0xc36442b4a4522e871399cd717abdd847ab11fe88\"))\n(def mgmt-iface (ethereum/make-interface mngr-iface-abi))\n\n(def pstate-abi (.-abi pool-state-abi))\n(def pstate-iface (ethereum/make-interface pstate-abi))\n\n\n#_(def pstate (ethereum/make-contract pstate-abi \"0x1d42064fc4beb5f8aaf85f4617ae8b3b5b8bd801\"))\n#_(def pstatewe (ethereum/make-contract pstate-abi \"0xCBCdF9626bC03E24f779434178A73a0B4bad62eD\"))\n#_(go (def slot0 (<p! (. pstate slot0))))\n#_(go (def slot0we (<p! (. pstatewe slot0))))\n#_(go (def liquidity (<p! (. pstate liquidity))))\n#_(go (def liquiditywe (<p! (. pstatewe liquidity))))\n#_(.-tick slot0)\n#_(.-sqrtPriceX96 slot0)\n\n\n\n#_(def token0 (sdk-core/Token. 1 \"0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984\" 18))\n#_(def token1 (sdk-core/Token. 1 \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\" 18))\n#_(def usdc (sdk-core/Token. 1 \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\" 6))\n\n#_(def token-test1 (sdk-core/Token. 1 \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\" 18 \"USDC\" \"USD Coin\"))\n#_(def token-test2 (sdk-core/Token. 1 \"0x6B175474E89094C44Da98b954EedeAC495271d0F\" 18 \"DAI\" \"DAI Stablecoin\"))\n\n#_(def weth (sdk-core/Token. 1 (string/lower-case \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\") 18))\n#_(def wbtc (sdk-core/Token. 1 (string/lower-case \"0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599\") 8))\n\n#_(def tokenx (sdk-core/Token. 1 \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\" 6))\n\n#_(def pool (univ3/Pool. token0, token1, 3000, (.-sqrtPriceX96 slot0), liquidity, (.-tick slot0)))\n#_(def poolwe (univ3/Pool. weth, wbtc, 3000, (.-sqrtPriceX96 slot0we), liquiditywe, (.-tick slot0we)))\n#_(. (. pool -token1Price) toFixed)\n#_(. (. poolwe -token1Price) toFixed)\n\n#_(def addy (univ3/computePoolAddress (clj->js {:factoryAddress\"0x1F98431c8aD98523631AE4a59f267346ea31F984\"\n                                              :tokenA token0 :tokenB token1 :fee 3000})))\n\n#_(def addy (univ3/computePoolAddress (clj->js {:factoryAddress univ3/FACTORY_ADDRESS\n                                                   :tokenA token0 :tokenB token1 :fee 3000})))\n\n\n#_(def wbtceth (univ3/computePoolAddress (clj->js {:factoryAddress univ3/FACTORY_ADDRESS\n                                                   :tokenA wbtc :tokenB weth :fee 3000})))\n\n\n#_(. pstate -feeGrowthGlobal0X128)\n;;(def usdc0-pool (univ3/Pool. token0, usdc, 3000, (.-sqrtPriceX96 slot0), liquidity, (.-tick slot0)))\n\n\n#_(def c1 (ethereum/make-contract  mngr-abi \"0xc36442b4a4522e871399cd717abdd847ab11fe88\"))\n#_(go (def apos (<p! (. c1 positions 169))))\n#_(go (def aposwe (<p! (. c1 positions 11770))))\n\n\n#_(def my-pos (univ3/Position.\n             (clj->js {:pool pool,\n                       :liquidity (str (nth apos 7)),\n                       :tickLower (nth apos 5),\n                       :tickUpper (nth apos 6)})))\n\n#_(def my-poswe (univ3/Position.\n                 (clj->js {:pool poolwe,\n                           :liquidity (str (nth aposwe 7)),\n                           :tickLower (nth aposwe 5),\n                           :tickUpper (nth aposwe 6)})))\n\n\n\n\n#_(. (. my-pos -amount0) toFixed)\n#_(. (. my-pos -amount1) toFixed)\n#_(. (. pool -token0Price) quote (. my-pos -amount0))\n\n\n#_(go (def fee-growth-global0 (u/ebn->bn  (<p! (. pstate feeGrowthGlobal0X128)) 18)))\n#_(go (def fee-growth-global1 (u/ebn->bn (<p! (. pstate feeGrowthGlobal1X128)) 18)))\n\n\n#_(go (def fee-growths-lower (<p! (. pstate ticks (. apos -tickLower)))))\n#_(def fee-growth-outside-lower0 (u/ebn->bn (. fee-growths-lower -feeGrowthOutside0X128) 18))\n#_(def fee-growth-outside-lower1 (u/ebn->bn (. fee-growths-lower -feeGrowthOutside1X128) 18))\n\n\n#_(go (def fee-growths-upper (<p! (. pstate ticks (. apos -tickUpper)))))\n#_(def fee-growth-outside-upper0 (u/ebn->bn (. fee-growths-upper -feeGrowthOutside0X128) 18))\n#_(def fee-growth-outside-upper1 (u/ebn->bn (. fee-growths-upper -feeGrowthOutside1X128) 18))\n\n\n\n#_(go (def fee-growth-global0we (u/ebn->bn  (<p! (. pstatewe feeGrowthGlobal0X128)) 8)))\n#_(go (def fee-growth-global1we (u/ebn->bn (<p! (. pstatewe feeGrowthGlobal1X128)) 18)))\n\n\n#_(go (def fee-growths-lowerwe (<p! (. pstatewe ticks (. aposwe -tickLower)))))\n#_(def fee-growth-outside-lower0we (u/ebn->bn (. fee-growths-lowerwe -feeGrowthOutside0X128) 8))\n#_(def fee-growth-outside-lower1we (u/ebn->bn (. fee-growths-lowerwe -feeGrowthOutside1X128) 18))\n\n\n#_(go (def fee-growths-upperwe (<p! (. pstatewe ticks (. aposwe -tickUpper)))))\n#_(def fee-growth-outside-upper0we (u/ebn->bn (. fee-growths-upperwe -feeGrowthOutside0X128) 8))\n#_(def fee-growth-outside-upper1we (u/ebn->bn (. fee-growths-upperwe -feeGrowthOutside1X128) 18))\n\n\n\n;; claculate feees 0\n\n\n(defn counterfactual-fees-old\n  [fee-growth-global fee-growth-outside-lower fee-growth-outside-upper\n   fee-growth-insinde-last pool liquidity tick-lower tick-upper]\n  (let [fee-growth-below (if (>= (. pool -tickCurrent) tick-lower)\n                           fee-growth-outside-lower\n                           (- fee-growth-global fee-growth-outside-lower))\n        fee-growth-above (if (< (. pool -tickCurrent) tick-upper)\n                           fee-growth-outside-upper\n                           (- fee-growth-global fee-growth-outside-upper))\n        fee-growth-inside (- (- fee-growth-global fee-growth-below) fee-growth-above)\n        current-fee-growth (- fee-growth-inside fee-growth-insinde-last)]\n    (/ (* current-fee-growth liquidity) (Math/pow 2 128))))\n\n\n(defn total-fees\n  [^js position fees0 fees1]\n  [(bn/+ (bn/* (u/bn 2) (u/ebn->bn (. position -tokensOwed0) 18)) fees0)\n   (bn/+ (bn/* (u/bn 2) (u/ebn->bn (. position -tokensOwed1) 18)) fees1)])\n\n#_(def fees0 (counterfactual-fees-old\n              fee-growth-global0\n              fee-growth-outside-lower0 fee-growth-outside-upper0\n              (u/ebn->bn (. apos -feeGrowthInside0LastX128) 18) pool\n              (. apos -liquidity) (. apos -tickLower) (. apos -tickUpper)))\n\n#_(def fees0we (counterfactual-fees-old\n              fee-growth-global0we\n              fee-growth-outside-lower0we fee-growth-outside-upper0we\n              (u/ebn->bn (. aposwe -feeGrowthInside0LastX128) 8) poolwe\n              (. aposwe -liquidity) (. aposwe -tickLower) (. aposwe -tickUpper)))\n\n\n#_(def fees1 (counterfactual-fees-old\n              fee-growth-global1\n              fee-growth-outside-lower1 fee-growth-outside-upper1\n              (u/ebn->bn (. apos -feeGrowthInside1LastX128) 18) pool\n              (. apos -liquidity) (. apos -tickLower) (. apos -tickUpper)))\n\n\n#_(def fees1we (counterfactual-fees-old\n              fee-growth-global1we\n              fee-growth-outside-lower1we fee-growth-outside-upper1we\n              (u/ebn->bn (. aposwe -feeGrowthInside1LastX128) 18) poolwe\n              (. aposwe -liquidity) (. aposwe -tickLower) (. aposwe -tickUpper)))\n\n\n#_(def tfees (total-fees apos fees0 fees1))\n#_(def tfeeswe (total-fees aposwe fees0we fees1we))\n\n\n\n(defn <account-balance\n  [account]\n  (go (let [balance (<p! (. mgmt-contract balanceOf account))]\n        (u/ebn->bn balance 0))))\n\n\n(defn <account-token-by-index\n  [account i]\n  (go (let [token-id (<p! (. mgmt-contract tokenOfOwnerByIndex account i))]\n        (u/ebn->bn token-id 0))))\n\n\n\n(defn <account-token-ids\n  [account n]\n  (->> (map (fn [i] (go (<! (<account-token-by-index account i))))\n             (range n))\n       (cljs.core.async/merge)\n       (cljs.core.async/reduce conj [])))\n\n\n(defn tokens0-owed\n  [^js position]\n  (. position -tokensOwed0))\n\n(defn tokens1-owed\n  [^js position]\n  (. position -tokensOwed1))\n\n(defn fee-growth-inside0\n  [^js position]\n  (. position -feeGrowthInside0LastX128))\n\n(defn fee-growth-inside1\n  [^js position]\n  (. position -feeGrowthInside1LastX128))\n\n\n(defn fee-growth-outside0\n  [^js fee-growths]\n  (. fee-growths -feeGrowthOutside0X128))\n\n\n(defn fee-growth-outside1\n  [^js fee-growths]\n  (. fee-growths -feeGrowthOutside1X128))\n\n(defn <fee-growth-global0\n  [^js pool-state]\n  (go (<p! (. pool-state feeGrowthGlobal0X128))))\n\n(defn <fee-growth-global1\n  [^js pool-state]\n  (go (<p! (. pool-state feeGrowthGlobal1X128))))\n\n\n(defn <token-position\n  [v3state token-id]\n  (go (let [position (<p! (. mgmt-contract positions (str token-id)))\n            chain-id 1\n            token0-address (string/lower-case (. position -token0))\n            token1-address (string/lower-case (. position -token1))\n            decimals0 (:decimals (get (:tokens v3state) token0-address))\n            decimals1 (:decimals (get (:tokens v3state) token1-address))\n            token0 (sdk-core/Token. chain-id token0-address decimals0)\n            token1 (sdk-core/Token. chain-id token1-address decimals1)\n            pool-address (string/lower-case\n                          (univ3/computePoolAddress\n                          (clj->js {:factoryAddress univ3/FACTORY_ADDRESS\n                                    :tokenA token0\n                                    :tokenB token1\n                                    :fee (. position -fee)})))\n            pool-state (ethereum/make-contract pstate-abi pool-address)\n            fee-growth-inside0-last (u/ebn->bn (fee-growth-inside0 position) decimals0)\n            fee-growth-inside1-last (u/ebn->bn (fee-growth-inside1 position) decimals1)\n            fee-growth-global0 (u/ebn->bn (<! (<fee-growth-global0 pool-state)) decimals0)\n            fee-growth-global1 (u/ebn->bn  (<! (<fee-growth-global1 pool-state)) decimals1)\n            fee-growths-lower (<p! (. pool-state ticks (. (. position -tickLower) toString)))\n            fee-growth-outside-lower0 (u/ebn->bn (fee-growth-outside0 fee-growths-lower) decimals0)\n            fee-growth-outside-lower1 (u/ebn->bn (fee-growth-outside1 fee-growths-lower) decimals1)\n            fee-growths-upper (<p! (. pool-state ticks  (. (. position -tickUpper) toString)))\n            fee-growth-outside-upper0 (u/ebn->bn (fee-growth-outside0 fee-growths-upper) decimals0)\n            fee-growth-outside-upper1 (u/ebn->bn (fee-growth-outside1 fee-growths-upper) decimals1)\n            ]\n        {:nft-id (. token-id toString)\n         :fee-growth-inside0-last fee-growth-inside0-last\n         :fee-growth-inside1-last fee-growth-inside1-last\n         :fee-growth-outside-lower0 fee-growth-outside-lower0\n         :fee-growth-outside-lower1 fee-growth-outside-lower1\n         :fee-growth-outside-upper0 fee-growth-outside-upper0\n         :fee-growth-outside-upper1 fee-growth-outside-upper1\n         :fee-growth-global0 fee-growth-global0\n         :fee-growth-global1 fee-growth-global1\n         :address pool-address\n         :operator (. position -operator)\n         :fee-tier (. (. position -fee) toString)\n         :token0  (. position -token0)\n         :token1  (. position -token1)\n         :liquidity (. (. position -liquidity) toString)\n         :tick-lower (. (. position -tickLower) toString)\n         :tick-upper (. (. position -tickUpper) toString)\n         :feeGrowthInside0LastX128 (. (fee-growth-inside0 position) toString)\n         :feeGrowthInside1LastX128 (. (fee-growth-inside1 position) toString)\n         :tokens-owed0 (. (tokens0-owed position) toString)\n         :tokens-owed1 (. (tokens1-owed position) toString)})))\n\n\n\n\n#_(defn <account-positions\n  [account]\n  (go (let [n-positions (<! (<account-balance account))\n            token-ids (<! (<account-token-ids account n-positions))]\n        (<! (->> (map (fn [token-id] (go (<! (<token-position token-id))))\n                  token-ids)\n             (cljs.core.async/merge)\n             (cljs.core.async/reduce conj []))))))\n\n\n(defn <token-positions\n  [v3state token-ids]\n  (->> (map (fn [token-id] (go (<! (<token-position v3state token-id))))\n            token-ids)\n       (cljs.core.async/merge)\n       (cljs.core.async/reduce conj [])))\n\n\n\n(defn decode-liquidity-event\n  [event token1-decimals token2-decimals]\n  (try (let [event-obj (. mgmt-iface parseLog event)\n             event-type (case (.-name event-obj)\n                          \"IncreaseLiquidity\" :increase-liquidity\n                          \"DecreaseLiquidity\" :decrease-liquidity)\n             args (.-args event-obj)\n             token-id (u/ebn->bn (.-tokenId args) 0)\n             amount0 (u/ebn->bn (.-amount0 args) token1-decimals)\n             amount1 (u/ebn->bn (.-amount1 args) token2-decimals)\n             liquidity (.-liquidity args)]\n         {:type event-type\n          :nft-id token-id\n          :amount0 amount0\n          :amount1 amount1\n          :liquidity liquidity})\n       (catch  js/Error err  (js/console.log \"prob parsing liquidity event:\" err))))\n\n\n(defn make-liqevent-map\n  [liqevent-txr token1-decimals token2-decimals]\n  (let [tx (:tx liqevent-txr)\n        re (:receipt liqevent-txr)\n        txhash (.-hash tx)\n        block-number (.-blockNumber tx)\n        gas-decimals 0\n        eth-decimals 18\n        gas-price (u/ebn->bn (.-gasPrice tx) eth-decimals)\n        gas-used (u/ebn->bn (.-gasUsed re) gas-decimals)\n        ;; We can potentially have more than one liquidy event per tx\n        event-logs (filter some? (map #(decode-liquidity-event % token1-decimals token2-decimals)\n                                      (.-logs re)))\n        gas-used' (bn// gas-used (u/bn (count event-logs)))]\n    (map #(into % {:gas-price gas-price\n                   :tx-hash txhash\n                   :gas-used gas-used'})\n         event-logs)))\n\n\n\n(defn <get-nft-events\n  [tx-hashes]\n  (go\n    (let [;;TODO mock decimals only work here because\n          ;;we only care about getting the nft-id to assoc into\n          ;;the mints,burns maps with correct decimals already\n          ;;fetched from thegraph.\n          ;;this fn should comform to the pattern where it takes\n          ;;a v3state map and adds the missing nft-ids to the state\n          ;;returned\n          token0-decimals 18\n          token1-decimals 18\n          nft-txrs (<! (ethereum/<get-trxs tx-hashes))\n          events (mapcat #(make-liqevent-map % token0-decimals token1-decimals)\n                         nft-txrs)]\n      (filter some? events))))\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; the graph\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n\n\n\n(defn parse-token\n  [token eth-price]\n  {:address (:id token)\n   :decimals (js/parseInt (:decimals token))\n   :name (:name token)\n   :symbol (:symbol token)\n   :prices {:usd (bn/* (u/bn (:derivedETH token)) eth-price)\n            :eth (u/bn (:derivedETH token))}})\n\n\n(defn parse-pool\n  [pool eth-price]\n  (let [address0 (:id (:token0 pool))\n        address1 (:id (:token1 pool))\n        decimals0 (:decimals (:token0 pool))\n        decimals1 (:decimals (:token1 pool))\n        network 1\n        token0 (sdk-core/Token. network address0 decimals0)\n        token1 (sdk-core/Token. network address1 decimals1)\n        fee-string (:feeTier pool)\n        address (string/lower-case\n                 (univ3/computePoolAddress\n                  (clj->js {:factoryAddress univ3/FACTORY_ADDRESS\n                            :tokenA token0 :tokenB token1 :fee fee-string})))]\n    {:address address\n     :exchange \"uniswapv3\"\n     :token0 (:id (:token0 pool))\n     :token1 (:id (:token1 pool))\n     :fee-tier fee-string\n     :liquidity (u/bn (:liquidity pool))\n     :sqrt-price (u/bn (:sqrtPrice pool))\n     :tick (u/bn (:tick pool))\n     :reserve0 (* eth-price (u/bn (:totalValueLockedToken0 pool)))\n     :reserve1 (* eth-price (u/bn (:totalValueLockedToken1 pool)))\n     :reserve-total-eth (u/bn (:totalValueLockedETH pool))\n     :reserve-total-usd (u/bn (:totalValueLockedUSD pool))\n     :lp-count (js/parseInt (:liquidityProviderCount pool))}))\n\n\n(defn pool-by-attrs\n  [pools token0 token1 fee-tier]\n  (first (filter (fn [pool] (and (= (:token0 pool) token0)\n                                 (= (:token1 pool) token1)\n                                 (= (:fee-tier pool) fee-tier)))\n                 (vals pools))))\n\n(defn parse-liqevent-tx\n  [liqevent]\n  (let [block-number (js/parseInt (:blockNumber (:transaction liqevent)))\n        tx-hash (:id (:transaction liqevent))\n        type-key (if (= (:type liqevent) :mints)\n                   :deposits\n                   :withdrawals)\n        token0 (:id (:token0 (:pool liqevent)))\n        token1 (:id (:token1 (:pool liqevent)))\n        token0-qty (u/bn (:amount0 liqevent))\n        token1-qty (u/bn (:amount1 liqevent))]\n    {:block-number block-number\n     :tx-hash tx-hash\n     type-key {token0 token0-qty\n               token1 token1-qty}\n     :liquidity (u/bn (:amount liqevent))}))\n\n(defn parse-position\n  [liqevent v3state]\n  (let [pools (:v3pools v3state)\n        tokens (:tokens v3state)\n        fee-tier (:feeTier (:pool liqevent))\n        token0 (:id (:token0 (:pool liqevent)))\n        token1 (:id (:token1 (:pool liqevent)))\n        pool (pool-by-attrs pools token0 token1 fee-tier)]\n    {:nft-id nil\n     :address (:address pool)\n     :token0 token0\n     :token1 token1\n     :tick-lower (u/bn (:tickLower liqevent))\n     :tick-upper (u/bn (:tickUpper liqevent))\n     :fee-tier fee-tier\n     :liquidity (u/bn \"0.0\")\n     :mints (if (= (:type liqevent) :mints)\n              [(parse-liqevent-tx liqevent)]\n              [])\n     :burns (if (= (:type liqevent) :burns)\n              [(parse-liqevent-tx liqevent)]\n              [])\n     :collects (if (= (:type liqevent) :collects)\n                 [(parse-liqevent-tx liqevent)]\n                 [])\n     :blocks-ts {}}))\n\n\n(defn position-reducer\n  [positions p]\n  (let [matched-position (first (filter #(= (:address %) (:address p))\n                                        positions))\n        matched-liquidity (if matched-position\n                            (:liquidity matched-position)\n                            (u/bn \"0.0\"))\n        other-positions (filter #(not= (:address %) (:address p))\n                                positions)\n        new-mints (concat (:mints matched-position) (:mints p))\n        new-burns (concat (:burns matched-position) (:burns p))\n        liquidity-minted (if (> (count new-mints) 0)\n                           (reduce bn/+ (map :liquidity new-mints))\n                           (u/bn \"0.0\"))\n        liquidity-burned (if (> (count new-burns) 0)\n                           (reduce bn/+ (map :liquidity new-burns))\n                           (u/bn \"0.0\"))\n        new-pos (into p\n                      {:liquidity (bn/- liquidity-minted liquidity-burned)\n                       :mints new-mints\n                       :burns new-burns\n                       :collects (concat (:collects matched-position) (:collects p))})]\n    (conj other-positions new-pos)))\n\n\n(defn parse-liqevents\n  [mint-liqevents burn-liqevents]\n  (let [eth-price (u/bn (:ethPriceUSD (first (:bundles (:data mint-liqevents)))))\n        mints (map #(into % {:type :mints})\n                   (:mints (:data mint-liqevents)))\n        burns (map #(into % {:type :burns})\n                   (:burns (:data burn-liqevents)))\n        events (concat mints burns)\n\n        tokens (map #(parse-token % eth-price)\n                    (mapcat (comp (juxt :token0 :token1) :pool) events))\n        tokens' (->> (distinct (map :address tokens))\n                     (map (fn [address]\n                            {address (first (filter #(= (:address %) address) tokens))}))\n                     (apply merge))\n        pools (map (comp #(parse-pool % eth-price) :pool) events)\n        pools' (->> (distinct (map :address pools))\n                    (map (fn [address]\n                           {address (first (filter #(= (:address %) address) pools))}))\n                    (apply merge))\n        v3positions (map #(parse-position % {:v3pools pools'\n                                             :tokens tokens'})\n                         events)\n        v3positions' (reduce position-reducer [] v3positions)]\n    {:tokens tokens'\n     :v3lp-positions v3positions'\n     :v3pools pools'}))\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(defn nft-reducer\n  [positions nft-event]\n  (let [events-type (case (:type nft-event)\n                      :increase-liquidity :mints\n                      :decrease-liquidity :burns\n                      :collect-liquidity :collects)\n        matched-position (first (filter #(contains?\n                                          (set (map :tx-hash (events-type %)))\n                                          (:tx-hash nft-event))\n                                        positions))\n        other-positions (filter #(not (contains? (set (map :tx-hash (events-type %)))\n                                                 (:tx-hash nft-event)))\n                                positions)\n        possible-events (events-type matched-position)\n        matched-event (first (filter #(= (:tx-hash %) (:tx-hash nft-event))\n                                     possible-events))\n        other-events (filter #(not= (:tx-hash %) (:tx-hash nft-event))\n                             possible-events)\n        updated-event (into matched-event\n                            {:gas-price (:gas-price nft-event)\n                             :gas-used (:gas-used nft-event)})\n        seperated-position (if (and (not= nil (:nft-id matched-position))\n                                    ((comp not bn/=) (:nft-id nft-event) (:nft-id matched-position)))\n                              matched-position)\n        updated-position (into matched-position\n                               {:nft-id (:nft-id nft-event)\n                                events-type (conj other-events updated-event)})]\n    (filter some? (conj other-positions updated-position seperated-position))))\n\n\n(defn merge-nfts\n  [v3state nft-events]\n  (let [positions (:v3lp-positions v3state)\n        positions' (reduce nft-reducer positions nft-events)]\n    (into v3state {:v3lp-positions positions'})))\n\n\n\n(defn make-position-collect\n  [tx]\n  (let [parsed-event (. mgmt-iface parseLog tx)\n        tx-args (. parsed-event -args)\n        tx-hash (. tx -transactionHash)\n        block-number (. tx -blockNumber)\n        amount0 (. tx-args -amount0)\n        amount1 (. tx-args -amount1)\n        token-id (. tx-args -tokenId)]\n    {:nft-id (u/ebn->bn token-id 0)\n     :amount0  (str amount0)\n     :amount1 (str amount1)\n     :block-number (js/parseInt (str block-number))\n     :tx-hash tx-hash}))\n\n\n(defn make-gaspaid-map\n  [txr]\n  (let [tx (:tx txr)\n        re (:receipt txr)\n        txhash (.-hash tx)\n        block-number (.-blockNumber tx)\n        gas-decimals 0\n        eth-decimals 18\n        gas-price (u/ebn->bn (.-gasPrice tx) eth-decimals)\n        gas-used (u/ebn->bn (.-gasUsed re) gas-decimals)]\n    {:gas-price gas-price\n     :gas-used gas-used\n     :tx-hash txhash}))\n\n\n(defn <nft-collects\n  [nft-id]\n  (let [user-filter (mgmt-contract.filters.Collect (. nft-id toNumber))\n        ;; univ3 factory contract created on block 12369621\n        _ (set! (.. user-filter -fromBlock) 12369621)\n        _ (set! (.. user-filter -toBlock) \"latest\")]\n    (go (let [filtered-txs (<p! (. @ethereum/provider getLogs user-filter))\n              parsed-collects (map make-position-collect filtered-txs)\n              tx-hashes (map :tx-hash parsed-collects)\n              collect-txrs (<! (ethereum/<get-trxs tx-hashes))\n              collect-gases (map make-gaspaid-map collect-txrs)]\n          (->> (concat parsed-collects collect-gases)\n               (group-by :tx-hash)\n               vals\n               (map #(apply merge %)))))))\n\n\n(defn <multi-nft-collects\n  [nft-ids]\n  (->> (map (fn [nft-id] (go (<! (<nft-collects nft-id))))\n            nft-ids)\n       (cljs.core.async/merge)\n       (cljs.core.async/reduce concat [])))\n\n\n\n(defn collects-reducer\n  [v3state collect-event]\n  (let [positions (:v3lp-positions v3state)\n        tokens (:tokens v3state)\n        matched-position (first (filter #(bn/=  (:nft-id %) (:nft-id collect-event))\n                                        positions))\n        other-positions (filter #(not (bn/= (:nft-id %) (:nft-id collect-event)))\n                                positions)\n\n        token0 (:token0 matched-position)\n        token1 (:token1 matched-position)\n        decimals0 (:decimals (get tokens token0))\n        decimals1 (:decimals (get tokens token1))\n        qty0 (u/ebn->bn (:amount0 collect-event) decimals0)\n        qty1 (u/ebn->bn (:amount1 collect-event) decimals1)\n\n        collect {:block-number (:block-number collect-event)\n                 :tx-hash (:tx-hash collect-event)\n                 :gas-price (:gas-price collect-event)\n                 :gas-used (:gas-used collect-event)\n                 :withdrawals {token0 qty0\n                               token1 qty1}}\n\n        updated-collects (conj (:collects matched-position) collect)\n        updated-position (into matched-position {:collects updated-collects})]\n    (into v3state {:v3lp-positions (conj other-positions updated-position)})))\n\n\n\n(defn merge-collects\n  [v3state nft-collects]\n  (let [v3state' (reduce collects-reducer v3state nft-collects)]\n    v3state'))\n\n\n(defn position-price-lower\n  [^js position]\n  (try\n    (u/bn (. (. position -token0PriceLower) toSignificant 8))\n    (catch js/Error err\n      (do (js/console.log \"Error parsing position lower price:\" err)\n          (u/bn \"0.0\")))))\n\n(defn position-price-upper\n  [^js position]\n  (try\n    (u/bn (. (. position -token0PriceUpper) toSignificant 8))\n    (catch js/Error err\n      (do (js/console.log \"Error parsing position lower price:\" err)\n          (u/bn \"0.0\")))))\n\n\n(defn posstate-reducer\n  [v3state position-state]\n  (let [positions (:v3lp-positions v3state)\n        tokens (:tokens v3state)\n        pools (:v3pools v3state)\n        matched-position (first (filter #(bn/=  (:nft-id %) (u/bn (:nft-id position-state)))\n                                        positions))\n        other-positions (filter #(not (bn/= (:nft-id %) (u/bn (:nft-id position-state))))\n                                positions)\n        token0 (string/lower-case (:token0 position-state))\n        token1 (string/lower-case (:token1 position-state))\n        decimals0 (:decimals (get tokens token0))\n        decimals1 (:decimals (get tokens token1))\n        network 1\n        token0-obj (sdk-core/Token. network token0 decimals0)\n        token1-obj (sdk-core/Token. network token1 decimals1)\n        ;;_ (println token0 token1)\n        ;;_ (println decimals0 decimals1)\n        ;;_ (println token0-obj token1-obj)\n        ;;_ (println  (:address position-state))\n\n        pool (get pools (:address position-state))\n        fee-tier (js/parseInt (:fee-tier pool))\n        sq-price (u/ethpu (. (:sqrt-price pool) toFixed) 0)\n        liquidity (u/ethpu (. (:liquidity pool) toFixed) 0)\n        tick (js/parseInt (. (:tick pool) toFixed))\n        pool-obj (univ3/Pool. token0-obj, token1-obj, fee-tier,\n                              sq-price, liquidity, tick)\n        tick-lower (js/parseInt (:tick-lower position-state))\n        tick-upper (js/parseInt (:tick-upper position-state))\n        my-pos (univ3/Position.\n                (clj->js {:pool pool-obj,\n                          :liquidity (u/ebn->bn (u/ethpu (:liquidity position-state) 0) 0)\n                          :tickLower tick-lower\n                          :tickUpper tick-upper}))\n        amount0 (u/bn (. (. my-pos -amount0) toFixed))\n        amount1 (u/bn (. (. my-pos -amount1) toFixed))\n        token0-pl (position-price-lower my-pos)\n        token0-pu (position-price-upper my-pos)\n\n        parsed-state {:fee-growth-outside-lower0 (:fee-growth-outside-lower0 position-state)\n                      :fee-growth-outside-lower1 (:fee-growth-outside-lower1 position-state)\n                      :fee-growth-outside-upper0 (:fee-growth-outside-upper0 position-state)\n                      :fee-growth-outside-upper1 (:fee-growth-outside-upper1 position-state)\n                      :fee-growth-inside0 (:fee-growth-inside0-last position-state)\n                      :fee-growth-inside1 (:fee-growth-inside1-last position-state)\n                      :tokens-owed0 (u/ebn->bn (:tokens-owed0 position-state) decimals0)\n                      :tokens-owed1 (u/ebn->bn (:tokens-owed1 position-state) decimals1)\n                      :price-lower token0-pl\n                      :price-upper token0-pu\n                      :amount0 amount0\n                      :amount1 amount1}\n        updated-position (into matched-position parsed-state)\n        pool' (into pool {:fee-growth-global0 (:fee-growth-global0 position-state)\n                          :fee-growth-global1 (:fee-growth-global1 position-state)})]\n    (into v3state {:v3pools (assoc pools (:address pool') pool')\n                   :v3lp-positions (conj other-positions updated-position)})))\n\n\n\n\n\n(defn merge-position-states\n  [v3state nft-positions]\n  (let [v3state' (reduce posstate-reducer v3state nft-positions)]\n    v3state'))\n\n\n\n(defn token-fees\n  [fee-growth-global tokens-owed\n   fee-growth-outside-lower fee-growth-outside-upper\n   fee-growth-inside-last current-tick liquidity tick-lower tick-upper]\n  (let [fee-growth-below (if (bn/>= current-tick tick-lower)\n                            fee-growth-outside-lower\n                           (bn/- fee-growth-global fee-growth-outside-lower))\n        fee-growth-above (if (bn/< current-tick tick-upper)\n                           fee-growth-outside-upper\n                           (bn/- fee-growth-global fee-growth-outside-upper))\n        fee-growth-inside (bn/- (bn/- fee-growth-global fee-growth-below) fee-growth-above)\n        current-fee-growth (bn/- fee-growth-inside fee-growth-inside-last)]\n    (bn/+\n      tokens-owed\n     (bn// (bn/* current-fee-growth liquidity) (u/bn (Math/pow 2 128))))))\n\n\n(defn counterfactual-fees\n  [v3state nft-id]\n  (let [positions (:v3lp-positions v3state)\n        nft-position (first (filter #(bn/= (:nft-id %) nft-id) positions))\n        pool (get (:v3pools v3state) (:address nft-position))\n        current-tick (:tick pool)\n        liquidity (:liquidity nft-position)\n        tick-lower (:tick-lower nft-position)\n        tick-upper (:tick-upper nft-position)\n\n        fee-growth-global0 (:fee-growth-global0 pool)\n        tokens-owed0 (:tokens-owed0 nft-position)\n        fee-growth-outside-lower0 (:fee-growth-outside-lower0 nft-position)\n        fee-growth-outside-upper0 (:fee-growth-outside-upper0 nft-position)\n        fee-growth-inside-last0 (:fee-growth-inside0 nft-position)\n\n\n        fee-growth-global1 (:fee-growth-global1 pool)\n        tokens-owed1 (:tokens-owed1 nft-position)\n        fee-growth-outside-lower1 (:fee-growth-outside-lower1 nft-position)\n        fee-growth-outside-upper1 (:fee-growth-outside-upper1 nft-position)\n        fee-growth-inside-last1 (:fee-growth-inside1 nft-position)]\n    {(:token0 nft-position)\n     (token-fees fee-growth-global0 tokens-owed0\n                 fee-growth-outside-lower0 fee-growth-outside-upper0\n                 fee-growth-inside-last0 current-tick\n                 liquidity tick-lower tick-upper)\n     (:token1 nft-position)\n     (token-fees fee-growth-global1 tokens-owed1\n                 fee-growth-outside-lower1 fee-growth-outside-upper1\n                 fee-growth-inside-last1 current-tick\n                 liquidity tick-lower tick-upper)}))\n\n\n(defn merge-pending-fees\n  [v3state]\n  (let [positions (:v3lp-positions v3state)\n        positions' (map (fn [p]\n                          (let [fees (counterfactual-fees v3state (:nft-id p))]\n                            (into p {:pending-fees0 (get fees (:token0 p))\n                                     :pending-fees1 (get fees (:token1 p))})))\n                        positions)]\n    (into v3state {:v3lp-positions positions'})))\n\n\n#_(go (def a (<! (thegraph/<v3-user-mints \"\"))))\n#_(def hs (map :tx-hash (mapcat :mints (:v3lp-positions (parse-liqevents a)))))\n#_(go (def e1 (<! (<get-nft-events hs))))\n\n#_(def my-nft-ids (map :nft-id (:v3lp-positions (merge-nfts (parse-liqevents a) e1))))\n\n\n#_(go (def my-collects (<! (<multi-nft-collects my-nft-ids))))\n\n#_(def v3state0 (merge-nfts (parse-liqevents a) e1))\n#_(def v3state1 (merge-collects v3state0 my-collects))\n\n#_(go (def my-nft-positions (<! (<token-positions v3state1 my-nft-ids))))\n#_(def v3state2 (merge-position-states v3state1 my-nft-positions))\n#_(def v3state3 (merge-pending-fees v3state2))\n\n\n#_(go (def x (<! (thegraph/<v3-pool-days\n                  \"0xcbcdf9626bc03e24f779434178a73a0b4bad62ed\"\n                  \"0x2260fac5e5542a773aa44fbcfedf7c193bc2c599\"\n                  \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\"))))\n\n\n\n(defn <pools-dailys\n  [v3state]\n  (let [pools (vals (:v3pools v3state))\n        pool-attrs (map (fn [p] ((juxt :address :token0 :token1) p))\n                        pools)]\n    (->> (map (fn [[paddress t0address t1address]]\n                (go (<! (thegraph/<v3-pool-days paddress t0address t1address))))\n              pool-attrs)\n         (cljs.core.async/merge)\n         (cljs.core.async/reduce concat []))))\n\n\n\n#_(go (def pool-dailys (<! (<pools-dailys v3state3))))\n\n(defn make-history-snapshots\n  [pool-dailys]\n  (let [pool-dailys' (butlast (reverse (sort-by :date pool-dailys)))\n        init-date (:date (last pool-dailys'))\n        init-price0-usd (:token0-price-usd (last pool-dailys'))\n        init-price1-usd (:token1-price-usd (last pool-dailys'))]\n    (map\n     (fn [d]\n       (into d\n             {:price-divergence (u/price-divergence\n                                 [init-price0-usd (:token0-price-usd d)]\n                                 [init-price1-usd (:token1-price-usd d)])\n              :vol-res-ratio (bn// (:volume-usd d) (:reserves-usd d))}))\n     pool-dailys')))\n\n(defn merge-pool-dailys\n  [v3state pool-dailys]\n  (let [pools-grouped (vals (group-by :address pool-dailys))\n        pool-dailys' (map make-history-snapshots pools-grouped)\n        pool-hists (apply merge (map (fn [v] {(:address (first v)) v}) pool-dailys'))]\n    (into v3state {:v3pool-histories pool-hists})))\n\n#_(def v3state4 (merge-pool-dailys v3state3 pool-dailys))\n\n(defn <pool-histories\n  [pool-address days]\n  (go (let [[token0, token1] (<! (thegraph/<v3-pool-tokens pool-address))\n            ph (<! (thegraph/<v3-pool-days pool-address token0 token1 :days days))\n            ph' (make-history-snapshots ph)]\n        {pool-address ph'})))\n\n\n\n(defn <fetch-account-state\n  [account-or-ens]\n  (go\n    (try (let [account (<! (ethereum/<resolve-address account-or-ens))\n               mints (<! (thegraph/<v3-user-mints account))\n               burns (<! (thegraph/<v3-user-burns account))\n               v3state0 (parse-liqevents mints burns)\n               tx-mints (map :tx-hash (mapcat :mints (:v3lp-positions v3state0)))\n               tx-burns (map :tx-hash (mapcat :burns (:v3lp-positions v3state0)))\n               nft-events (<! (<get-nft-events (concat tx-mints tx-burns)))\n               v3state1 (merge-nfts v3state0 nft-events)\n               nft-ids (map :nft-id (:v3lp-positions v3state1))\n               collects (<! (<multi-nft-collects nft-ids))\n               v3state2 (merge-collects v3state1 collects)\n               nft-positions (<! (<token-positions v3state2 nft-ids))\n               v3state2 (merge-position-states v3state2 nft-positions)\n               v3state3 (merge-pending-fees v3state2)\n               pool-dailys (<! (<pools-dailys v3state3))\n               v3state4 (merge-pool-dailys v3state3 pool-dailys)]\n           v3state4)\n         (catch js/Error err\n           (do (js/console.log \"Error fetching v3 state:\" err)\n               {:v3lp-positions []\n                :tokens {}\n                :v3pools {}})))))\n\n\n\n\n\n;;; 1) first get all the mints and all burns for account from thegraph\n;;; DONE make the graph query token values for :tokens including prices via, direvedETH\n;;  DONE parse graph results into our speced map, we should have enough to assoc into tokens\n;;       and be able to generate an address for the v3 pool from the pair addresses. seperate to the tokens\n;;       we should now be able to make a map with all mints and burns for an address pair, fee tier adn\n;;       selected ticks. only thing to get from next step is nft-id, but potentially this could mean\n;;       mints and burns are forked into seperate position maps\n;;; 2) get the token nft for all the mints by getting the transaction logs from the mints txs\n;;  DONE now we should be able to add nft-id to the position maps, and possibly seperate out previos\n;;  steps into seperate positions though they are for the same pair,fee and ticks\n;;; 3) get all the positions for each nft from the mgmt contract\n;;; DONE write a function that takes nft ids and returns positions\n;;; 4) get  all nfts in balance for the account\n;;; 5) check if there is a new nft (then it wasn't minted by this account)\n;;; TODO make some sort of differ for this\n;;; 6) if no new nfts we're go to step 8, if there are new\n;;;    get the mint and burn txs for all the new nfts by searching the incresae, deccrese\n;;;    liquidity event logs with the nft id, here we get gas costs as well as tx ids\n;;; 7) get all the mints and burns from thegraph that match the tx\n;;; DONE figure out if we can get all that we want from v3lp-position for PnL calculations: we can\n;;  8) Get all the collects for the NFT ids\n;;; DONE figure out the best way to get collects for specific NFTs and write the function\n;;;      see ethereum/<user-lp-mint-deposits\n;;; DONE add actual position values to nfts in v3state\n;;;\n;;; DONE figure out if we can compoute pnl with v3state1\n;;; 9) fetch block timestamps,\n;;  10) get v3 pool histories\n;;; DONE get v3 pool history from the graph from poolDayData, this go into v3pool-histories\n;;  DONE will need to get tokenDayData for usd prices.\n;;  DONE merge into v3state\n;;  DONE integrate into re-frame\n;;  DONE make a position card\n;;  DONE I think we're not getting gas price and gas usde for burns\n;;  ------\n;;  DONE make a v3 pool view\n;;  DONE make ens domains work with v3\n;;  TODO should be able to build a functional v3 state by starting from an nft id\n\n;; I think with the above we can generate the charts on the right column\n;; We can easily generate the charts on the left column, but is there any point to it?\n;; total reserves matter less.\n;;   - volume chart should probably stay\n;;   - add a chart that uses prices from thegraph and a position's limits to draw\n;;     a line chart with two guides that are the users limits. can use colors on the guides to\n;;     indicate active liquidity or not.\n;;   - a bar chart that of liquidity distribution with the position's liquidity\n;;     highlited\n;;; Now we have all the data we require for the PnL calculations\n;;; TODO can use multicall because it is a function in the contrat.\n;;; TODO nft ids should be strings?\n"]}