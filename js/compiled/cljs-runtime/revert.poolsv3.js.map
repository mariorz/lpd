{"version":3,"sources":["revert/poolsv3.cljs"],"mappings":"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","names":["revert.poolsv3/mngr-abi","js/module$node_modules$$uniswap$v3_periphery$artifacts$contracts$NonfungiblePositionManager_sol$NonfungiblePositionManager_json","revert.poolsv3/mngr-iface-abi","js/module$node_modules$$uniswap$v3_periphery$artifacts$contracts$interfaces$INonfungiblePositionManager_sol$INonfungiblePositionManager_json","revert.poolsv3/mgmt-contract","revert.ethereum/make-contract","revert.poolsv3/mgmt-iface","revert.ethereum/make-interface","revert.poolsv3/pstate-abi","js/module$node_modules$$uniswap$v3_core$artifacts$contracts$interfaces$pool$IUniswapV3PoolState_sol$IUniswapV3PoolState_json","revert.poolsv3/pstate-iface","revert.poolsv3/counterfactual-fees-old","fee-growth-global","fee-growth-outside-lower","fee-growth-outside-upper","fee-growth-insinde-last","pool","liquidity","tick-lower","tick-upper","fee-growth-below","fee-growth-above","fee-growth-inside","current-fee-growth","Math/pow","revert.poolsv3/total-fees","position","fees0","fees1","bignumber.core/+","bignumber.core/*","revert.utils/bn","revert.utils/ebn->bn","revert.poolsv3/<account-balance","account","c__52208__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__52209__auto__","switch__52185__auto__","state_140788","state_val_140789","inst_140772","inst_140773","cljs.core.async.interop/p->c","cljs.core.async.impl.ioc-helpers/take!","inst_140775","inst_140776","cljs.core/ExceptionInfo","inst_140777","cljs.core/ex-data","inst_140778","inst_140779","cljs.core._EQ_","inst_140780","statearr-140790","statearr-140791","statearr-140792","inst_140782","statearr-140793","statearr-140794","inst_140785","inst_140786","cljs.core.async.impl.ioc-helpers/return-chan","statearr-140795","state-machine__52186__auto__","ret-value__52187__auto__","result__52188__auto__","cljs.core/keyword-identical?","ex__52189__auto__","e140796","statearr-140797","cljs.core/seq","statearr-140798","cljs.core/first","state__52210__auto__","statearr-140799","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","revert.poolsv3/<account-token-by-index","i","state_140816","state_val_140817","inst_140800","inst_140801","inst_140803","inst_140804","inst_140805","inst_140806","inst_140807","inst_140808","statearr-140818","statearr-140819","statearr-140820","inst_140810","statearr-140821","statearr-140822","inst_140813","inst_140814","statearr-140823","e140824","statearr-140825","statearr-140826","statearr-140827","revert.poolsv3/<account-token-ids","n","cljs.core.map","state_140832","state_val_140833","inst_140828","inst_140830","statearr-140834","e140835","statearr-140836","statearr-140837","statearr-140838","cljs.core.range","cljs.core.async.merge","cljs.core.async/reduce","cljs.core/conj","revert.poolsv3/tokens0-owed","revert.poolsv3/tokens1-owed","revert.poolsv3/fee-growth-inside0","revert.poolsv3/fee-growth-inside1","revert.poolsv3/fee-growth-outside0","fee-growths","revert.poolsv3/fee-growth-outside1","revert.poolsv3/<fee-growth-global0","pool-state","state_140854","state_val_140855","inst_140839","inst_140840","inst_140842","inst_140843","inst_140844","inst_140845","inst_140846","inst_140847","statearr-140856","statearr-140857","statearr-140858","inst_140849","statearr-140859","statearr-140860","inst_140852","statearr-140861","e140862","statearr-140863","statearr-140864","statearr-140865","revert.poolsv3/<fee-growth-global1","state_140881","state_val_140882","inst_140866","inst_140867","inst_140869","inst_140870","inst_140871","inst_140872","inst_140873","inst_140874","statearr-140883","statearr-140884","statearr-140885","inst_140876","statearr-140886","statearr-140887","inst_140879","statearr-140888","e140889","statearr-140890","statearr-140891","statearr-140892","revert.poolsv3/<token-position","v3state","token-id","state_141004","state_val_141005","inst_140927","inst_140917","inst_140907","inst_140938","inst_140939","inst_140940","inst_140941","inst_140942","inst_140943","statearr-141006","inst_140893","inst_140894","inst_140895","inst_140897","statearr-141007","inst_140929","inst_140926","inst_140959","inst_140935","inst_140957","inst_140914","inst_140931","inst_140975","inst_140976","inst_140977","inst_140978","inst_140979","inst_140980","inst_140981","inst_140982","inst_140983","inst_140984","inst_140985","inst_140986","inst_140987","inst_140988","inst_140989","inst_140990","inst_140991","inst_140992","inst_140993","inst_140994","inst_140995","inst_140996","inst_140997","inst_140998","inst_140999","inst_141000","inst_141001","inst_141002","cljs.core/PersistentHashMap","inst_140965","inst_140972","statearr-141008","inst_140934","inst_140936","statearr-141009","inst_140904","statearr-141010","inst_140966","inst_140967","inst_140968","inst_140969","inst_140970","statearr-141011","statearr-141012","statearr-141013","inst_140898","inst_140899","inst_140900","inst_140901","inst_140902","statearr-141014","statearr-141015","statearr-141016","inst_140955","inst_140956","inst_140958","inst_140960","inst_140961","inst_140962","inst_140963","statearr-141017","inst_140945","inst_140952","statearr-141018","inst_140908","inst_140909","inst_140910","inst_140911","inst_140912","inst_140913","inst_140915","inst_140916","inst_140918","js/module$node_modules$$uniswap$sdk_core$dist$index.Token","inst_140919","inst_140920","inst_140921","inst_140922","inst_140923","inst_140924","inst_140925","inst_140928","inst_140930","inst_140932","statearr-141019","statearr-141020","statearr-141021","inst_140946","inst_140947","inst_140948","inst_140949","inst_140950","statearr-141022","statearr-141023","statearr-141024","statearr-141025","e141026","statearr-141027","statearr-141028","statearr-141029","clojure.string/lower-case","cljs.core.get","js/module$node_modules$$uniswap$v3_sdk$dist$index.computePoolAddress","cljs.core/clj->js","js/module$node_modules$$uniswap$v3_sdk$dist$index.FACTORY_ADDRESS","revert.poolsv3/<token-positions","token-ids","state_141034","state_val_141035","inst_141030","inst_141032","statearr-141036","e141037","statearr-141038","statearr-141039","statearr-141040","revert.poolsv3/decode-liquidity-event","event","token1-decimals","token2-decimals","e141041","event-obj","event-type","G__141042","js/Error","args","amount0","amount1","err","js/console.log","revert.poolsv3/make-liqevent-map","liqevent-txr","tx","re","txhash","block-number","gas-decimals","eth-decimals","gas-price","gas-used","event-logs","cljs.core.filter","cljs.core/some?","p1__141043#","gas-used'","bignumber.core//","cljs.core/count","p1__141044#","cljs.core.into","revert.poolsv3/<get-nft-events","tx-hashes","state_141053","state_val_141054","inst_141046","inst_141048","inst_141049","p1__141045#","inst_141050","inst_141051","statearr-141055","e141056","statearr-141057","statearr-141058","statearr-141059","token0-decimals","nft-txrs","revert.ethereum/<get-trxs","cljs.core.mapcat","revert.poolsv3/parse-token","token","eth-price","js/parseInt","revert.poolsv3/parse-pool","address0","address1","decimals0","decimals1","network","token0","token1","fee-string","address","revert.poolsv3/pool-by-attrs","pools","fee-tier","cljs.core/vals","revert.poolsv3/parse-liqevent-tx","liqevent","tx-hash","type-key","token0-qty","token1-qty","revert.poolsv3/parse-position","tokens","revert.poolsv3/position-reducer","positions","p","matched-position","p1__141060#","and__4115__auto__","bignumber.core/=","matched-liquidity","other-positions","p1__141061#","cljs.core.not_EQ_","cljs.core/not","new-mints","cljs.core.concat","new-burns","liquidity-minted","cljs.core.reduce","liquidity-burned","new-pos","bignumber.core/-","cljs.core.conj","revert.poolsv3/parse-liqevents","mint-liqevents","burn-liqevents","mints","p1__141062#","burns","p1__141063#","events","p1__141064#","cljs.core.comp","cljs.core.juxt","tokens'","cljs.core.distinct","p1__141065#","cljs.core.apply","cljs.core/merge","p1__141066#","pools'","p1__141067#","v3positions","p1__141068#","v3positions'","revert.poolsv3/nft-reducer","nft-event","events-type","G__141073","cljs.core/Keyword","p1__141069#","cljs.core/contains?","cljs.core/set","p1__141070#","possible-events","matched-event","p1__141071#","other-events","p1__141072#","updated-event","seperated-position","updated-position","revert.poolsv3/merge-nfts","nft-events","positions'","revert.poolsv3/make-position-collect","parsed-event","tx-args","revert.poolsv3/make-gaspaid-map","txr","revert.poolsv3/<nft-collects","nft-id","user-filter","G__141075","_","state_141103","state_val_141104","inst_141076","cljs.core/deref","inst_141077","inst_141078","inst_141080","inst_141081","inst_141082","inst_141083","inst_141084","inst_141085","statearr-141105","statearr-141106","statearr-141107","inst_141087","statearr-141108","statearr-141109","inst_141090","inst_141092","inst_141091","inst_141093","statearr-141110","inst_141095","inst_141096","inst_141097","p1__141074#","inst_141098","inst_141099","inst_141100","inst_141101","statearr-141111","e141112","statearr-141113","statearr-141114","statearr-141115","filtered-txs","revert.ethereum/provider","parsed-collects","collect-txrs","collect-gases","cljs.core/group-by","revert.poolsv3/<multi-nft-collects","nft-ids","state_141120","state_val_141121","inst_141116","inst_141118","statearr-141122","e141123","statearr-141124","statearr-141125","statearr-141126","cljs.core/concat","revert.poolsv3/collects-reducer","collect-event","p1__141127#","p1__141128#","qty0","qty1","collect","updated-collects","revert.poolsv3/merge-collects","nft-collects","v3state'","revert.poolsv3/position-price-lower","e141129","revert.poolsv3/position-price-upper","e141130","revert.poolsv3/posstate-reducer","position-state","p1__141131#","p1__141132#","token0-obj","token1-obj","sq-price","revert.utils/ethpu","tick","pool-obj","js/module$node_modules$$uniswap$v3_sdk$dist$index.Pool","my-pos","js/module$node_modules$$uniswap$v3_sdk$dist$index.Position","token0-pl","token0-pu","parsed-state","pool'","cljs.core.assoc","revert.poolsv3/merge-position-states","nft-positions","revert.poolsv3/token-fees","tokens-owed","fee-growth-inside-last","current-tick","bignumber.core/>=","bignumber.core/<","revert.poolsv3/counterfactual-fees","nft-position","p1__141133#","fee-growth-global0","tokens-owed0","fee-growth-outside-lower0","fee-growth-outside-upper0","fee-growth-inside-last0","fee-growth-global1","tokens-owed1","fee-growth-outside-lower1","fee-growth-outside-upper1","fee-growth-inside-last1","revert.poolsv3/merge-pending-fees","fees","revert.poolsv3/<pools-dailys","pool-attrs","p__141134","vec__141135","cljs.core.nth","paddress","t0address","t1address","state_141142","state_val_141143","inst_141138","inst_141140","statearr-141144","e141145","statearr-141146","statearr-141147","statearr-141148","revert.thegraph/<v3-pool-days","revert.poolsv3/make-history-snapshots","pool-dailys","pool-dailys'","cljs.core/butlast","cljs.core/reverse","cljs.core.sort_by","init-date","cljs.core/last","init-price0-usd","init-price1-usd","d","revert.utils/price-divergence","revert.poolsv3/merge-pool-dailys","pools-grouped","pool-hists","v","revert.poolsv3/<pool-histories","pool-address","days","state_141165","state_val_141166","inst_141152","inst_141154","inst_141155","inst_141156","inst_141157","inst_141159","inst_141160","inst_141161","inst_141162","inst_141163","statearr-141167","e141168","statearr-141169","statearr-141170","statearr-141171","revert.thegraph/<v3-pool-tokens","revert.thegraph._LT_v3_pool_days","revert.poolsv3/<fetch-account-state","account-or-ens","state_141227","state_val_141228","inst_141187","inst_141190","inst_141191","statearr-141229","statearr-141230","inst_141172","inst_141173","inst_141174","inst_141175","cljs.core/PersistentVector","inst_141176","inst_141177","inst_141178","inst_141179","statearr-141231","statearr-141232","inst_141188","statearr-141233","inst_141225","inst_141216","inst_141219","inst_141220","inst_141221","inst_141222","statearr-141234","cljs.core/rest","statearr-141235","statearr-141236","cljs.core/cons","inst_141185","inst_141211","inst_141214","inst_141215","inst_141217","statearr-141238","inst_141194","inst_141205","inst_141207","inst_141204","inst_141206","inst_141208","statearr-141239","statearr-141240","ex141237","statearr-141241","statearr-141242","inst_141210","inst_141212","statearr-141243","inst_141193","inst_141195","inst_141196","inst_141197","inst_141198","inst_141199","inst_141200","inst_141201","inst_141202","statearr-141244","statearr-141245","e141246","statearr-141247","statearr-141248","statearr-141249","revert.ethereum/<resolve-address","revert.thegraph/<v3-user-mints","revert.thegraph/<v3-user-burns"],"sourcesContent":["(ns revert.poolsv3\n  (:require\n   [clojure.string :as string]\n   [cljs.core.async :refer [go]]\n   [cljs.core.async.interop :refer-macros [<p!]]\n   [bignumber.core :as bn]\n   [\"@uniswap/sdk-core\" :as sdk-core]\n   [\"@uniswap/v3-sdk\" :as univ3]\n   [\"@uniswap/v3-periphery/artifacts/contracts/NonfungiblePositionManager.sol/NonfungiblePositionManager.json\" :as nftmgmt-abi]\n   [\"@uniswap/v3-core/artifacts/contracts/interfaces/pool/IUniswapV3PoolState.sol/IUniswapV3PoolState.json\" :as pool-state-abi]\n   [\"@uniswap/v3-periphery/artifacts/contracts/interfaces/INonfungiblePositionManager.sol/INonfungiblePositionManager.json\" :as mgmt-iface-abi]\n   [revert.utils :as u]\n   [revert.ethereum :as ethereum]\n   [revert.thegraph :as thegraph]))\n\n\n\n(def mngr-abi (.-abi nftmgmt-abi))\n(def mngr-iface-abi (.-abi mgmt-iface-abi))\n(def mgmt-contract (ethereum/make-contract mngr-abi \"0xc36442b4a4522e871399cd717abdd847ab11fe88\"))\n(def mgmt-iface (ethereum/make-interface mngr-iface-abi))\n\n(def pstate-abi (.-abi pool-state-abi))\n(def pstate-iface (ethereum/make-interface pstate-abi))\n\n\n#_(def pstate (ethereum/make-contract pstate-abi \"0x1d42064fc4beb5f8aaf85f4617ae8b3b5b8bd801\"))\n#_(def pstatewe (ethereum/make-contract pstate-abi \"0xCBCdF9626bC03E24f779434178A73a0B4bad62eD\"))\n#_(go (def slot0 (<p! (. pstate slot0))))\n#_(go (def slot0we (<p! (. pstatewe slot0))))\n#_(go (def liquidity (<p! (. pstate liquidity))))\n#_(go (def liquiditywe (<p! (. pstatewe liquidity))))\n#_(.-tick slot0)\n#_(.-sqrtPriceX96 slot0)\n\n\n\n#_(def token0 (sdk-core/Token. 1 \"0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984\" 18))\n#_(def token1 (sdk-core/Token. 1 \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\" 18))\n#_(def usdc (sdk-core/Token. 1 \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\" 6))\n\n#_(def token-test1 (sdk-core/Token. 1 \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\" 18 \"USDC\" \"USD Coin\"))\n#_(def token-test2 (sdk-core/Token. 1 \"0x6B175474E89094C44Da98b954EedeAC495271d0F\" 18 \"DAI\" \"DAI Stablecoin\"))\n\n#_(def weth (sdk-core/Token. 1 (string/lower-case \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\") 18))\n#_(def wbtc (sdk-core/Token. 1 (string/lower-case \"0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599\") 8))\n\n#_(def tokenx (sdk-core/Token. 1 \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\" 6))\n\n#_(def pool (univ3/Pool. token0, token1, 3000, (.-sqrtPriceX96 slot0), liquidity, (.-tick slot0)))\n#_(def poolwe (univ3/Pool. weth, wbtc, 3000, (.-sqrtPriceX96 slot0we), liquiditywe, (.-tick slot0we)))\n#_(. (. pool -token1Price) toFixed)\n#_(. (. poolwe -token1Price) toFixed)\n\n#_(def addy (univ3/computePoolAddress (clj->js {:factoryAddress\"0x1F98431c8aD98523631AE4a59f267346ea31F984\"\n                                              :tokenA token0 :tokenB token1 :fee 3000})))\n\n#_(def addy (univ3/computePoolAddress (clj->js {:factoryAddress univ3/FACTORY_ADDRESS\n                                                   :tokenA token0 :tokenB token1 :fee 3000})))\n\n\n#_(def wbtceth (univ3/computePoolAddress (clj->js {:factoryAddress univ3/FACTORY_ADDRESS\n                                                   :tokenA wbtc :tokenB weth :fee 3000})))\n\n\n#_(. pstate -feeGrowthGlobal0X128)\n;;(def usdc0-pool (univ3/Pool. token0, usdc, 3000, (.-sqrtPriceX96 slot0), liquidity, (.-tick slot0)))\n\n\n#_(def c1 (ethereum/make-contract  mngr-abi \"0xc36442b4a4522e871399cd717abdd847ab11fe88\"))\n#_(go (def apos (<p! (. c1 positions 169))))\n#_(go (def aposwe (<p! (. c1 positions 11770))))\n\n\n#_(def my-pos (univ3/Position.\n             (clj->js {:pool pool,\n                       :liquidity (str (nth apos 7)),\n                       :tickLower (nth apos 5),\n                       :tickUpper (nth apos 6)})))\n\n#_(def my-poswe (univ3/Position.\n                 (clj->js {:pool poolwe,\n                           :liquidity (str (nth aposwe 7)),\n                           :tickLower (nth aposwe 5),\n                           :tickUpper (nth aposwe 6)})))\n\n\n\n\n#_(. (. my-pos -amount0) toFixed)\n#_(. (. my-pos -amount1) toFixed)\n#_(. (. pool -token0Price) quote (. my-pos -amount0))\n\n\n#_(go (def fee-growth-global0 (u/ebn->bn  (<p! (. pstate feeGrowthGlobal0X128)) 18)))\n#_(go (def fee-growth-global1 (u/ebn->bn (<p! (. pstate feeGrowthGlobal1X128)) 18)))\n\n\n#_(go (def fee-growths-lower (<p! (. pstate ticks (. apos -tickLower)))))\n#_(def fee-growth-outside-lower0 (u/ebn->bn (. fee-growths-lower -feeGrowthOutside0X128) 18))\n#_(def fee-growth-outside-lower1 (u/ebn->bn (. fee-growths-lower -feeGrowthOutside1X128) 18))\n\n\n#_(go (def fee-growths-upper (<p! (. pstate ticks (. apos -tickUpper)))))\n#_(def fee-growth-outside-upper0 (u/ebn->bn (. fee-growths-upper -feeGrowthOutside0X128) 18))\n#_(def fee-growth-outside-upper1 (u/ebn->bn (. fee-growths-upper -feeGrowthOutside1X128) 18))\n\n\n\n#_(go (def fee-growth-global0we (u/ebn->bn  (<p! (. pstatewe feeGrowthGlobal0X128)) 8)))\n#_(go (def fee-growth-global1we (u/ebn->bn (<p! (. pstatewe feeGrowthGlobal1X128)) 18)))\n\n\n#_(go (def fee-growths-lowerwe (<p! (. pstatewe ticks (. aposwe -tickLower)))))\n#_(def fee-growth-outside-lower0we (u/ebn->bn (. fee-growths-lowerwe -feeGrowthOutside0X128) 8))\n#_(def fee-growth-outside-lower1we (u/ebn->bn (. fee-growths-lowerwe -feeGrowthOutside1X128) 18))\n\n\n#_(go (def fee-growths-upperwe (<p! (. pstatewe ticks (. aposwe -tickUpper)))))\n#_(def fee-growth-outside-upper0we (u/ebn->bn (. fee-growths-upperwe -feeGrowthOutside0X128) 8))\n#_(def fee-growth-outside-upper1we (u/ebn->bn (. fee-growths-upperwe -feeGrowthOutside1X128) 18))\n\n\n\n;; claculate feees 0\n\n\n(defn counterfactual-fees-old\n  [fee-growth-global fee-growth-outside-lower fee-growth-outside-upper\n   fee-growth-insinde-last pool liquidity tick-lower tick-upper]\n  (let [fee-growth-below (if (>= (. pool -tickCurrent) tick-lower)\n                           fee-growth-outside-lower\n                           (- fee-growth-global fee-growth-outside-lower))\n        fee-growth-above (if (< (. pool -tickCurrent) tick-upper)\n                           fee-growth-outside-upper\n                           (- fee-growth-global fee-growth-outside-upper))\n        fee-growth-inside (- (- fee-growth-global fee-growth-below) fee-growth-above)\n        current-fee-growth (- fee-growth-inside fee-growth-insinde-last)]\n    (/ (* current-fee-growth liquidity) (Math/pow 2 128))))\n\n\n(defn total-fees\n  [^js position fees0 fees1]\n  [(bn/+ (bn/* (u/bn 2) (u/ebn->bn (. position -tokensOwed0) 18)) fees0)\n   (bn/+ (bn/* (u/bn 2) (u/ebn->bn (. position -tokensOwed1) 18)) fees1)])\n\n#_(def fees0 (counterfactual-fees-old\n              fee-growth-global0\n              fee-growth-outside-lower0 fee-growth-outside-upper0\n              (u/ebn->bn (. apos -feeGrowthInside0LastX128) 18) pool\n              (. apos -liquidity) (. apos -tickLower) (. apos -tickUpper)))\n\n#_(def fees0we (counterfactual-fees-old\n              fee-growth-global0we\n              fee-growth-outside-lower0we fee-growth-outside-upper0we\n              (u/ebn->bn (. aposwe -feeGrowthInside0LastX128) 8) poolwe\n              (. aposwe -liquidity) (. aposwe -tickLower) (. aposwe -tickUpper)))\n\n\n#_(def fees1 (counterfactual-fees-old\n              fee-growth-global1\n              fee-growth-outside-lower1 fee-growth-outside-upper1\n              (u/ebn->bn (. apos -feeGrowthInside1LastX128) 18) pool\n              (. apos -liquidity) (. apos -tickLower) (. apos -tickUpper)))\n\n\n#_(def fees1we (counterfactual-fees-old\n              fee-growth-global1we\n              fee-growth-outside-lower1we fee-growth-outside-upper1we\n              (u/ebn->bn (. aposwe -feeGrowthInside1LastX128) 18) poolwe\n              (. aposwe -liquidity) (. aposwe -tickLower) (. aposwe -tickUpper)))\n\n\n#_(def tfees (total-fees apos fees0 fees1))\n#_(def tfeeswe (total-fees aposwe fees0we fees1we))\n\n\n\n(defn <account-balance\n  [account]\n  (go (let [balance (<p! (. mgmt-contract balanceOf account))]\n        (u/ebn->bn balance 0))))\n\n\n(defn <account-token-by-index\n  [account i]\n  (go (let [token-id (<p! (. mgmt-contract tokenOfOwnerByIndex account i))]\n        (u/ebn->bn token-id 0))))\n\n\n\n(defn <account-token-ids\n  [account n]\n  (->> (map (fn [i] (go (<! (<account-token-by-index account i))))\n             (range n))\n       (cljs.core.async/merge)\n       (cljs.core.async/reduce conj [])))\n\n\n(defn tokens0-owed\n  [^js position]\n  (. position -tokensOwed0))\n\n(defn tokens1-owed\n  [^js position]\n  (. position -tokensOwed1))\n\n(defn fee-growth-inside0\n  [^js position]\n  (. position -feeGrowthInside0LastX128))\n\n(defn fee-growth-inside1\n  [^js position]\n  (. position -feeGrowthInside1LastX128))\n\n\n(defn fee-growth-outside0\n  [^js fee-growths]\n  (. fee-growths -feeGrowthOutside0X128))\n\n\n(defn fee-growth-outside1\n  [^js fee-growths]\n  (. fee-growths -feeGrowthOutside1X128))\n\n(defn <fee-growth-global0\n  [^js pool-state]\n  (go (<p! (. pool-state feeGrowthGlobal0X128))))\n\n(defn <fee-growth-global1\n  [^js pool-state]\n  (go (<p! (. pool-state feeGrowthGlobal1X128))))\n\n\n(defn <token-position\n  [v3state token-id]\n  (go (let [position (<p! (. mgmt-contract positions (str token-id)))\n            chain-id 1\n            token0-address (string/lower-case (. position -token0))\n            token1-address (string/lower-case (. position -token1))\n            decimals0 (:decimals (get (:tokens v3state) token0-address))\n            decimals1 (:decimals (get (:tokens v3state) token1-address))\n            token0 (sdk-core/Token. chain-id token0-address decimals0)\n            token1 (sdk-core/Token. chain-id token1-address decimals1)\n            pool-address (string/lower-case\n                          (univ3/computePoolAddress\n                          (clj->js {:factoryAddress univ3/FACTORY_ADDRESS\n                                    :tokenA token0\n                                    :tokenB token1\n                                    :fee (. position -fee)})))\n            pool-state (ethereum/make-contract pstate-abi pool-address)\n            fee-growth-inside0-last (u/ebn->bn (fee-growth-inside0 position) decimals0)\n            fee-growth-inside1-last (u/ebn->bn (fee-growth-inside1 position) decimals1)\n            fee-growth-global0 (u/ebn->bn (<! (<fee-growth-global0 pool-state)) decimals0)\n            fee-growth-global1 (u/ebn->bn  (<! (<fee-growth-global1 pool-state)) decimals1)\n            fee-growths-lower (<p! (. pool-state ticks (. (. position -tickLower) toString)))\n            fee-growth-outside-lower0 (u/ebn->bn (fee-growth-outside0 fee-growths-lower) decimals0)\n            fee-growth-outside-lower1 (u/ebn->bn (fee-growth-outside1 fee-growths-lower) decimals1)\n            fee-growths-upper (<p! (. pool-state ticks  (. (. position -tickUpper) toString)))\n            fee-growth-outside-upper0 (u/ebn->bn (fee-growth-outside0 fee-growths-upper) decimals0)\n            fee-growth-outside-upper1 (u/ebn->bn (fee-growth-outside1 fee-growths-upper) decimals1)\n            ]\n        {:nft-id (. token-id toString)\n         :fee-growth-inside0-last fee-growth-inside0-last\n         :fee-growth-inside1-last fee-growth-inside1-last\n         :fee-growth-outside-lower0 fee-growth-outside-lower0\n         :fee-growth-outside-lower1 fee-growth-outside-lower1\n         :fee-growth-outside-upper0 fee-growth-outside-upper0\n         :fee-growth-outside-upper1 fee-growth-outside-upper1\n         :fee-growth-global0 fee-growth-global0\n         :fee-growth-global1 fee-growth-global1\n         :address pool-address\n         :operator (. position -operator)\n         :fee-tier (. (. position -fee) toString)\n         :token0  (. position -token0)\n         :token1  (. position -token1)\n         :liquidity (. (. position -liquidity) toString)\n         :tick-lower (. (. position -tickLower) toString)\n         :tick-upper (. (. position -tickUpper) toString)\n         :feeGrowthInside0LastX128 (. (fee-growth-inside0 position) toString)\n         :feeGrowthInside1LastX128 (. (fee-growth-inside1 position) toString)\n         :tokens-owed0 (. (tokens0-owed position) toString)\n         :tokens-owed1 (. (tokens1-owed position) toString)})))\n\n\n\n\n#_(defn <account-positions\n  [account]\n  (go (let [n-positions (<! (<account-balance account))\n            token-ids (<! (<account-token-ids account n-positions))]\n        (<! (->> (map (fn [token-id] (go (<! (<token-position token-id))))\n                  token-ids)\n             (cljs.core.async/merge)\n             (cljs.core.async/reduce conj []))))))\n\n\n(defn <token-positions\n  [v3state token-ids]\n  (->> (map (fn [token-id] (go (<! (<token-position v3state token-id))))\n            token-ids)\n       (cljs.core.async/merge)\n       (cljs.core.async/reduce conj [])))\n\n\n\n(defn decode-liquidity-event\n  [event token1-decimals token2-decimals]\n  (try (let [event-obj (. mgmt-iface parseLog event)\n             event-type (case (.-name event-obj)\n                          \"IncreaseLiquidity\" :increase-liquidity\n                          \"DecreaseLiquidity\" :decrease-liquidity)\n             args (.-args event-obj)\n             token-id (str (u/ebn->bn (.-tokenId args) 0))\n             amount0 (u/ebn->bn (.-amount0 args) token1-decimals)\n             amount1 (u/ebn->bn (.-amount1 args) token2-decimals)\n             liquidity (.-liquidity args)]\n         {:type event-type\n          :nft-id token-id\n          :amount0 amount0\n          :amount1 amount1\n          :liquidity liquidity})\n       (catch  js/Error err  (js/console.log \"prob parsing liquidity event:\" err))))\n\n\n(defn make-liqevent-map\n  [liqevent-txr token1-decimals token2-decimals]\n  (let [tx (:tx liqevent-txr)\n        re (:receipt liqevent-txr)\n        txhash (.-hash tx)\n        block-number (.-blockNumber tx)\n        gas-decimals 0\n        eth-decimals 18\n        gas-price (u/ebn->bn (.-gasPrice tx) eth-decimals)\n        gas-used (u/ebn->bn (.-gasUsed re) gas-decimals)\n        ;; We can potentially have more than one liquidy event per tx\n        event-logs (filter some? (map #(decode-liquidity-event % token1-decimals token2-decimals)\n                                      (.-logs re)))\n        gas-used' (bn// gas-used (u/bn (count event-logs)))]\n    (map #(into % {:gas-price gas-price\n                   :tx-hash txhash\n                   :gas-used gas-used'})\n         event-logs)))\n\n\n\n(defn <get-nft-events\n  [tx-hashes]\n  (go\n    (let [;;TODO mock decimals only work here because\n          ;;we only care about getting the nft-id to assoc into\n          ;;the mints,burns maps with correct decimals already\n          ;;fetched from thegraph.\n          ;;this fn should comform to the pattern where it takes\n          ;;a v3state map and adds the missing nft-ids to the state\n          ;;returned\n          token0-decimals 18\n          token1-decimals 18\n          nft-txrs (<! (ethereum/<get-trxs tx-hashes))\n          events (mapcat #(make-liqevent-map % token0-decimals token1-decimals)\n                         nft-txrs)]\n      (filter some? events))))\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; the graph\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n\n\n\n(defn parse-token\n  [token eth-price]\n  {:address (:id token)\n   :decimals (if (= (string/lower-case (:id token))\n                    \"xxx0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\")\n               6\n               (js/parseInt (:decimals token)))\n   :name (:name token)\n   :symbol (:symbol token)\n   :prices {:usd (bn/* (u/bn (:derivedETH token)) eth-price)\n            :eth (u/bn (:derivedETH token))}})\n\n\n(defn parse-pool\n  [pool eth-price]\n  (let [address0 (:id (:token0 pool))\n        address1 (:id (:token1 pool))\n        decimals0 (:decimals (:token0 pool))\n        decimals1 (:decimals (:token1 pool))\n        network 1\n        token0 (sdk-core/Token. network address0 decimals0)\n        token1 (sdk-core/Token. network address1 decimals1)\n        fee-string (:feeTier pool)\n        address (string/lower-case\n                 (univ3/computePoolAddress\n                  (clj->js {:factoryAddress univ3/FACTORY_ADDRESS\n                            :tokenA token0 :tokenB token1 :fee fee-string})))]\n    {:address address\n     :exchange \"uniswapv3\"\n     :token0 (:id (:token0 pool))\n     :token1 (:id (:token1 pool))\n     :fee-tier fee-string\n     :liquidity (u/bn (:liquidity pool))\n     :sqrt-price (u/bn (:sqrtPrice pool))\n     :tick (u/bn (:tick pool))\n     :reserve0 (* eth-price (u/bn (:totalValueLockedToken0 pool)))\n     :reserve1 (* eth-price (u/bn (:totalValueLockedToken1 pool)))\n     :reserve-total-eth (u/bn (:totalValueLockedETH pool))\n     :reserve-total-usd (u/bn (:totalValueLockedUSD pool))\n     :lp-count (js/parseInt (:liquidityProviderCount pool))}))\n\n\n(defn pool-by-attrs\n  [pools token0 token1 fee-tier]\n  (first (filter (fn [pool] (and (= (:token0 pool) token0)\n                                 (= (:token1 pool) token1)\n                                 (= (:fee-tier pool) fee-tier)))\n                 (vals pools))))\n\n(defn parse-liqevent-tx\n  [liqevent]\n  (let [block-number (js/parseInt (:blockNumber (:transaction liqevent)))\n        tx-hash (:id (:transaction liqevent))\n        type-key (if (= (:type liqevent) :mints)\n                   :deposits\n                   :withdrawals)\n        token0 (:id (:token0 (:pool liqevent)))\n        token1 (:id (:token1 (:pool liqevent)))\n        token0-qty (u/bn (:amount0 liqevent))\n        token1-qty (u/bn (:amount1 liqevent))]\n    {:block-number block-number\n     :tx-hash tx-hash\n     type-key {token0 token0-qty\n               token1 token1-qty}\n     :liquidity (u/bn (:amount liqevent))}))\n\n(defn parse-position\n  [liqevent v3state]\n  (let [pools (:v3pools v3state)\n        tokens (:tokens v3state)\n        fee-tier (:feeTier (:pool liqevent))\n        token0 (:id (:token0 (:pool liqevent)))\n        token1 (:id (:token1 (:pool liqevent)))\n        pool (pool-by-attrs pools token0 token1 fee-tier)]\n    {:nft-id nil\n     :address (:address pool)\n     :token0 token0\n     :token1 token1\n     :tick-lower (u/bn (:tickLower liqevent))\n     :tick-upper (u/bn (:tickUpper liqevent))\n     :fee-tier fee-tier\n     :liquidity (u/bn \"0.0\")\n     :mints (if (= (:type liqevent) :mints)\n              [(parse-liqevent-tx liqevent)]\n              [])\n     :burns (if (= (:type liqevent) :burns)\n              [(parse-liqevent-tx liqevent)]\n              [])\n     :collects (if (= (:type liqevent) :collects)\n                 [(parse-liqevent-tx liqevent)]\n                 [])\n     :blocks-ts {}}))\n\n\n(defn position-reducer\n  [positions p]\n  (let [matched-position (first (filter #(and (= (:address %) (:address p))\n                                              (bn/= (:tick-lower %) (:tick-lower p))\n                                              (bn/= (:tick-upper %) (:tick-upper p)))\n                                        positions))\n        matched-liquidity (if matched-position\n                            (:liquidity matched-position)\n                            (u/bn \"0.0\"))\n        other-positions (filter #(or (not= (:address %) (:address p))\n                                      (not (bn/= (:tick-lower %) (:tick-lower p)))\n                                      (not (bn/= (:tick-upper %) (:tick-upper p))))\n                                positions)\n        new-mints (concat (:mints matched-position) (:mints p))\n        new-burns (concat (:burns matched-position) (:burns p))\n        liquidity-minted (if (> (count new-mints) 0)\n                           (reduce bn/+ (map :liquidity new-mints))\n                           (u/bn \"0.0\"))\n        liquidity-burned (if (> (count new-burns) 0)\n                           (reduce bn/+ (map :liquidity new-burns))\n                           (u/bn \"0.0\"))\n        new-pos (into p\n                      {:liquidity (bn/- liquidity-minted liquidity-burned)\n                       :mints new-mints\n                       :burns new-burns\n                       :collects (concat (:collects matched-position) (:collects p))})]\n    (conj other-positions new-pos)))\n\n\n(defn parse-liqevents\n  [mint-liqevents burn-liqevents]\n  (let [eth-price (u/bn (:ethPriceUSD (first (:bundles (:data mint-liqevents)))))\n        mints (map #(into % {:type :mints})\n                   (:mints (:data mint-liqevents)))\n        burns (map #(into % {:type :burns})\n                   (:burns (:data burn-liqevents)))\n        events (concat mints burns)\n\n        tokens (map #(parse-token % eth-price)\n                    (mapcat (comp (juxt :token0 :token1) :pool) events))\n        tokens' (->> (distinct (map :address tokens))\n                     (map (fn [address]\n                            {address (first (filter #(= (:address %) address) tokens))}))\n                     (apply merge))\n        pools (map (comp #(parse-pool % eth-price) :pool) events)\n        pools' (->> (distinct (map :address pools))\n                    (map (fn [address]\n                           {address (first (filter #(= (:address %) address) pools))}))\n                    (apply merge))\n        v3positions (map #(parse-position % {:v3pools pools'\n                                             :tokens tokens'})\n                         events)\n        v3positions' (reduce position-reducer [] v3positions)]\n    {:tokens tokens'\n     :v3lp-positions v3positions'\n     :v3pools pools'}))\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(defn nft-reducer\n  [positions nft-event]\n  (let [events-type (case (:type nft-event)\n                      :increase-liquidity :mints\n                      :decrease-liquidity :burns\n                      :collect-liquidity :collects)\n\n        matched-position (first (filter #(contains?\n                                          (set (map :tx-hash (events-type %)))\n                                          (:tx-hash nft-event))\n                                        positions))\n        other-positions (filter #(not (contains? (set (map :tx-hash (events-type %)))\n                                                 (:tx-hash nft-event)))\n                                positions)\n        possible-events (events-type matched-position)\n        matched-event (first (filter #(= (:tx-hash %) (:tx-hash nft-event))\n                                     possible-events))\n        other-events (filter #(not= (:tx-hash %) (:tx-hash nft-event))\n                             possible-events)\n        updated-event (into matched-event\n                            {:gas-price (:gas-price nft-event)\n                             :gas-used (:gas-used nft-event)})\n        seperated-position (if (and (not= nil (:nft-id matched-position))\n                                    (not= (:nft-id nft-event) (:nft-id matched-position)))\n                              matched-position)\n        updated-position (into matched-position\n                               {:nft-id (:nft-id nft-event)\n                                events-type (conj other-events updated-event)})]\n    (filter some? (conj other-positions updated-position seperated-position))))\n\n\n(defn merge-nfts\n  [v3state nft-events]\n  (let [positions (:v3lp-positions v3state)\n        positions' (reduce nft-reducer positions nft-events)]\n    (into v3state {:v3lp-positions positions'})))\n\n\n\n(defn make-position-collect\n  [tx]\n  (let [parsed-event (. mgmt-iface parseLog tx)\n        tx-args (. parsed-event -args)\n        tx-hash (. tx -transactionHash)\n        block-number (. tx -blockNumber)\n        amount0 (. tx-args -amount0)\n        amount1 (. tx-args -amount1)\n        token-id (. tx-args -tokenId)]\n    {:nft-id (str (u/ebn->bn token-id 0))\n     :amount0  (str amount0)\n     :amount1 (str amount1)\n     :block-number (js/parseInt (str block-number))\n     :tx-hash tx-hash}))\n\n\n(defn make-gaspaid-map\n  [txr]\n  (let [tx (:tx txr)\n        re (:receipt txr)\n        txhash (.-hash tx)\n        block-number (.-blockNumber tx)\n        gas-decimals 0\n        eth-decimals 18\n        gas-price (u/ebn->bn (.-gasPrice tx) eth-decimals)\n        gas-used (u/ebn->bn (.-gasUsed re) gas-decimals)]\n    {:gas-price gas-price\n     :gas-used gas-used\n     :tx-hash txhash}))\n\n\n(defn <nft-collects\n  [nft-id]\n  (let [user-filter (mgmt-contract.filters.Collect (. nft-id toNumber))\n        ;; univ3 factory contract created on block 12369621\n        _ (set! (.. user-filter -fromBlock) 12369621)\n        _ (set! (.. user-filter -toBlock) \"latest\")]\n    (go (let [filtered-txs (<p! (. @ethereum/provider getLogs user-filter))\n              parsed-collects (map make-position-collect filtered-txs)\n              tx-hashes (map :tx-hash parsed-collects)\n              collect-txrs (<! (ethereum/<get-trxs tx-hashes))\n              collect-gases (map make-gaspaid-map collect-txrs)]\n          (->> (concat parsed-collects collect-gases)\n               (group-by :tx-hash)\n               vals\n               (map #(apply merge %)))))))\n\n\n(defn <multi-nft-collects\n  [nft-ids]\n  (->> (map (fn [nft-id] (go (<! (<nft-collects nft-id))))\n            nft-ids)\n       (cljs.core.async/merge)\n       (cljs.core.async/reduce concat [])))\n\n\n\n(defn collects-reducer\n  [v3state collect-event]\n  (let [positions (:v3lp-positions v3state)\n        tokens (:tokens v3state)\n        matched-position (first (filter #(=  (:nft-id %) (:nft-id collect-event))\n                                        positions))\n        other-positions (filter #(not (= (:nft-id %) (:nft-id collect-event)))\n                                positions)\n\n        token0 (:token0 matched-position)\n        token1 (:token1 matched-position)\n        decimals0 (:decimals (get tokens token0))\n        decimals1 (:decimals (get tokens token1))\n        qty0 (u/ebn->bn (:amount0 collect-event) decimals0)\n        qty1 (u/ebn->bn (:amount1 collect-event) decimals1)\n\n        collect {:block-number (:block-number collect-event)\n                 :tx-hash (:tx-hash collect-event)\n                 :gas-price (:gas-price collect-event)\n                 :gas-used (:gas-used collect-event)\n                 :withdrawals {token0 qty0\n                               token1 qty1}}\n\n        updated-collects (conj (:collects matched-position) collect)\n        updated-position (into matched-position {:collects updated-collects})]\n    (into v3state {:v3lp-positions (conj other-positions updated-position)})))\n\n\n\n(defn merge-collects\n  [v3state nft-collects]\n  (let [v3state' (reduce collects-reducer v3state nft-collects)]\n    v3state'))\n\n\n(defn position-price-lower\n  [^js position]\n  (try\n    (u/bn (. (. position -token0PriceLower) toSignificant 8))\n    (catch js/Error err\n      (do (js/console.log \"Error parsing position lower price:\" err)\n          (u/bn \"0.0\")))))\n\n(defn position-price-upper\n  [^js position]\n  (try\n    (u/bn (. (. position -token0PriceUpper) toSignificant 8))\n    (catch js/Error err\n      (do (js/console.log \"Error parsing position lower price:\" err)\n          (u/bn \"0.0\")))))\n\n\n(defn posstate-reducer\n  [v3state position-state]\n  (let [positions (:v3lp-positions v3state)\n        tokens (:tokens v3state)\n        pools (:v3pools v3state)\n        matched-position (first (filter #(=  (:nft-id %) (:nft-id position-state))\n                                        positions))\n        other-positions (filter #(not (= (:nft-id %) (:nft-id position-state)))\n                                positions)\n        token0 (string/lower-case (:token0 position-state))\n        token1 (string/lower-case (:token1 position-state))\n        decimals0 (:decimals (get tokens token0))\n        decimals1 (:decimals (get tokens token1))\n        network 1\n        token0-obj (sdk-core/Token. network token0 decimals0)\n        token1-obj (sdk-core/Token. network token1 decimals1)\n        ;;_ (println token0 token1)\n        ;;_ (println decimals0 decimals1)\n        ;;_ (println token0-obj token1-obj)\n        ;;_ (println  (:address position-state))\n\n        pool (get pools (:address position-state))\n        fee-tier (js/parseInt (:fee-tier pool))\n        sq-price (u/ethpu (. (:sqrt-price pool) toFixed) 0)\n        liquidity (u/ethpu (. (:liquidity pool) toFixed) 0)\n        tick (js/parseInt (. (:tick pool) toFixed))\n        pool-obj (univ3/Pool. token0-obj, token1-obj, fee-tier,\n                              sq-price, liquidity, tick)\n        tick-lower (js/parseInt (:tick-lower position-state))\n        tick-upper (js/parseInt (:tick-upper position-state))\n        my-pos (univ3/Position.\n                (clj->js {:pool pool-obj,\n                          :liquidity (u/ebn->bn (u/ethpu (:liquidity position-state) 0) 0)\n                          :tickLower tick-lower\n                          :tickUpper tick-upper}))\n        amount0 (u/bn (. (. my-pos -amount0) toFixed))\n        amount1 (u/bn (. (. my-pos -amount1) toFixed))\n        token0-pl (position-price-lower my-pos)\n        token0-pu (position-price-upper my-pos)\n\n        parsed-state {:fee-growth-outside-lower0 (:fee-growth-outside-lower0 position-state)\n                      :fee-growth-outside-lower1 (:fee-growth-outside-lower1 position-state)\n                      :fee-growth-outside-upper0 (:fee-growth-outside-upper0 position-state)\n                      :fee-growth-outside-upper1 (:fee-growth-outside-upper1 position-state)\n                      :fee-growth-inside0 (:fee-growth-inside0-last position-state)\n                      :fee-growth-inside1 (:fee-growth-inside1-last position-state)\n                      :tokens-owed0 (u/ebn->bn (:tokens-owed0 position-state) decimals0)\n                      :tokens-owed1 (u/ebn->bn (:tokens-owed1 position-state) decimals1)\n                      :price-lower token0-pl\n                      :price-upper token0-pu\n                      :amount0 amount0\n                      :amount1 amount1}\n        updated-position (into matched-position parsed-state)\n        pool' (into pool {:fee-growth-global0 (:fee-growth-global0 position-state)\n                          :fee-growth-global1 (:fee-growth-global1 position-state)})]\n    (into v3state {:v3pools (assoc pools (:address pool') pool')\n                   :v3lp-positions (conj other-positions updated-position)})))\n\n\n\n\n\n(defn merge-position-states\n  [v3state nft-positions]\n  (let [v3state' (reduce posstate-reducer v3state nft-positions)]\n    v3state'))\n\n\n\n(defn token-fees\n  [fee-growth-global tokens-owed\n   fee-growth-outside-lower fee-growth-outside-upper\n   fee-growth-inside-last current-tick liquidity tick-lower tick-upper]\n  (let [fee-growth-below (if (bn/>= current-tick tick-lower)\n                            fee-growth-outside-lower\n                           (bn/- fee-growth-global fee-growth-outside-lower))\n        fee-growth-above (if (bn/< current-tick tick-upper)\n                           fee-growth-outside-upper\n                           (bn/- fee-growth-global fee-growth-outside-upper))\n        fee-growth-inside (bn/- (bn/- fee-growth-global fee-growth-below) fee-growth-above)\n        current-fee-growth (bn/- fee-growth-inside fee-growth-inside-last)]\n    (bn/+\n      tokens-owed\n     (bn// (bn/* current-fee-growth liquidity) (u/bn (Math/pow 2 128))))))\n\n\n(defn counterfactual-fees\n  [v3state nft-id]\n  (let [positions (:v3lp-positions v3state)\n        nft-position (first (filter #(= (:nft-id %) nft-id) positions))\n        pool (get (:v3pools v3state) (:address nft-position))\n        current-tick (:tick pool)\n        liquidity (:liquidity nft-position)\n        tick-lower (:tick-lower nft-position)\n        tick-upper (:tick-upper nft-position)\n\n        fee-growth-global0 (:fee-growth-global0 pool)\n        tokens-owed0 (:tokens-owed0 nft-position)\n        fee-growth-outside-lower0 (:fee-growth-outside-lower0 nft-position)\n        fee-growth-outside-upper0 (:fee-growth-outside-upper0 nft-position)\n        fee-growth-inside-last0 (:fee-growth-inside0 nft-position)\n\n\n        fee-growth-global1 (:fee-growth-global1 pool)\n        tokens-owed1 (:tokens-owed1 nft-position)\n        fee-growth-outside-lower1 (:fee-growth-outside-lower1 nft-position)\n        fee-growth-outside-upper1 (:fee-growth-outside-upper1 nft-position)\n        fee-growth-inside-last1 (:fee-growth-inside1 nft-position)]\n    {(:token0 nft-position)\n     (token-fees fee-growth-global0 tokens-owed0\n                 fee-growth-outside-lower0 fee-growth-outside-upper0\n                 fee-growth-inside-last0 current-tick\n                 liquidity tick-lower tick-upper)\n     (:token1 nft-position)\n     (token-fees fee-growth-global1 tokens-owed1\n                 fee-growth-outside-lower1 fee-growth-outside-upper1\n                 fee-growth-inside-last1 current-tick\n                 liquidity tick-lower tick-upper)}))\n\n\n(defn merge-pending-fees\n  [v3state]\n  (let [positions (:v3lp-positions v3state)\n        positions' (map (fn [p]\n                          (let [fees (counterfactual-fees v3state (:nft-id p))]\n                            (into p {:pending-fees0 (get fees (:token0 p))\n                                     :pending-fees1 (get fees (:token1 p))})))\n                        positions)]\n    (into v3state {:v3lp-positions positions'})))\n\n\n#_(go (def a (<! (thegraph/<v3-user-mints \"\"))))\n#_(def hs (map :tx-hash (mapcat :mints (:v3lp-positions (parse-liqevents a)))))\n#_(go (def e1 (<! (<get-nft-events hs))))\n\n#_(def my-nft-ids (map :nft-id (:v3lp-positions (merge-nfts (parse-liqevents a) e1))))\n\n\n#_(go (def my-collects (<! (<multi-nft-collects my-nft-ids))))\n\n#_(def v3state0 (merge-nfts (parse-liqevents a) e1))\n#_(def v3state1 (merge-collects v3state0 my-collects))\n\n#_(go (def my-nft-positions (<! (<token-positions v3state1 my-nft-ids))))\n#_(def v3state2 (merge-position-states v3state1 my-nft-positions))\n#_(def v3state3 (merge-pending-fees v3state2))\n\n\n#_(go (def x (<! (thegraph/<v3-pool-days\n                  \"0xcbcdf9626bc03e24f779434178a73a0b4bad62ed\"\n                  \"0x2260fac5e5542a773aa44fbcfedf7c193bc2c599\"\n                  \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\"))))\n\n\n\n(defn <pools-dailys\n  [v3state]\n  (let [pools (vals (:v3pools v3state))\n        pool-attrs (map (fn [p] ((juxt :address :token0 :token1) p))\n                        pools)]\n    (->> (map (fn [[paddress t0address t1address]]\n                (go (<! (thegraph/<v3-pool-days paddress t0address t1address))))\n              pool-attrs)\n         (cljs.core.async/merge)\n         (cljs.core.async/reduce concat []))))\n\n\n\n#_(go (def pool-dailys (<! (<pools-dailys v3state3))))\n\n(defn make-history-snapshots\n  [pool-dailys]\n  (let [pool-dailys' (butlast (reverse (sort-by :date pool-dailys)))\n        init-date (:date (last pool-dailys'))\n        init-price0-usd (:token0-price-usd (last pool-dailys'))\n        init-price1-usd (:token1-price-usd (last pool-dailys'))]\n    (map\n     (fn [d]\n       (into d\n             {:price-divergence (u/price-divergence\n                                 [init-price0-usd (:token0-price-usd d)]\n                                 [init-price1-usd (:token1-price-usd d)])\n              :vol-res-ratio (bn// (:volume-usd d) (:reserves-usd d))}))\n     pool-dailys')))\n\n(defn merge-pool-dailys\n  [v3state pool-dailys]\n  (let [pools-grouped (vals (group-by :address pool-dailys))\n        pool-dailys' (map make-history-snapshots pools-grouped)\n        pool-hists (apply merge (map (fn [v] {(:address (first v)) v}) pool-dailys'))]\n    (into v3state {:v3pool-histories pool-hists})))\n\n#_(def v3state4 (merge-pool-dailys v3state3 pool-dailys))\n\n(defn <pool-histories\n  [pool-address days]\n  (go (let [[token0, token1] (<! (thegraph/<v3-pool-tokens pool-address))\n            ph (<! (thegraph/<v3-pool-days pool-address token0 token1 :days days))\n            ph' (make-history-snapshots ph)]\n        {pool-address ph'})))\n\n\n\n(defn <fetch-account-state\n  [account-or-ens]\n  (go\n    (try (let [account (<! (ethereum/<resolve-address account-or-ens))\n               mints (<! (thegraph/<v3-user-mints account))\n               burns (<! (thegraph/<v3-user-burns account))\n               v3state0 (parse-liqevents mints burns)\n               tx-mints (map :tx-hash (mapcat :mints (:v3lp-positions v3state0)))\n               tx-burns (map :tx-hash (mapcat :burns (:v3lp-positions v3state0)))\n               nft-events (<! (<get-nft-events (concat tx-mints tx-burns)))\n               v3state1 (merge-nfts v3state0 nft-events)\n               nft-ids (map :nft-id (:v3lp-positions v3state1))\n               collects (<! (<multi-nft-collects nft-ids))\n               v3state2 (merge-collects v3state1 collects)\n               nft-positions (<! (<token-positions v3state2 nft-ids))\n               v3state2 (merge-position-states v3state2 nft-positions)\n               v3state3 (merge-pending-fees v3state2)\n               pool-dailys (<! (<pools-dailys v3state3))\n               v3state4 (merge-pool-dailys v3state3 pool-dailys)]\n           (into v3state4\n                 {}))\n         (catch js/Error err\n           (do (js/console.log \"Error fetching v3 state:\" err)\n               {:v3lp-positions []\n                :tokens {}\n                :v3pools {}})))))\n\n\n\n\n;;; 1) first get all the mints and all burns for account from thegraph\n;;; DONE make the graph query token values for :tokens including prices via, direvedETH\n;;  DONE parse graph results into our speced map, we should have enough to assoc into tokens\n;;       and be able to generate an address for the v3 pool from the pair addresses. seperate to the tokens\n;;       we should now be able to make a map with all mints and burns for an address pair, fee tier adn\n;;       selected ticks. only thing to get from next step is nft-id, but potentially this could mean\n;;       mints and burns are forked into seperate position maps\n;;; 2) get the token nft for all the mints by getting the transaction logs from the mints txs\n;;  DONE now we should be able to add nft-id to the position maps, and possibly seperate out previos\n;;  steps into seperate positions though they are for the same pair,fee and ticks\n;;; 3) get all the positions for each nft from the mgmt contract\n;;; DONE write a function that takes nft ids and returns positions\n;;; 4) get  all nfts in balance for the account\n;;; 5) check if there is a new nft (then it wasn't minted by this account)\n;;; TODO make some sort of differ for this\n;;; 6) if no new nfts we're go to step 8, if there are new\n;;;    get the mint and burn txs for all the new nfts by searching the incresae, deccrese\n;;;    liquidity event logs with the nft id, here we get gas costs as well as tx ids\n;;; 7) get all the mints and burns from thegraph that match the tx\n;;; DONE figure out if we can get all that we want from v3lp-position for PnL calculations: we can\n;;  8) Get all the collects for the NFT ids\n;;; DONE figure out the best way to get collects for specific NFTs and write the function\n;;;      see ethereum/<user-lp-mint-deposits\n;;; DONE add actual position values to nfts in v3state\n;;;\n;;; DONE figure out if we can compoute pnl with v3state1\n;;; 9) fetch block timestamps,\n;;  10) get v3 pool histories\n;;; DONE get v3 pool history from the graph from poolDayData, this go into v3pool-histories\n;;  DONE will need to get tokenDayData for usd prices.\n;;  DONE merge into v3state\n;;  DONE integrate into re-frame\n;;  DONE make a position card\n;;  DONE I think we're not getting gas price and gas usde for burns\n;;  ------\n;;  DONE make a v3 pool view\n;;  DONE make ens domains work with v3\n;;  TODO should be able to build a functional v3 state by starting from an nft id\n\n;; I think with the above we can generate the charts on the right column\n;; We can easily generate the charts on the left column, but is there any point to it?\n;; total reserves matter less.\n;;   - volume chart should probably stay\n;;   - add a chart that uses prices from thegraph and a position's limits to draw\n;;     a line chart with two guides that are the users limits. can use colors on the guides to\n;;     indicate active liquidity or not.\n;;   - a bar chart that of liquidity distribution with the position's liquidity\n;;     highlited\n;;; Now we have all the data we require for the PnL calculations\n;;; TODO can use multicall because it is a function in the contrat.\n;;; TODO nft ids should be strings?\n"]}