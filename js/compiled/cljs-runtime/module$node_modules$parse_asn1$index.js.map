{
"version":3,
"file":"module$node_modules$parse_asn1$index.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/parse-asn1/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$parse_asn1$index\"] = function(global,require,module,exports) {\nvar asn1 = require('./asn1')\nvar aesid = require('./aesid.json')\nvar fixProc = require('./fixProc')\nvar ciphers = require('browserify-aes')\nvar compat = require('pbkdf2')\nvar Buffer = require('safe-buffer').Buffer\nmodule.exports = parseKeys\n\nfunction parseKeys (buffer) {\n  var password\n  if (typeof buffer === 'object' && !Buffer.isBuffer(buffer)) {\n    password = buffer.passphrase\n    buffer = buffer.key\n  }\n  if (typeof buffer === 'string') {\n    buffer = Buffer.from(buffer)\n  }\n\n  var stripped = fixProc(buffer, password)\n\n  var type = stripped.tag\n  var data = stripped.data\n  var subtype, ndata\n  switch (type) {\n    case 'CERTIFICATE':\n      ndata = asn1.certificate.decode(data, 'der').tbsCertificate.subjectPublicKeyInfo\n      // falls through\n    case 'PUBLIC KEY':\n      if (!ndata) {\n        ndata = asn1.PublicKey.decode(data, 'der')\n      }\n      subtype = ndata.algorithm.algorithm.join('.')\n      switch (subtype) {\n        case '1.2.840.113549.1.1.1':\n          return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der')\n        case '1.2.840.10045.2.1':\n          ndata.subjectPrivateKey = ndata.subjectPublicKey\n          return {\n            type: 'ec',\n            data: ndata\n          }\n        case '1.2.840.10040.4.1':\n          ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, 'der')\n          return {\n            type: 'dsa',\n            data: ndata.algorithm.params\n          }\n        default: throw new Error('unknown key id ' + subtype)\n      }\n      // throw new Error('unknown key type ' + type)\n    case 'ENCRYPTED PRIVATE KEY':\n      data = asn1.EncryptedPrivateKey.decode(data, 'der')\n      data = decrypt(data, password)\n      // falls through\n    case 'PRIVATE KEY':\n      ndata = asn1.PrivateKey.decode(data, 'der')\n      subtype = ndata.algorithm.algorithm.join('.')\n      switch (subtype) {\n        case '1.2.840.113549.1.1.1':\n          return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, 'der')\n        case '1.2.840.10045.2.1':\n          return {\n            curve: ndata.algorithm.curve,\n            privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, 'der').privateKey\n          }\n        case '1.2.840.10040.4.1':\n          ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, 'der')\n          return {\n            type: 'dsa',\n            params: ndata.algorithm.params\n          }\n        default: throw new Error('unknown key id ' + subtype)\n      }\n      // throw new Error('unknown key type ' + type)\n    case 'RSA PUBLIC KEY':\n      return asn1.RSAPublicKey.decode(data, 'der')\n    case 'RSA PRIVATE KEY':\n      return asn1.RSAPrivateKey.decode(data, 'der')\n    case 'DSA PRIVATE KEY':\n      return {\n        type: 'dsa',\n        params: asn1.DSAPrivateKey.decode(data, 'der')\n      }\n    case 'EC PRIVATE KEY':\n      data = asn1.ECPrivateKey.decode(data, 'der')\n      return {\n        curve: data.parameters.value,\n        privateKey: data.privateKey\n      }\n    default: throw new Error('unknown key type ' + type)\n  }\n}\nparseKeys.signature = asn1.signature\nfunction decrypt (data, password) {\n  var salt = data.algorithm.decrypt.kde.kdeparams.salt\n  var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10)\n  var algo = aesid[data.algorithm.decrypt.cipher.algo.join('.')]\n  var iv = data.algorithm.decrypt.cipher.iv\n  var cipherText = data.subjectPrivateKey\n  var keylen = parseInt(algo.split('-')[1], 10) / 8\n  var key = compat.pbkdf2Sync(password, salt, iters, keylen, 'sha1')\n  var cipher = ciphers.createDecipheriv(algo, key, iv)\n  var out = []\n  out.push(cipher.update(cipherText))\n  out.push(cipher.final())\n  return Buffer.concat(out)\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","parseKeys","buffer","Buffer","isBuffer","password","passphrase","key","from","stripped","fixProc","type","tag","data","ndata","asn1","certificate","decode","tbsCertificate","subjectPublicKeyInfo","subtype","PublicKey","algorithm","join","RSAPublicKey","subjectPublicKey","subjectPrivateKey","params","pub_key","DSAparam","Error","EncryptedPrivateKey","salt","decrypt","kde","kdeparams","iters","parseInt","toString","algo","aesid","cipher","iv","cipherText","keylen","split","compat","pbkdf2Sync","ciphers","createDecipheriv","out","push","update","final","concat","PrivateKey","RSAPrivateKey","curve","privateKey","ECPrivateKey","priv_key","DSAPrivateKey","parameters","value","signature"]
}
