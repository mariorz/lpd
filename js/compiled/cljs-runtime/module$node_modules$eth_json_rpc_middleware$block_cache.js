shadow$provide.module$node_modules$eth_json_rpc_middleware$block_cache=function(global,require,module,exports){const cacheUtils=require("module$node_modules$eth_json_rpc_middleware$cache_utils"),createAsyncMiddleware=require("module$node_modules$json_rpc_engine$src$createAsyncMiddleware"),emptyValues=[void 0,null,"\x3cnil\x3e"];module.exports=function(opts={}){const {blockTracker}=opts;if(!blockTracker)throw Error("createBlockCacheMiddleware - No BlockTracker specified");const blockCache=new BlockCacheStrategy,
strategies={perma:blockCache,block:blockCache,fork:blockCache};return createAsyncMiddleware(async(req,res,next)=>{if(req.skipCache)return next();var type=cacheUtils.cacheTypeForPayload(req);type=strategies[type];if(!type||!type.canCacheRequest(req))return next();var blockTag=cacheUtils.blockTagForPayload(req);blockTag||(blockTag="latest");"earliest"===blockTag?blockTag="0x00":"latest"===blockTag&&(blockTag=await blockTracker.getLatestBlock(),blockCache.clearBefore(blockTag));const cacheResult=await type.get(req,
blockTag);void 0===cacheResult?(await next(),await type.set(req,blockTag,res.result)):res.result=cacheResult})};class BlockCacheStrategy{constructor(){this.cache={}}getBlockCacheForPayload(payload,blockNumberHex){payload=Number.parseInt(blockNumberHex,16);blockNumberHex=this.cache[payload];blockNumberHex||(blockNumberHex={},this.cache[payload]=blockNumberHex);return blockNumberHex}async get(payload,requestedBlockNumber){if(requestedBlockNumber=this.getBlockCacheForPayload(payload,requestedBlockNumber))return payload=
cacheUtils.cacheIdentifierForPayload(payload,!0),requestedBlockNumber[payload]}async set(payload,requestedBlockNumber,result){this.canCacheResult(payload,result)&&(requestedBlockNumber=this.getBlockCacheForPayload(payload,requestedBlockNumber),payload=cacheUtils.cacheIdentifierForPayload(payload,!0),requestedBlockNumber[payload]=result)}canCacheRequest(payload){return cacheUtils.canCache(payload)&&"pending"!==cacheUtils.blockTagForPayload(payload)?!0:!1}canCacheResult(payload,result){if(!emptyValues.includes(result))return!["eth_getTransactionByHash",
"eth_getTransactionReceipt"].includes(payload.method)||result&&result.blockHash&&"0x0000000000000000000000000000000000000000000000000000000000000000"!==result.blockHash?!0:!1}clearBefore(oldBlockHex){const self=this,oldBlockNumber=Number.parseInt(oldBlockHex,16);Object.keys(self.cache).map(Number).filter(num=>num<oldBlockNumber).forEach(num=>delete self.cache[num])}}}
//# sourceMappingURL=module$node_modules$eth_json_rpc_middleware$block_cache.js.map
