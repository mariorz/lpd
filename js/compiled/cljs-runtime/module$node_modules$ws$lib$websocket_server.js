shadow$provide.module$node_modules$ws$lib$websocket_server=function(global,require,module,exports){function addListeners(server,map){for(const event of Object.keys(map))server.on(event,map[event]);return function(){for(const event of Object.keys(map))server.removeListener(event,map[event])}}function socketOnError(){this.destroy()}function abortHandshake(socket,code,message,headers){socket.writable&&(message=message||http.STATUS_CODES[code],headers=Object.assign({Connection:"close","Content-type":"text/html",
"Content-Length":Buffer.byteLength(message)},headers),socket.write(`HTTP/1.1 ${code} ${http.STATUS_CODES[code]}\r\n`+Object.keys(headers).map(h=>`${h}: ${headers[h]}`).join("\r\n")+"\r\n\r\n"+message));socket.removeListener("error",socketOnError);socket.destroy()}var Buffer=require("module$node_modules$buffer$index").Buffer;"use strict";global=require("module$node_modules$events$events");const crypto=require("module$node_modules$crypto_browserify$index"),http=require("module$node_modules$stream_http$index"),
url=require("module$node_modules$url$url"),PerMessageDeflate=require("module$node_modules$ws$lib$permessage_deflate"),extension=require("module$node_modules$ws$lib$extension"),constants=require("module$node_modules$ws$lib$constants"),WebSocket=require("module$node_modules$ws$lib$websocket");class WebSocketServer extends global{constructor(options,callback){super();options=Object.assign({maxPayload:104857600,perMessageDeflate:!1,handleProtocols:null,clientTracking:!0,verifyClient:null,noServer:!1,
backlog:null,server:null,host:null,path:null,port:null},options);if(null==options.port&&!options.server&&!options.noServer)throw new TypeError('One of the "port", "server", or "noServer" options must be specified');null!=options.port?(this._server=http.createServer((req,res)=>{req=http.STATUS_CODES[426];res.writeHead(426,{"Content-Length":req.length,"Content-Type":"text/plain"});res.end(req)}),this._server.listen(options.port,options.host,options.backlog,callback)):options.server&&(this._server=options.server);
this._server&&(this._removeListeners=addListeners(this._server,{listening:this.emit.bind(this,"listening"),error:this.emit.bind(this,"error"),upgrade:(req,socket,head)=>{this.handleUpgrade(req,socket,head,ws=>{this.emit("connection",ws,req)})}}));!0===options.perMessageDeflate&&(options.perMessageDeflate={});options.clientTracking&&(this.clients=new Set);this.options=options}address(){if(this.options.noServer)throw Error('The server is operating in "noServer" mode');return this._server?this._server.address():
null}close(cb){if(this.clients)for(var client of this.clients)client.terminate();if(client=this._server)if(this._removeListeners(),this._removeListeners=this._server=null,null!=this.options.port)return client.close(cb);cb&&cb()}shouldHandle(req){return this.options.path&&url.parse(req.url).pathname!==this.options.path?!1:!0}handleUpgrade(req,socket,head,cb){socket.on("error",socketOnError);var version=+req.headers["sec-websocket-version"];const extensions={};if("GET"!==req.method||"websocket"!==req.headers.upgrade.toLowerCase()||
!req.headers["sec-websocket-key"]||8!==version&&13!==version||!this.shouldHandle(req))return abortHandshake(socket,400);if(this.options.perMessageDeflate){const perMessageDeflate=new PerMessageDeflate(this.options.perMessageDeflate,!0,this.options.maxPayload);try{const offers=extension.parse(req.headers["sec-websocket-extensions"]);offers[PerMessageDeflate.extensionName]&&(perMessageDeflate.accept(offers[PerMessageDeflate.extensionName]),extensions[PerMessageDeflate.extensionName]=perMessageDeflate)}catch(err){return abortHandshake(socket,
400)}}if(this.options.verifyClient){version={origin:req.headers[`${8===version?"sec-websocket-origin":"origin"}`],secure:!(!req.connection.authorized&&!req.connection.encrypted),req};if(2===this.options.verifyClient.length){this.options.verifyClient(version,(verified,code,message,headers)=>{if(!verified)return abortHandshake(socket,code||401,message,headers);this.completeUpgrade(extensions,req,socket,head,cb)});return}if(!this.options.verifyClient(version))return abortHandshake(socket,401)}this.completeUpgrade(extensions,
req,socket,head,cb)}completeUpgrade(extensions,req,socket,head,cb){if(!socket.readable||!socket.writable)return socket.destroy();const headers=["HTTP/1.1 101 Switching Protocols","Upgrade: websocket","Connection: Upgrade",`Sec-WebSocket-Accept: ${crypto.createHash("sha1").update(req.headers["sec-websocket-key"]+constants.GUID,"binary").digest("base64")}`],ws=new WebSocket(null);var protocol=req.headers["sec-websocket-protocol"];protocol&&(protocol=protocol.trim().split(/ *, */),protocol=this.options.handleProtocols?
this.options.handleProtocols(protocol,req):protocol[0])&&(headers.push(`Sec-WebSocket-Protocol: ${protocol}`),ws.protocol=protocol);extensions[PerMessageDeflate.extensionName]&&(protocol=extension.format({[PerMessageDeflate.extensionName]:[extensions[PerMessageDeflate.extensionName].params]}),headers.push(`Sec-WebSocket-Extensions: ${protocol}`),ws._extensions=extensions);this.emit("headers",headers,req);socket.write(headers.concat("\r\n").join("\r\n"));socket.removeListener("error",socketOnError);
ws.setSocket(socket,head,this.options.maxPayload);this.clients&&(this.clients.add(ws),ws.on("close",()=>this.clients.delete(ws)));cb(ws)}}module.exports=WebSocketServer}
//# sourceMappingURL=module$node_modules$ws$lib$websocket_server.js.map
