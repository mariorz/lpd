{
"version":3,
"file":"module$node_modules$des_DOT_js$lib$des$cipher.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/des_DOT_js/lib/des/cipher.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$des_DOT_js$lib$des$cipher\"] = function(global,require,module,exports) {\n'use strict';\n\nvar assert = require('minimalistic-assert');\n\nfunction Cipher(options) {\n  this.options = options;\n\n  this.type = this.options.type;\n  this.blockSize = 8;\n  this._init();\n\n  this.buffer = new Array(this.blockSize);\n  this.bufferOff = 0;\n}\nmodule.exports = Cipher;\n\nCipher.prototype._init = function _init() {\n  // Might be overrided\n};\n\nCipher.prototype.update = function update(data) {\n  if (data.length === 0)\n    return [];\n\n  if (this.type === 'decrypt')\n    return this._updateDecrypt(data);\n  else\n    return this._updateEncrypt(data);\n};\n\nCipher.prototype._buffer = function _buffer(data, off) {\n  // Append data to buffer\n  var min = Math.min(this.buffer.length - this.bufferOff, data.length - off);\n  for (var i = 0; i < min; i++)\n    this.buffer[this.bufferOff + i] = data[off + i];\n  this.bufferOff += min;\n\n  // Shift next\n  return min;\n};\n\nCipher.prototype._flushBuffer = function _flushBuffer(out, off) {\n  this._update(this.buffer, 0, out, off);\n  this.bufferOff = 0;\n  return this.blockSize;\n};\n\nCipher.prototype._updateEncrypt = function _updateEncrypt(data) {\n  var inputOff = 0;\n  var outputOff = 0;\n\n  var count = ((this.bufferOff + data.length) / this.blockSize) | 0;\n  var out = new Array(count * this.blockSize);\n\n  if (this.bufferOff !== 0) {\n    inputOff += this._buffer(data, inputOff);\n\n    if (this.bufferOff === this.buffer.length)\n      outputOff += this._flushBuffer(out, outputOff);\n  }\n\n  // Write blocks\n  var max = data.length - ((data.length - inputOff) % this.blockSize);\n  for (; inputOff < max; inputOff += this.blockSize) {\n    this._update(data, inputOff, out, outputOff);\n    outputOff += this.blockSize;\n  }\n\n  // Queue rest\n  for (; inputOff < data.length; inputOff++, this.bufferOff++)\n    this.buffer[this.bufferOff] = data[inputOff];\n\n  return out;\n};\n\nCipher.prototype._updateDecrypt = function _updateDecrypt(data) {\n  var inputOff = 0;\n  var outputOff = 0;\n\n  var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;\n  var out = new Array(count * this.blockSize);\n\n  // TODO(indutny): optimize it, this is far from optimal\n  for (; count > 0; count--) {\n    inputOff += this._buffer(data, inputOff);\n    outputOff += this._flushBuffer(out, outputOff);\n  }\n\n  // Buffer rest of the input\n  inputOff += this._buffer(data, inputOff);\n\n  return out;\n};\n\nCipher.prototype.final = function final(buffer) {\n  var first;\n  if (buffer)\n    first = this.update(buffer);\n\n  var last;\n  if (this.type === 'encrypt')\n    last = this._finalEncrypt();\n  else\n    last = this._finalDecrypt();\n\n  if (first)\n    return first.concat(last);\n  else\n    return last;\n};\n\nCipher.prototype._pad = function _pad(buffer, off) {\n  if (off === 0)\n    return false;\n\n  while (off < buffer.length)\n    buffer[off++] = 0;\n\n  return true;\n};\n\nCipher.prototype._finalEncrypt = function _finalEncrypt() {\n  if (!this._pad(this.buffer, this.bufferOff))\n    return [];\n\n  var out = new Array(this.blockSize);\n  this._update(this.buffer, 0, out, 0);\n  return out;\n};\n\nCipher.prototype._unpad = function _unpad(buffer) {\n  return buffer;\n};\n\nCipher.prototype._finalDecrypt = function _finalDecrypt() {\n  assert.equal(this.bufferOff, this.blockSize, 'Not enough data to decrypt');\n  var out = new Array(this.blockSize);\n  this._flushBuffer(out, 0);\n\n  return this._unpad(out);\n};\n\n};"],
"names":["shadow$provide","global","require","module","exports","Cipher","options","type","blockSize","_init","buffer","Array","bufferOff","assert","prototype","Cipher.prototype._init","update","Cipher.prototype.update","data","length","_updateDecrypt","_updateEncrypt","_buffer","Cipher.prototype._buffer","off","min","Math","i","_flushBuffer","Cipher.prototype._flushBuffer","out","_update","Cipher.prototype._updateEncrypt","inputOff","outputOff","max","Cipher.prototype._updateDecrypt","count","ceil","final","Cipher.prototype.final","first","last","_finalEncrypt","_finalDecrypt","concat","_pad","Cipher.prototype._pad","Cipher.prototype._finalEncrypt","_unpad","Cipher.prototype._unpad","Cipher.prototype._finalDecrypt","equal"]
}
