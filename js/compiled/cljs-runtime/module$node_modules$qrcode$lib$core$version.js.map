{
"version":3,
"file":"module$node_modules$qrcode$lib$core$version.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/qrcode/lib/core/version.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$qrcode$lib$core$version\"] = function(global,require,module,exports) {\nvar Utils = require('./utils')\nvar ECCode = require('./error-correction-code')\nvar ECLevel = require('./error-correction-level')\nvar Mode = require('./mode')\nvar VersionCheck = require('./version-check')\nvar isArray = require('isarray')\n\n// Generator polynomial used to encode version information\nvar G18 = (1 << 12) | (1 << 11) | (1 << 10) | (1 << 9) | (1 << 8) | (1 << 5) | (1 << 2) | (1 << 0)\nvar G18_BCH = Utils.getBCHDigit(G18)\n\nfunction getBestVersionForDataLength (mode, length, errorCorrectionLevel) {\n  for (var currentVersion = 1; currentVersion <= 40; currentVersion++) {\n    if (length <= exports.getCapacity(currentVersion, errorCorrectionLevel, mode)) {\n      return currentVersion\n    }\n  }\n\n  return undefined\n}\n\nfunction getReservedBitsCount (mode, version) {\n  // Character count indicator + mode indicator bits\n  return Mode.getCharCountIndicator(mode, version) + 4\n}\n\nfunction getTotalBitsFromDataArray (segments, version) {\n  var totalBits = 0\n\n  segments.forEach(function (data) {\n    var reservedBits = getReservedBitsCount(data.mode, version)\n    totalBits += reservedBits + data.getBitsLength()\n  })\n\n  return totalBits\n}\n\nfunction getBestVersionForMixedData (segments, errorCorrectionLevel) {\n  for (var currentVersion = 1; currentVersion <= 40; currentVersion++) {\n    var length = getTotalBitsFromDataArray(segments, currentVersion)\n    if (length <= exports.getCapacity(currentVersion, errorCorrectionLevel, Mode.MIXED)) {\n      return currentVersion\n    }\n  }\n\n  return undefined\n}\n\n/**\n * Returns version number from a value.\n * If value is not a valid version, returns defaultValue\n *\n * @param  {Number|String} value        QR Code version\n * @param  {Number}        defaultValue Fallback value\n * @return {Number}                     QR Code version number\n */\nexports.from = function from (value, defaultValue) {\n  if (VersionCheck.isValid(value)) {\n    return parseInt(value, 10)\n  }\n\n  return defaultValue\n}\n\n/**\n * Returns how much data can be stored with the specified QR code version\n * and error correction level\n *\n * @param  {Number} version              QR Code version (1-40)\n * @param  {Number} errorCorrectionLevel Error correction level\n * @param  {Mode}   mode                 Data mode\n * @return {Number}                      Quantity of storable data\n */\nexports.getCapacity = function getCapacity (version, errorCorrectionLevel, mode) {\n  if (!VersionCheck.isValid(version)) {\n    throw new Error('Invalid QR Code version')\n  }\n\n  // Use Byte mode as default\n  if (typeof mode === 'undefined') mode = Mode.BYTE\n\n  // Total codewords for this QR code version (Data + Error correction)\n  var totalCodewords = Utils.getSymbolTotalCodewords(version)\n\n  // Total number of error correction codewords\n  var ecTotalCodewords = ECCode.getTotalCodewordsCount(version, errorCorrectionLevel)\n\n  // Total number of data codewords\n  var dataTotalCodewordsBits = (totalCodewords - ecTotalCodewords) * 8\n\n  if (mode === Mode.MIXED) return dataTotalCodewordsBits\n\n  var usableBits = dataTotalCodewordsBits - getReservedBitsCount(mode, version)\n\n  // Return max number of storable codewords\n  switch (mode) {\n    case Mode.NUMERIC:\n      return Math.floor((usableBits / 10) * 3)\n\n    case Mode.ALPHANUMERIC:\n      return Math.floor((usableBits / 11) * 2)\n\n    case Mode.KANJI:\n      return Math.floor(usableBits / 13)\n\n    case Mode.BYTE:\n    default:\n      return Math.floor(usableBits / 8)\n  }\n}\n\n/**\n * Returns the minimum version needed to contain the amount of data\n *\n * @param  {Segment} data                    Segment of data\n * @param  {Number} [errorCorrectionLevel=H] Error correction level\n * @param  {Mode} mode                       Data mode\n * @return {Number}                          QR Code version\n */\nexports.getBestVersionForData = function getBestVersionForData (data, errorCorrectionLevel) {\n  var seg\n\n  var ecl = ECLevel.from(errorCorrectionLevel, ECLevel.M)\n\n  if (isArray(data)) {\n    if (data.length > 1) {\n      return getBestVersionForMixedData(data, ecl)\n    }\n\n    if (data.length === 0) {\n      return 1\n    }\n\n    seg = data[0]\n  } else {\n    seg = data\n  }\n\n  return getBestVersionForDataLength(seg.mode, seg.getLength(), ecl)\n}\n\n/**\n * Returns version information with relative error correction bits\n *\n * The version information is included in QR Code symbols of version 7 or larger.\n * It consists of an 18-bit sequence containing 6 data bits,\n * with 12 error correction bits calculated using the (18, 6) Golay code.\n *\n * @param  {Number} version QR Code version\n * @return {Number}         Encoded version info bits\n */\nexports.getEncodedBits = function getEncodedBits (version) {\n  if (!VersionCheck.isValid(version) || version < 7) {\n    throw new Error('Invalid QR Code version')\n  }\n\n  var d = version << 12\n\n  while (Utils.getBCHDigit(d) - G18_BCH >= 0) {\n    d ^= (G18 << (Utils.getBCHDigit(d) - G18_BCH))\n  }\n\n  return (version << 12) | d\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","getTotalBitsFromDataArray","segments","version","totalBits","forEach","data","reservedBits","Mode","getCharCountIndicator","mode","getBitsLength","Utils","ECCode","ECLevel","VersionCheck","isArray","G18_BCH","getBCHDigit","G18","from","exports.from","value","defaultValue","isValid","parseInt","getCapacity","exports.getCapacity","errorCorrectionLevel","Error","BYTE","totalCodewords","getSymbolTotalCodewords","ecTotalCodewords","getTotalCodewordsCount","dataTotalCodewordsBits","MIXED","usableBits","NUMERIC","Math","floor","ALPHANUMERIC","KANJI","getBestVersionForData","exports.getBestVersionForData","seg","ecl","M","length","currentVersion","undefined","getLength","getEncodedBits","exports.getEncodedBits","d"]
}
