{
"version":3,
"file":"module$node_modules$ws$lib$buffer_util.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAe,sCAAf,CAA2D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAYnGC,QAASA,OAAO,CAACC,IAAD,CAAOC,WAAP,CAAoB,CAC5BC,WAAAA,CAASC,MAAA,CAAOC,WAAP,CAAmBH,WAAnB,CAGf,KAFA,IAAII,OAAS,CAAb,CAESC,EAAI,CAAb,CAAgBA,CAAhB,CAAoBN,IAApB,CAAyBO,MAAzB,CAAiCD,CAAA,EAAjC,CAAsC,CACpC,MAAME,IAAMR,IAAA,CAAKM,CAAL,CACZE,IAAA,CAAIC,IAAJ,CAASP,WAAT,CAAiBG,MAAjB,CACAA,OAAA,EAAUG,GAAV,CAAcD,MAHsB,CAMtC,MAAOL,YAV2B,CAuBpCQ,QAASA,MAAM,CAACC,MAAD,CAASC,IAAT,CAAeC,MAAf,CAAuBR,MAAvB,CAA+BE,MAA/B,CAAuC,CACpD,IAAK,IAAID,EAAI,CAAb,CAAgBA,CAAhB,CAAoBC,MAApB,CAA4BD,CAAA,EAA5B,CACEO,MAAA,CAAOR,MAAP,CAAgBC,CAAhB,CAAA,CAAqBK,MAAA,CAAOL,CAAP,CAArB,CAAiCM,IAAA,CAAKN,CAAL,CAAS,CAAT,CAFiB,CAatDQ,QAASA,QAAQ,CAACC,MAAD,CAASH,IAAT,CAAe,CAE9B,MAAML,OAASQ,MAATR,CAAgBA,MACtB,KAAK,IAAID,EAAI,CAAb,CAAgBA,CAAhB,CAAoBC,MAApB,CAA4BD,CAAA,EAA5B,CACES,MAAA,CAAOT,CAAP,CAAA;AAAaM,IAAA,CAAKN,CAAL,CAAS,CAAT,CAJe,CA/ChC,IAAIH,OAASP,OAAA,CAAQ,kCAAR,CAATO,CAA2BA,MAC/B,aAsDA,IAAI,CACF,MAAMa,WAAapB,OAAA,CAAQ,sCAAR,CAAnB,CACMqB,GAAKD,UAALC,CAAgBC,UAAhBD,EAA8BD,UAEpCnB,OAAA,CAAOC,OAAP,CAAiB,CACfc,IAAK,CAACD,MAAD,CAASC,IAAT,CAAeC,MAAf,CAAuBR,MAAvB,CAA+BE,MAA/B,CAAuC,CAC7B,EAAb,CAAIA,MAAJ,CAAiBG,KAAA,CAAMC,MAAN,CAAcC,IAAd,CAAoBC,MAApB,CAA4BR,MAA5B,CAAoCE,MAApC,CAAjB,CACKU,EAAA,CAAGL,IAAH,CAAQD,MAAR,CAAgBC,IAAhB,CAAsBC,MAAtB,CAA8BR,MAA9B,CAAsCE,MAAtC,CAFqC,CAD7B,CAKfY,MAAO,CAACJ,MAAD,CAASH,IAAT,CAAe,CACA,EAApB,CAAIG,MAAJ,CAAWR,MAAX,CAAwBO,OAAA,CAAQC,MAAR,CAAgBH,IAAhB,CAAxB,CACKK,EAAA,CAAGE,MAAH,CAAUJ,MAAV,CAAkBH,IAAlB,CAFe,CALP,CASfb,MATe,CAJf,CAeF,MAAOqB,CAAP,CAAqC,CACrCvB,MAAA,CAAOC,OAAP,CAAiB,CAAEC,MAAF,CAAUa,KAAMF,KAAhB,CAAuBS,OAAQL,OAA/B,CADoB,CAvE4D;",
"sources":["node_modules/ws/lib/buffer-util.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$ws$lib$buffer_util\"] = function(global,require,module,exports) {\nvar Buffer = require('buffer').Buffer;\n'use strict';\n\n/**\n * Merges an array of buffers into a new buffer.\n *\n * @param {Buffer[]} list The array of buffers to concat\n * @param {Number} totalLength The total length of buffers in the list\n * @return {Buffer} The resulting buffer\n * @public\n */\nfunction concat (list, totalLength) {\n  const target = Buffer.allocUnsafe(totalLength);\n  var offset = 0;\n\n  for (var i = 0; i < list.length; i++) {\n    const buf = list[i];\n    buf.copy(target, offset);\n    offset += buf.length;\n  }\n\n  return target;\n}\n\n/**\n * Masks a buffer using the given mask.\n *\n * @param {Buffer} source The buffer to mask\n * @param {Buffer} mask The mask to use\n * @param {Buffer} output The buffer where to store the result\n * @param {Number} offset The offset at which to start writing\n * @param {Number} length The number of bytes to mask.\n * @public\n */\nfunction _mask (source, mask, output, offset, length) {\n  for (var i = 0; i < length; i++) {\n    output[offset + i] = source[i] ^ mask[i & 3];\n  }\n}\n\n/**\n * Unmasks a buffer using the given mask.\n *\n * @param {Buffer} buffer The buffer to unmask\n * @param {Buffer} mask The mask to use\n * @public\n */\nfunction _unmask (buffer, mask) {\n  // Required until https://github.com/nodejs/node/issues/9006 is resolved.\n  const length = buffer.length;\n  for (var i = 0; i < length; i++) {\n    buffer[i] ^= mask[i & 3];\n  }\n}\n\ntry {\n  const bufferUtil = require('bufferutil');\n  const bu = bufferUtil.BufferUtil || bufferUtil;\n\n  module.exports = {\n    mask (source, mask, output, offset, length) {\n      if (length < 48) _mask(source, mask, output, offset, length);\n      else bu.mask(source, mask, output, offset, length);\n    },\n    unmask (buffer, mask) {\n      if (buffer.length < 32) _unmask(buffer, mask);\n      else bu.unmask(buffer, mask);\n    },\n    concat\n  };\n} catch (e) /* istanbul ignore next */ {\n  module.exports = { concat, mask: _mask, unmask: _unmask };\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","concat","list","totalLength","target","Buffer","allocUnsafe","offset","i","length","buf","copy","_mask","source","mask","output","_unmask","buffer","bufferUtil","bu","BufferUtil","unmask","e"]
}
