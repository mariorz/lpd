shadow$provide.module$node_modules$node_gyp_build$index=function(global,require,module,exports){function load(dir){return runtimeRequire(load.path(dir))}function readdirSync(dir){try{return fs.readdirSync(dir)}catch(err){return[]}}function getFirst(dir,filter){filter=readdirSync(dir).filter(filter);return filter[0]&&path.join(dir,filter[0])}function matchBuild(name){return/\.node$/.test(name)}function parseTags(file){var arr=file.split("."),extension=arr.pop();file={file,specificity:0};if("node"===
extension){for(extension=0;extension<arr.length;extension++){var tag=arr[extension];if("node"===tag||"electron"===tag||"node-webkit"===tag)file.runtime=tag;else if("napi"===tag)file.napi=!0;else if("abi"===tag.slice(0,3))file.abi=tag.slice(3);else if("uv"===tag.slice(0,2))file.uv=tag.slice(2);else if("armv"===tag.slice(0,4))file.armv=tag.slice(4);else if("glibc"===tag||"musl"===tag)file.libc=tag;else continue;file.specificity++}return file}}function matchTags(runtime,abi){return function(tags){return null==
tags||tags.runtime!==runtime&&("node"!==tags.runtime||!tags.napi)||tags.abi!==abi&&!tags.napi||tags.uv&&tags.uv!==uv||tags.armv&&tags.armv!==armv||tags.libc&&tags.libc!==libc?!1:!0}}function compareTags(runtime){return function(a,b){return a.runtime!==b.runtime?a.runtime===runtime?-1:1:a.abi!==b.abi?a.abi?-1:1:a.specificity!==b.specificity?a.specificity>b.specificity?-1:1:0}}var process=require("module$node_modules$process$browser"),fs=require("shadow$empty"),path=require("module$node_modules$path_browserify$index");
global=require("module$node_modules$os_browserify$browser");var runtimeRequire="function"===typeof __webpack_require__?__non_webpack_require__:require;require=process.config&&process.config.variables||{};var prebuildsOnly=!!process.env.PREBUILDS_ONLY,abi$jscomp$0=process.versions.modules,runtime$jscomp$0=process.versions&&process.versions.electron||process.env.ELECTRON_RUN_AS_NODE||"undefined"!==typeof window&&window.process&&"renderer"===window.process.type?"electron":"node",arch=global.arch(),platform=
global.platform(),libc=process.env.LIBC||("linux"===platform&&fs.existsSync("/etc/alpine-release")?"musl":"glibc"),armv=process.env.ARM_VERSION||("arm64"===arch?"8":require.arm_version)||"",uv=(process.versions.uv||"").split(".")[0];module.exports=load;load.path=function(dir$jscomp$0){function resolve(dir){dir=path.join(dir,"prebuilds",platform+"-"+arch);var winner=readdirSync(dir).map(parseTags).filter(matchTags(runtime$jscomp$0,abi$jscomp$0)).sort(compareTags(runtime$jscomp$0))[0];if(winner)return path.join(dir,
winner.file)}dir$jscomp$0=path.resolve(dir$jscomp$0||".");try{var name=runtimeRequire(path.join(dir$jscomp$0,"package.json")).name.toUpperCase().replace(/-/g,"_");process.env[name+"_PREBUILD"]&&(dir$jscomp$0=process.env[name+"_PREBUILD"])}catch(err){}if(!prebuildsOnly&&((name=getFirst(path.join(dir$jscomp$0,"build/Release"),matchBuild))||(name=getFirst(path.join(dir$jscomp$0,"build/Debug"),matchBuild)))||(name=resolve(dir$jscomp$0))||(name=resolve(path.dirname(process.execPath))))return name;name=
["platform\x3d"+platform,"arch\x3d"+arch,"runtime\x3d"+runtime$jscomp$0,"abi\x3d"+abi$jscomp$0,"uv\x3d"+uv,armv?"armv\x3d"+armv:"","libc\x3d"+libc,"node\x3d"+process.versions.node,process.versions&&process.versions.electron?"electron\x3d"+process.versions.electron:"","function"===typeof __webpack_require__?"webpack\x3dtrue":""].filter(Boolean).join(" ");throw Error("No native build was found for "+name+"\n    loaded from: "+dir$jscomp$0+"\n");};load.parseTags=parseTags;load.matchTags=matchTags;load.compareTags=
compareTags}
//# sourceMappingURL=module$node_modules$node_gyp_build$index.js.map
