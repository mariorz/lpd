{
"version":3,
"file":"module$node_modules$eth_rpc_errors$src$errors.js",
"lineCount":7,
"mappings":"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",
"sources":["node_modules/eth-rpc-errors/src/errors.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$eth_rpc_errors$src$errors\"] = function(global,require,module,exports) {\n\nconst { EthereumRpcError, EthereumProviderError } = require('./classes')\nconst { getMessageFromCode } = require('./utils')\nconst ERROR_CODES = require('./errorCodes.json')\n\nmodule.exports = {\n  rpc: {\n\n    /**\n     * Get a JSON RPC 2.0 Parse (-32700) error.\n     *\n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumRpcError} The error\n     */\n    parse: (opts) => getEthJsonRpcError(\n      ERROR_CODES.rpc.parse, opts,\n    ),\n\n    /**\n     * Get a JSON RPC 2.0 Invalid Request (-32600) error.\n     *\n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumRpcError} The error\n     */\n    invalidRequest: (opts) => getEthJsonRpcError(\n      ERROR_CODES.rpc.invalidRequest, opts,\n    ),\n\n    /**\n     * Get a JSON RPC 2.0 Invalid Params (-32602) error.\n     *\n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumRpcError} The error\n     */\n    invalidParams: (opts) => getEthJsonRpcError(\n      ERROR_CODES.rpc.invalidParams, opts,\n    ),\n\n    /**\n     * Get a JSON RPC 2.0 Method Not Found (-32601) error.\n     *\n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumRpcError} The error\n     */\n    methodNotFound: (opts) => getEthJsonRpcError(\n      ERROR_CODES.rpc.methodNotFound, opts,\n    ),\n\n    /**\n     * Get a JSON RPC 2.0 Internal (-32603) error.\n     *\n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumRpcError} The error\n     */\n    internal: (opts) => getEthJsonRpcError(\n      ERROR_CODES.rpc.internal, opts,\n    ),\n\n    /**\n     * Get a JSON RPC 2.0 Server error.\n     * Permits integer error codes in the [ -32099 <= -32005 ] range.\n     * Codes -32000 through -32004 are reserved by EIP 1474.\n     *\n     * @param {Object|string} opts - Options object\n     * @param {number} opts.code - The error code\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumRpcError} The error\n     */\n    server: (opts) => {\n      if (!opts || typeof opts !== 'object' || Array.isArray(opts)) {\n        throw new Error('Ethereum RPC Server errors must provide single object argument.')\n      }\n      const { code } = opts\n      if (!Number.isInteger(code) || code > -32005 || code < -32099) {\n        throw new Error(\n          '\"code\" must be an integer such that: -32099 <= code <= -32005',\n        )\n      }\n      return getEthJsonRpcError(code, opts)\n    },\n\n    /**\n     * Get an Ethereum JSON RPC Invalid Input (-32000) error.\n     *\n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumRpcError} The error\n     */\n    invalidInput: (opts) => getEthJsonRpcError(\n      ERROR_CODES.rpc.invalidInput, opts,\n    ),\n\n    /**\n     * Get an Ethereum JSON RPC Resource Not Found (-32001) error.\n     *\n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumRpcError} The error\n     */\n    resourceNotFound: (opts) => getEthJsonRpcError(\n      ERROR_CODES.rpc.resourceNotFound, opts,\n    ),\n\n    /**\n     * Get an Ethereum JSON RPC Resource Unavailable (-32002) error.\n     *\n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumRpcError} The error\n     */\n    resourceUnavailable: (opts) => getEthJsonRpcError(\n      ERROR_CODES.rpc.resourceUnavailable, opts,\n    ),\n\n    /**\n     * Get an Ethereum JSON RPC Transaction Rejected (-32003) error.\n     *\n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumRpcError} The error\n     */\n    transactionRejected: (opts) => getEthJsonRpcError(\n      ERROR_CODES.rpc.transactionRejected, opts,\n    ),\n\n    /**\n     * Get an Ethereum JSON RPC Method Not Supported (-32004) error.\n     *\n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumRpcError} The error\n     */\n    methodNotSupported: (opts) => getEthJsonRpcError(\n      ERROR_CODES.rpc.methodNotSupported, opts,\n    ),\n\n    /**\n     * Get an Ethereum JSON RPC Limit Exceeded (-32005) error.\n     *\n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumRpcError} The error\n     */\n    limitExceeded: (opts) => getEthJsonRpcError(\n      ERROR_CODES.rpc.limitExceeded, opts,\n    ),\n  },\n\n  provider: {\n\n    /**\n     * Get an Ethereum Provider User Rejected Request (4001) error.\n     *\n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumProviderError} The error\n     */\n    userRejectedRequest: (opts) => {\n      return getEthProviderError(\n        ERROR_CODES.provider.userRejectedRequest, opts,\n      )\n    },\n\n    /**\n     * Get an Ethereum Provider Unauthorized (4100) error.\n     *\n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumProviderError} The error\n     */\n    unauthorized: (opts) => {\n      return getEthProviderError(\n        ERROR_CODES.provider.unauthorized, opts,\n      )\n    },\n\n    /**\n     * Get an Ethereum Provider Unsupported Method (4200) error.\n     *\n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumProviderError} The error\n     */\n    unsupportedMethod: (opts) => {\n      return getEthProviderError(\n        ERROR_CODES.provider.unsupportedMethod, opts,\n      )\n    },\n\n    /**\n     * Get an Ethereum Provider Not Connected (4900) error.\n     *\n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumProviderError} The error\n     */\n    disconnected: (opts) => {\n      return getEthProviderError(\n        ERROR_CODES.provider.disconnected, opts,\n      )\n    },\n\n    /**\n     * Get an Ethereum Provider Chain Not Connected (4901) error.\n     *\n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumProviderError} The error\n     */\n    chainDisconnected: (opts) => {\n      return getEthProviderError(\n        ERROR_CODES.provider.chainDisconnected, opts,\n      )\n    },\n\n    /**\n     * Get a custom Ethereum Provider error.\n     *\n     * @param {Object|string} opts - Options object\n     * @param {number} opts.code - The error code\n     * @param {string} opts.message - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumProviderError} The error\n     */\n    custom: (opts) => {\n      if (!opts || typeof opts !== 'object' || Array.isArray(opts)) {\n        throw new Error('Ethereum Provider custom errors must provide single object argument.')\n      }\n      const { code, message, data } = opts\n      if (!message || typeof message !== 'string') {\n        throw new Error(\n          '\"message\" must be a nonempty string',\n        )\n      }\n      return new EthereumProviderError(code, message, data)\n    },\n  },\n}\n\n// Internal\n\nfunction getEthJsonRpcError (code, opts) {\n  const [message, data] = validateOpts(opts)\n  return new EthereumRpcError(\n    code,\n    message || getMessageFromCode(code),\n    data,\n  )\n}\n\nfunction getEthProviderError (code, opts) {\n  const [message, data] = validateOpts(opts)\n  return new EthereumProviderError(\n    code,\n    message || getMessageFromCode(code),\n    data,\n  )\n}\n\nfunction validateOpts (opts) {\n  if (opts) {\n    if (typeof opts === 'string') {\n      return [opts]\n    } else if (typeof opts === 'object' && !Array.isArray(opts)) {\n      const { message, data } = opts\n      return [message, data]\n    }\n  }\n  return []\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","getEthJsonRpcError","code","opts","validateOpts","message","data","EthereumRpcError","getMessageFromCode","getEthProviderError","EthereumProviderError","Array","isArray","ERROR_CODES","rpc","parse","invalidRequest","invalidParams","methodNotFound","internal","server","Error","Number","isInteger","invalidInput","resourceNotFound","resourceUnavailable","transactionRejected","methodNotSupported","limitExceeded","provider","userRejectedRequest","unauthorized","unsupportedMethod","disconnected","chainDisconnected","custom"]
}
