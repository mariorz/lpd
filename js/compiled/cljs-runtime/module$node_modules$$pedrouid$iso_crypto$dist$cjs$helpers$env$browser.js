shadow$provide.module$node_modules$$pedrouid$iso_crypto$dist$cjs$helpers$env$browser=function(global,require,module,exports){function getBrowerCrypto(){return(null===global||void 0===global?void 0:global.crypto)||(null===global||void 0===global?void 0:global.msCrypto)||{}}function getSubtleCrypto(){const browserCrypto=getBrowerCrypto();return browserCrypto.subtle||browserCrypto.webkitSubtle}function getAlgo(type){return type===constants_1.AES_BROWSER_ALGO?{length:constants_1.AES_LENGTH,name:constants_1.AES_BROWSER_ALGO}:
{hash:{name:constants_1.HMAC_BROWSER_ALGO},name:constants_1.HMAC_BROWSER}}function getOps(type){return type===constants_1.AES_BROWSER_ALGO?[constants_1.ENCRYPT_OP,constants_1.DECRYPT_OP]:[constants_1.SIGN_OP,constants_1.VERIFY_OP]}function browserImportKey(buffer,type=constants_1.AES_BROWSER_ALGO){return __awaiter(this,void 0,void 0,function*(){return getSubtleCrypto().importKey("raw",buffer,getAlgo(type),!0,getOps(type))})}var __awaiter=this&&this.__awaiter||function(thisArg,_arguments,P,generator){function adopt(value){return value instanceof
P?value:new P(function(resolve){resolve(value)})}return new (P||(P=Promise))(function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator["throw"](value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):adopt(result.value).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())})};Object.defineProperty(exports,"__esModule",{value:!0});exports.browserSha512=
exports.browserSha256=exports.browserHmacSha512Sign=exports.browserHmacSha256Sign=exports.browserAesDecrypt=exports.browserAesEncrypt=exports.browserImportKey=exports.browserExportKey=exports.getOps=exports.getAlgo=exports.getSubtleCrypto=exports.getBrowerCrypto=void 0;const constants_1=require("module$node_modules$$pedrouid$iso_crypto$dist$cjs$helpers$constants$index");exports.getBrowerCrypto=getBrowerCrypto;exports.getSubtleCrypto=getSubtleCrypto;exports.getAlgo=getAlgo;exports.getOps=getOps;exports.browserExportKey=
function(cryptoKey,type){return __awaiter(this,void 0,void 0,function*(){const subtle=getSubtleCrypto();return new Uint8Array(yield subtle.exportKey("raw",cryptoKey))})};exports.browserImportKey=browserImportKey;exports.browserAesEncrypt=function(iv,key,data){return __awaiter(this,void 0,void 0,function*(){var subtle=getSubtleCrypto();const cryptoKey=yield browserImportKey(key,constants_1.AES_BROWSER_ALGO);subtle=yield subtle.encrypt({iv,name:constants_1.AES_BROWSER_ALGO},cryptoKey,data);return new Uint8Array(subtle)})};
exports.browserAesDecrypt=function(iv,key,data){return __awaiter(this,void 0,void 0,function*(){var subtle=getSubtleCrypto();const cryptoKey=yield browserImportKey(key,constants_1.AES_BROWSER_ALGO);subtle=yield subtle.decrypt({iv,name:constants_1.AES_BROWSER_ALGO},cryptoKey,data);return new Uint8Array(subtle)})};exports.browserHmacSha256Sign=function(key,data){return __awaiter(this,void 0,void 0,function*(){var subtle=getSubtleCrypto();const cryptoKey=yield browserImportKey(key,constants_1.HMAC_BROWSER);
subtle=yield subtle.sign({length:constants_1.HMAC_LENGTH,name:constants_1.HMAC_BROWSER},cryptoKey,data);return new Uint8Array(subtle)})};exports.browserHmacSha512Sign=function(key,data){return __awaiter(this,void 0,void 0,function*(){var subtle=getSubtleCrypto();const cryptoKey=yield browserImportKey(key,constants_1.HMAC_BROWSER);subtle=yield subtle.sign({length:constants_1.LENGTH_512,name:constants_1.HMAC_BROWSER},cryptoKey,data);return new Uint8Array(subtle)})};exports.browserSha256=function(data){return __awaiter(this,
void 0,void 0,function*(){const result=yield getSubtleCrypto().digest({name:constants_1.SHA256_BROWSER_ALGO},data);return new Uint8Array(result)})};exports.browserSha512=function(data){return __awaiter(this,void 0,void 0,function*(){const result=yield getSubtleCrypto().digest({name:constants_1.SHA512_BROWSER_ALGO},data);return new Uint8Array(result)})}}
//# sourceMappingURL=module$node_modules$$pedrouid$iso_crypto$dist$cjs$helpers$env$browser.js.map
