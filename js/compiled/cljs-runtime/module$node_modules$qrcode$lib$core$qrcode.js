shadow$provide.module$node_modules$qrcode$lib$core$qrcode=function(global,require,module,exports){function setupFormatInfo(matrix,errorCorrectionLevel,maskPattern){var size=matrix.size;errorCorrectionLevel=FormatInfo.getEncodedBits(errorCorrectionLevel,maskPattern);for(maskPattern=0;15>maskPattern;maskPattern++){var mod=1===(errorCorrectionLevel>>maskPattern&1);6>maskPattern?matrix.set(maskPattern,8,mod,!0):8>maskPattern?matrix.set(maskPattern+1,8,mod,!0):matrix.set(size-15+maskPattern,8,mod,!0);
8>maskPattern?matrix.set(8,size-maskPattern-1,mod,!0):9>maskPattern?matrix.set(8,15-maskPattern-1+1,mod,!0):matrix.set(8,15-maskPattern-1,mod,!0)}matrix.set(size-8,8,1,!0)}function createData(version,errorCorrectionLevel,segments){var buffer=new BitBuffer;segments.forEach(function(data){buffer.put(data.mode.bit,4);buffer.put(data.getLength(),Mode.getCharCountIndicator(data.mode,version));data.write(buffer)});segments=Utils.getSymbolTotalCodewords(version);var ecTotalCodewords=ECCode.getTotalCodewordsCount(version,
errorCorrectionLevel);segments=8*(segments-ecTotalCodewords);for(buffer.getLengthInBits()+4<=segments&&buffer.put(0,4);0!==buffer.getLengthInBits()%8;)buffer.putBit(0);segments=(segments-buffer.getLengthInBits())/8;for(ecTotalCodewords=0;ecTotalCodewords<segments;ecTotalCodewords++)buffer.put(ecTotalCodewords%2?17:236,8);return createCodewords(buffer,version,errorCorrectionLevel)}function createCodewords(bitBuffer,version,errorCorrectionLevel){var totalCodewords=Utils.getSymbolTotalCodewords(version),
ecTotalCodewords=ECCode.getTotalCodewordsCount(version,errorCorrectionLevel);ecTotalCodewords=totalCodewords-ecTotalCodewords;version=ECCode.getBlocksCount(version,errorCorrectionLevel);var blocksInGroup1=version-totalCodewords%version,dataCodewordsInGroup1=Math.floor(ecTotalCodewords/version),dataCodewordsInGroup2=dataCodewordsInGroup1+1;ecTotalCodewords=Math.floor(totalCodewords/version)-dataCodewordsInGroup1;var rs=new ReedSolomonEncoder(ecTotalCodewords),offset=0;errorCorrectionLevel=Array(version);
var ecData=Array(version),maxDataSize=0;bitBuffer=BufferUtil.from(bitBuffer.buffer);for(var b=0;b<version;b++){var dataSize=b<blocksInGroup1?dataCodewordsInGroup1:dataCodewordsInGroup2;errorCorrectionLevel[b]=bitBuffer.slice(offset,offset+dataSize);ecData[b]=rs.encode(errorCorrectionLevel[b]);offset+=dataSize;maxDataSize=Math.max(maxDataSize,dataSize)}totalCodewords=BufferUtil.alloc(totalCodewords);for(blocksInGroup1=bitBuffer=0;blocksInGroup1<maxDataSize;blocksInGroup1++)for(dataCodewordsInGroup1=
0;dataCodewordsInGroup1<version;dataCodewordsInGroup1++)blocksInGroup1<errorCorrectionLevel[dataCodewordsInGroup1].length&&(totalCodewords[bitBuffer++]=errorCorrectionLevel[dataCodewordsInGroup1][blocksInGroup1]);for(blocksInGroup1=0;blocksInGroup1<ecTotalCodewords;blocksInGroup1++)for(dataCodewordsInGroup1=0;dataCodewordsInGroup1<version;dataCodewordsInGroup1++)totalCodewords[bitBuffer++]=ecData[dataCodewordsInGroup1][blocksInGroup1];return totalCodewords}var BufferUtil=require("module$node_modules$qrcode$lib$utils$typedarray_buffer"),
Utils=require("module$node_modules$qrcode$lib$core$utils"),ECLevel=require("module$node_modules$qrcode$lib$core$error_correction_level"),BitBuffer=require("module$node_modules$qrcode$lib$core$bit_buffer"),BitMatrix=require("module$node_modules$qrcode$lib$core$bit_matrix"),AlignmentPattern=require("module$node_modules$qrcode$lib$core$alignment_pattern"),FinderPattern=require("module$node_modules$qrcode$lib$core$finder_pattern"),MaskPattern=require("module$node_modules$qrcode$lib$core$mask_pattern"),
ECCode=require("module$node_modules$qrcode$lib$core$error_correction_code"),ReedSolomonEncoder=require("module$node_modules$qrcode$lib$core$reed_solomon_encoder"),Version=require("module$node_modules$qrcode$lib$core$version"),FormatInfo=require("module$node_modules$qrcode$lib$core$format_info"),Mode=require("module$node_modules$qrcode$lib$core$mode"),Segments=require("module$node_modules$qrcode$lib$core$segments"),isArray=require("module$node_modules$isarray$index");exports.create=function(data,options){if("undefined"===
typeof data||""===data)throw Error("No input text");var errorCorrectionLevel=ECLevel.M;if("undefined"!==typeof options){errorCorrectionLevel=ECLevel.from(options.errorCorrectionLevel,ECLevel.M);var version=Version.from(options.version);var mask=MaskPattern.from(options.maskPattern);options.toSJISFunc&&Utils.setToSJISFunction(options.toSJISFunc)}options=version;if(isArray(data))data=Segments.fromArray(data);else if("string"===typeof data)version=options,version||(version=Segments.rawSplit(data),version=
Version.getBestVersionForData(version,errorCorrectionLevel)),data=Segments.fromString(data,version||40);else throw Error("Invalid data");version=Version.getBestVersionForData(data,errorCorrectionLevel);if(!version)throw Error("The amount of data is too big to be stored in a QR Code");if(!options)options=version;else if(options<version)throw Error("\nThe chosen QR Code version cannot contain this amount of data.\nMinimum version required to store current data is: "+version+".\n");version=createData(options,
errorCorrectionLevel,data);var moduleCount=Utils.getSymbolSize(options);moduleCount=new BitMatrix(moduleCount);for(var size=moduleCount.size,pos=FinderPattern.getPositions(options),i=0;i<pos.length;i++)for(var row=pos[i][0],col=pos[i][1],r=-1;7>=r;r++)if(!(-1>=row+r||size<=row+r))for(var c=-1;7>=c;c++)-1>=col+c||size<=col+c||(0<=r&&6>=r&&(0===c||6===c)||0<=c&&6>=c&&(0===r||6===r)||2<=r&&4>=r&&2<=c&&4>=c?moduleCount.set(row+r,col+c,!0,!0):moduleCount.set(row+r,col+c,!1,!0));size=moduleCount.size;for(pos=
8;pos<size-8;pos++)i=0===pos%2,moduleCount.set(pos,6,i,!0),moduleCount.set(6,pos,i,!0);size=AlignmentPattern.getPositions(options);for(pos=0;pos<size.length;pos++)for(i=size[pos][0],row=size[pos][1],col=-2;2>=col;col++)for(r=-2;2>=r;r++)-2===col||2===col||-2===r||2===r||0===col&&0===r?moduleCount.set(i+col,row+r,!0,!0):moduleCount.set(i+col,row+r,!1,!0);setupFormatInfo(moduleCount,errorCorrectionLevel,0);if(7<=options)for(size=moduleCount.size,pos=Version.getEncodedBits(options),r=0;18>r;r++)i=Math.floor(r/
3),row=r%3+size-8-3,col=1===(pos>>r&1),moduleCount.set(i,row,col,!0),moduleCount.set(row,i,col,!0);size=moduleCount.size;pos=-1;i=size-1;row=7;col=0;for(r=size-1;0<r;r-=2)for(6===r&&r--;;){for(c=0;2>c;c++)if(!moduleCount.isReserved(i,r-c)){var dark=!1;col<version.length&&(dark=1===(version[col]>>>row&1));moduleCount.set(i,r-c,dark);row--; -1===row&&(col++,row=7)}i+=pos;if(0>i||size<=i){i-=pos;pos=-pos;break}}isNaN(mask)&&(mask=MaskPattern.getBestMask(moduleCount,setupFormatInfo.bind(null,moduleCount,
errorCorrectionLevel)));MaskPattern.applyMask(mask,moduleCount);setupFormatInfo(moduleCount,errorCorrectionLevel,mask);return{modules:moduleCount,version:options,errorCorrectionLevel,maskPattern:mask,segments:data}}}
//# sourceMappingURL=module$node_modules$qrcode$lib$core$qrcode.js.map
