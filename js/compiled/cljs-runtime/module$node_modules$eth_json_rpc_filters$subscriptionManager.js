shadow$provide.module$node_modules$eth_json_rpc_filters$subscriptionManager=function(global,require,module,exports){function normalizeBlock(block){return{hash:block.hash,parentHash:block.parentHash,sha3Uncles:block.sha3Uncles,miner:block.miner,stateRoot:block.stateRoot,transactionsRoot:block.transactionsRoot,receiptsRoot:block.receiptsRoot,logsBloom:block.logsBloom,difficulty:block.difficulty,number:block.number,gasLimit:block.gasLimit,gasUsed:block.gasUsed,nonce:block.nonce,mixHash:block.mixHash,
timestamp:block.timestamp,extraData:block.extraData}}const SafeEventEmitter=require("module$node_modules$safe_event_emitter$index"),createScaffoldMiddleware=require("module$node_modules$eth_json_rpc_middleware$scaffold"),createAsyncMiddleware=require("module$node_modules$json_rpc_engine$src$createAsyncMiddleware"),createFilterMiddleware=require("module$node_modules$eth_json_rpc_filters$index"),{unsafeRandomBytes,incrementHexInt}=require("module$node_modules$eth_json_rpc_filters$hexUtils"),getBlocksForRange=
require("module$node_modules$eth_json_rpc_filters$getBlocksForRange");module.exports=function({blockTracker,provider}){function _emitSubscriptionResult(filterIdHex,value){events.emit("notification",{jsonrpc:"2.0",method:"eth_subscription",params:{subscription:filterIdHex,result:value}})}const subscriptions={},filterManager=createFilterMiddleware({blockTracker,provider});let isDestroyed=!1;const events=new SafeEventEmitter,middleware=createScaffoldMiddleware({eth_subscribe:createAsyncMiddleware(async function(req,
res){function createSubNewHeads({subId}){const sub={type:subscriptionType,destroy:async()=>{blockTracker.removeListener("sync",sub.update)},update:async({oldBlock,newBlock})=>{oldBlock=incrementHexInt(oldBlock);(await getBlocksForRange({provider,fromBlock:oldBlock,toBlock:newBlock})).map(normalizeBlock).forEach(value=>{_emitSubscriptionResult(subId,value)})}};blockTracker.on("sync",sub.update);return sub}function createSubFromFilter({subId,filter}){filter.on("update",result=>_emitSubscriptionResult(subId,
result));return{type:subscriptionType,destroy:async()=>await filterManager.uninstallFilter(filter.idHex)}}if(isDestroyed)throw Error("SubscriptionManager - attempting to use after destroying");const subscriptionType=req.params[0],subId$jscomp$0=unsafeRandomBytes(16);switch(subscriptionType){case "newHeads":req=createSubNewHeads({subId:subId$jscomp$0});break;case "logs":req=await filterManager.newLogFilter(req.params[1]);req=createSubFromFilter({subId:subId$jscomp$0,filter:req});break;default:throw Error(`SubscriptionManager - unsupported subscription type "${subscriptionType}"`);
}subscriptions[subId$jscomp$0]=req;res.result=subId$jscomp$0}),eth_unsubscribe:createAsyncMiddleware(async function(req,res){if(isDestroyed)throw Error("SubscriptionManager - attempting to use after destroying");req=req.params[0];const subscription=subscriptions[req];subscription?(delete subscriptions[req],await subscription.destroy(),res.result=!0):res.result=!1})});middleware.destroy=function(){events.removeAllListeners();for(const id in subscriptions)subscriptions[id].destroy(),delete subscriptions[id];
isDestroyed=!0};return{events,middleware}}}
//# sourceMappingURL=module$node_modules$eth_json_rpc_filters$subscriptionManager.js.map
