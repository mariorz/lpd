shadow$provide.module$node_modules$axios$lib$core$Axios=function(global,require,module,exports){function Axios(instanceConfig){this.defaults=instanceConfig;this.interceptors={request:new InterceptorManager,response:new InterceptorManager}}var defaults=require("module$node_modules$axios$lib$defaults"),utils=require("module$node_modules$axios$lib$utils"),InterceptorManager=require("module$node_modules$axios$lib$core$InterceptorManager"),dispatchRequest=require("module$node_modules$axios$lib$core$dispatchRequest");
Axios.prototype.request=function(config,JSCompiler_OptimizeArgumentsArray_p5){"string"===typeof config&&(config=utils.merge({url:config},JSCompiler_OptimizeArgumentsArray_p5));config=utils.merge(defaults,{method:"get"},this.defaults,config);config.method=config.method.toLowerCase();var chain=[dispatchRequest,void 0];config=Promise.resolve(config);this.interceptors.request.forEach(function(interceptor){chain.unshift(interceptor.fulfilled,interceptor.rejected)});for(this.interceptors.response.forEach(function(interceptor){chain.push(interceptor.fulfilled,
interceptor.rejected)});chain.length;)config=config.then(chain.shift(),chain.shift());return config};utils.forEach(["delete","get","head","options"],function(method){Axios.prototype[method]=function(url,config){return this.request(utils.merge(config||{},{method,url}))}});utils.forEach(["post","put","patch"],function(method){Axios.prototype[method]=function(url,data,config){return this.request(utils.merge(config||{},{method,url,data}))}});module.exports=Axios}
//# sourceMappingURL=module$node_modules$axios$lib$core$Axios.js.map
