shadow$provide.module$node_modules$dijkstrajs$dijkstra=function(global,require,module,exports){var dijkstra={single_source_shortest_paths:function(graph,s,d){var predecessors={},costs={};costs[s]=0;var open=dijkstra.PriorityQueue.make();open.push(s,0);for(var closest,u,v,adjacent_nodes,cost_of_e,cost_of_s_to_v,first_visit;!open.empty();)for(v in closest=open.pop(),u=closest.value,closest=closest.cost,adjacent_nodes=graph[u]||{},adjacent_nodes)adjacent_nodes.hasOwnProperty(v)&&(cost_of_e=adjacent_nodes[v],
cost_of_e=closest+cost_of_e,cost_of_s_to_v=costs[v],(first_visit="undefined"===typeof costs[v])||cost_of_s_to_v>cost_of_e)&&(costs[v]=cost_of_e,open.push(v,cost_of_e),predecessors[v]=u);if("undefined"!==typeof d&&"undefined"===typeof costs[d])throw graph=["Could not find a path from ",s," to ",d,"."].join(""),Error(graph);return predecessors},extract_shortest_path_from_predecessor_list:function(predecessors,d){for(var nodes=[];d;)nodes.push(d),d=predecessors[d];nodes.reverse();return nodes},find_path:function(graph,
s,d){graph=dijkstra.single_source_shortest_paths(graph,s,d);return dijkstra.extract_shortest_path_from_predecessor_list(graph,d)},PriorityQueue:{make:function(opts){var T=dijkstra.PriorityQueue,t={},key;opts=opts||{};for(key in T)T.hasOwnProperty(key)&&(t[key]=T[key]);t.queue=[];t.sorter=opts.sorter||T.default_sorter;return t},default_sorter:function(a,b){return a.cost-b.cost},push:function(value,cost){this.queue.push({value,cost});this.queue.sort(this.sorter)},pop:function(){return this.queue.shift()},
empty:function(){return 0===this.queue.length}}};"undefined"!==typeof module&&(module.exports=dijkstra)}
//# sourceMappingURL=module$node_modules$dijkstrajs$dijkstra.js.map
