{
"version":3,
"file":"module$node_modules$$json_rpc_tools$utils$dist$cjs$format.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAe,yDAAf,CAA8E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAMtHC,QAASA,UAAS,EAAG,CAGjB,MAFaC,KAAA,CAAKC,GAAL,EAEb,CAF0BC,IAAA,CAAKC,GAAL,CAAS,EAAT,CAAa,CAAb,CAE1B,CADcD,IAAAE,CAAKC,KAALD,CAAWF,IAAA,CAAKI,MAAL,EAAXF,CAA2BF,IAAA,CAAKC,GAAL,CAAS,EAAT,CAAa,CAAb,CAA3BC,CAFG,CA+BrBG,QAASA,mBAAkB,CAACC,KAAD,CAAQ,CAC/B,GAAqB,WAArB,GAAI,MAAOA,MAAX,CACI,MAAOC,QAAA,CAAQC,QAAR,CAAiBC,WAAjB,CAA6BC,cAA7B,CAEU,SAArB,GAAI,MAAOJ,MAAX,GACIA,KADJ,CACYK,MAAA,CAAOC,MAAP,CAAcD,MAAA,CAAOC,MAAP,CAAc,EAAd,CAAkBL,OAAA,CAAQC,QAAR,CAAiBC,WAAjB,CAA6BI,YAA7B,CAAlB,CAAd,CAA6E,CAAEC,QAASR,KAAX,CAA7E,CADZ,CAGIC,QAAA,CAAQQ,mBAAR,CAA4BT,KAA5B,CAAkCU,IAAlC,CAAJ,GACIV,KADJ,CACYC,OAAA,CAAQU,cAAR,CAAuBX,KAAvB,CAA6BU,IAA7B,CADZ,CAGA;GAAI,CAACT,OAAA,CAAQW,iBAAR,CAA0BZ,KAA1B,CAAgCU,IAAhC,CAAL,CACI,KAAUG,MAAJ,CAAU,wCAAV,CAAN,CAEJ,MAAOb,MAbwB,CAnCnCK,MAAA,CAAOS,cAAP,CAAsBxB,OAAtB,CAA+B,YAA/B,CAA6C,CAAEyB,MAAO,CAAA,CAAT,CAA7C,CACAzB,QAAA,CAAQS,kBAAR,CAA6BT,OAA7B,CAAqC0B,kBAArC,CAA0D1B,OAA1D,CAAkE2B,mBAAlE,CAAwF3B,OAAxF,CAAgG4B,oBAAhG,CAAuH5B,OAAvH,CAA+HC,SAA/H,CAA2I,IAAK,EAChJ,OAAMU,QAAUb,OAAA,CAAQ,0DAAR,CAAhB,CACMe,YAAcf,OAAA,CAAQ,8DAAR,CAMpBE,QAAA,CAAQC,SAAR,CAAoBA,SASpBD,QAAA,CAAQ4B,oBAAR;AARAA,QAA6B,CAACC,MAAD,CAASC,MAAT,CAAiBC,EAAjB,CAAqB,CAC9C,MAAO,CACHA,GAAIA,EAAJA,EAAU9B,SAAA,EADP,CAEH+B,QAAS,KAFN,CAGHH,MAHG,CAIHC,MAJG,CADuC,CAgBlD9B,QAAA,CAAQ2B,mBAAR,CAPAA,QAA4B,CAACI,EAAD,CAAKE,MAAL,CAAa,CACrC,MAAO,CACHF,EADG,CAEHC,QAAS,KAFN,CAGHC,MAHG,CAD8B,CAezCjC,QAAA,CAAQ0B,kBAAR,CAPAA,QAA2B,CAACK,EAAD,CAAKrB,KAAL,CAAY,CACnC,MAAO,CACHqB,EADG,CAEHC,QAAS,KAFN,CAGHtB,MAAOD,kBAAA,CAAmBC,KAAnB,CAHJ,CAD4B,CAuBvCV,QAAA,CAAQS,kBAAR,CAA6BA,kBApDyF;",
"sources":["node_modules/@json-rpc-tools/utils/dist/cjs/format.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$json_rpc_tools$utils$dist$cjs$format\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.formatErrorMessage = exports.formatJsonRpcError = exports.formatJsonRpcResult = exports.formatJsonRpcRequest = exports.payloadId = void 0;\nconst error_1 = require(\"./error\");\nconst constants_1 = require(\"./constants\");\nfunction payloadId() {\n    const date = Date.now() * Math.pow(10, 3);\n    const extra = Math.floor(Math.random() * Math.pow(10, 3));\n    return date + extra;\n}\nexports.payloadId = payloadId;\nfunction formatJsonRpcRequest(method, params, id) {\n    return {\n        id: id || payloadId(),\n        jsonrpc: \"2.0\",\n        method,\n        params,\n    };\n}\nexports.formatJsonRpcRequest = formatJsonRpcRequest;\nfunction formatJsonRpcResult(id, result) {\n    return {\n        id,\n        jsonrpc: \"2.0\",\n        result,\n    };\n}\nexports.formatJsonRpcResult = formatJsonRpcResult;\nfunction formatJsonRpcError(id, error) {\n    return {\n        id,\n        jsonrpc: \"2.0\",\n        error: formatErrorMessage(error),\n    };\n}\nexports.formatJsonRpcError = formatJsonRpcError;\nfunction formatErrorMessage(error) {\n    if (typeof error === \"undefined\") {\n        return error_1.getError(constants_1.INTERNAL_ERROR);\n    }\n    if (typeof error === \"string\") {\n        error = Object.assign(Object.assign({}, error_1.getError(constants_1.SERVER_ERROR)), { message: error });\n    }\n    if (error_1.isReservedErrorCode(error.code)) {\n        error = error_1.getErrorByCode(error.code);\n    }\n    if (!error_1.isServerErrorCode(error.code)) {\n        throw new Error(\"Error code is not in server code range\");\n    }\n    return error;\n}\nexports.formatErrorMessage = formatErrorMessage;\n//# sourceMappingURL=format.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","payloadId","Date","now","Math","pow","extra","floor","random","formatErrorMessage","error","error_1","getError","constants_1","INTERNAL_ERROR","Object","assign","SERVER_ERROR","message","isReservedErrorCode","code","getErrorByCode","isServerErrorCode","Error","defineProperty","value","formatJsonRpcError","formatJsonRpcResult","formatJsonRpcRequest","method","params","id","jsonrpc","result"]
}
