{
"version":3,
"file":"module$node_modules$eth_json_rpc_filters$log_filter.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/eth-json-rpc-filters/log-filter.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$eth_json_rpc_filters$log_filter\"] = function(global,require,module,exports) {\nconst EthQuery = require('eth-query')\nconst pify = require('pify')\nconst BaseFilterWithHistory = require('./base-filter-history')\nconst { bnToHex, hexToInt, incrementHexInt, minBlockRef, blockRefIsNumber } = require('./hexUtils')\n\nclass LogFilter extends BaseFilterWithHistory {\n\n  constructor ({ provider, params }) {\n    super()\n    this.type = 'log'\n    this.ethQuery = new EthQuery(provider)\n    this.params = Object.assign({\n      fromBlock: 'latest',\n      toBlock: 'latest',\n      address: undefined,\n      topics: [],\n    }, params)\n    // normalize address parameter\n    if (this.params.address) {\n      // ensure array\n      if (!Array.isArray(this.params.address)) {\n        this.params.address = [this.params.address]\n      }\n      // ensure lowercase\n      this.params.address = this.params.address.map(address => address.toLowerCase())\n    }\n  }\n\n  async initialize({ currentBlock }) {\n    // resolve params.fromBlock\n    let fromBlock = this.params.fromBlock\n    if (['latest', 'pending'].includes(fromBlock)) fromBlock = currentBlock\n    if ('earliest' === fromBlock) fromBlock = '0x0'\n    this.params.fromBlock = fromBlock\n    // set toBlock for initial lookup\n    const toBlock = minBlockRef(this.params.toBlock, currentBlock)\n    const params = Object.assign({}, this.params, { toBlock })\n    // fetch logs and add to results\n    const newLogs = await this._fetchLogs(params)\n    this.addInitialResults(newLogs)\n  }\n\n  async update ({ oldBlock, newBlock }) {\n    // configure params for this update\n    const toBlock = newBlock\n    let fromBlock\n    // oldBlock is empty on first sync\n    if (oldBlock) {\n      fromBlock = incrementHexInt(oldBlock)\n    } else {\n      fromBlock = newBlock\n    }\n    // fetch logs\n    const params = Object.assign({}, this.params, { fromBlock, toBlock })\n    const newLogs = await this._fetchLogs(params)\n    const matchingLogs = newLogs.filter(log => this.matchLog(log))\n\n    // add to results\n    this.addResults(matchingLogs)\n  }\n\n  async _fetchLogs (params) {\n    const newLogs = await pify(cb => this.ethQuery.getLogs(params, cb))()\n    // add to results\n    return newLogs\n  }\n\n  matchLog(log) {\n    // check if block number in bounds:\n    if (hexToInt(this.params.fromBlock) >= hexToInt(log.blockNumber)) return false\n    if (blockRefIsNumber(this.params.toBlock) && hexToInt(this.params.toBlock) <= hexToInt(log.blockNumber)) return false\n\n    // address is correct:\n    const normalizedLogAddress = log.address && log.address.toLowerCase()\n    if (this.params.address && normalizedLogAddress && !this.params.address.includes(normalizedLogAddress)) return false\n\n    // topics match:\n    // topics are position-dependant\n    // topics can be nested to represent `or` [[a || b], c]\n    // topics can be null, representing a wild card for that position\n    const topicsMatch = this.params.topics.every((topicPattern, index) => {\n      // pattern is longer than actual topics\n      let logTopic = log.topics[index]\n      if (!logTopic) return false\n      logTopic = logTopic.toLowerCase()\n      // normalize subTopics\n      let subtopicsToMatch = Array.isArray(topicPattern) ? topicPattern : [topicPattern]\n      // check for wild card\n      const subtopicsIncludeWildcard = subtopicsToMatch.includes(null)\n      if (subtopicsIncludeWildcard) return true\n      subtopicsToMatch = subtopicsToMatch.map(topic => topic.toLowerCase())\n      // check each possible matching topic\n      const topicDoesMatch = subtopicsToMatch.includes(logTopic)\n      return topicDoesMatch\n    })\n\n    return topicsMatch\n  }\n\n}\n\nmodule.exports = LogFilter\n\n};"],
"names":["shadow$provide","global","require","module","exports","EthQuery","pify","BaseFilterWithHistory","hexToInt","incrementHexInt","minBlockRef","blockRefIsNumber","LogFilter","constructor","provider","params","type","ethQuery","Object","assign","fromBlock","toBlock","address","undefined","topics","Array","isArray","map","toLowerCase","initialize","currentBlock","includes","newLogs","_fetchLogs","addInitialResults","update","oldBlock","newBlock","matchingLogs","filter","log","matchLog","addResults","cb","getLogs","blockNumber","normalizedLogAddress","topicsMatch","every","topicPattern","index","logTopic","subtopicsToMatch","subtopicsIncludeWildcard","topic","topicDoesMatch"]
}
