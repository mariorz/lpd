{
"version":3,
"file":"module$node_modules$eth_rpc_errors$src$utils.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/eth-rpc-errors/src/utils.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$eth_rpc_errors$src$utils\"] = function(global,require,module,exports) {\n\nconst errorValues = require('./errorValues.json')\nconst FALLBACK_ERROR_CODE = require('./errorCodes.json').rpc.internal\nconst { EthereumRpcError } = require('./classes')\n\nconst JSON_RPC_SERVER_ERROR_MESSAGE = 'Unspecified server error.'\n\nconst FALLBACK_MESSAGE = 'Unspecified error message. This is a bug, please report it.'\n\nconst FALLBACK_ERROR = {\n  code: FALLBACK_ERROR_CODE,\n  message: getMessageFromCode(FALLBACK_ERROR_CODE),\n}\n\n/**\n * Gets the message for a given code, or a fallback message if the code has\n * no corresponding message.\n *\n * @param {number} code - The integer error code\n * @param {string} fallbackMessage - The fallback message\n * @return {string} The corresponding message or the fallback message\n */\nfunction getMessageFromCode (code, fallbackMessage = FALLBACK_MESSAGE) {\n\n  if (Number.isInteger(code)) {\n\n    const codeString = code.toString()\n\n    if (errorValues[codeString]) {\n      return errorValues[codeString].message\n    }\n    if (isJsonRpcServerError(code)) {\n      return JSON_RPC_SERVER_ERROR_MESSAGE\n    }\n  }\n  return fallbackMessage\n}\n\n/**\n * Returns whether the given code is valid.\n * A code is only valid if it has a message.\n *\n * @param {number} code - The code to check\n * @return {boolean} true if the code is valid, false otherwise.\n */\nfunction isValidCode (code) {\n\n  if (!Number.isInteger(code)) {\n    return false\n  }\n\n  const codeString = code.toString()\n  if (errorValues[codeString]) {\n    return true\n  }\n\n  if (isJsonRpcServerError(code)) {\n    return true\n  }\n\n  // TODO: allow valid codes and messages to be extended\n  // // EIP 1193 Status Codes\n  // if (code >= 4000 && code <= 4999) return true\n\n  return false\n}\n\n/**\n * Serializes the given error to an Ethereum JSON RPC-compatible error object.\n * Merely copies the given error's values if it is already compatible.\n * If the given error is not fully compatible, it will be preserved on the\n * returned object's data.originalError property.\n *\n * @param {any} error - The error to serialize.\n * @param {Object} [options] - An options object.\n * @param {Object} [options.fallbackError] - The custom fallback error values if\n * the given error is invalid.\n * @param {boolean} [options.shouldIncludeStack] - Whether the 'stack' property\n * of the given error should be included on the serialized error, if present.\n * @return {Object} A standardized, plain error object.\n */\nfunction serializeError (\n  error,\n  { fallbackError = FALLBACK_ERROR, shouldIncludeStack = false } = {},\n) {\n\n  if (\n    !fallbackError ||\n    !Number.isInteger(fallbackError.code) ||\n    typeof fallbackError.message !== 'string'\n  ) {\n    throw new Error(\n      'Must provide fallback error with integer number code and string message.',\n    )\n  }\n\n  if (error instanceof EthereumRpcError) {\n    return error.serialize()\n  }\n\n  const serialized = {}\n\n  if (error && isValidCode(error.code)) {\n\n    serialized.code = error.code\n\n    if (error.message && typeof error.message === 'string') {\n      serialized.message = error.message\n      if ('data' in error) {\n        serialized.data = error.data\n      }\n    } else {\n      serialized.message = getMessageFromCode(serialized.code)\n      serialized.data = { originalError: assignOriginalError(error) }\n    }\n\n  } else {\n    serialized.code = fallbackError.code\n    serialized.message = (\n      error && error.message\n        ? error.message\n        : fallbackError.message\n    )\n    serialized.data = { originalError: assignOriginalError(error) }\n  }\n\n  if (shouldIncludeStack && error && typeof error.stack === 'string') {\n    serialized.stack = error.stack\n  }\n  return serialized\n}\n\n// Internal\n\nfunction isJsonRpcServerError (code) {\n  return code >= -32099 && code <= -32000\n}\n\nfunction assignOriginalError (error) {\n  if (error && typeof error === 'object' && !Array.isArray(error)) {\n    return { ...error }\n  }\n  return error\n}\n\n// Exports\n\nmodule.exports = {\n  getMessageFromCode,\n  isValidCode,\n  serializeError,\n  JSON_RPC_SERVER_ERROR_MESSAGE,\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","getMessageFromCode","code","fallbackMessage","FALLBACK_MESSAGE","Number","isInteger","codeString","toString","errorValues","message","JSON_RPC_SERVER_ERROR_MESSAGE","isValidCode","assignOriginalError","error","Array","isArray","FALLBACK_ERROR_CODE","rpc","internal","EthereumRpcError","FALLBACK_ERROR","serializeError","fallbackError","shouldIncludeStack","Error","serialize","serialized","data","originalError","stack"]
}
