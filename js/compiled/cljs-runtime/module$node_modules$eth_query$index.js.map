{
"version":3,
"file":"module$node_modules$eth_query$index.js",
"lineCount":9,
"mappings":"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",
"sources":["node_modules/eth-query/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$eth_query$index\"] = function(global,require,module,exports) {\nconst extend = require('xtend')\nconst createRandomId = require('json-rpc-random-id')()\n\nmodule.exports = EthQuery\n\n\nfunction EthQuery(provider){\n  const self = this\n  self.currentProvider = provider\n}\n\n//\n// base queries\n//\n\n// default block\nEthQuery.prototype.getBalance =                          generateFnWithDefaultBlockFor(2, 'eth_getBalance')\nEthQuery.prototype.getCode =                             generateFnWithDefaultBlockFor(2, 'eth_getCode')\nEthQuery.prototype.getTransactionCount =                 generateFnWithDefaultBlockFor(2, 'eth_getTransactionCount')\nEthQuery.prototype.getStorageAt =                        generateFnWithDefaultBlockFor(3, 'eth_getStorageAt')\nEthQuery.prototype.call =                                generateFnWithDefaultBlockFor(2, 'eth_call')\n// standard\nEthQuery.prototype.protocolVersion =                     generateFnFor('eth_protocolVersion')\nEthQuery.prototype.syncing =                             generateFnFor('eth_syncing')\nEthQuery.prototype.coinbase =                            generateFnFor('eth_coinbase')\nEthQuery.prototype.mining =                              generateFnFor('eth_mining')\nEthQuery.prototype.hashrate =                            generateFnFor('eth_hashrate')\nEthQuery.prototype.gasPrice =                            generateFnFor('eth_gasPrice')\nEthQuery.prototype.accounts =                            generateFnFor('eth_accounts')\nEthQuery.prototype.blockNumber =                         generateFnFor('eth_blockNumber')\nEthQuery.prototype.getBlockTransactionCountByHash =      generateFnFor('eth_getBlockTransactionCountByHash')\nEthQuery.prototype.getBlockTransactionCountByNumber =    generateFnFor('eth_getBlockTransactionCountByNumber')\nEthQuery.prototype.getUncleCountByBlockHash =            generateFnFor('eth_getUncleCountByBlockHash')\nEthQuery.prototype.getUncleCountByBlockNumber =          generateFnFor('eth_getUncleCountByBlockNumber')\nEthQuery.prototype.sign =                                generateFnFor('eth_sign')\nEthQuery.prototype.sendTransaction =                     generateFnFor('eth_sendTransaction')\nEthQuery.prototype.sendRawTransaction =                  generateFnFor('eth_sendRawTransaction')\nEthQuery.prototype.estimateGas =                         generateFnFor('eth_estimateGas')\nEthQuery.prototype.getBlockByHash =                      generateFnFor('eth_getBlockByHash')\nEthQuery.prototype.getBlockByNumber =                    generateFnFor('eth_getBlockByNumber')\nEthQuery.prototype.getTransactionByHash =                generateFnFor('eth_getTransactionByHash')\nEthQuery.prototype.getTransactionByBlockHashAndIndex =   generateFnFor('eth_getTransactionByBlockHashAndIndex')\nEthQuery.prototype.getTransactionByBlockNumberAndIndex = generateFnFor('eth_getTransactionByBlockNumberAndIndex')\nEthQuery.prototype.getTransactionReceipt =               generateFnFor('eth_getTransactionReceipt')\nEthQuery.prototype.getUncleByBlockHashAndIndex =         generateFnFor('eth_getUncleByBlockHashAndIndex')\nEthQuery.prototype.getUncleByBlockNumberAndIndex =       generateFnFor('eth_getUncleByBlockNumberAndIndex')\nEthQuery.prototype.getCompilers =                        generateFnFor('eth_getCompilers')\nEthQuery.prototype.compileLLL =                          generateFnFor('eth_compileLLL')\nEthQuery.prototype.compileSolidity =                     generateFnFor('eth_compileSolidity')\nEthQuery.prototype.compileSerpent =                      generateFnFor('eth_compileSerpent')\nEthQuery.prototype.newFilter =                           generateFnFor('eth_newFilter')\nEthQuery.prototype.newBlockFilter =                      generateFnFor('eth_newBlockFilter')\nEthQuery.prototype.newPendingTransactionFilter =         generateFnFor('eth_newPendingTransactionFilter')\nEthQuery.prototype.uninstallFilter =                     generateFnFor('eth_uninstallFilter')\nEthQuery.prototype.getFilterChanges =                    generateFnFor('eth_getFilterChanges')\nEthQuery.prototype.getFilterLogs =                       generateFnFor('eth_getFilterLogs')\nEthQuery.prototype.getLogs =                             generateFnFor('eth_getLogs')\nEthQuery.prototype.getWork =                             generateFnFor('eth_getWork')\nEthQuery.prototype.submitWork =                          generateFnFor('eth_submitWork')\nEthQuery.prototype.submitHashrate =                      generateFnFor('eth_submitHashrate')\n\n// network level\n\nEthQuery.prototype.sendAsync = function(opts, cb){\n  const self = this\n  self.currentProvider.sendAsync(createPayload(opts), function(err, response){\n    if (!err && response.error) err = new Error('EthQuery - RPC Error - '+response.error.message)\n    if (err) return cb(err)\n    cb(null, response.result)\n  })\n}\n\n// util\n\nfunction generateFnFor(methodName){\n  return function(){\n    const self = this\n    var args = [].slice.call(arguments)\n    var cb = args.pop()\n    self.sendAsync({\n      method: methodName,\n      params: args,\n    }, cb)\n  }\n}\n\nfunction generateFnWithDefaultBlockFor(argCount, methodName){\n  return function(){\n    const self = this\n    var args = [].slice.call(arguments)\n    var cb = args.pop()\n    // set optional default block param\n    if (args.length < argCount) args.push('latest')\n    self.sendAsync({\n      method: methodName,\n      params: args,\n    }, cb)\n  }\n}\n\nfunction createPayload(data){\n  return extend({\n    // defaults\n    id: createRandomId(),\n    jsonrpc: '2.0',\n    params: [],\n    // user-specified\n  }, data)\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","EthQuery","provider","self","currentProvider","generateFnFor","methodName","args","slice","call","arguments","cb","pop","sendAsync","method","params","generateFnWithDefaultBlockFor","argCount","length","push","createPayload","data","extend","id","createRandomId","jsonrpc","prototype","getBalance","getCode","getTransactionCount","getStorageAt","protocolVersion","syncing","coinbase","mining","hashrate","gasPrice","accounts","blockNumber","getBlockTransactionCountByHash","getBlockTransactionCountByNumber","getUncleCountByBlockHash","getUncleCountByBlockNumber","sign","sendTransaction","sendRawTransaction","estimateGas","getBlockByHash","getBlockByNumber","getTransactionByHash","getTransactionByBlockHashAndIndex","getTransactionByBlockNumberAndIndex","getTransactionReceipt","getUncleByBlockHashAndIndex","getUncleByBlockNumberAndIndex","getCompilers","compileLLL","compileSolidity","compileSerpent","newFilter","newBlockFilter","newPendingTransactionFilter","uninstallFilter","getFilterChanges","getFilterLogs","getLogs","getWork","submitWork","submitHashrate","EthQuery.prototype.sendAsync","opts","err","response","error","Error","message","result"]
}
