shadow$provide.module$node_modules$eth_block_tracker$src$base=function(global,require,module,exports){require("module$node_modules$eth_query$index");require("module$node_modules$pify$index");global=require("module$node_modules$safe_event_emitter$index");const calculateSum=(accumulator,currentValue)=>accumulator+currentValue,blockTrackerEvents=["sync","latest"];class BaseBlockTracker extends global{constructor(opts={}){super();this._blockResetDuration=opts.blockResetDuration||2E4;this._blockResetTimeout;
this._currentBlock=null;this._isRunning=!1;this._onNewListener=this._onNewListener.bind(this);this._onRemoveListener=this._onRemoveListener.bind(this);this._resetCurrentBlock=this._resetCurrentBlock.bind(this);this._setupInternalEvents()}isRunning(){return this._isRunning}getCurrentBlock(){return this._currentBlock}async getLatestBlock(){return this._currentBlock?this._currentBlock:await new Promise(resolve=>this.once("latest",resolve))}removeAllListeners(eventName){eventName?super.removeAllListeners(eventName):
super.removeAllListeners();this._setupInternalEvents();this._onRemoveListener()}_start(){}_end(){}_setupInternalEvents(){this.removeListener("newListener",this._onNewListener);this.removeListener("removeListener",this._onRemoveListener);this.on("newListener",this._onNewListener);this.on("removeListener",this._onRemoveListener)}_onNewListener(eventName,handler){blockTrackerEvents.includes(eventName)&&this._maybeStart()}_onRemoveListener(eventName,handler){0<this._getBlockTrackerEventCount()||this._maybeEnd()}_maybeStart(){this._isRunning||
(this._isRunning=!0,this._cancelBlockResetTimeout(),this._start())}_maybeEnd(){this._isRunning&&(this._isRunning=!1,this._setupBlockResetTimeout(),this._end())}_getBlockTrackerEventCount(){return blockTrackerEvents.map(eventName=>this.listenerCount(eventName)).reduce(calculateSum)}_newPotentialLatest(newBlock){const currentBlock=this._currentBlock;currentBlock&&Number.parseInt(newBlock,16)<=Number.parseInt(currentBlock,16)||this._setCurrentBlock(newBlock)}_setCurrentBlock(newBlock){const oldBlock=
this._currentBlock;this._currentBlock=newBlock;this.emit("latest",newBlock);this.emit("sync",{oldBlock,newBlock})}_setupBlockResetTimeout(){this._cancelBlockResetTimeout();this._blockResetTimeout=setTimeout(this._resetCurrentBlock,this._blockResetDuration);this._blockResetTimeout.unref&&this._blockResetTimeout.unref()}_cancelBlockResetTimeout(){clearTimeout(this._blockResetTimeout)}_resetCurrentBlock(){this._currentBlock=null}}module.exports=BaseBlockTracker}
//# sourceMappingURL=module$node_modules$eth_block_tracker$src$base.js.map
