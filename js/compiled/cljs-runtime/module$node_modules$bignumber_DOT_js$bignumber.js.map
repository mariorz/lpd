{
"version":3,
"file":"module$node_modules$bignumber_DOT_js$bignumber.js",
"lineCount":49,
"mappings":"AAAAA,cAAA,CAAe,8CAAf,CAAmE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CACzG,SAAS,CAACC,YAAD,CAAe,CA2ExBC,QAASA,MAAK,CAACC,YAAD,CAAe,CAyG3BC,QAASA,UAAS,CAACC,CAAD,CAAIC,CAAJ,CAAO,CAAA,IACTC,CADS,CACUC,CADV,CACaC,KADb,CACoBC,GADpB,CAErBC,EAAI,IAGN,IAAI,EAAEA,CAAF,WAAeP,UAAf,CAAJ,CAA+B,MAAO,KAAIA,SAAJ,CAAcC,CAAd,CAAiBC,CAAjB,CAEtC,IAAS,IAAT,EAAIA,CAAJ,CAAe,CAEb,GAAID,CAAJ,EAA4B,CAAA,CAA5B,GAASA,CAAT,CAAWO,YAAX,CAAkC,CAChCD,CAAA,CAAEE,CAAF,CAAMR,CAAN,CAAQQ,CAEJ,EAACR,CAAD,CAAGE,CAAP,EAAYF,CAAZ,CAAcS,CAAd,CAAkBC,OAAlB,CACEJ,CADF,CACIJ,CADJ,CACQI,CADR,CACUG,CADV,CACc,IADd,CAEWT,CAAJ,CAAMS,CAAN,CAAUE,OAAV,CACLL,CADK,CACHJ,CADG,CACC,CAACI,CAAD,CAAGG,CAAH,CAAO,CAAP,CADD,EAGLH,CACA,CADEG,CACF,CADMT,CACN,CADQS,CACR,CAAAH,CAAA,CAAEJ,CAAF,CAAMF,CAAA,CAAEE,CAAF,CAAIU,KAAJ,EAJD,CAOP,OAZgC,CAelC,IAAKR,KAAL,CAAyB,QAAzB,EAAa,MAAOJ,EAApB,GAA+C,CAA/C,EAA0C,CAA1C,CAAsCA,CAAtC,CAAkD,CAGhDM,CAAA,CAAEE,CAAF,CAAc,CAAR,CAAA,CAAA,CAAIR,CAAJ,EAAaA,CAAA,CAAI,CAACA,CAAL,CAAQ,EAArB,EAA2B,CAGjC,IAAIA,CAAJ,GAAU,CAAC,CAACA,CAAZ,CAAe,CACR,IAAAS,EAAI,CAAT,KAAYN,CAAZ,CAAgBH,CAAhB,CAAwB,EAAxB,EAAmBG,CAAnB,CAA4BA,CAAA,EAAK,EAAL,CAASM,CAAA,EAArC,EAEIA,CAAJ;AAAQC,OAAR,CACEJ,CADF,CACIJ,CADJ,CACQI,CADR,CACUG,CADV,CACc,IADd,EAGEH,CACA,CADEG,CACF,CADMA,CACN,CAAAH,CAAA,CAAEJ,CAAF,CAAM,CAACF,CAAD,CAJR,CAOA,OAVa,CAaf,IAAAa,IAAMC,MAAA,CAAOd,CAAP,CAnB0C,CAAlD,IAoBO,CAEL,GAAI,CAACe,SAAA,CAAUC,IAAV,CAAeH,GAAf,CAAqBC,MAAA,CAAOd,CAAP,CAArB,CAAL,CAAsC,MAAOiB,aAAA,CAAaX,CAAb,CAAgBO,GAAhB,CAAqBT,KAArB,CAE7CE,EAAA,CAAEE,CAAF,CAA2B,EAArB,EAAAK,GAAA,CAAIK,UAAJ,CAAe,CAAf,CAAA,EAA2BL,GAAA,CAAMA,GAAA,CAAID,KAAJ,CAAU,CAAV,CAAN,CAAoB,EAA/C,EAAqD,CAJtD,CAQsB,EAA7B,EAAKH,CAAL,CAASI,GAAA,CAAIM,OAAJ,CAAY,GAAZ,CAAT,IAAiCN,GAAjC,CAAuCA,GAAA,CAAIO,OAAJ,CAAY,GAAZ,CAAiB,EAAjB,CAAvC,CAG6B,EAA7B,EAAKjB,CAAL,CAASU,GAAA,CAAIQ,MAAJ,CAAW,IAAX,CAAT,GAGU,CAER,CAFIZ,CAEJ,GAFWA,CAEX,CAFeN,CAEf,EADAM,CACA,EADK,CAACI,GAAA,CAAID,KAAJ,CAAUT,CAAV,CAAc,CAAd,CACN,CAAAU,GAAA,CAAMA,GAAA,CAAIS,SAAJ,CAAc,CAAd,CAAiBnB,CAAjB,CALR,EAMe,CANf,CAMWM,CANX,GASEA,CATF,CASMI,GATN,CASUU,MATV,CAhDa,CAAf,IA4DO,CAGLC,QAAA,CAASvB,CAAT,CAAY,CAAZ,CAAewB,QAAf,CAAwBF,MAAxB,CAAgC,MAAhC,CAIA,IAAS,EAAT,EAAItB,CAAJ,CAEE,MADAK,EACO,CADH,IAAIP,SAAJ,CAAcC,CAAd,CACG,CAAA0B,KAAA,CAAMpB,CAAN,CAASqB,cAAT,CAA0BrB,CAA1B,CAA4BG,CAA5B,CAAgC,CAAhC,CAAmCmB,aAAnC,CAGTf,IAAA,CAAMC,MAAA,CAAOd,CAAP,CAEN,IAAII,KAAJ,CAAwB,QAAxB,EAAY,MAAOJ,EAAnB,CAAkC,CAGhC,GAAa,CAAb;AAAQ,CAAR,CAAIA,CAAJ,CAAgB,MAAOiB,aAAA,CAAaX,CAAb,CAAgBO,GAAhB,CAAqBT,KAArB,CAA4BH,CAA5B,CAEvBK,EAAA,CAAEE,CAAF,CAAc,CAAR,CAAA,CAAA,CAAIR,CAAJ,EAAaa,GAAA,CAAMA,GAAA,CAAID,KAAJ,CAAU,CAAV,CAAN,CAAoB,EAAjC,EAAuC,CAG7C,IAAIb,SAAJ,CAAc8B,KAAd,EAA6D,EAA7D,CAAuBhB,GAAA,CAAIO,OAAJ,CAAY,WAAZ,CAAyB,EAAzB,CAAvB,CAAoDG,MAApD,CACE,KAAMO,MAAA,CArNEC,0EAqNF,CACY/B,CADZ,CAAN,CAT8B,CAAlC,IAaEM,EAAA,CAAEE,CAAF,CAA4B,EAAtB,GAAAK,GAAA,CAAIK,UAAJ,CAAe,CAAf,CAAA,EAA4BL,GAAA,CAAMA,GAAA,CAAID,KAAJ,CAAU,CAAV,CAAN,CAAoB,EAAhD,EAAsD,CAG9D,KAAAoB,SAAWP,QAAA,CAASb,KAAT,CAAe,CAAf,CAAkBX,CAAlB,CACXQ,EAAA,CAAIN,CAAJ,CAAQ,CAIR,KAAKE,GAAL,CAAWQ,GAAX,CAAeU,MAAf,CAAuBpB,CAAvB,CAA2BE,GAA3B,CAAgCF,CAAA,EAAhC,CACE,GAA0C,CAA1C,CAAI6B,QAAA,CAASb,OAAT,CAAiBjB,CAAjB,CAAqBW,GAAA,CAAIoB,MAAJ,CAAW9B,CAAX,CAArB,CAAJ,CAA6C,CAC3C,GAAS,GAAT,EAAID,CAAJ,CAGE,IAAIC,CAAJ,CAAQM,CAAR,CAAW,CACTA,CAAA,CAAIJ,GACJ,SAFS,CAAX,CAHF,IAOO,IAAI,CAAC6B,WAAL,GAGDrB,GAHC,EAGMA,GAAA,CAAIsB,WAAJ,EAHN,GAG4BtB,GAH5B,CAGkCA,GAAA,CAAIuB,WAAJ,EAHlC,GAIDvB,GAJC,EAIMA,GAAA,CAAIuB,WAAJ,EAJN;CAI4BvB,GAJ5B,CAIkCA,GAAA,CAAIsB,WAAJ,EAJlC,GAIsD,CACzD,IAAAD,YAAc,CAAA,CACd/B,EAAA,CAAI,EACJM,EAAA,CAAI,CACJ,SAJyD,CAQ7D,MAAOQ,aAAA,CAAaX,CAAb,CAAgBQ,MAAA,CAAOd,CAAP,CAAhB,CAA2BI,KAA3B,CAAkCH,CAAlC,CApBoC,CAyB/CG,KAAA,CAAQ,CAAA,CACRS,IAAA,CAAMwB,WAAA,CAAYxB,GAAZ,CAAiBZ,CAAjB,CAAoB,EAApB,CAAwBK,CAAxB,CAA0BE,CAA1B,CAGuB,GAA7B,EAAKC,CAAL,CAASI,GAAA,CAAIM,OAAJ,CAAY,GAAZ,CAAT,EAAiCN,GAAjC,CAAuCA,GAAA,CAAIO,OAAJ,CAAY,GAAZ,CAAiB,EAAjB,CAAvC,CACKX,CADL,CACSI,GADT,CACaU,MAlER,CAsEP,IAAKpB,CAAL,CAAS,CAAT,CAAkC,EAAlC,GAAYU,GAAA,CAAIK,UAAJ,CAAef,CAAf,CAAZ,CAAsCA,CAAA,EAAtC,EAGA,IAAKE,GAAL,CAAWQ,GAAX,CAAeU,MAAf,CAAiD,EAAjD,GAAuBV,GAAA,CAAIK,UAAJ,CAAe,EAAEb,GAAjB,CAAvB,CAAA,EAEA,GAAIQ,GAAJ,CAAUA,GAAA,CAAID,KAAJ,CAAUT,CAAV,CAAa,EAAEE,GAAf,CAAV,CAA+B,CAC7BA,GAAA,EAAOF,CAGP,IAAIC,KAAJ,EAAaL,SAAb,CAAuB8B,KAAvB,EACQ,EADR,CACExB,GADF,GAzQeiC,gBAyQf,CACetC,CADf,EACuCA,CADvC,GAC6CuC,SAAA,CAAUvC,CAAV,CAD7C,EAEI,KAAM8B,MAAA,CA/QEC,0EA+QF,CACazB,CADb,CACeE,CADf,CACmBR,CADnB,CAAN,CAKJ,IAAKS,CAAL,CAASA,CAAT,CAAaN,CAAb,CAAiB,CAAjB;AAAsBO,OAAtB,CAGEJ,CAAA,CAAEJ,CAAF,CAAMI,CAAN,CAAQG,CAAR,CAAY,IAHd,KAMO,IAAIA,CAAJ,CAAQE,OAAR,CAGLL,CAAA,CAAEJ,CAAF,CAAM,CAACI,CAAD,CAAGG,CAAH,CAAO,CAAP,CAHD,KAIA,CACLH,CAAA,CAAEG,CAAF,CAAMA,CACNH,EAAA,CAAEJ,CAAF,CAAM,EAMNC,EAAA,EAAKM,CAAL,CAAS,CAAT,EAnSK+B,EAoSG,EAAR,CAAI/B,CAAJ,GAAWN,CAAX,EApSKqC,EAoSL,CAEA,IAAIrC,CAAJ,CAAQE,GAAR,CAAa,CACPF,CAAJ,EAAOG,CAAA,CAAEJ,CAAF,CAAIuC,IAAJ,CAAS,CAAC5B,GAAA,CAAID,KAAJ,CAAU,CAAV,CAAaT,CAAb,CAAV,CAEP,KAAKE,GAAL,EAzSGmC,EAySH,CAAsBrC,CAAtB,CAA0BE,GAA1B,CAAA,CACEC,CAAA,CAAEJ,CAAF,CAAIuC,IAAJ,CAAS,CAAC5B,GAAA,CAAID,KAAJ,CAAUT,CAAV,CAAaA,CAAb,EA1STqC,EA0SS,CAAV,CAGFrC,EAAA,CA7SGqC,EA6SH,EAAgB3B,GAAhB,CAAsBA,GAAA,CAAID,KAAJ,CAAUT,CAAV,CAAtB,EAAoCoB,MAPzB,CAAb,IASEpB,EAAA,EAAKE,GAGP,KAAA,CAAOF,CAAA,EAAP,CAAYU,GAAZ,EAAmB,GAAnB,EACAP,CAAA,CAAEJ,CAAF,CAAIuC,IAAJ,CAAS,CAAC5B,GAAV,CAxBK,CArBsB,CAA/B,IAkDEP,EAAA,CAAEJ,CAAF,CAAM,CAACI,CAAD,CAAGG,CAAH,CAAO,CAAP,CAhMe,CA4hCzBiC,QAASA,gBAAM,CAACC,CAAD,CAAIxC,CAAJ,CAAOyC,EAAP,CAAWC,EAAX,CAAe,CAGlB,IAAV,EAAID,EAAJ,CAAgBA,EAAhB,CAAqBhB,aAArB,CACKJ,QAAA,CAASoB,EAAT,CAAa,CAAb,CAAgB,CAAhB,CAEL,IAAI,CAACD,CAAD,CAAGzC,CAAP,CAAU,MAAOyC,EAAA,CAAEG,QAAF,EAEjB,KAAAC,GAAKJ,CAAA,CAAEzC,CAAF,CAAI,CAAJ,CACL,KAAA8C,GAAKL,CAALK,CAAOvC,CAEP,IAAS,IAAT,EAAIN,CAAJ,CAAe,CACb,IAAAU,IAAMoC,aAAA,CAAcN,CAAd,CAAgBzC,CAAhB,CACNW,IAAA,CAAY,CAAN,EAAAgC,EAAA,EAAiB,CAAjB,EAAWA,EAAX,GAAuBG,EAAvB,EAA6BE,UAA7B,EAA2CF,EAA3C,EAAiDG,UAAjD,EACHC,aAAA,CAAcvC,GAAd;AAAmBmC,EAAnB,CADG,CAEHK,YAAA,CAAaxC,GAAb,CAAkBmC,EAAlB,CAAsB,GAAtB,CAJU,CAAf,IAKO,CACLL,CAAA,CAAIjB,KAAA,CAAM,IAAI3B,SAAJ,CAAc4C,CAAd,CAAN,CAAwBxC,CAAxB,CAA2ByC,EAA3B,CAGJnC,GAAA,CAAIkC,CAAJ,CAAMlC,CAENI,IAAA,CAAMoC,aAAA,CAAcN,CAAd,CAAgBzC,CAAhB,CACN,KAAAG,IAAMQ,GAANR,CAAUkB,MAOV,IAAU,CAAV,EAAIsB,EAAJ,EAAqB,CAArB,EAAeA,EAAf,GAA2B1C,CAA3B,EAAgCM,EAAhC,EAAqCA,EAArC,EAA0CyC,UAA1C,EAAuD,CAGrD,IAAA,CAAO7C,GAAP,CAAaF,CAAb,CAAgBU,GAAA,EAAO,GAAP,CAAYR,GAAA,EAA5B,EACAQ,GAAA,CAAMuC,aAAA,CAAcvC,GAAd,CAAmBJ,EAAnB,CAJ+C,CAAvD,IAYE,IAJAN,CAII,EAJC6C,EAID,CAHJnC,GAGI,CAHEwC,YAAA,CAAaxC,GAAb,CAAkBJ,EAAlB,CAAqB,GAArB,CAGF,CAAAA,EAAA,CAAI,CAAJ,CAAQJ,GAAZ,CACE,IAAU,CAAV,CAAI,EAAEF,CAAN,CAAa,IAAKU,GAAL,EAAY,GAAZ,CAAiBV,CAAA,EAAjB,CAAsBU,GAAtB,EAA6B,GAA7B,EAAb,CADF,IAIE,IADAV,CACI,EADCM,EACD,CADKJ,GACL,CAAI,CAAJ,CAAAF,CAAJ,CAEE,IADIM,EACJ,CADQ,CACR,EADaJ,GACb,GADkBQ,GAClB,EADyB,GACzB,EAAOV,CAAA,EAAP,CAAYU,GAAZ,EAAmB,GAAnB,EAhCD,CAsCP,MAAa,EAAN,CAAA8B,CAAA,CAAEnC,CAAF,EAAWuC,EAAX,CAAgB,GAAhB,CAAsBlC,GAAtB,CAA4BA,GAtDP,CA2D9ByC,QAASA,SAAQ,CAACC,IAAD,CAAOC,MAAP,CAAe,CAK9B,IAL8B,IAC1Bb,CAD0B,CAE5BxC,EAAI,CAFwB,CAG5BsD,EAAI,IAAI1D,SAAJ,CAAcwD,IAAA,CAAK,CAAL,CAAd,CAEN,CAAOpD,CAAP,CAAWoD,IAAX,CAAgBhC,MAAhB,CAAwBpB,CAAA,EAAxB,CAIE,GAHAwC,CAGKnC,CAHD,IAAIT,SAAJ,CAAcwD,IAAA,CAAKpD,CAAL,CAAd,CAGCK;AAAAmC,CAAAnC,CAAEA,CAAP,CAGWgD,MAAA,CAAOE,IAAP,CAAYD,CAAZ,CAAed,CAAf,CAAJ,GACLc,CADK,CACDd,CADC,CAHP,KAAU,CACRc,CAAA,CAAId,CACJ,MAFQ,CAQZ,MAAOc,EAjBuB,CAyBhCE,QAASA,UAAS,CAAChB,CAAD,CAAIzC,CAAJ,CAAOO,CAAP,CAAU,CAK1B,IAL0B,IACtBN,EAAI,CADkB,CAExByD,EAAI1D,CAAJ0D,CAAMrC,MAGR,CAAO,CAACrB,CAAA,CAAE,EAAE0D,CAAJ,CAAR,CAAgB1D,CAAA,CAAE2D,GAAF,EAAhB,EAGA,IAAKD,CAAL,CAAS1D,CAAA,CAAE,CAAF,CAAT,CAAoB,EAApB,EAAe0D,CAAf,CAAwBA,CAAA,EAAK,EAAL,CAASzD,CAAA,EAAjC,EAGA,CAAKM,CAAL,CAASN,CAAT,CAnvCSqC,EAmvCT,CAAa/B,CAAb,CAA4B,CAA5B,EAAiCC,OAAjC,CAGEiC,CAHF,CAGIzC,CAHJ,CAGQyC,CAHR,CAGUlC,CAHV,CAGc,IAHd,CAMWA,CAAJ,CAAQE,OAAR,CAGLgC,CAHK,CAGHzC,CAHG,CAGC,CAACyC,CAAD,CAAGlC,CAAH,CAAO,CAAP,CAHD,EAKLkC,CACA,CADElC,CACF,CADMA,CACN,CAAAkC,CAAA,CAAEzC,CAAF,CAAMA,CAND,CASP,OAAOyC,EA1BmB,CAoF5BjB,QAASA,MAAK,CAACpB,CAAD,CAAIwD,EAAJ,CAAQlB,EAAR,CAAYmB,CAAZ,CAAe,CAAA,IACdC,CADc,CACRC,EADQ,CAEzBC,GAAK5D,CAAL4D,CAAOhE,CAFkB,CAGzBiE,OAASC,QAGX,IAAIF,EAAJ,CAAQ,CAQN,CAAA,CAAK,CAGE,IAAAG,EAAI,CAAT,KAAYL,CAAZ,CAAgBE,EAAA,CAAG,CAAH,CAAhB,CAA4B,EAA5B,EAAuBF,CAAvB,CAAgCA,CAAA,EAAK,EAAL,CAASK,CAAA,EAAzC,EACA,IAAAlE,EAAI2D,EAAJ3D,CAASkE,CAGT,IAAQ,CAAR,CAAIlE,CAAJ,CAAW,CACTA,CAAA,EAl1CGqC,EAm1CH,KAAAoB,EAAIE,EACJ,KAAAnB,EAAIuB,EAAA,CAAGD,EAAH,CAAQ,CAAR,CAGJK,EAAA,CAAK3B,CAAL,CAASwB,MAAA,CAAOE,CAAP,CAAWT,CAAX,CAAe,CAAf,CAAT,CAA6B,EAA7B,CAAkC,CANzB,CAAX,IAUE,IAFAK,EAEI,CAFCM,QAAA,EAAUpE,CAAV,CAAc,CAAd,EAz1CFqC,EAy1CE,CAED,CAAAyB,EAAA,EAAMC,EAAN,CAAS3C,MAAb,CAEE,GAAIwC,CAAJ,CAAO,CAGL,IAAA,CAAOG,EAAP,CAAU3C,MAAV,EAAoB0C,EAApB,CAAwBC,EAAA,CAAGzB,IAAH,CAAQ,CAAR,CAAxB,EACAE,CAAA,CAAI2B,CAAJ,CAAS,CACTD,EAAA,CAAI,CACJlE,EAAA,EAn2CDqC,EAo2CCoB,EAAA;AAAIzD,CAAJ,CAp2CDqC,EAo2CC,CAAmB,CAPd,CAAP,IASE,OAAM,CAXV,KAaO,CACLG,CAAA,CAAIqB,CAAJ,CAAQE,EAAA,CAAGD,EAAH,CAGR,KAAKI,CAAL,CAAS,CAAT,CAAiB,EAAjB,EAAYL,CAAZ,CAAqBA,CAAA,EAAK,EAAL,CAASK,CAAA,EAA9B,EAGAlE,CAAA,EA/2CCqC,EAm3CDoB,EAAA,CAAIzD,CAAJ,CAn3CCqC,EAm3CD,CAAmB6B,CAGnBC,EAAA,CAAS,CAAJ,CAAAV,CAAA,CAAQ,CAAR,CAAYjB,CAAZ,CAAgBwB,MAAA,CAAOE,CAAP,CAAWT,CAAX,CAAe,CAAf,CAAhB,CAAoC,EAApC,CAAyC,CAdzC,CAkBTG,CAAA,CAAIA,CAAJ,EAAc,CAAd,CAASD,EAAT,EAKe,IALf,EAKCI,EAAA,CAAGD,EAAH,CAAQ,CAAR,CALD,GAK4B,CAAJ,CAAAL,CAAA,CAAQjB,CAAR,CAAYA,CAAZ,CAAgBwB,MAAA,CAAOE,CAAP,CAAWT,CAAX,CAAe,CAAf,CALxC,CAOAG,EAAA,CAAS,CAAL,CAAAnB,EAAA,EACA0B,CADA,EACMP,CADN,IACmB,CADnB,EACanB,EADb,EACwBA,EADxB,GACqC,CAAN,CAAAtC,CAAA,CAAEE,CAAF,CAAU,CAAV,CAAc,CAD7C,GAEI,CAFJ,CAED8D,CAFC,EAEe,CAFf,EAESA,CAFT,GAE2B,CAF3B,EAEqB1B,EAFrB,EAEgCmB,CAFhC,EAE2C,CAF3C,EAEqCnB,EAFrC,GAKI,CAAJ,CAAAzC,CAAA,CAAY,CAAJ,CAAAyD,CAAA,CAAQjB,CAAR,CAAYwB,MAAA,CAAOE,CAAP,CAAWT,CAAX,CAAZ,CAA4B,CAApC,CAAwCM,EAAA,CAAGD,EAAH,CAAQ,CAAR,CALxC,EAKsD,EALtD,CAK4D,CAL5D,EAMDrB,EANC,GAMY,CAAN,CAAAtC,CAAA,CAAEE,CAAF,CAAU,CAAV,CAAc,CANpB,EAQJ,IAAS,CAAT,CAAIsD,EAAJ,EAAc,CAACI,EAAA,CAAG,CAAH,CAAf,CAiBE,MAhBAA,GAgBO5D,CAhBJiB,MAgBIjB,CAhBK,CAgBLA,CAdHyD,CAAJ,EAGED,EAIA,EAJMxD,CAIN,CAJQG,CAIR,CAJY,CAIZ,CADAyD,EAAA,CAAG,CAAH,CACA,CADQC,MAAA,EAl5CP3B,EAk5CO,CAAmBsB,EAAnB,CAl5CPtB,EAk5CO,EAl5CPA,EAk5CO,CACR,CAAAlC,CAAA,CAAEG,CAAF,CAAM,CAACqD,EAAP,EAAa,CAPf,EAWEI,EAAA,CAAG,CAAH,CAXF,CAWU5D,CAXV,CAWYG,CAXZ,CAWgB,CAGTH,CAAAA,CAIA,EAAT,EAAIH,CAAJ,EACE+D,EAEA,CAFG3C,MAEH,CAFY0C,EAEZ,CADAD,CACA,CADI,CACJ,CAAAC,EAAA,EAHF,GAKEC,EAKA,CALG3C,MAKH,CALY0C,EAKZ,CALiB,CAKjB,CAJAD,CAIA,CAJIG,MAAA,CAp6CD3B,EAo6CC,CAAkBrC,CAAlB,CAIJ,CAAA+D,EAAA,CAAGD,EAAH,CAAA,CAAa,CAAJ,CAAAL,CAAA,CAAQrB,SAAA,CAAUI,CAAV,CAAcwB,MAAA,CAAOE,CAAP,CAAWT,CAAX,CAAd,CAA8BO,MAAA,CAAOP,CAAP,CAA9B,CAAR,CAAmDI,CAAnD,CAAuD,CAVlE,CAcA,IAAID,CAAJ,CAEE,IAAA,CAAA,CAAA,CAGE,GAAU,CAAV;AAAIE,EAAJ,CAAa,CAGN9D,CAAA,CAAI,CAAT,KAAYyD,CAAZ,CAAgBM,EAAA,CAAG,CAAH,CAAhB,CAA4B,EAA5B,EAAuBN,CAAvB,CAAgCA,CAAA,EAAK,EAAL,CAASzD,CAAA,EAAzC,EACAyD,CAAA,CAAIM,EAAA,CAAG,CAAH,CAAJ,EAAaF,CACb,KAAKA,CAAL,CAAS,CAAT,CAAiB,EAAjB,EAAYJ,CAAZ,CAAqBA,CAAA,EAAK,EAAL,CAASI,CAAA,EAA9B,EAGI7D,CAAJ,EAAS6D,CAAT,GACE1D,CAAA,CAAEG,CAAF,EACA,CA57CP+D,IA47CO,EAAIN,EAAA,CAAG,CAAH,CAAJ,GAAmBA,EAAA,CAAG,CAAH,CAAnB,CAA2B,CAA3B,CAFF,CAKA,MAbW,CAAb,IAcO,CACLA,EAAA,CAAGD,EAAH,CAAA,EAAUD,CACV,IAl8CLQ,IAk8CK,EAAIN,EAAA,CAAGD,EAAH,CAAJ,CAAoB,KACpBC,GAAA,CAAGD,EAAA,EAAH,CAAA,CAAW,CACXD,EAAA,CAAI,CAJC,CAUX,IAAK7D,CAAL,CAAS+D,EAAT,CAAY3C,MAAZ,CAAgC,CAAhC,GAAoB2C,EAAA,CAAG,EAAE/D,CAAL,CAApB,CAAmC+D,EAAA,CAAGL,GAAH,EAAnC,EA/HG,CAmIDvD,CAAJ,CAAMG,CAAN,CAAUC,OAAV,CACEJ,CADF,CACIJ,CADJ,CACQI,CADR,CACUG,CADV,CACc,IADd,CAIWH,CAJX,CAIaG,CAJb,CAIiBE,OAJjB,GAKEL,CALF,CAKIJ,CALJ,CAKQ,CAACI,CAAD,CAAGG,CAAH,CAAO,CAAP,CALR,CA3IM,CAoJR,MAAOH,EA1JoB,CA8J7BmE,QAASA,QAAO,CAAC9B,CAAD,CAAI,CAAA,IAEhBlC,EAAIkC,CAAJlC,CAAMA,CAER,IAAU,IAAV,GAAIA,CAAJ,CAAgB,MAAOkC,EAAA,CAAEG,QAAF,EAEvB,KAAAjC,IAAMoC,aAAA,CAAcN,CAAd,CAAgBzC,CAAhB,CAENW,IAAA,CAAMJ,CAAA,EAAKyC,UAAL,EAAmBzC,CAAnB,EAAwB0C,UAAxB,CACFC,aAAA,CAAcvC,GAAd,CAAmBJ,CAAnB,CADE,CAEF4C,YAAA,CAAaxC,GAAb,CAAkBJ,CAAlB,CAAqB,GAArB,CAEJ,OAAa,EAAN,CAAAkC,CAAA,CAAEnC,CAAF,CAAU,GAAV,CAAgBK,GAAhB,CAAsBA,GAZX,CA38CO,IAEzB6D,EAAI3E,SAAJ2E,CAAcC,SAAdD,CAA0B,CAAEE,YAAa7E,SAAf;AAA0B+C,SAAU,IAApC,CAA0C2B,QAAS,IAAnD,CAFD,CAGzBI,IAAM,IAAI9E,SAAJ,CAAc,CAAd,CAHmB,CAazB4B,eAAiB,EAbQ,CA0BzBC,cAAgB,CA1BS,CAgCzBsB,WAAa,EAhCY,CAoCzBC,WAAa,EApCY,CA0CzBxC,QAAU,IA1Ce,CA+CzBD,QAAU,GA/Ce,CAkDzBoE,OAAS,CAAA,CAlDgB,CAoEzBC,YAAc,CApEW,CAwEzBC,cAAgB,CAxES,CA2EzBC,OAAS,CACPC,OAAQ,EADD,CAEPC,UAAW,CAFJ,CAGPC,mBAAoB,CAHb,CAIPC,eAAgB,GAJT,CAKPC,iBAAkB,GALX,CAMPC,kBAAmB,CANZ,CAOPC,uBAAwB,GAPjB,CAQPC,OAAQ,EARD,CA3EgB,CAyFzBhE,SAAW,sCAwNb1B,UAAA,CAAUF,KAAV,CAAkBA,KAElBE,UAAA,CAAU2F,QAAV,CAAqB,CACrB3F,UAAA,CAAU4F,UAAV,CAAuB,CACvB5F,UAAA,CAAU6F,UAAV,CAAuB,CACvB7F,UAAA,CAAU8F,WAAV,CAAwB,CACxB9F,UAAA,CAAU+F,aAAV;AAA0B,CAC1B/F,UAAA,CAAUgG,eAAV,CAA4B,CAC5BhG,UAAA,CAAUiG,eAAV,CAA4B,CAC5BjG,UAAA,CAAUkG,eAAV,CAA4B,CAC5BlG,UAAA,CAAUmG,gBAAV,CAA6B,CAC7BnG,UAAA,CAAUoG,MAAV,CAAmB,CAqCnBpG,UAAA,CAAUqG,MAAV,CAAmBrG,SAAnB,CAA6BsG,GAA7B,CAAmCC,QAAS,CAACC,GAAD,CAAM,CAAA,IAC5CC,CAEJ,IAAW,IAAX,EAAID,GAAJ,CAEE,GAAkB,QAAlB,EAAI,MAAOA,IAAX,CAA4B,CAI1B,GAAIA,GAAA,CAAIE,cAAJ,CAAmBD,CAAnB,CAAuB,gBAAvB,CAAJ,CAA8C,CAC5C,IAAAxG,EAAIuG,GAAA,CAAIC,CAAJ,CACJhF,SAAA,CAASxB,CAAT,CAAY,CAAZ,CAlXF0G,GAkXE,CAAoBF,CAApB,CACA7E,eAAA,CAAiB3B,CAH2B,CAQ1CuG,GAAA,CAAIE,cAAJ,CAAmBD,CAAnB,CAAuB,eAAvB,CAAJ,GACExG,CAEA,CAFIuG,GAAA,CAAIC,CAAJ,CAEJ,CADAhF,QAAA,CAASxB,CAAT,CAAY,CAAZ,CAAe,CAAf,CAAkBwG,CAAlB,CACA,CAAA5E,aAAA,CAAgB5B,CAHlB,CAUIuG,IAAA,CAAIE,cAAJ,CAAmBD,CAAnB,CAAuB,gBAAvB,CAAJ,GAEE,CADAxG,CACA,CADIuG,GAAA,CAAIC,CAAJ,CACJ,GAASxG,CAAT,CAAW6D,GAAX,EACErC,QAAA,CAASxB,CAAA,CAAE,CAAF,CAAT,CAAe,IAAf,CAAqB,CAArB,CAAwBwG,CAAxB,CAGA,CAFAhF,QAAA,CAASxB,CAAA,CAAE,CAAF,CAAT,CAAe,CAAf,CAtYJ0G,GAsYI;AAAuBF,CAAvB,CAEA,CADAtD,UACA,CADalD,CAAA,CAAE,CAAF,CACb,CAAAmD,UAAA,CAAanD,CAAA,CAAE,CAAF,CAJf,GAMEwB,QAAA,CAASxB,CAAT,CAAY,IAAZ,CA1YJ0G,GA0YI,CAAuBF,CAAvB,CACA,CAAAtD,UAAA,CAAa,EAAEC,UAAF,CAAmB,CAAJ,CAAAnD,CAAA,CAAQ,CAACA,CAAT,CAAaA,CAA5B,CAPf,CAFF,CAgBA,IAAIuG,GAAA,CAAIE,cAAJ,CAAmBD,CAAnB,CAAuB,OAAvB,CAAJ,CAEE,IADAxG,CACA,CADIuG,GAAA,CAAIC,CAAJ,CACJ,GAASxG,CAAT,CAAW6D,GAAX,CACErC,QAAA,CAASxB,CAAA,CAAE,CAAF,CAAT,CAAe,IAAf,CAAqB,EAArB,CAAyBwG,CAAzB,CAGA,CAFAhF,QAAA,CAASxB,CAAA,CAAE,CAAF,CAAT,CAAe,CAAf,CAtZJ0G,GAsZI,CAAuBF,CAAvB,CAEA,CADA7F,OACA,CADUX,CAAA,CAAE,CAAF,CACV,CAAAU,OAAA,CAAUV,CAAA,CAAE,CAAF,CAJZ,KAOE,IADAwB,QAAA,CAASxB,CAAT,CAAY,IAAZ,CA1ZJ0G,GA0ZI,CAAuBF,CAAvB,CACIxG,CAAAA,CAAJ,CACEW,OAAA,CAAU,EAAED,OAAF,CAAgB,CAAJ,CAAAV,CAAA,CAAQ,CAACA,CAAT,CAAaA,CAAzB,CADZ,KAGE,MAAM8B,MAAA,CA3aD6E,oBA2aC,CACaH,CADb,CACiB,mBADjB,CACuCxG,CADvC,CAAN,CASN,GAAIuG,GAAA,CAAIE,cAAJ,CAAmBD,CAAnB,CAAuB,QAAvB,CAAJ,CAEE,GADAxG,CACI,CADAuG,GAAA,CAAIC,CAAJ,CACA,CAAAxG,CAAA,GAAM,CAAC,CAACA,CAAZ,CACE,GAAIA,CAAJ,CACE,GAAqB,WAArB,EAAI,MAAO4G,OAAX,EAAoCA,MAApC,GACEA,MADF,CACSC,eADT,EAC4BD,MAD5B,CACmCE,WADnC,EAEEhC,MAAA,CAAS9E,CAFX,KAKE,MADA8E,OACM;AADG,CAAC9E,CACJ,CAAA8B,KAAA,CACJ,sCADI,CAAN,CANJ,IAUEgD,OAAA,CAAS9E,CAXb,KAcE,MAAM8B,MAAA,CApcC6E,oBAocD,CACaH,CADb,CACiB,sBADjB,CAC0CxG,CAD1C,CAAN,CAOAuG,GAAA,CAAIE,cAAJ,CAAmBD,CAAnB,CAAuB,aAAvB,CAAJ,GACExG,CAEA,CAFIuG,GAAA,CAAIC,CAAJ,CAEJ,CADAhF,QAAA,CAASxB,CAAT,CAAY,CAAZ,CAAe,CAAf,CAAkBwG,CAAlB,CACA,CAAAzB,WAAA,CAAc/E,CAHhB,CAQIuG,IAAA,CAAIE,cAAJ,CAAmBD,CAAnB,CAAuB,eAAvB,CAAJ,GACExG,CAEA,CAFIuG,GAAA,CAAIC,CAAJ,CAEJ,CADAhF,QAAA,CAASxB,CAAT,CAAY,CAAZ,CAxcF0G,GAwcE,CAAoBF,CAApB,CACA,CAAAxB,aAAA,CAAgBhF,CAHlB,CAQA,IAAIuG,GAAA,CAAIE,cAAJ,CAAmBD,CAAnB,CAAuB,QAAvB,CAAJ,CAEE,GADAxG,CACI,CADAuG,GAAA,CAAIC,CAAJ,CACA,CAAY,QAAZ,EAAA,MAAOxG,EAAX,CAA0BiF,MAAA,CAASjF,CAAnC,KACK,MAAM8B,MAAA,CA9dF6E,oBA8dE,CACQH,CADR,CACY,kBADZ,CACiCxG,CADjC,CAAN,CAMP,GAAIuG,GAAA,CAAIE,cAAJ,CAAmBD,CAAnB,CAAuB,UAAvB,CAAJ,CAAwC,CACtCxG,CAAA,CAAIuG,GAAA,CAAIC,CAAJ,CAIJ,IAAgB,QAAhB,EAAI,MAAOxG,EAAX,EAA6B,uBAAA,CAAwBgB,IAAxB,CAA6BhB,CAA7B,CAA7B,CAGE,KAAM8B,MAAA,CA5eC6E,oBA4eD;AACaH,CADb,CACiB,YADjB,CACgCxG,CADhC,CAAN,CAFAyB,QAAA,CAAWzB,CANyB,CA3Gd,CAA5B,IA2HE,MAAM8B,MAAA,CACJ,qCADI,CACmCyE,GADnC,CAAN,CAKJ,MAAO,CACL5E,eAAgBA,cADX,CAELC,cAAeA,aAFV,CAGLmF,eAAgB,CAAC7D,UAAD,CAAaC,UAAb,CAHX,CAIL6D,MAAO,CAACrG,OAAD,CAAUD,OAAV,CAJF,CAKLoE,OAAQA,MALH,CAMLC,YAAaA,WANR,CAOLC,cAAeA,aAPV,CAQLC,OAAQA,MARH,CASLxD,SAAUA,QATL,CArIyC,CA4JlD1B,UAAA,CAAUkH,WAAV,CAAwBC,QAAS,CAAClH,CAAD,CAAI,CACnC,GAAI,CAACA,CAAL,EAA6B,CAAA,CAA7B,GAAUA,CAAV,CAAYO,YAAZ,CAAmC,MAAO,CAAA,CAC1C,IAAI,CAACR,SAAD,CAAW8B,KAAf,CAAsB,MAAO,CAAA,CAFM,KAKjC3B,EAAIF,CAAJE,CAAMA,CACNO,KAAAA,EAAIT,CAAJS,CAAMA,CAFR,KAGED,EAAIR,CAAJQ,CAAMA,CAER,EAAA,CAAK,GAA2B,gBAA3B,EAAI,EAAA,CAAGsC,QAAH,CAAYY,IAAZ,CAAiBxD,CAAjB,CAAJ,CAEH,KAAW,CAAX,GAAKM,CAAL;AAAsB,EAAtB,GAAgBA,CAAhB,GAAkC,IAAlC,EAA6BC,CAA7B,EA9gBEiG,GA8gBF,EAA0CjG,CAA1C,EAAsDA,CAAtD,GAA4D8B,SAAA,CAAU9B,CAAV,CAA5D,CAGE,GAAa,CAAb,GAAIP,CAAA,CAAE,CAAF,CAAJ,CACE,IAAU,CAAV,GAAIO,CAAJ,EAA4B,CAA5B,GAAeP,CAAf,CAAiBqB,MAAjB,CAA+B,MAAO,CAAA,CAAtC,CADF,IAWA,IALApB,CAKI,EALCM,CAKD,CALK,CAKL,EAriBC+B,EAqiBD,CAJI,CAIJ,CAJArC,CAIA,GAJOA,CAIP,EAriBCqC,EAqiBD,EAAA1B,MAAA,CAAOZ,CAAA,CAAE,CAAF,CAAP,CAAA,CAAaqB,MAAb,EAAuBpB,CAA3B,CAA8B,CAE5B,IAAKA,CAAL,CAAS,CAAT,CAAYA,CAAZ,CAAgBD,CAAhB,CAAkBqB,MAAlB,CAA0BpB,CAAA,EAA1B,CAA+B,CAC7B,IAAAwC,EAAIzC,CAAA,CAAEC,CAAF,CACJ,IAAQ,CAAR,CAAIwC,CAAJ,EA1iBH6B,IA0iBG,EAAa7B,CAAb,EAA0BA,CAA1B,GAAgCJ,SAAA,CAAUI,CAAV,CAAhC,CAA8C,MAAM,CAFvB,CAM/B,GAAU,CAAV,GAAIA,CAAJ,CAAa,MAAO,CAAA,CARQ,CAdhC,CAFG,IA6BE,IAAU,IAAV,GAAIzC,CAAJ,EAAwB,IAAxB,GAAkBO,CAAlB,GAAuC,IAAvC,GAAiCD,CAAjC,EAAqD,CAArD,GAA+CA,CAA/C,EAAgE,EAAhE,GAA0DA,CAA1D,EACL,MAAO,CAAA,CAGT,MAAMsB,MAAA,CACH,uCADG,CACsC9B,CADtC,CAAN,CA1CmC,CAoDrCD,UAAA,CAAUoH,OAAV,CAAoBpH,SAApB,CAA8BqH,GAA9B,CAAoCC,QAAS,EAAG,CAC9C,MAAO/D,SAAA,CAASgE,SAAT,CAAoB5C,CAApB,CAAsB6C,EAAtB,CADuC,CAUhDxH,UAAA,CAAUyH,OAAV,CAAoBzH,SAApB,CAA8B0H,GAA9B,CAAoCC,QAAS,EAAG,CAC9C,MAAOpE,SAAA,CAASgE,SAAT;AAAoB5C,CAApB,CAAsBiD,EAAtB,CADuC,CAehD5H,UAAA,CAAU6H,MAAV,CAAoB,QAAS,EAAG,CAO9B,IAAIC,eANUC,gBAMO,CAACC,IAAA,CAAKH,MAAL,EAAD,CAA4B,OAA5B,CAClB,QAAS,EAAG,CAAE,MAAOrF,UAAA,CAPVuF,gBAOU,CAAUC,IAAA,CAAKH,MAAL,EAAV,CAAT,CADM,CAElB,QAAS,EAAG,CAAE,MAA2C,QAA3C,EAAyB,UAAzB,CAASG,IAAA,CAAKH,MAAL,EAAT,CAAsC,CAAtC,GACG,OADH,CACbG,IAAA,CAAKH,MAAL,EADa,CACc,CADd,CAAF,CAGf,OAAO,SAAS,CAACI,EAAD,CAAK,CAAA,IACfC,CADe,CAEjB9H,EAAI,CAFa,CAGjBD,EAAI,EAHa,CAIjBgI,KAAO,IAAInI,SAAJ,CAAc8E,GAAd,CAEC,KAAV,EAAImD,EAAJ,CAAgBA,EAAhB,CAAqBrG,cAArB,CACKH,QAAA,CAASwG,EAAT,CAAa,CAAb,CAnmBHtB,GAmmBG,CAEL,KAAA1C,EAAIO,QAAA,CAASyD,EAAT,CA9mBGxF,EA8mBH,CAEJ,IAAIsC,MAAJ,CAGE,GAAI8B,MAAJ,CAAWC,eAAX,CAA4B,CAI1B,IAFAoB,CAEA,CAFIrB,MAAA,CAAOC,eAAP,CAAuB,IAAIsB,WAAJ,CAAgBnE,CAAhB,EAAqB,CAArB,CAAvB,CAEJ,CAAO7D,CAAP,CAAW6D,CAAX,CAAA,CAAe,CAQb,IAAAhE,EAAW,MAAXA,CAAIiI,CAAA,CAAE9H,CAAF,CAAJH,EAAsBiI,CAAA,CAAE9H,CAAF,CAAM,CAAN,CAAtBH,GAAmC,EAAnCA,CAMS,KAAT,EAAIA,CAAJ,EACEC,CAEA;AAFI2G,MAAA,CAAOC,eAAP,CAAuB,IAAIsB,WAAJ,CAAgB,CAAhB,CAAvB,CAEJ,CADAF,CAAA,CAAE9H,CAAF,CACA,CADOF,CAAA,CAAE,CAAF,CACP,CAAAgI,CAAA,CAAE9H,CAAF,CAAM,CAAN,CAAA,CAAWF,CAAA,CAAE,CAAF,CAHb,GAQEC,CAAA,CAAEuC,IAAF,CAAOzC,CAAP,CAAW,IAAX,CACA,CAAAG,CAAA,EAAK,CATP,CAda,CA0BfA,CAAA,CAAI6D,CAAJ,CAAQ,CA9BkB,CAA5B,IAiCO,IAAI4C,MAAJ,CAAWE,WAAX,CAAwB,CAK7B,IAFAmB,CAEA,CAFIrB,MAAA,CAAOE,WAAP,CAAmB9C,CAAnB,EAAwB,CAAxB,CAEJ,CAAO7D,CAAP,CAAW6D,CAAX,CAAA,CAMEhE,CAIA,CAJmB,eAInB,EAJMiI,CAAA,CAAE9H,CAAF,CAIN,CAJa,EAIb,EAJkD,aAIlD,CAJuC8H,CAAA,CAAE9H,CAAF,CAAM,CAAN,CAIvC,CAHe,UAGf,CAHI8H,CAAA,CAAE9H,CAAF,CAAM,CAAN,CAGJ,CAH0C,QAG1C,CAH+B8H,CAAA,CAAE9H,CAAF,CAAM,CAAN,CAG/B,EAFI8H,CAAA,CAAE9H,CAAF,CAAM,CAAN,CAEJ,EAFgB,EAEhB,GAFuB8H,CAAA,CAAE9H,CAAF,CAAM,CAAN,CAEvB,EAFmC,CAEnC,EAFwC8H,CAAA,CAAE9H,CAAF,CAAM,CAAN,CAExC,CAAS,IAAT,EAAIH,CAAJ,CACE4G,MAAA,CAAOE,WAAP,CAAmB,CAAnB,CAAA,CAAsBsB,IAAtB,CAA2BH,CAA3B,CAA8B9H,CAA9B,CADF,EAKED,CAAA,CAAEuC,IAAF,CAAOzC,CAAP,CAAW,IAAX,CACA,CAAAG,CAAA,EAAK,CANP,CASFA,EAAA,CAAI6D,CAAJ,CAAQ,CAxBqB,CAAxB,IA2BL,MADAc,OACM,CADG,CAAA,CACH,CAAAhD,KAAA,CACJ,sCADI,CAAN,CAMJ,GAAI,CAACgD,MAAL,CAEE,IAAA,CAAO3E,CAAP,CAAW6D,CAAX,CAAA,CACEhE,CACA,CADI6H,cAAA,EACJ,CAAQ,IAAR,CAAI7H,CAAJ,GAAcE,CAAA,CAAEC,CAAA,EAAF,CAAd,CAAuBH,CAAvB,CAA2B,IAA3B,CAIJgE,EAAA,CAAI9D,CAAA,CAAE,EAAEC,CAAJ,CACJ6H,GAAA,EA9rBOxF,EAisBHwB,EAAJ,EAASgE,EAAT,GACEhI,CACA,CADIoE,QAAA,CAlsBC5B,EAksBD;AAAoBwF,EAApB,CACJ,CAAA9H,CAAA,CAAEC,CAAF,CAAA,CAAOoC,SAAA,CAAUyB,CAAV,CAAchE,CAAd,CAAP,CAA0BA,CAF5B,CAMA,KAAA,CAAgB,CAAhB,GAAOE,CAAA,CAAEC,CAAF,CAAP,CAAmBD,CAAA,CAAE2D,GAAF,EAAA,CAAS1D,CAAA,EAA5B,EAGA,GAAQ,CAAR,CAAIA,CAAJ,CACED,CAAA,CAAI,CAACO,EAAD,CAAK,CAAL,CADN,KAEO,CAGL,IAAKA,EAAL,CAAS,EAAT,CAAuB,CAAvB,GAAcP,CAAA,CAAE,CAAF,CAAd,CAA0BA,CAAA,CAAEmI,MAAF,CAAS,CAAT,CAAY,CAAZ,CAAA,CAAgB5H,EAAhB,EA/sBrB+B,EA+sBL,EAGKrC,CAAA,CAAI,CAAT,KAAYH,CAAZ,CAAgBE,CAAA,CAAE,CAAF,CAAhB,CAA2B,EAA3B,EAAsBF,CAAtB,CAA+BA,CAAA,EAAK,EAAL,CAASG,CAAA,EAAxC,EAltBKqC,EAqtBL,CAAIrC,CAAJ,GAAkBM,EAAlB,EArtBK+B,EAqtBL,CAAkCrC,CAAlC,CATK,CAYP+H,IAAA,CAAKzH,CAAL,CAASA,EACTyH,KAAA,CAAKhI,CAAL,CAASA,CACT,OAAOgI,KArHY,CAZS,CAAb,EA2InBnI,UAAA,CAAUuI,GAAV,CAAgBC,QAAS,EAAG,CAI1B,IAJ0B,IACtBpI,EAAI,CADkB,CAExBoD,KAAO+D,SAFiB,CAGxBgB,IAAM,IAAIvI,SAAJ,CAAcwD,IAAA,CAAK,CAAL,CAAd,CACR,CAAOpD,CAAP,CAAWoD,IAAX,CAAgBhC,MAAhB,CAAA,CAAyB+G,GAAA,CAAMA,GAAA,CAAIE,IAAJ,CAASjF,IAAA,CAAKpD,CAAA,EAAL,CAAT,CAC/B,OAAOmI,IALmB,CAa5B,KAAAjG,YAAe,QAAS,EAAG,CAQzBoG,QAASA,UAAS,CAAC5H,GAAD,CAAM6H,MAAN,CAAcC,OAAd,CAAuB3G,QAAvB,CAAiC,CAOjD,IAPiD,IAC7C4B,CAD6C,CAE/CgF,IAAM,CAAC,CAAD,CAFyC,CAI/CzI,EAAI,CAJ2C,CAK/CE,IAAMQ,GAANR,CAAUkB,MAEZ,CAAOpB,CAAP,CAAWE,GAAX,CAAA,CAAiB,CACf,IAAKwI,CAAL,CAAYD,GAAZ,CAAgBrH,MAAhB,CAAwBsH,CAAA,EAAxB,CAAgCD,GAAA,CAAIC,CAAJ,CAAhC,EAA6CH,MAA7C,EAEAE,GAAA,CAAI,CAAJ,CAAA,EAAU5G,QAAA,CAASb,OAAT,CAAiBN,GAAA,CAAIoB,MAAJ,CAAW9B,CAAA,EAAX,CAAjB,CAEV;IAAKyD,CAAL,CAAS,CAAT,CAAYA,CAAZ,CAAgBgF,GAAhB,CAAoBrH,MAApB,CAA4BqC,CAAA,EAA5B,CAEMgF,GAAA,CAAIhF,CAAJ,CAAJ,CAAa+E,OAAb,CAAuB,CAAvB,GACoB,IAElB,EAFIC,GAAA,CAAIhF,CAAJ,CAAQ,CAAR,CAEJ,GAFwBgF,GAAA,CAAIhF,CAAJ,CAAQ,CAAR,CAExB,CAFqC,CAErC,EADAgF,GAAA,CAAIhF,CAAJ,CAAQ,CAAR,CACA,EADcgF,GAAA,CAAIhF,CAAJ,CACd,CADuB+E,OACvB,CADiC,CACjC,CAAAC,GAAA,CAAIhF,CAAJ,CAAA,EAAU+E,OAHZ,CAPa,CAejB,MAAOC,IAAA,CAAIE,OAAJ,EAtB0C,CA4BnD,MAAO,SAAS,CAACjI,GAAD,CAAM6H,MAAN,CAAcC,OAAd,CAAuBI,IAAvB,CAA6BC,gBAA7B,CAA+C,CAAA,IACzDhH,QADyD,CAE3D7B,EAAIU,GAAA,CAAIM,OAAJ,CAAY,GAAZ,CAFuD,CAG3D6G,GAAKrG,cAHsD,CAI3DiB,GAAKhB,aAGP,IAAS,CAAT,EAAIzB,CAAJ,CAAY,CACV,IAAA6D,EAAIgB,aAGJA,cAAA,CAAgB,CAChBnE,IAAA,CAAMA,GAAA,CAAIO,OAAJ,CAAY,GAAZ,CAAiB,EAAjB,CACN,KAAA6H,EAAI,IAAIlJ,SAAJ,CAAc2I,MAAd,CACJ,KAAApI,EAAI2I,CAAA,CAAEC,GAAF,CAAMrI,GAAN,CAAUU,MAAV,CAAmBpB,CAAnB,CACJ6E,cAAA,CAAgBhB,CAKhBiF,EAAA,CAAE/I,CAAF,CAAMuI,SAAA,CAAUpF,YAAA,CAAaJ,aAAA,CAAc3C,CAAd,CAAgBJ,CAAhB,CAAb,CAAiCI,CAAjC,CAAmCG,CAAnC,CAAsC,GAAtC,CAAV,CACL,EADK,CACDkI,OADC,CAvDIQ,YAuDJ,CAENF,EAAA,CAAExI,CAAF,CAAMwI,CAAN,CAAQ/I,CAAR,CAAUqB,MAfA,CAoBZ2C,gBAAA;AAAKuE,SAAA,CAAU5H,GAAV,CAAe6H,MAAf,CAAuBC,OAAvB,CAAgCK,gBAAA,EACjChH,QAAA,CAAWP,QAAX,CA/DQ0H,YA8DyB,GAEjCnH,QAAA,CAhEQmH,YAgER,CAAoB1H,QAFa,CAAhC,CAQL,KAHAhB,MAGA,CAHIuD,CAGJ,CAHQE,gBAGR,CAHW3C,MAGX,CAAkB,CAAlB,EAAO2C,gBAAA,CAAG,EAAEF,CAAL,CAAP,CAAqBE,gBAAA,CAAGL,GAAH,EAArB,EAGA,GAAI,CAACK,gBAAA,CAAG,CAAH,CAAL,CAAY,MAAOlC,SAAA,CAASC,MAAT,CAAgB,CAAhB,CAGnB,IAAQ,CAAR,CAAI9B,CAAJ,CACE,EAAEM,MADJ,KAEO,CACLH,CAAA,CAAEJ,CAAF,CAAMgE,gBACN5D,EAAA,CAAEG,CAAF,CAAMA,MAGNH,EAAA,CAAEE,CAAF,CAAMuI,IACNzI,EAAA,CAAI8I,GAAA,CAAI9I,CAAJ,CAAO2I,CAAP,CAAUjB,EAAV,CAAcpF,EAAd,CAAkB+F,OAAlB,CACJzE,iBAAA,CAAK5D,CAAL,CAAOJ,CACP,KAAA6D,EAAIzD,CAAJyD,CAAMA,CACNtD,OAAA,CAAIH,CAAJ,CAAMG,CATD,CAeP4D,GAAA,CAAI5D,MAAJ,CAAQuH,EAAR,CAAa,CAGb7H,EAAA,CAAI+D,gBAAA,CAAGG,GAAH,CAIJL,EAAA,CAAI2E,OAAJ,CAAc,CACd5E,EAAA,CAAIA,CAAJ,EAAa,CAAb,CAASM,GAAT,EAA+B,IAA/B,EAAkBH,gBAAA,CAAGG,GAAH,CAAO,CAAP,CAElBN,EAAA,CAAS,CAAL,CAAAnB,EAAA,EAAe,IAAf,EAAUzC,CAAV,EAAuB4D,CAAvB,IAAoC,CAApC,EAA8BnB,EAA9B;AAAyCA,EAAzC,GAAsD,CAAN,CAAAtC,CAAA,CAAEE,CAAF,CAAU,CAAV,CAAc,CAA9D,GACIL,CADJ,CACQ6D,CADR,EACa7D,CADb,EACkB6D,CADlB,GAC6B,CAD7B,EACuBpB,EADvB,EACkCmB,CADlC,EAC6C,CAD7C,EACuCnB,EADvC,EACkDsB,gBAAA,CAAGG,GAAH,CAAO,CAAP,CADlD,CAC8D,CAD9D,EAEGzB,EAFH,GAEgB,CAAN,CAAAtC,CAAA,CAAEE,CAAF,CAAU,CAAV,CAAc,CAFxB,EAOJ,IAAQ,CAAR,CAAI6D,GAAJ,EAAa,CAACH,gBAAA,CAAG,CAAH,CAAd,CAGErD,GAAA,CAAMkD,CAAA,CAAIV,YAAA,CAAarB,QAAA,CAASC,MAAT,CAAgB,CAAhB,CAAb,CAAiC,CAAC+F,EAAlC,CAAsChG,QAAA,CAASC,MAAT,CAAgB,CAAhB,CAAtC,CAAJ,CAAgED,QAAA,CAASC,MAAT,CAAgB,CAAhB,CAHxE,KAIO,CAGLiC,gBAAA,CAAG3C,MAAH,CAAY8C,GAGZ,IAAIN,CAAJ,CAGE,IAAK,EAAE4E,OAAP,CAAgB,EAAEzE,gBAAA,CAAG,EAAEG,GAAL,CAAlB,CAA4BsE,OAA5B,CAAA,CACEzE,gBAAA,CAAGG,GAAH,CAEA,CAFQ,CAER,CAAKA,GAAL,GACE,EAAE5D,MACF,CAAAyD,gBAAA,CAAK,CAAC,CAAD,CAAA,CAAImF,MAAJ,CAAWnF,gBAAX,CAFP,CAQJ,KAAKF,CAAL,CAASE,gBAAT,CAAY3C,MAAZ,CAAoB,CAAC2C,gBAAA,CAAG,EAAEF,CAAL,CAArB,CAAA,EAGK7D,CAAA,CAAI,CAAT,KAAYU,GAAZ,CAAkB,EAAlB,CAAsBV,CAAtB,EAA2B6D,CAA3B,CAA8BnD,GAA9B,EAAqCmB,QAAA,CAASC,MAAT,CAAgBiC,gBAAA,CAAG/D,CAAA,EAAH,CAAhB,CAArC,EAGAU,GAAA,CAAMwC,YAAA,CAAaxC,GAAb;AAAkBJ,MAAlB,CAAqBuB,QAAA,CAASC,MAAT,CAAgB,CAAhB,CAArB,CA1BD,CA8BP,MAAOpB,IA7GsD,CApCtC,CAAb,EAuJd,KAAAuI,IAAO,QAAS,EAAG,CAGjBE,QAASA,SAAQ,CAAChJ,CAAD,CAAI0D,CAAJ,CAAOuF,IAAP,CAAa,CAAA,IAE1BC,MAAQ,CAFkB,CAG1BrJ,EAAIG,CAAJH,CAAMoB,MAHoB,CAI1BkI,IAAMzF,CAANyF,CA34BMC,GAu4BoB,CAK1BC,IAAM3F,CAAN2F,CA54BMD,GA44BNC,CAAsB,CAExB,KAAKrJ,CAAL,CAASA,CAAA,CAAEM,KAAF,EAAT,CAAoBT,CAAA,EAApB,CAAA,CAA0B,CACxB,IAAAyJ,KAAMtJ,CAAA,CAAEH,CAAF,CAANyJ,CA/4BMF,GAg5BN,KAAAG,IAAMvJ,CAAA,CAAEH,CAAF,CAAN0J,CAh5BMH,GAg5BNG,CAAyB,CACzBpG,EAAA,CAAIkG,GAAJ,CAAUC,IAAV,CAAgBC,GAAhB,CAAsBJ,GACtBK,KAAA,CAAOL,GAAP,CAAaG,IAAb,CAAqBnG,CAArB,CAl5BMiG,GAk5BN,CAl5BMA,GAk5BN,CAAmDF,KACnDA,MAAA,EAASM,IAAT,CAAgBP,IAAhB,CAAuB,CAAvB,GAA6B9F,CAA7B,CAn5BMiG,GAm5BN,CAA6C,CAA7C,EAAkDC,GAAlD,CAAwDE,GACxDvJ,EAAA,CAAEH,CAAF,CAAA,CAAO2J,IAAP,CAAcP,IANU,CAStBC,KAAJ,GAAWlJ,CAAX,CAAe,CAACkJ,KAAD,CAAA,CAAQH,MAAR,CAAe/I,CAAf,CAAf,CAEA,OAAOA,EAlBqB,CAqB9ByJ,QAASA,QAAO,CAAC9B,CAAD,CAAIhI,CAAJ,CAAO+J,EAAP,CAAWC,EAAX,CAAe,CAG7B,GAAID,EAAJ,EAAUC,EAAV,CACE,IAAAC,IAAMF,EAAA,CAAKC,EAAL,CAAU,CAAV,CAAc,EADtB,KAIE,KAAK9J,EAAL,CAAS+J,GAAT,CAAe,CAAf,CAAkB/J,EAAlB,CAAsB6J,EAAtB,CAA0B7J,EAAA,EAA1B,CAEE,GAAI8H,CAAA,CAAE9H,EAAF,CAAJ,EAAYF,CAAA,CAAEE,EAAF,CAAZ,CAAkB,CAChB+J,GAAA,CAAMjC,CAAA,CAAE9H,EAAF,CAAA,CAAOF,CAAA,CAAEE,EAAF,CAAP,CAAc,CAAd,CAAkB,EACxB,MAFgB,CAOtB,MAAO+J,IAhBsB,CAmB/BC,QAASA,SAAQ,CAAClC,CAAD,CAAIhI,CAAJ,CAAO+J,EAAP,CAAWT,IAAX,CAAiB,CAIhC,IAHA,IAAIpJ;AAAI,CAGR,CAAO6J,EAAA,EAAP,CAAA,CACE/B,CAAA,CAAE+B,EAAF,CAEA,EAFS7J,CAET,CADAA,CACA,CADI8H,CAAA,CAAE+B,EAAF,CAAA,CAAQ/J,CAAA,CAAE+J,EAAF,CAAR,CAAgB,CAAhB,CAAoB,CACxB,CAAA/B,CAAA,CAAE+B,EAAF,CAAA,CAAQ7J,CAAR,CAAYoJ,IAAZ,CAAmBtB,CAAA,CAAE+B,EAAF,CAAnB,CAA2B/J,CAAA,CAAE+J,EAAF,CAI7B,KAAA,CAAO,CAAC/B,CAAA,CAAE,CAAF,CAAR,EAA2B,CAA3B,CAAgBA,CAAhB,CAAkB1G,MAAlB,CAA8B0G,CAAA,CAAEI,MAAF,CAAS,CAAT,CAAY,CAAZ,CAA9B,EAXgC,CAelC,MAAO,SAAS,CAAC/H,CAAD,CAAI2I,CAAJ,CAAOjB,EAAP,CAAWpF,EAAX,CAAe2G,IAAf,CAAqB,CAAA,IACca,IADd,CAGjC5J,EAAIF,CAAA,CAAEE,CAAF,EAAOyI,CAAP,CAASzI,CAAT,CAAa,CAAb,CAAiB,EACrB0D,KAAAA,KAAK5D,CAAL4D,CAAOhE,CAHT,KAIEmK,GAAKpB,CAALoB,CAAOnK,CAGT,IAAI,EAACgE,IAAD,EAAQA,IAAA,CAAG,CAAH,CAAR,EAAkBmG,EAAlB,EAAyBA,EAAA,CAAG,CAAH,CAAzB,CAAJ,CAEE,MAAO,KAAItK,SAAJ,CAGLO,CAAD,CAAGE,CAAH,EAASyI,CAAT,CAAWzI,CAAX,GAAiB0D,IAAA,CAAKmG,CAAAA,EAAL,EAAWnG,IAAA,CAAG,CAAH,CAAX,EAAoBmG,EAAA,CAAG,CAAH,CAApB,CAA6BA,EAA9C,EAGCnG,IAAA,EAAe,CAAf,EAAMA,IAAA,CAAG,CAAH,CAAN,EAAoB,CAACmG,EAArB,CAA8B,CAA9B,CAA0B7J,CAA1B,CAAkCA,CAAlC,CAAsC,CAHvC,CAAoD8J,GAH9C,CAUT,KAAAC,EAAI,IAAIxK,SAAJ,CAAcS,CAAd,CACJ,KAAAgK,GAAKD,CAALC,CAAOtK,CAAPsK,CAAW,EACX,KAAA/J,EAAIH,CAAJG,CAAMA,CAANA,CAAUwI,CAAVxI,CAAYA,CACZD,EAAA,CAAIwH,EAAJ,CAASvH,CAAT,CAAa,CAER8I,KAAL,GACEA,IAEA,CA/9BC/E,IA+9BD,CADA/D,CACA,CADIgK,QAAA,CAASnK,CAAT,CAAWG,CAAX,CA79BC+B,EA69BD,CACJ,CAD+BiI,QAAA,CAASxB,CAAT,CAAWxI,CAAX,CA79B1B+B,EA69B0B,CAC/B,CAAAhC,CAAA,CAAIA,CAAJ,CA99BKgC,EA89BL,CAAmB,CAHrB,CAQA,KAAKrC,CAAL,CAAS,CAAT,CAAYkK,EAAA,CAAGlK,CAAH,CAAZ,GAAsB+D,IAAA,CAAG/D,CAAH,CAAtB,EAA+B,CAA/B,EAAmCA,CAAA,EAAnC,EAEIkK,EAAA,CAAGlK,CAAH,CAAJ,EAAa+D,IAAA,CAAG/D,CAAH,CAAb,EAAsB,CAAtB,GAA0BM,CAAA,EAE1B,IAAQ,CAAR,CAAID,CAAJ,CACEgK,EAAA,CAAG/H,IAAH,CAAQ,CAAR,CACA;AAAAiI,IAAA,CAAO,CAAA,CAFT,KAGO,CACL,IAAAC,GAAKzG,IAALyG,CAAQpJ,MACR,KAAAqJ,GAAKP,EAALO,CAAQrJ,MACRpB,EAAA,CAAI,CACJK,EAAA,EAAK,CAIL,KAAAmC,EAAIJ,SAAA,CAAUgH,IAAV,EAAkBc,EAAA,CAAG,CAAH,CAAlB,CAA0B,CAA1B,EAII,EAAR,CAAI1H,CAAJ,GACE0H,EAGA,CAHKf,QAAA,CAASe,EAAT,CAAa1H,CAAb,CAAgB4G,IAAhB,CAGL,CAFArF,IAEA,CAFKoF,QAAA,CAASpF,IAAT,CAAavB,CAAb,CAAgB4G,IAAhB,CAEL,CADAqB,EACA,CADKP,EACL,CADQ9I,MACR,CAAAoJ,EAAA,CAAKzG,IAAL,CAAQ3C,MAJV,CAOA,KAAAsJ,GAAKD,EACL,KAAAE,IAAM5G,IAAA,CAAGtD,KAAH,CAAS,CAAT,CAAYgK,EAAZ,CAIN,KAHAR,IAGA,CAHOU,GAGP,CAHWvJ,MAGX,CAAO6I,IAAP,CAAcQ,EAAd,CAAkBE,GAAA,CAAIV,IAAA,EAAJ,CAAlB,CAAgC,CAAhC,EACA,IAAAW,GAAKV,EAAA,CAAGzJ,KAAH,EACLmK,GAAA,CAAK,CAAC,CAAD,CAAA,CAAI1B,MAAJ,CAAW0B,EAAX,CACL,KAAAC,IAAMX,EAAA,CAAG,CAAH,CACFA,GAAA,CAAG,CAAH,CAAJ,EAAad,IAAb,CAAoB,CAApB,EAAuByB,GAAA,EAIvB,GAAG,CACDrI,CAAA,CAAI,CAGJuH,EAAA,CAAMH,OAAA,CAAQM,EAAR,CAAYS,GAAZ,CAAiBF,EAAjB,CAAqBR,IAArB,CAGN,IAAU,CAAV,CAAIF,CAAJ,CAAa,CAIXe,CAAA,CAAOH,GAAA,CAAI,CAAJ,CACHF,GAAJ,EAAUR,IAAV,GAAgBa,CAAhB,CAAuBA,CAAvB,CAA8B1B,IAA9B,EAAsCuB,GAAA,CAAI,CAAJ,CAAtC,EAAgD,CAAhD,EAGAnI,EAAA,CAAIJ,SAAA,CAAU0I,CAAV,CAAiBD,GAAjB,CAaJ,IAAQ,CAAR,CAAIrI,CAAJ,CAAW,CAGLA,CAAJ,EAAS4G,IAAT,GAAe5G,CAAf,CAAmB4G,IAAnB,CAA0B,CAA1B,CAGA,KAAA2B,KAAO5B,QAAA,CAASe,EAAT,CAAa1H,CAAb,CAAgB4G,IAAhB,CACP,KAAA4B,MAAQD,IAARC,CAAa5J,MAOb;IANA6I,IAMA,CANOU,GAMP,CANWvJ,MAMX,CAA0C,CAA1C,EAAOwI,OAAA,CAAQmB,IAAR,CAAcJ,GAAd,CAAmBK,KAAnB,CAA0Bf,IAA1B,CAAP,CAAA,CACEzH,CAAA,EAKA,CAFAwH,QAAA,CAASe,IAAT,CAAeN,EAAA,CAAKO,KAAL,CAAaJ,EAAb,CAAkBV,EAAjC,CAAqCc,KAArC,CAA4C5B,IAA5C,CAEA,CADA4B,KACA,CADQD,IACR,CADa3J,MACb,CAAA2I,CAAA,CAAM,CApBC,CAAX,IA4BW,EAQT,EARIvH,CAQJ,GALEuH,CAKF,CALQvH,CAKR,CALY,CAKZ,EADAuI,IACA,CADOb,EAAA,CAAGzJ,KAAH,EACP,CAAAuK,KAAA,CAAQD,IAAR,CAAa3J,MAGX4J,MAAJ,CAAYf,IAAZ,GAAkBc,IAAlB,CAAyB,CAAC,CAAD,CAAA,CAAI7B,MAAJ,CAAW6B,IAAX,CAAzB,CAGAf,SAAA,CAASW,GAAT,CAAcI,IAAd,CAAoBd,IAApB,CAA0Bb,IAA1B,CACAa,KAAA,CAAOU,GAAP,CAAWvJ,MAGX,IAAW,EAAX,EAAI2I,CAAJ,CAME,IAAA,CAAoC,CAApC,CAAOH,OAAA,CAAQM,EAAR,CAAYS,GAAZ,CAAiBF,EAAjB,CAAqBR,IAArB,CAAP,CAAA,CACEzH,CAAA,EAIA,CADAwH,QAAA,CAASW,GAAT,CAAcF,EAAA,CAAKR,IAAL,CAAYW,EAAZ,CAAiBV,EAA/B,CAAmCD,IAAnC,CAAyCb,IAAzC,CACA,CAAAa,IAAA,CAAOU,GAAP,CAAWvJ,MA9EJ,CAAb,IAiFmB,EAAZ,GAAI2I,CAAJ,GACLvH,CAAA,EACA,CAAAmI,GAAA,CAAM,CAAC,CAAD,CAFD,CAMPN,GAAA,CAAGrK,CAAA,EAAH,CAAA,CAAUwC,CAGNmI,IAAA,CAAI,CAAJ,CAAJ,CACEA,GAAA,CAAIV,IAAA,EAAJ,CADF,CACgBlG,IAAA,CAAG2G,EAAH,CADhB,EAC0B,CAD1B,EAGEC,GACA,CADM,CAAC5G,IAAA,CAAG2G,EAAH,CAAD,CACN,CAAAT,IAAA,CAAO,CAJT,CAjGC,CAAH,OAuGUS,EAAA,EAvGV,CAuGiBF,EAvGjB,EAuGiC,IAvGjC,EAuGuBG,GAAA,CAAI,CAAJ,CAvGvB,GAuG0CtK,CAAA,EAvG1C,CAyGAkK,KAAA,CAAiB,IAAjB,EAAOI,GAAA,CAAI,CAAJ,CAGFN,GAAA,CAAG,CAAH,CAAL;AAAYA,EAAA,CAAGnC,MAAH,CAAU,CAAV,CAAa,CAAb,CA5IP,CA+IP,GA1nCG7D,IA0nCH,EAAI+E,IAAJ,CAAkB,CAGXpJ,CAAA,CAAI,CAAT,KAAYK,CAAZ,CAAgBgK,EAAA,CAAG,CAAH,CAAhB,CAA4B,EAA5B,EAAuBhK,CAAvB,CAAgCA,CAAA,EAAK,EAAL,CAASL,CAAA,EAAzC,EAEAuB,KAAA,CAAM6I,CAAN,CAASvC,EAAT,EAAeuC,CAAf,CAAiB9J,CAAjB,CAAqBN,CAArB,CA9nCKqC,EA8nCL,CAAyB/B,CAAzB,CAAwC,CAAxC,EAA6C,CAA7C,CAAgDmC,EAAhD,CAAoD8H,IAApD,CALgB,CAAlB,IASEH,EACA,CADE9J,CACF,CADMA,CACN,CAAA8J,CAAA,CAAExG,CAAF,CAAM,CAAC2G,IAGT,OAAOH,EApM4B,CA1DpB,CAAb,EA+XN,KAAAtJ,aAAgB,QAAS,EAAG,CAAA,IACtBmK,WAAa,6BADS,CAExBC,SAAW,aAFa,CAGxBC,UAAY,aAHY,CAIxBC,gBAAkB,oBAJM,CAKxBC,iBAAmB,4BAErB,OAAO,SAAS,CAAClL,CAAD,CAAIO,GAAJ,CAAST,KAAT,CAAgBH,CAAhB,CAAmB,CAAA,IAE/BO,EAAIJ,KAAA,CAAQS,GAAR,CAAcA,GAAA,CAAIO,OAAJ,CAAYoK,gBAAZ,CAA8B,EAA9B,CAGpB,IAAID,eAAA,CAAgBvK,IAAhB,CAAqBR,CAArB,CAAJ,CACEF,CAAA,CAAEE,CAAF,CAAMiL,KAAA,CAAMjL,CAAN,CAAA,CAAW,IAAX,CAAsB,CAAJ,CAAAA,CAAA,CAAQ,EAAR,CAAa,CADvC,KAEO,CACL,GAAI,CAACJ,KAAL,CAAY,CAGVI,CAAA,CAAIA,CAAA,CAAEY,OAAF,CAAUgK,UAAV;AAAsB,QAAS,CAAC3H,CAAD,CAAIiI,EAAJ,CAAQC,EAAR,CAAY,CAC7CpC,IAAA,CAAkC,GAA3B,GAACoC,EAAD,CAAMA,EAAA,CAAGvJ,WAAH,EAAN,EAAiC,EAAjC,CAA4C,GAAN,EAAAuJ,EAAA,CAAY,CAAZ,CAAgB,CAC7D,OAAQ1L,EAAD,EAAMA,CAAN,EAAWsJ,IAAX,CAAuB9F,CAAvB,CAAkBiI,EAFoB,CAA3C,CAKJ,IAAIzL,CAAJ,CAAO,CACL,IAAAsJ,KAAOtJ,CAGPO,EAAA,CAAIA,CAAA,CAAEY,OAAF,CAAUiK,QAAV,CAAoB,IAApB,CAAA,CAA0BjK,OAA1B,CAAkCkK,SAAlC,CAA6C,MAA7C,CAJC,CAOP,GAAIzK,GAAJ,EAAWL,CAAX,CAAc,MAAO,KAAIT,SAAJ,CAAcS,CAAd,CAAiB+I,IAAjB,CAfX,CAoBZ,GAAIxJ,SAAJ,CAAc8B,KAAd,CACE,KAAMC,MAAA,CACH,yBADG,EACyB7B,CAAA,CAAI,QAAJ,CAAeA,CAAf,CAAmB,EAD5C,EACkD,WADlD,CACgEY,GADhE,CAAN,CAKFP,CAAA,CAAEE,CAAF,CAAM,IA3BD,CA8BPF,CAAA,CAAEJ,CAAF,CAAMI,CAAN,CAAQG,CAAR,CAAY,IArCqB,CAPT,CAAb,EAyOfiE,EAAA,CAAEkH,aAAF,CAAkBlH,CAAlB,CAAoBmH,GAApB,CAA0BC,QAAS,EAAG,CACpC,IAAIxL,EAAI,IAAIP,SAAJ,CAAc,IAAd,CACE,EAAV,CAAIO,CAAJ,CAAME,CAAN,GAAaF,CAAb,CAAeE,CAAf,CAAmB,CAAnB,CACA,OAAOF,EAH6B,CActCoE,EAAA,CAAEqH,UAAF,CAAeC,QAAS,CAAC/C,CAAD,CAAIhJ,CAAJ,CAAO,CAC7B,MAAO8J,QAAA,CAAQ,IAAR,CAAc,IAAIhK,SAAJ,CAAckJ,CAAd,CAAiBhJ,CAAjB,CAAd,CADsB,CAkB/ByE,EAAA,CAAEuH,aAAF,CAAkBvH,CAAlB,CAAoBsD,EAApB,CAAyBkE,QAAS,CAAClE,EAAD;AAAKpF,EAAL,CAAS,CAAA,IAC/B5C,CAGV,IAAU,IAAV,EAAIgI,EAAJ,CAKE,MAJAxG,SAAA,CAASwG,EAAT,CAAa,CAAb,CA5gDEtB,GA4gDF,CAIO,CAHG,IAAV,EAAI9D,EAAJ,CAAgBA,EAAhB,CAAqBhB,aAArB,CACKJ,QAAA,CAASoB,EAAT,CAAa,CAAb,CAAgB,CAAhB,CAEE,CAAAlB,KAAA,CAAM,IAAI3B,SAAJ,CAPTO,IAOS,CAAN,CAAwB0H,EAAxB,CAPH1H,IAOG,CAA+BG,CAA/B,CAAmC,CAAnC,CAAsCmC,EAAtC,CAGT,IAAI,EAAE1C,EAAF,CAVEI,IAUF,CAAQJ,CAAR,CAAJ,CAAgB,MAAO,KACvByC,GAAA,CA7hDSH,EA6hDT,GAAMxC,CAAN,CAAUE,EAAV,CAAYqB,MAAZ,CAAqB,CAArB,EAA0BkJ,QAAA,CAAS,IAAT,CAAchK,CAAd,CA7hDjB+B,EA6hDiB,CAA1B,CAGA,IAAIxC,CAAJ,CAAQE,EAAA,CAAEF,CAAF,CAAR,CAAc,IAAA,CAAiB,CAAjB,EAAOA,CAAP,CAAW,EAAX,CAAoBA,CAAA,EAAK,EAAL,CAAS2C,EAAA,EAA7B,EACN,CAAR,CAAIA,EAAJ,GAAWA,EAAX,CAAe,CAAf,CAEA,OAAOA,GAnBkC,CA2C3C+B,EAAA,CAAEyH,SAAF,CAAczH,CAAd,CAAgB0E,GAAhB,CAAsBgD,QAAS,CAACnD,CAAD,CAAIhJ,CAAJ,CAAO,CACpC,MAAOmJ,IAAA,CAAI,IAAJ,CAAU,IAAIrJ,SAAJ,CAAckJ,CAAd,CAAiBhJ,CAAjB,CAAV,CAA+B0B,cAA/B,CAA+CC,aAA/C,CAD6B,CAStC8C,EAAA,CAAE2H,kBAAF,CAAuB3H,CAAvB,CAAyB4H,IAAzB,CAAgCC,QAAS,CAACtD,CAAD,CAAIhJ,CAAJ,CAAO,CAC9C,MAAOmJ,IAAA,CAAI,IAAJ,CAAU,IAAIrJ,SAAJ,CAAckJ,CAAd,CAAiBhJ,CAAjB,CAAV,CAA+B,CAA/B,CAAkC,CAAlC,CADuC,CAoBhDyE,EAAA,CAAE8H,eAAF,CAAoB9H,CAApB,CAAsBwE,GAAtB,CAA4BuD,QAAS,CAAC9J,CAAD,CAAIc,CAAJ,CAAO,CAAA,IAChCiJ,QADgC,CAExCpM,EAAI,IAENqC;CAAA,CAAI,IAAI5C,SAAJ,CAAc4C,CAAd,CAGJ,IAAIA,CAAJ,CAAMzC,CAAN,EAAW,CAACyC,CAAA,CAAEgK,SAAF,EAAZ,CACE,KAAM7K,MAAA,CACH,6CADG,CAC4C2C,OAAA,CAAQ9B,CAAR,CAD5C,CAAN,CAIO,IAAT,EAAIc,CAAJ,GAAeA,CAAf,CAAmB,IAAI1D,SAAJ,CAAc0D,CAAd,CAAnB,CAGA,KAAAmJ,OAAe,EAAfA,CAASjK,CAATiK,CAAWnM,CAGX,IAAI,CAACH,CAAD,CAAGJ,CAAP,EAAY,CAACI,CAAA,CAAEJ,CAAF,CAAI,CAAJ,CAAb,EAAiC,CAAjC,EAAuBI,CAAA,CAAEJ,CAAF,CAAI,CAAJ,CAAvB,EAAsC,CAACI,CAAD,CAAGG,CAAzC,EAA4D,CAA5D,EAA8CH,CAA9C,CAAgDJ,CAAhD,CAAkDqB,MAAlD,EAAiE,CAACoB,CAAD,CAAGzC,CAApE,EAAyE,CAACyC,CAAA,CAAEzC,CAAF,CAAI,CAAJ,CAA1E,CAAkF,CAIhF,IAAA+I,EAAI,IAAIlJ,SAAJ,CAAcgI,IAAA,CAAKmB,GAAL,CAAS,CAACzE,OAAA,CAAQnE,CAAR,CAAV,CAAsBsM,MAAA,CAAS,CAAT,CAAaC,KAAA,CAAMlK,CAAN,CAAb,CAAwB,CAAC8B,OAAA,CAAQ9B,CAAR,CAA/C,CAAd,CACJ,OAAOc,EAAA,CAAIwF,CAAA,CAAE6D,GAAF,CAAMrJ,CAAN,CAAJ,CAAewF,CAL0D,CAQlF,IAAA8D,OAAe,CAAfA,CAASpK,CAAToK,CAAWvM,CAEX,IAAIiD,CAAJ,CAAO,CAGL,GAAIA,CAAA,CAAEvD,CAAF,CAAM,CAACuD,CAAA,CAAEvD,CAAF,CAAI,CAAJ,CAAP,CAAgB,CAACuD,CAAD,CAAGjD,CAAvB,CAA0B,MAAO,KAAIT,SAAJ,CAAcuK,GAAd,CAIjC,EAFAoC,QAEA,CAFW,CAACK,MAEZ,EAFsBzM,CAAA,CAAEqM,SAAF,EAEtB,EAFuClJ,CAAA,CAAEkJ,SAAF,EAEvC,IAAcrM,CAAd,CAAkBA,CAAA,CAAEwM,GAAF,CAAMrJ,CAAN,CAAlB,CAPK,CAAP,IAWO,CAAA,GAAU,CAAV,CAAId,CAAJ,CAAMlC,CAAN,GAAsB,CAAtB,CAAgBH,CAAhB,CAAkBG,CAAlB,EAAiC,EAAjC,CAA2BH,CAA3B,CAA6BG,CAA7B,GAA+C,CAAP,EAAAH,CAAA,CAAEG,CAAF,CAElC,CAFkC,CAE3CH,CAAA,CAAEJ,CAAF,CAAI,CAAJ,CAF2C,EAE7B0M,MAF6B;AAET,IAFS,EAEnBtM,CAAA,CAAEJ,CAAF,CAAI,CAAJ,CAFmB,CAIlC,IAJkC,CAI3CI,CAAA,CAAEJ,CAAF,CAAI,CAAJ,CAJ2C,EAI1B0M,MAJ0B,EAIN,SAJM,EAIhBtM,CAAA,CAAEJ,CAAF,CAAI,CAAJ,CAJxB,GAI+C,CAGpD,IAAA8D,EAAU,CAAN,CAAA1D,CAAA,CAAEE,CAAF,EAAWqM,KAAA,CAAMlK,CAAN,CAAX,CAAsB,EAAtB,CAA2B,CAGrB,GAAV,CAAIrC,CAAJ,CAAMG,CAAN,GAAcuD,CAAd,CAAkB,CAAlB,CAAsBA,CAAtB,CAGA,OAAO,KAAIjE,SAAJ,CAAcgN,MAAA,CAAS,CAAT,CAAa/I,CAAb,CAAiBA,CAA/B,CAT6C,CAW3CgB,aAAJ,GAKLhB,CALK,CAKDO,QAAA,CAASS,aAAT,CAnpDGxC,EAmpDH,CAAoC,CAApC,CALC,CAfA,CAuBP,GAAIoK,MAAJ,CAAY,CACV,IAAAI,KAAO,IAAIjN,SAAJ,CAAc,EAAd,CACHgN,OAAJ,GAAYpK,CAAZ,CAAcnC,CAAd,CAAkB,CAAlB,CACAyM,OAAA,CAASJ,KAAA,CAAMlK,CAAN,CAHC,CAAZ,IAIO,CACL,IAAAxC,EAAI4H,IAAA,CAAK8D,GAAL,CAAS,CAACpH,OAAA,CAAQ9B,CAAR,CAAV,CACJsK,OAAA,CAAS9M,CAAT,CAAa,CAFR,CAQP,IAHA8I,CAGA,CAHI,IAAIlJ,SAAJ,CAAc8E,GAAd,CAGJ,CAAA,CAAA,CAAU,CAER,GAAIoI,MAAJ,CAAY,CACVhE,CAAA,CAAIA,CAAA,CAAEiE,KAAF,CAAQ5M,CAAR,CACJ,IAAI,CAAC2I,CAAD,CAAG/I,CAAP,CAAU,KAEN8D,EAAJ,CACMiF,CADN,CACQ/I,CADR,CACUqB,MADV,CACmByC,CADnB,GACsBiF,CADtB,CACwB/I,CADxB,CAC0BqB,MAD1B,CACmCyC,CADnC,EAEW0I,QAFX,GAGEzD,CAHF,CAGMA,CAAA,CAAE6D,GAAF,CAAMrJ,CAAN,CAHN,CAJU,CAWZ,GAAItD,CAAJ,CAAO,CACLA,CAAA,CAAIoC,SAAA,CAAUpC,CAAV,CAAc,CAAd,CACJ,IAAU,CAAV,GAAIA,CAAJ,CAAa,KACb8M,OAAA,CAAS9M,CAAT,CAAa,CAHR,CAAP,IAQE,IAHAwC,CAGI,CAHAA,CAAA,CAAEuK,KAAF,CAAQF,IAAR,CAGA,CAFJtL,KAAA,CAAMiB,CAAN,CAASA,CAAT,CAAWlC,CAAX,CAAe,CAAf;AAAkB,CAAlB,CAEI,CAAM,EAAN,CAAAkC,CAAA,CAAElC,CAAN,CACEwM,MAAA,CAASJ,KAAA,CAAMlK,CAAN,CADX,KAEO,CACLxC,CAAA,CAAI,CAACsE,OAAA,CAAQ9B,CAAR,CACL,IAAU,CAAV,GAAIxC,CAAJ,CAAa,KACb8M,OAAA,CAAS9M,CAAT,CAAa,CAHR,CAOTG,CAAA,CAAIA,CAAA,CAAE4M,KAAF,CAAQ5M,CAAR,CAEA0D,EAAJ,CACM1D,CADN,CACQJ,CADR,EACaI,CADb,CACeJ,CADf,CACiBqB,MADjB,CAC0ByC,CAD1B,GAC6B1D,CAD7B,CAC+BJ,CAD/B,CACiCqB,MADjC,CAC0CyC,CAD1C,EAEW0I,QAFX,GAGEpM,CAHF,CAGMA,CAAA,CAAEwM,GAAF,CAAMrJ,CAAN,CAHN,CAhCQ,CAuCV,GAAIiJ,QAAJ,CAAc,MAAOzD,EACjB8D,OAAJ,GAAY9D,CAAZ,CAAgBpE,GAAA,CAAIuE,GAAJ,CAAQH,CAAR,CAAhB,CAEA,OAAOxF,EAAA,CAAIwF,CAAA,CAAE6D,GAAF,CAAMrJ,CAAN,CAAJ,CAAeO,CAAA,CAAItC,KAAA,CAAMuH,CAAN,CAASjE,aAAT,CAAwBpD,aAAxB,CAnHA8I,IAAAA,EAmHA,CAAJ,CAAmDzB,CApH/B,CAgI5CvE,EAAA,CAAEyI,YAAF,CAAiBC,QAAS,CAACxK,EAAD,CAAK,CAC7B,IAAID,EAAI,IAAI5C,SAAJ,CAAc,IAAd,CACE,KAAV,EAAI6C,EAAJ,CAAgBA,EAAhB,CAAqBhB,aAArB,CACKJ,QAAA,CAASoB,EAAT,CAAa,CAAb,CAAgB,CAAhB,CACL,OAAOlB,MAAA,CAAMiB,CAAN,CAASA,CAAT,CAAWlC,CAAX,CAAe,CAAf,CAAkBmC,EAAlB,CAJsB,CAY/B8B,EAAA,CAAE2I,SAAF,CAAc3I,CAAd,CAAgB4I,EAAhB,CAAqBC,QAAS,CAACtE,CAAD,CAAIhJ,CAAJ,CAAO,CACnC,MAA8C,EAA9C,GAAO8J,OAAA,CAAQ,IAAR,CAAc,IAAIhK,SAAJ,CAAckJ,CAAd,CAAiBhJ,CAAjB,CAAd,CAD4B,CAQrCyE,EAAA,CAAE8I,QAAF,CAAaC,QAAS,EAAG,CACvB,MAAO,CAAC,CAAC,IAAD,CAAMvN,CADS,CASzBwE,EAAA,CAAEgJ,aAAF;AAAkBhJ,CAAlB,CAAoBiD,EAApB,CAAyBgG,QAAS,CAAC1E,CAAD,CAAIhJ,CAAJ,CAAO,CACvC,MAA4C,EAA5C,CAAO8J,OAAA,CAAQ,IAAR,CAAc,IAAIhK,SAAJ,CAAckJ,CAAd,CAAiBhJ,CAAjB,CAAd,CADgC,CASzCyE,EAAA,CAAEkJ,sBAAF,CAA2BlJ,CAA3B,CAA6BmJ,GAA7B,CAAmCC,QAAS,CAAC7E,CAAD,CAAIhJ,CAAJ,CAAO,CACjD,MAAoD,EAApD,IAAQA,CAAR,CAAY8J,OAAA,CAAQ,IAAR,CAAc,IAAIhK,SAAJ,CAAckJ,CAAd,CAAiBhJ,CAAjB,CAAd,CAAZ,GAA+D,CAA/D,GAAyDA,CADR,CASnDyE,EAAA,CAAEiI,SAAF,CAAcoB,QAAS,EAAG,CACxB,MAAO,CAAC,CAAC,IAAD,CAAM7N,CAAd,EAAmBuK,QAAA,CAAS,IAAT,CAAchK,CAAd,CAxwDV+B,EAwwDU,CAAnB,CAAiD,IAAjD,CAAsDtC,CAAtD,CAAwDqB,MAAxD,CAAiE,CADzC,CAS1BmD,EAAA,CAAEsJ,UAAF,CAAetJ,CAAf,CAAiB6C,EAAjB,CAAsB0G,QAAS,CAAChF,CAAD,CAAIhJ,CAAJ,CAAO,CACpC,MAA4C,EAA5C,CAAO8J,OAAA,CAAQ,IAAR,CAAc,IAAIhK,SAAJ,CAAckJ,CAAd,CAAiBhJ,CAAjB,CAAd,CAD6B,CAStCyE,EAAA,CAAEwJ,mBAAF,CAAwBxJ,CAAxB,CAA0ByJ,GAA1B,CAAgCC,QAAS,CAACnF,CAAD,CAAIhJ,CAAJ,CAAO,CAC9C,MAAoD,EAApD,IAAQA,CAAR,CAAY8J,OAAA,CAAQ,IAAR,CAAc,IAAIhK,SAAJ,CAAckJ,CAAd,CAAiBhJ,CAAjB,CAAd,CAAZ,GAAgE,CAAhE,GAA0DA,CADZ,CAQhDyE,EAAA,CAAE+G,KAAF,CAAU4C,QAAS,EAAG,CACpB,MAAO,CAAC,IAAD,CAAM7N,CADO,CAQtBkE,EAAA,CAAE4J,UAAF,CAAeC,QAAS,EAAG,CACzB,MAAgB,EAAhB,CAAO,IAAP,CAAY/N,CADa,CAQ3BkE,EAAA,CAAE8J,UAAF,CAAeC,QAAS,EAAG,CACzB,MAAgB,EAAhB;AAAO,IAAP,CAAYjO,CADa,CAQ3BkE,EAAA,CAAEgK,MAAF,CAAWC,QAAS,EAAG,CACrB,MAAO,CAAC,CAAC,IAAD,CAAMzO,CAAd,EAAgC,CAAhC,EAAmB,IAAA,CAAKA,CAAL,CAAO,CAAP,CADE,CAyBvBwE,EAAA,CAAEkK,KAAF,CAAUC,QAAS,CAAC5F,CAAD,CAAIhJ,CAAJ,CAAO,CAAA,IACpBE,CADoB,CAGtB8H,EADI3H,IACJ2H,CAAMzH,CAERyI,EAAA,CAAI,IAAIlJ,SAAJ,CAAckJ,CAAd,CAAiBhJ,CAAjB,CACJA,EAAA,CAAIgJ,CAAJ,CAAMzI,CAGN,IAAI,CAACyH,CAAL,EAAU,CAAChI,CAAX,CAAc,MAAO,KAAIF,SAAJ,CAAcuK,GAAd,CAGrB,IAAIrC,CAAJ,EAAShI,CAAT,CAEE,MADAgJ,EACO,CADLzI,CACK,CADD,CAACP,CACA,CAZHK,IAYG,CAAEkI,IAAF,CAAOS,CAAP,CAGL6F,KAAAA,EAfExO,IAeFwO,CAAOrO,CAAPqO,CAn2DKtM,EAk1De,KAkBtBuM,GAAK9F,CAAL8F,CAAOtO,CAAPsO,CAp2DOvM,EAk1De,CAmBtB0B,GAjBI5D,IAiBJ4D,CAAOhE,CAnBe,CAoBtBmK,GAAKpB,CAALoB,CAAOnK,CAET,IAAI,CAAC4O,CAAL,EAAW,CAACC,EAAZ,CAAgB,CAGd,GAAI,CAAC7K,EAAL,EAAW,CAACmG,EAAZ,CAAgB,MAAOnG,GAAA,EAAM+E,CAAA,CAAEzI,CAAF,CAAM,CAACP,CAAP,CAAUgJ,CAAhB,EAAqB,IAAIlJ,SAAJ,CAAcsK,EAAA,CAvBtD/J,IAuBsD,CAASgK,GAAvB,CAG5C,IAAI,CAACpG,EAAA,CAAG,CAAH,CAAL,EAAc,CAACmG,EAAA,CAAG,CAAH,CAAf,CAGE,MAAOA,GAAA,CAAG,CAAH,CAAA,EAASpB,CAAA,CAAEzI,CAAF,CAAM,CAACP,CAAP,CAAUgJ,CAAnB,EAAwB,IAAIlJ,SAAJ,CAAcmE,EAAA,CAAG,CAAH,CAAA,CA7B3C5D,IA6B2C,CAG3B,CAAjB,EAAAsB,aAAA,CAAqB,EAArB,CAA0B,CAHI,CATnB,CAgBhBkN,CAAA,CAAKrE,QAAA,CAASqE,CAAT,CACLC,GAAA,CAAKtE,QAAA,CAASsE,EAAT,CACL7K,GAAA,CAAKA,EAAA,CAAGtD,KAAH,EAGL,IAAIqH,CAAJ,CAAQ6G,CAAR,CAAaC,EAAb,CAAiB,CAEf,CAAIC,CAAJ,CAAe,CAAf,CAAW/G,CAAX,GACEA,CACA,CADI,CAACA,CACL,CAAAgH,CAAA,CAAI/K,EAFN,GAIE6K,EACA,CADKD,CACL,CAAAG,CAAA,CAAI5E,EALN,CAQA4E,EAAA,CAAEnG,OAAF,EAGA;IAAK7I,CAAL,CAASgI,CAAT,CAAYhI,CAAA,EAAZ,CAAiBgP,CAAA,CAAExM,IAAF,CAAO,CAAP,CAAjB,EACAwM,CAAA,CAAEnG,OAAF,EAde,CAAjB,IAoBE,KAFAlF,CAEK,CAFD,CAACoL,CAAD,EAAS/G,CAAT,CAAa/D,EAAb,CAAgB3C,MAAhB,GAA2BtB,CAA3B,CAA+BoK,EAA/B,CAAkC9I,MAAlC,GAA6C0G,CAA7C,CAAiDhI,CAEhD,CAAAgI,CAAA,CAAIhI,CAAJ,CAAQ,CAAb,CAAgBA,CAAhB,CAAoB2D,CAApB,CAAuB3D,CAAA,EAAvB,CAEE,GAAIiE,EAAA,CAAGjE,CAAH,CAAJ,EAAaoK,EAAA,CAAGpK,CAAH,CAAb,CAAoB,CAClB+O,CAAA,CAAO9K,EAAA,CAAGjE,CAAH,CAAP,CAAeoK,EAAA,CAAGpK,CAAH,CACf,MAFkB,CAQpB+O,CAAJ,GAAUC,CAAyB,CAArB/K,EAAqB,CAAjBA,EAAiB,CAAZmG,EAAY,CAARA,EAAQ,CAAH4E,CAAG,CAAAhG,CAAA,CAAEzI,CAAF,CAAM,CAACyI,CAAD,CAAGzI,CAA5C,CAEAP,EAAA,EAAK2D,CAAL,CAASyG,EAAT,CAAY9I,MAAZ,GAAuBpB,CAAvB,CAA2B+D,EAA3B,CAA8B3C,MAA9B,CAIA,IAAQ,CAAR,CAAItB,CAAJ,CAAW,IAAA,CAAOA,CAAA,EAAP,CAAYiE,EAAA,CAAG/D,CAAA,EAAH,CAAZ,CAAsB,CAAtB,EAIX,IAHAF,CAGA,CAt6DKuE,IAs6DL,CAHW,CAGX,CAAOZ,CAAP,CAAWqE,CAAX,CAAA,CAAe,CAEb,GAAI/D,EAAA,CAAG,EAAEN,CAAL,CAAJ,CAAcyG,EAAA,CAAGzG,CAAH,CAAd,CAAqB,CACnB,IAAKzD,CAAL,CAASyD,CAAT,CAAYzD,CAAZ,EAAiB,CAAC+D,EAAA,CAAG,EAAE/D,CAAL,CAAlB,CAA2B+D,EAAA,CAAG/D,CAAH,CAA3B,CAAmCF,CAAnC,EACA,EAAEiE,EAAA,CAAG/D,CAAH,CACF+D,GAAA,CAAGN,CAAH,CAAA,EA36DCY,IAw6DkB,CAMrBN,EAAA,CAAGN,CAAH,CAAA,EAASyG,EAAA,CAAGzG,CAAH,CARI,CAYf,IAAA,CAAgB,CAAhB,EAAOM,EAAA,CAAG,CAAH,CAAP,CAAmBA,EAAA,CAAGmE,MAAH,CAAU,CAAV,CAAa,CAAb,CAAA,CAAiB,EAAE0G,EAAtC,EAGA,MAAK7K,GAAA,CAAG,CAAH,CAAL,CAWOP,SAAA,CAAUsF,CAAV,CAAa/E,EAAb,CAAiB6K,EAAjB,CAXP,EAIE9F,CAEOA,CAFLzI,CAEKyI,CAFgB,CAAjB,EAAArH,aAAA,CAAqB,EAArB,CAA0B,CAEzBqH,CADPA,CACOA,CADL/I,CACK+I,CADD,CAACA,CAAD,CAAGxI,CAAH,CAAO,CAAP,CACCwI,CAAAA,CANT,CAlGwB,CAsI1BvE,EAAA,CAAEwK,MAAF,CAAWxK,CAAX,CAAaoI,GAAb,CAAmBqC,QAAS,CAAClG,CAAD,CAAIhJ,CAAJ,CAAO,CAIjCgJ,CAAA,CAAI,IAAIlJ,SAAJ,CAAckJ,CAAd,CAAiBhJ,CAAjB,CAGJ,IAAI,CALEK,IAKF,CAAGJ,CAAP,EAAY,CAAC+I,CAAD,CAAGzI,CAAf,EAAoByI,CAApB,CAAsB/I,CAAtB;AAA2B,CAAC+I,CAAA,CAAE/I,CAAF,CAAI,CAAJ,CAA5B,CACE,MAAO,KAAIH,SAAJ,CAAcuK,GAAd,CAGF,IAAI,CAACrB,CAAD,CAAG/I,CAAP,EATDI,IASC,CAAcJ,CAAd,EAAmB,CATpBI,IASqB,CAAEJ,CAAF,CAAI,CAAJ,CAApB,CACL,MAAO,KAAIH,SAAJ,CAVHO,IAUG,CAGT,IAAmB,CAAnB,EAAIyE,WAAJ,CAAsB,CAIpB,IAAAvE,EAAIyI,CAAJzI,CAAMA,CACNyI,EAAA,CAAEzI,CAAF,CAAM,CACN+J,EAAA,CAAInB,GAAA,CAnBA9I,IAmBA,CAAO2I,CAAP,CAAU,CAAV,CAAa,CAAb,CACJA,EAAA,CAAEzI,CAAF,CAAMA,CACN+J,EAAA,CAAE/J,CAAF,EAAOA,CARa,CAAtB,IAUE+J,EAAA,CAAInB,GAAA,CAvBA9I,IAuBA,CAAO2I,CAAP,CAAU,CAAV,CAAalE,WAAb,CAGNkE,EAAA,CA1BM3I,IA0BF,CAAEsO,KAAF,CAAQrE,CAAA,CAAE2C,KAAF,CAAQjE,CAAR,CAAR,CAGCA,EAAA,CAAE/I,CAAF,CAAI,CAAJ,CAAL,EAA8B,CAA9B,EAAe6E,WAAf,GAAiCkE,CAAjC,CAAmCzI,CAAnC,CA7BMF,IA6BN,CAAyCE,CAAzC,CAEA,OAAOyI,EAjC0B,CAyDnCvE,EAAA,CAAE0K,YAAF,CAAiB1K,CAAjB,CAAmBwI,KAAnB,CAA2BmC,QAAS,CAACpG,CAAD,CAAIhJ,CAAJ,CAAO,CAAA,IAIvCiE,GADI5D,IACJ4D,CAAOhE,CAJgC,CAKvCmK,IAAMpB,CAANoB,CAAU,IAAItK,SAAJ,CAAckJ,CAAd,CAAiBhJ,CAAjB,CAAVoK,EAA+BnK,CAGjC,IAAI,EAACgE,EAAD,EAAQmG,EAAR,EAAenG,EAAA,CAAG,CAAH,CAAf,EAAyBmG,EAAA,CAAG,CAAH,CAAzB,CAAJ,CAmBE,MAhBI,CARA/J,IAQA,CAAGE,CAAP,EAAY,CAACyI,CAAD,CAAGzI,CAAf,EAAoB0D,EAApB,EAA0B,CAACA,EAAA,CAAG,CAAH,CAA3B,EAAoC,CAACmG,EAArC,EAA2CA,EAA3C,EAAiD,CAACA,EAAA,CAAG,CAAH,CAAlD,EAA2D,CAACnG,EAA5D,CACE+E,CADF,CACI/I,CADJ,CACQ+I,CADR,CACUxI,CADV,CACcwI,CADd,CACgBzI,CADhB,CACoB,IADpB,EAGEyI,CAGA,CAHEzI,CAGF,EAdEF,IAcF,CAHSE,CAGT,CAAK0D,EAAL,EAAYmG,EAAZ,EAKEpB,CACA,CADE/I,CACF,CADM,CAAC,CAAD,CACN,CAAA+I,CAAA,CAAExI,CAAF,CAAM,CANR,EACEwI,CADF,CACI/I,CADJ,CACQ+I,CADR,CACUxI,CADV,CACc,IAPhB,CAgBOwI,CAAAA,CAGTxI,EAAA,CAAIgK,QAAA,CA3BEnK,IA2BF,CAAWG,CAAX;AA/iEK+B,EA+iEL,CAAJ,CAA+BiI,QAAA,CAASxB,CAAT,CAAWxI,CAAX,CA/iEtB+B,EA+iEsB,CAC/ByG,EAAA,CAAEzI,CAAF,EA5BMF,IA4BN,CAASE,CACT,KAAA8O,IAAMpL,EAANoL,CAAS/N,MACT,KAAAgO,EAAMlF,EAANkF,CAAShO,MAGT,IAAI+N,GAAJ,CAAUC,CAAV,CAAe,CAAA,IAAAC,GAAKtL,EAAIA,GAAT,CAAcmG,EAAIA,GAAlB,CAAuBmF,EAAvB,KAA2BrP,EAAImP,GAAKA,IAApC,CAA0CC,CAAKA,EAA/C,CAAqDpP,CAArD,CAGVA,CAAA,CAAImP,GAAJ,CAAUC,CAAf,KAAoBC,EAApB,CAAyB,EAAzB,CAA6BrP,CAAA,EAA7B,CAAkCqP,EAAA,CAAG/M,IAAH,CAAQ,CAAR,CAAlC,EAKA,IAAKtC,CAAL,CAASoP,CAAT,CAAqB,CAArB,EAAc,EAAEpP,CAAhB,CAAA,CAAyB,CACvB,IAAAD,EAAI,CACJ,KAAAuP,IAAMpF,EAAA,CAAGlK,CAAH,CAANsP,CA3jEQ/F,GA4jER,KAAAgG,IAAMrF,EAAA,CAAGlK,CAAH,CAANuP,CA5jEQhG,GA4jERgG,CAAyB,CAEpB,KAAA1L,EAAIsL,GAAT,KAAc1L,CAAd,CAAkBzD,CAAlB,CAAsB6D,CAAtB,CAAyBJ,CAAzB,CAA6BzD,CAA7B,CAAA,CAAiC,CAC/B,IAAAyJ,IAAM1F,EAAA,CAAG,EAAEF,CAAL,CAAN4F,CA/jEMF,GAgkEN,KAAAG,IAAM3F,EAAA,CAAGF,CAAH,CAAN6F,CAhkEMH,GAgkENG,CAAyB,CACzB,KAAApG,EAAIiM,GAAJjM,CAAUmG,GAAVnG,CAAgBoG,GAAhBpG,CAAsBgM,GACtB7F,IAAA,CAAM6F,GAAN,CAAY7F,GAAZ,CAAoBnG,CAApB,CAlkEMiG,GAkkEN,CAlkEMA,GAkkEN,CAAgD8F,EAAA,CAAG5L,CAAH,CAAhD,CAAwD1D,CACxDA,EAAA,EAAK0J,GAAL,CAxkECpF,IAwkED,CAAkB,CAAlB,GAAwBf,CAAxB,CAnkEMiG,GAmkEN,CAAuC,CAAvC,EAA4CgG,GAA5C,CAAkD7F,GAClD2F,GAAA,CAAG5L,CAAA,EAAH,CAAA,CAAUgG,GAAV,CAzkECpF,IAmkE8B,CASjCgL,EAAA,CAAG5L,CAAH,CAAA,CAAQ1D,CAde,CAiBrBA,CAAJ,CACE,EAAEO,CADJ,CAGE+O,EAAA,CAAGnH,MAAH,CAAU,CAAV,CAAa,CAAb,CAGF,OAAO1E,UAAA,CAAUsF,CAAV,CAAauG,EAAb,CAAiB/O,CAAjB,CAnEkC,CA2E3CiE,EAAA,CAAEiL,OAAF,CAAYC,QAAS,EAAG,CACtB,IAAItP,EAAI,IAAIP,SAAJ,CAAc,IAAd,CACRO,EAAA,CAAEE,CAAF,CAAM,CAACF,CAAD,CAAGE,CAAT,EAAc,IACd;MAAOF,EAHe,CA2BxBoE,EAAA,CAAE8D,IAAF,CAASqH,QAAS,CAAC5G,CAAD,CAAIhJ,CAAJ,CAAO,CACvB,IAEEgI,EADI3H,IACJ2H,CAAMzH,CAERyI,EAAA,CAAI,IAAIlJ,SAAJ,CAAckJ,CAAd,CAAiBhJ,CAAjB,CACJA,EAAA,CAAIgJ,CAAJ,CAAMzI,CAGN,IAAI,CAACyH,CAAL,EAAU,CAAChI,CAAX,CAAc,MAAO,KAAIF,SAAJ,CAAcuK,GAAd,CAGpB,IAAIrC,CAAJ,EAAShI,CAAT,CAEC,MADAgJ,EACO,CADLzI,CACK,CADD,CAACP,CACA,CAZHK,IAYG,CAAEsO,KAAF,CAAQ3F,CAAR,CAGL6F,EAAAA,CAfExO,IAeFwO,CAAOrO,CAAPqO,CAxoEKtM,EAunEc,KAkBrBuM,GAAK9F,CAAL8F,CAAOtO,CAAPsO,CAzoEOvM,EAunEc,CAmBrB0B,GAjBI5D,IAiBJ4D,CAAOhE,CAnBc,CAoBrBmK,GAAKpB,CAALoB,CAAOnK,CAET,IAAI,CAAC4O,CAAL,EAAW,CAACC,EAAZ,CAAgB,CAGd,GAAI,CAAC7K,EAAL,EAAW,CAACmG,EAAZ,CAAgB,MAAO,KAAItK,SAAJ,CAAckI,CAAd,CAAkB,CAAlB,CAIvB,IAAI,CAAC/D,EAAA,CAAG,CAAH,CAAL,EAAc,CAACmG,EAAA,CAAG,CAAH,CAAf,CAAsB,MAAOA,GAAA,CAAG,CAAH,CAAA,CAAQpB,CAAR,CAAY,IAAIlJ,SAAJ,CAAcmE,EAAA,CAAG,CAAH,CAAA,CA3BnD5D,IA2BmD,CAAgB,CAAhB,CAAY2H,CAA1B,CAP3B,CAUhB6G,CAAA,CAAKrE,QAAA,CAASqE,CAAT,CACLC,GAAA,CAAKtE,QAAA,CAASsE,EAAT,CACL7K,GAAA,CAAKA,EAAA,CAAGtD,KAAH,EAGL,IAAIqH,CAAJ,CAAQ6G,CAAR,CAAaC,EAAb,CAAiB,CACP,CAAR,CAAI9G,CAAJ,EACE8G,EACA,CADKD,CACL,CAAAG,CAAA,CAAI5E,EAFN,GAIEpC,CACA,CADI,CAACA,CACL,CAAAgH,CAAA,CAAI/K,EALN,CASA,KADA+K,CAAA,CAAEnG,OAAF,EACA,CAAOb,CAAA,EAAP,CAAYgH,CAAA,CAAExM,IAAF,CAAO,CAAP,CAAZ,EACAwM,CAAA,CAAEnG,OAAF,EAXe,CAcjBb,CAAA,CAAI/D,EAAJ,CAAO3C,MACPtB,EAAA,CAAIoK,EAAJ,CAAO9I,MAGK,EAAZ,CAAI0G,CAAJ,CAAQhI,CAAR,GAAegP,CAAyB,CAArB5E,EAAqB,CAAjBA,EAAiB,CAAZnG,EAAY,CAARA,EAAQ,CAAH+K,CAAG,CAAAhP,CAAA,CAAIgI,CAA5C,CAGA,KAAKA,CAAL,CAAS,CAAT,CAAYhI,CAAZ,CAAA,CACEgI,CACA,EADK/D,EAAA,CAAG,EAAEjE,CAAL,CACL,CADeiE,EAAA,CAAGjE,CAAH,CACf;AADuBoK,EAAA,CAAGpK,CAAH,CACvB,CAD+BgI,CAC/B,EAprEGzD,IAorEH,CAD2C,CAC3C,CAAAN,EAAA,CAAGjE,CAAH,CAAA,CAprEGuE,IAorEK,GAASN,EAAA,CAAGjE,CAAH,CAAT,CAAiB,CAAjB,CAAqBiE,EAAA,CAAGjE,CAAH,CAArB,CAprELuE,IAurEDyD,EAAJ,GACE/D,EACA,CADK,CAAC+D,CAAD,CAAA,CAAIoB,MAAJ,CAAWnF,EAAX,CACL,CAAA,EAAE6K,EAFJ,CAOA,OAAOpL,UAAA,CAAUsF,CAAV,CAAa/E,EAAb,CAAiB6K,EAAjB,CAtEgB,CAyFzBrK,EAAA,CAAEoL,SAAF,CAAcpL,CAAd,CAAgBZ,EAAhB,CAAqBiM,QAAS,CAACjM,EAAD,CAAKlB,EAAL,CAAS,CAIrC,GAAU,IAAV,EAAIkB,EAAJ,EAAkBA,EAAlB,GAAyB,CAAC,CAACA,EAA3B,CAKE,MAJAtC,SAAA,CAASsC,EAAT,CAAa,CAAb,CA5sEE4C,GA4sEF,CAIO,CAHG,IAAV,EAAI9D,EAAJ,CAAgBA,EAAhB,CAAqBhB,aAArB,CACKJ,QAAA,CAASoB,EAAT,CAAa,CAAb,CAAgB,CAAhB,CAEE,CAAAlB,KAAA,CAAM,IAAI3B,SAAJ,CAPTO,IAOS,CAAN,CAAwBwD,EAAxB,CAA4BlB,EAA5B,CAGT,IAAI,EAAE1C,EAAF,CAVEI,IAUF,CAAQJ,CAAR,CAAJ,CAAgB,MAAO,KACvB,KAAAF,EAAIE,EAAJF,CAAMuB,MAANvB,CAAe,CACf,KAAA2C,EA9tESH,EA8tETG,CAAI3C,CAAJ2C,CAAmB,CAEnB,IAAI3C,CAAJ,CAAQE,EAAA,CAAEF,CAAF,CAAR,CAAc,CAGZ,IAAA,CAAiB,CAAjB,EAAOA,CAAP,CAAW,EAAX,CAAoBA,CAAA,EAAK,EAAL,CAAS2C,CAAA,EAA7B,EAGA,IAAK3C,CAAL,CAASE,EAAA,CAAE,CAAF,CAAT,CAAoB,EAApB,EAAeF,CAAf,CAAwBA,CAAA,EAAK,EAAL,CAAS2C,CAAA,EAAjC,EANY,CASVmB,EAAJ,EAvBMxD,IAuBN,CAAYG,CAAZ,CAAgB,CAAhB,CAAoBkC,CAApB,GAAuBA,CAAvB,CAvBMrC,IAuBN,CAA6BG,CAA7B,CAAiC,CAAjC,CAEA,OAAOkC,EA3B8B,CAuCvC+B,EAAA,CAAEsL,SAAF,CAAcC,QAAS,CAACjM,CAAD,CAAI,CACzBxC,QAAA,CAASwC,CAAT,CAAY,iBAAZ,CAvvEiB1B,gBAuvEjB,CACA,OAAO,KAAA,CAAK4K,KAAL,CAAW,IAAX;AAAkBlJ,CAAlB,CAFkB,CAiB3BU,EAAA,CAAEwL,UAAF,CAAexL,CAAf,CAAiByL,IAAjB,CAAwBC,QAAS,EAAG,CAGhClQ,IAAAA,EADII,IACJJ,CAAMA,CAH0B,KAIhCM,EAFIF,IAEJE,CAAMA,CAJ0B,CAKhCC,EAHIH,IAGJG,CAAMA,CAL0B,CAMhCuH,GAAKrG,cAALqG,CAAsB,CANU,CAOhCgF,KAAO,IAAIjN,SAAJ,CAAc,KAAd,CAGT,IAAU,CAAV,GAAIS,CAAJ,EAAe,CAACN,CAAhB,EAAqB,CAACA,CAAA,CAAE,CAAF,CAAtB,CACE,MAAO,KAAIH,SAAJ,CAAc,CAACS,CAAD,EAAU,CAAV,CAAMA,CAAN,GAAgB,CAACN,CAAjB,EAAsBA,CAAA,CAAE,CAAF,CAAtB,EAA8BoK,GAA9B,CAAoCpK,CAAA,CATrDI,IASqD,CAAQ,CAAR,CAAY,CAA9D,CAITE,EAAA,CAAIuH,IAAA,CAAKoI,IAAL,CAAU,CAAC1L,OAAA,CAbTnE,IAaS,CAAX,CAIJ,IAAS,CAAT,EAAIE,CAAJ,EAAcA,CAAd,EAAmB,CAAnB,CAAuB,CAAvB,CAA0B,CACxBmC,CAAA,CAAIM,aAAA,CAAc/C,CAAd,CACsB,EAA1B,GAAKyC,CAAL,CAAOpB,MAAP,CAAgBd,CAAhB,EAAqB,CAArB,GAA6BkC,CAA7B,EAAkC,GAAlC,CACAnC,EAAA,CAAIuH,IAAA,CAAKoI,IAAL,CAAU,CAACxN,CAAX,CACJlC,EAAA,CAAIgK,QAAA,EAAUhK,CAAV,CAAc,CAAd,EAAmB,CAAnB,CAAJ,EAAiC,CAAjC,CAA6BA,CAA7B,EAAsCA,CAAtC,CAA0C,CAA1C,CAEID,EAAJ,EAAS,CAAT,CAAa,CAAb,CACEmC,CADF,CACM,IADN,CACalC,CADb,EAGEkC,CACA,CADInC,CAAA,CAAE4C,aAAF,EACJ,CAAAT,CAAA,CAAIA,CAAA,CAAE/B,KAAF,CAAQ,CAAR,CAAW+B,CAAA,CAAExB,OAAF,CAAU,GAAV,CAAX,CAA4B,CAA5B,CAAJ,CAAqCV,CAJvC,CAOA,KAAAsD,EAAI,IAAIhE,SAAJ,CAAc4C,CAAd,CAboB,CAA1B,IAeEoB,EAAA,CAAI,IAAIhE,SAAJ,CAAcS,CAAd,CAAkB,EAAlB,CAON,IAAIuD,CAAA,CAAE7D,CAAF,CAAI,CAAJ,CAAJ,CAME,IALAO,CAEA,CAFIsD,CAEJ,CAFMtD,CAEN,CADAD,CACA,CADIC,CACJ,CADQuH,EACR,CAAQ,CAAR,CAAIxH,CAAJ,GAAWA,CAAX,CAAe,CAAf,CAGA,CAAA,CAAA,CAAU,CACR,IAAAyO,EAAIlL,CACJA;CAAA,CAAIiJ,IAAA,CAAKE,KAAL,CAAW+B,CAAA,CAAEzG,IAAF,CAAOY,GAAA,CA/CpB9I,IA+CoB,CAAO2O,CAAP,CAAUjH,EAAV,CAAc,CAAd,CAAP,CAAX,CAEJ,IAAI/E,aAAA,CAAcgM,CAAd,CAAgB/O,CAAhB,CAAA,CAAmBU,KAAnB,CAAyB,CAAzB,CAA4BJ,CAA5B,CAAJ,GAAuC,CAACmC,CAAD,CAAKM,aAAA,CAAcc,CAAd,CAAgB7D,CAAhB,CAAL,EAAyBU,KAAzB,CAA+B,CAA/B,CAAkCJ,CAAlC,CAAvC,CAWE,GANIuD,CAMA,CANEtD,CAMF,CANMA,CAMN,EANS,EAAED,CAMX,CALJmC,CAKI,CALAA,CAAA,CAAE/B,KAAF,CAAQJ,CAAR,CAAY,CAAZ,CAAeA,CAAf,CAAmB,CAAnB,CAKA,CAAK,MAAL,EAAAmC,CAAA,EAAe,CAAC0N,GAAhB,EAA4B,MAA5B,EAAuB1N,CAA3B,CAAwC,CAItC,GAAI,CAAC0N,GAAL,GACE3O,KAAA,CAAMuN,CAAN,CAASA,CAAT,CAAWxO,CAAX,CAAekB,cAAf,CAAgC,CAAhC,CAAmC,CAAnC,CAEI,CAAAsN,CAAA,CAAE/B,KAAF,CAAQ+B,CAAR,CAAA,CAAW3B,EAAX,CAnERhN,IAmEQ,CAHN,EAGwB,CACpByD,CAAA,CAAIkL,CACJ,MAFoB,CAMxBjH,EAAA,EAAM,CACNxH,EAAA,EAAK,CACL,KAAA6P,IAAM,CAfgC,CAAxC,IAgBO,CAIL,GAAI,CAAC,CAAC1N,CAAN,EAAW,CAAC,CAACA,CAAA,CAAE/B,KAAF,CAAQ,CAAR,CAAb,EAA0C,GAA1C,EAA2B+B,CAAA,CAAEV,MAAF,CAAS,CAAT,CAA3B,CAA+C,CAG7CP,KAAA,CAAMqC,CAAN,CAASA,CAAT,CAAWtD,CAAX,CAAekB,cAAf,CAAgC,CAAhC,CAAmC,CAAnC,CACA,KAAA8B,EAAI,CAACM,CAAA,CAAEmJ,KAAF,CAAQnJ,CAAR,CAAA,CAAWuJ,EAAX,CApFThN,IAoFS,CAJwC,CAO/C,KAXK,CA/BD,CAgDZ,MAAOoB,MAAA,CAAMqC,CAAN,CAASA,CAAT,CAAWtD,CAAX,CAAekB,cAAf,CAAgC,CAAhC,CAAmCC,aAAnC,CAAkD6B,CAAlD,CA/F2B,CA4GpCiB,EAAA,CAAEtB,aAAF,CAAkBkN,QAAS,CAACtI,EAAD,CAAKpF,EAAL,CAAS,CACxB,IAAV,EAAIoF,EAAJ,GACExG,QAAA,CAASwG,EAAT,CAAa,CAAb,CA72EEtB,GA62EF,CACA,CAAAsB,EAAA,EAFF,CAIA,OAAOtF,gBAAA,CAAO,IAAP;AAAasF,EAAb,CAAiBpF,EAAjB,CAAqB,CAArB,CAL2B,CAqBpC8B,EAAA,CAAE6L,OAAF,CAAYC,QAAS,CAACxI,EAAD,CAAKpF,EAAL,CAAS,CAClB,IAAV,EAAIoF,EAAJ,GACExG,QAAA,CAASwG,EAAT,CAAa,CAAb,CAl4EEtB,GAk4EF,CACA,CAAAsB,EAAA,CAAKA,EAAL,CAAU,IAAV,CAAevH,CAAf,CAAmB,CAFrB,CAIA,OAAOiC,gBAAA,CAAO,IAAP,CAAasF,EAAb,CAAiBpF,EAAjB,CALqB,CAkC9B8B,EAAA,CAAE+L,QAAF,CAAaC,QAAS,CAAC1I,EAAD,CAAKpF,EAAL,CAASF,MAAT,CAAiB,CAIrC,GAAc,IAAd,EAAIA,MAAJ,CACY,IAAV,EAAIsF,EAAJ,EAAkBpF,EAAlB,EAAqC,QAArC,EAAwB,MAAOA,GAA/B,EACEF,MACA,CADSE,EACT,CAAAA,EAAA,CAAK,IAFP,EAGWoF,EAAJ,EAAuB,QAAvB,EAAU,MAAOA,GAAjB,EACLtF,MACA,CADSsF,EACT,CAAAA,EAAA,CAAKpF,EAAL,CAAU,IAFL,EAILF,MAJK,CAIIuC,MARb,KAUO,IAAqB,QAArB,EAAI,MAAOvC,OAAX,CACL,KAAMZ,MAAA,CACH,4CADG,CAC2CY,MAD3C,CAAN,CAIF7B,EAAA,CAjBMP,IAiBA,CAAEiQ,OAAF,CAAUvI,EAAV,CAAcpF,EAAd,CAEN,IAnBMtC,IAmBN,CAAMJ,CAAN,CAAS,CAEL0I,IAAAA,EAAM/H,EAAA,CAAI8P,KAAJ,CAAU,GAAV,CACNC,GAAAA,CAAK,CAAClO,MAAD,CAAQyC,SACb0L,GAAAA,CAAK,CAACnO,MAAD,CAAQ0C,kBAJR,KAKLC;AAAiB3C,MAAjB2C,CAAwBA,cAAxBA,EAA0C,EALrC,CAMLyL,QAAUlI,CAAA,CAAI,CAAJ,CANL,CAOLmI,aAAenI,CAAA,CAAI,CAAJ,CAPV,CAQLoI,MAAc,CAAdA,CA3BE1Q,IA2BF0Q,CAAUxQ,CARL,CASLyQ,UAAYD,KAAA,CAAQF,OAAA,CAAQlQ,KAAR,CAAc,CAAd,CAAR,CAA2BkQ,OATlC,CAULzQ,IAAM4Q,SAAN5Q,CAAgBkB,MAEdsP,GAAJ,GAAQ1Q,CAAyB,CAArByQ,EAAqB,CAAjBA,EAAiB,CAAZC,EAAY,CAARA,EAAQ,CAAH1Q,CAAG,CAAAE,GAAA,EAAOF,CAAxC,CAEA,IAAS,CAAT,CAAIyQ,EAAJ,EAAoB,CAApB,CAAcvQ,GAAd,CAAuB,CACrBF,CAAA,CAAIE,GAAJ,CAAUuQ,EAAV,EAAgBA,EAEhB,KADAE,OACA,CADUG,SAAA,CAAUC,MAAV,CAAiB,CAAjB,CAAoB/Q,CAApB,CACV,CAAOA,CAAP,CAAWE,GAAX,CAAgBF,CAAhB,EAAqByQ,EAArB,CAAyBE,OAAA,EAAWzL,cAAX,CAA4B4L,SAAA,CAAUC,MAAV,CAAiB/Q,CAAjB,CAAoByQ,EAApB,CAC5C,EAAT,CAAIC,EAAJ,GAAYC,OAAZ,EAAuBzL,cAAvB,CAAwC4L,SAAA,CAAUrQ,KAAV,CAAgBT,CAAhB,CAAxC,CACI6Q,MAAJ,GAAWF,OAAX,CAAqB,GAArB,CAA2BA,OAA3B,CALqB,CAQvBjQ,EAAA,CAAMkQ,YAAA,CACHD,OADG,EACQpO,MADR,CACe4C,gBADf,EACmC,EADnC,GAC0C,CAACuL,EAAD,CAAM,CAACnO,MAAD,CAAQ6C,iBAAd,EAC5CwL,YAAA,CAAa3P,OAAb,CAAqB,IAAI+P,MAAJ,CAAW,MAAX,CAAoBN,EAApB,CAAyB,MAAzB,CAAiC,GAAjC,CAArB;AACD,OADC,EACOnO,MADP,CACc8C,sBADd,EACwC,EADxC,EAD4C,CAG5CuL,YAJE,EAKHD,OA3BI,CA8BT,OAAQpO,MAAR,CAAewC,MAAf,EAAyB,EAAzB,EAA+BrE,EAA/B,EAAsC6B,MAAtC,CAA6C+C,MAA7C,EAAuD,EAAvD,CAnDqC,CAkEvCf,EAAA,CAAE0M,UAAF,CAAeC,QAAS,CAACC,EAAD,CAAK,CAAA,IACpBC,EADoB,CACLC,GADK,CACGC,EAE5BvN,KAAAA,EADI5D,IACJ4D,CAAOhE,CAET,IAAU,IAAV,EAAIoR,EAAJ,CAAgB,CACd,IAAA3O,EAAI,IAAI5C,SAAJ,CAAcuR,EAAd,CAGJ,IAAI,CAAC3O,CAAA,CAAEgK,SAAF,EAAL,GAAuBhK,CAAvB,CAAyBzC,CAAzB,EAAsC,CAAtC,GAA8ByC,CAA9B,CAAgCnC,CAAhC,GAA4CmC,CAAA,CAAE4E,EAAF,CAAK1C,GAAL,CAA5C,CACE,KAAM/C,MAAA,CACH,6BADG,EAEDa,CAAA,CAAEgK,SAAF,EAAA,CAAgB,gBAAhB,CAAmC,kBAFlC,EAEwDlI,OAAA,CAAQ9B,CAAR,CAFxD,CAAN,CALY,CAWhB,GAAI,CAACuB,CAAL,CAAS,MAAO,KAAInE,SAAJ,CAdVO,IAcU,CAEhB,KAAA+D,EAAI,IAAItE,SAAJ,CAAc8E,GAAd,CACJ,KAAA6M,GAAKH,EAALG,CAAU,IAAI3R,SAAJ,CAAc8E,GAAd,CACV,KAAA8M,GAAKF,EAALE,CAAU,IAAI5R,SAAJ,CAAc8E,GAAd,CACV,KAAArE,GAAIyC,aAAA,CAAciB,CAAd,CAIJzD,EAAA;AAAI4D,CAAJ,CAAM5D,CAAN,CAAUD,EAAV,CAAYe,MAAZ,CAvBMjB,IAuBN,CAAuBG,CAAvB,CAA2B,CAC3B4D,EAAA,CAAEnE,CAAF,CAAI,CAAJ,CAAA,CAASkE,QAAA,CAAgC,CAAvB,EAACoN,GAAD,CAAO/Q,CAAP,CAvgFT+B,EAugFS,EAvgFTA,EAugFS,CAAsCgP,GAAtC,CAA4CA,GAArD,CACTF,GAAA,CAAK,CAACA,EAAD,EAAyB,CAAzB,CAAO3O,CAAA,CAAEoJ,UAAF,CAAa1H,CAAb,CAAP,CAAkC,CAAJ,CAAA5D,CAAA,CAAQ4D,CAAR,CAAYqN,EAA1C,CAAgD/O,CAErD6O,IAAA,CAAM9Q,OACNA,QAAA,CAAU,CAAV,CAAc,CACdiC,EAAA,CAAI,IAAI5C,SAAJ,CAAcS,EAAd,CAKJ,KAFAiR,EAAA,CAAGvR,CAAH,CAAK,CAAL,CAEA,CAFU,CAEV,CAAA,CAAA,CAAW,CACT,IAAAqK,EAAInB,GAAA,CAAIzG,CAAJ,CAAO0B,CAAP,CAAU,CAAV,CAAa,CAAb,CACJuN,GAAA,CAAKL,EAAA,CAAG/I,IAAH,CAAQ+B,CAAA,CAAE2C,KAAF,CAAQyE,EAAR,CAAR,CACL,IAAyB,CAAzB,EAAIC,EAAA,CAAG7F,UAAH,CAAcuF,EAAd,CAAJ,CAA4B,KAC5BC,GAAA,CAAKI,EACLA,GAAA,CAAKC,EACLF,GAAA,CAAKD,EAAA,CAAGjJ,IAAH,CAAQ+B,CAAA,CAAE2C,KAAF,CAAQ0E,EAAR,CAAaF,EAAb,CAAR,CACLD,GAAA,CAAKG,EACLvN,EAAA,CAAI1B,CAAA,CAAEiM,KAAF,CAAQrE,CAAA,CAAE2C,KAAF,CAAQ0E,EAAR,CAAavN,CAAb,CAAR,CACJ1B,EAAA,CAAIiP,EATK,CAYXA,EAAA,CAAKxI,GAAA,CAAIkI,EAAA,CAAG1C,KAAH,CAAS2C,EAAT,CAAJ,CAAkBI,EAAlB,CAAsB,CAAtB,CAAyB,CAAzB,CACLF,GAAA,CAAKA,EAAA,CAAGjJ,IAAH,CAAQoJ,EAAA,CAAG1E,KAAH,CAASwE,EAAT,CAAR,CACLH,GAAA,CAAKA,EAAA,CAAG/I,IAAH,CAAQoJ,EAAA,CAAG1E,KAAH,CAASyE,EAAT,CAAR,CACLF,GAAA,CAAGjR,CAAH,CAAOkR,EAAP,CAAUlR,CAAV,CAjDMF,IAiDN,CAAgBE,CACZC,EAAJ,EAAQ,CAGRsD,GAAA,CACoD,CADhD,CAAAqF,GAAA,CAAIsI,EAAJ,CAAQC,EAAR,CAAYlR,CAAZ,CAAemB,aAAf,CAAA,CAA8BgN,KAA9B,CArDEtO,IAqDF,CAAA,CAAuCuL,GAAvC,EAAA,CAA6CE,UAA7C,CACA3C,GAAA,CAAIqI,EAAJ,CAAQF,EAAR,CAAY9Q,CAAZ,CAAemB,aAAf,CAAA,CAA8BgN,KAA9B,CAtDEtO,IAsDF,CAAA,CAAuCuL,GAAvC,EADA,CAAA;AACoD,CAAC6F,EAAD,CAAKC,EAAL,CADpD,CAC+D,CAACF,EAAD,CAAKF,EAAL,CAEnE7Q,QAAA,CAAU8Q,GAEV,OAAOzN,GA5DoB,CAmE7BW,EAAA,CAAEmN,QAAF,CAAaC,QAAS,EAAG,CACvB,MAAO,CAACrN,OAAA,CAAQ,IAAR,CADe,CAgBzBC,EAAA,CAAEqN,WAAF,CAAgBC,QAAS,CAAClO,EAAD,CAAKlB,EAAL,CAAS,CACtB,IAAV,EAAIkB,EAAJ,EAAgBtC,QAAA,CAASsC,EAAT,CAAa,CAAb,CAxjFZ4C,GAwjFY,CAChB,OAAOhE,gBAAA,CAAO,IAAP,CAAaoB,EAAb,CAAiBlB,EAAjB,CAAqB,CAArB,CAFyB,CAiBlC8B,EAAA,CAAE5B,QAAF,CAAamP,QAAS,CAAChS,CAAD,CAAI,CAAA,IAEtB0C,EAAI,IAFkB,CAGtBnC,EAAImC,CAAJnC,CAAMA,CAHgB,CAItBC,EAAIkC,CAAJlC,CAAMA,CAGE,KAAV,GAAIA,CAAJ,CACMD,CAAJ,EACEK,CACA,CADM,UACN,CAAQ,CAAR,CAAIL,CAAJ,GAAWK,CAAX,CAAiB,GAAjB,CAAuBA,CAAvB,CAFF,EAIEA,CAJF,CAIQ,KALV,EAQW,IAAT,EAAIZ,CAAJ,CACEY,CADF,CACQJ,CAAA,EAAKyC,UAAL,EAAmBzC,CAAnB,EAAwB0C,UAAxB,CACHC,aAAA,CAAcH,aAAA,CAAcN,CAAd,CAAgBzC,CAAhB,CAAd,CAAkCO,CAAlC,CADG,CAEH4C,YAAA,CAAaJ,aAAA,CAAcN,CAAd,CAAgBzC,CAAhB,CAAb,CAAiCO,CAAjC,CAAoC,GAApC,CAHL,CAIiB,EAAV,GAAIR,CAAJ,EACL0C,CACA,CADIjB,KAAA,CAAM,IAAI3B,SAAJ,CAAc4C,CAAd,CAAN,CAAwBhB,cAAxB,CAAyClB,CAAzC,CAA6C,CAA7C,CAAgDmB,aAAhD,CACJ,CAAAf,CAAA,CAAMwC,YAAA,CAAaJ,aAAA,CAAcN,CAAd,CAAgBzC,CAAhB,CAAb,CAAiCyC,CAAjC,CAAmClC,CAAnC,CAAsC,GAAtC,CAFD;CAILe,QAAA,CAASvB,CAAT,CAAY,CAAZ,CAAewB,QAAf,CAAwBF,MAAxB,CAAgC,MAAhC,CACA,CAAAV,CAAA,CAAMwB,WAAA,CAAYgB,YAAA,CAAaJ,aAAA,CAAcN,CAAd,CAAgBzC,CAAhB,CAAb,CAAiCO,CAAjC,CAAoC,GAApC,CAAZ,CAAsD,EAAtD,CAA0DR,CAA1D,CAA6DO,CAA7D,CAAgE,CAAA,CAAhE,CALD,CAQP,CAAQ,CAAR,CAAIA,CAAJ,EAAamC,CAAA,CAAEzC,CAAF,CAAI,CAAJ,CAAb,GAAqBW,CAArB,CAA2B,GAA3B,CAAiCA,CAAjC,CApBF,CAuBA,OAAOA,EA9BiB,CAsC1B6D,EAAA,CAAED,OAAF,CAAYC,CAAZ,CAAcwN,MAAd,CAAuBC,QAAS,EAAG,CACjC,MAAO1N,QAAA,CAAQ,IAAR,CAD0B,CAKnCC,EAAA,CAAEnE,YAAF,CAAiB,CAAA,CAEG,KAApB,EAAIT,YAAJ,EAA0BC,SAAA,CAAUsG,GAAV,CAAcvG,YAAd,CAE1B,OAAOC,UAjnFoB,CA2nF7B0K,QAASA,SAAQ,CAAC9H,CAAD,CAAI,CACnB,IAAIxC,EAAIwC,CAAJxC,CAAQ,CACZ,OAAW,EAAJ,CAAAwC,CAAA,EAASA,CAAT,GAAexC,CAAf,CAAmBA,CAAnB,CAAuBA,CAAvB,CAA2B,CAFf,CAOrB8C,QAASA,cAAa,CAACgF,CAAD,CAAI,CAMxB,IANwB,IACpBzH,CADoB,CACjB4R,CADiB,CAEtBjS,EAAI,CAFkB,CAGtByD,EAAIqE,CAAJrE,CAAMrC,MAHgB,CAItBwC,EAAIkE,CAAA,CAAE,CAAF,CAAJlE,CAAW,EAEb,CAAO5D,CAAP,CAAWyD,CAAX,CAAA,CAAe,CACbpD,CAAA,CAAIyH,CAAA,CAAE9H,CAAA,EAAF,CAAJ,CAAa,EAEb,KADAiS,CACA,CA1pFS5P,EA0pFT,CADehC,CACf,CADiBe,MACjB,CAAO6Q,CAAA,EAAP,CAAY5R,CAAZ,CAAgB,GAAhB,CAAsBA,CAAtB,EACAuD,CAAA,EAAKvD,CAJQ,CAQf,IAAKoD,CAAL,CAASG,CAAT,CAAWxC,MAAX,CAAyC,EAAzC,GAAmBwC,CAAA,CAAE7C,UAAF,CAAa,EAAE0C,CAAf,CAAnB,CAAA,EAEA,MAAOG,EAAA,CAAEnD,KAAF,CAAQ,CAAR;AAAWgD,CAAX,CAAe,CAAf,EAAoB,CAApB,CAhBiB,CAqB1BmG,QAASA,QAAO,CAACzJ,CAAD,CAAI2I,CAAJ,CAAO,CAAA,IAEnB/E,GAAK5D,CAAL4D,CAAOhE,CAFY,CAGnBmK,GAAKpB,CAALoB,CAAOnK,CAHY,CAInBC,EAAIG,CAAJH,CAAMK,CAJa,CAKnBoD,EAAIqF,CAAJrF,CAAMpD,CACNwD,EAAAA,CAAI1D,CAAJ0D,CAAMvD,CALR,KAME4R,EAAIpJ,CAAJoJ,CAAM5R,CAGR,IAAI,CAACN,CAAL,EAAU,CAACyD,CAAX,CAAc,MAAO,KAErBqE,EAAA,CAAI/D,EAAJ,EAAU,CAACA,EAAA,CAAG,CAAH,CACX,KAAAjE,EAAIoK,EAAJpK,EAAU,CAACoK,EAAA,CAAG,CAAH,CAGX,IAAIpC,CAAJ,EAAShI,CAAT,CAAY,MAAOgI,EAAA,CAAIhI,CAAA,CAAI,CAAJ,CAAQ,CAAC2D,CAAb,CAAiBzD,CAGpC,IAAIA,CAAJ,EAASyD,CAAT,CAAY,MAAOzD,EAEnB8H,EAAA,CAAQ,CAAR,CAAI9H,CACJF,EAAA,CAAI+D,CAAJ,EAASqO,CAGT,IAAI,CAACnO,EAAL,EAAW,CAACmG,EAAZ,CAAgB,MAAOpK,EAAA,CAAI,CAAJ,CAAQ,CAACiE,EAAD,CAAM+D,CAAN,CAAU,CAAV,CAAc,EAG7C,IAAI,CAAChI,CAAL,CAAQ,MAAO+D,EAAA,CAAIqO,CAAJ,CAAQpK,CAAR,CAAY,CAAZ,CAAgB,EAE/BrE,EAAA,CAAI,CAACI,CAAD,CAAKE,EAAL,CAAQ3C,MAAR,GAAmB8Q,CAAnB,CAAuBhI,EAAvB,CAA0B9I,MAA1B,EAAoCyC,CAApC,CAAwCqO,CAG5C,KAAKlS,CAAL,CAAS,CAAT,CAAYA,CAAZ,CAAgByD,CAAhB,CAAmBzD,CAAA,EAAnB,CAAwB,GAAI+D,EAAA,CAAG/D,CAAH,CAAJ,EAAakK,EAAA,CAAGlK,CAAH,CAAb,CAAoB,MAAO+D,GAAA,CAAG/D,CAAH,CAAA,CAAQkK,EAAA,CAAGlK,CAAH,CAAR,CAAgB8H,CAAhB,CAAoB,CAApB,CAAwB,EAG3E,OAAOjE,EAAA,EAAKqO,CAAL,CAAS,CAAT,CAAarO,CAAA,CAAIqO,CAAJ,CAAQpK,CAAR,CAAY,CAAZ,CAAgB,EApCf,CA2CvBzG,QAASA,SAAQ,CAACmB,CAAD,CAAI8E,GAAJ,CAASL,GAAT,CAAckL,IAAd,CAAoB,CACnC,GAAI3P,CAAJ,CAAQ8E,GAAR,EAAe9E,CAAf,CAAmByE,GAAnB,EAA0BzE,CAA1B,GAAgCJ,SAAA,CAAUI,CAAV,CAAhC,CACE,KAAMb,MAAA,CAvtFS6E,oBAutFT,EACc2L,IADd,EACsB,UADtB,GACiD,QAAZ,EAAA,MAAO3P,EAAP,CACtCA,CAAA;AAAI8E,GAAJ,EAAW9E,CAAX,CAAeyE,GAAf,CAAqB,iBAArB,CAAyC,mBADH,CAEtC,2BAHC,EAG8BtG,MAAA,CAAO6B,CAAP,CAH9B,CAAN,CAFiC,CAWrCkK,QAASA,MAAK,CAAClK,CAAD,CAAI,CAChB,IAAIqB,EAAIrB,CAAJqB,CAAM9D,CAAN8D,CAAQzC,MAARyC,CAAiB,CACrB,OAAOyG,SAAA,CAAS9H,CAAT,CAAWlC,CAAX,CA9tFI+B,EA8tFJ,CAAP,EAAmCwB,CAAnC,EAAsD,CAAtD,EAAwCrB,CAAA,CAAEzC,CAAF,CAAI8D,CAAJ,CAAxC,CAAiD,CAFjC,CAMlBZ,QAASA,cAAa,CAACvC,GAAD,CAAMJ,CAAN,CAAS,CAC7B,OAAqB,CAAb,CAAAI,GAAA,CAAIU,MAAJ,CAAiBV,GAAA,CAAIoB,MAAJ,CAAW,CAAX,CAAjB,CAAiC,GAAjC,CAAuCpB,GAAA,CAAID,KAAJ,CAAU,CAAV,CAAvC,CAAsDC,GAA9D,GACM,CAAJ,CAAAJ,CAAA,CAAQ,GAAR,CAAc,IADhB,EACwBA,CAFK,CAM/B4C,QAASA,aAAY,CAACxC,GAAD,CAAMJ,CAAN,CAAS2R,CAAT,CAAY,CAAA,IACtBG,EAGT,IAAQ,CAAR,CAAI9R,CAAJ,CAAW,CAGT,IAAK8R,EAAL,CAAUH,CAAV,CAAc,GAAd,CAAmB,EAAE3R,CAArB,CAAwB8R,EAAxB,EAA8BH,CAA9B,EACAvR,GAAA,CAAM0R,EAAN,CAAW1R,GAJF,CAAX,IAOO,CACL,IAAAR,IAAMQ,GAANR,CAAUkB,MAGV,IAAI,EAAEd,CAAN,CAAUJ,GAAV,CAAe,CACRkS,EAAA,CAAKH,CAAV,KAAa3R,CAAb,EAAkBJ,GAAlB,CAAuB,EAAEI,CAAzB,CAA4B8R,EAA5B,EAAkCH,CAAlC,EACAvR,GAAA,EAAO0R,EAFM,CAAf,IAGW9R,EAAJ,CAAQJ,GAAR,GACLQ,GADK,CACCA,GAAA,CAAID,KAAJ,CAAU,CAAV,CAAaH,CAAb,CADD,CACmB,GADnB,CACyBI,GAAA,CAAID,KAAJ,CAAUH,CAAV,CADzB,CAPF,CAYP,MAAOI,IAvBwB,CApyFT,IAoDtBE,UAAY,4CApDU;AAqDtBwD,SAAWwD,IAAXxD,CAAgBiO,IArDM,CAsDtBjQ,UAAYwF,IAAZxF,CAAiBkQ,KAtDK,CA+DtBrO,SAAW,CAAC,CAAD,CAAI,EAAJ,CAAQ,GAAR,CAAa,GAAb,CAAkB,GAAlB,CAAuB,GAAvB,CAA4B,GAA5B,CAAiC,GAAjC,CAAsC,GAAtC,CAA2C,GAA3C,CAAgD,IAAhD,CAAsD,IAAtD,CAA4D,IAA5D,CAAkE,IAAlE,CAmwFb,KAAArE,UAAYF,KAAA,EACZE,UAAA,CAAU,SAAV,CAAA,CAAuBA,SAAvB,CAAiCA,SAAjC,CAA6CA,SAGxB,WAArB,EAAI,MAAO2S,OAAX,EAAmCA,MAAnC,CAA0CC,GAA1C,CACED,MAAA,CAAO,QAAS,EAAG,CAAE,MAAO3S,UAAT,CAAnB,CADF,CAI4B,WAArB,EAAI,MAAOL,OAAX,EAAoCA,MAApC,CAA2CC,OAA3C,CACLD,MADK,CACEC,OADF,CACYI,SADZ,EAKAH,YAIL,GAHEA,YAGF,CAHgC,WAAf,EAAA,MAAOgT,KAAP,EAA8BA,IAA9B,CAAqCA,IAArC,CAA4CC,MAG7D,EAAAjT,YAAA,CAAaG,SAAb,CAAyBA,SATpB,CA10FiB,CAAxB,CAAD,CAq1FE,IAr1FF,CAD0G;",
"sources":["node_modules/bignumber_DOT_js/bignumber.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$bignumber_DOT_js$bignumber\"] = function(global,require,module,exports) {\n;(function (globalObject) {\r\n  'use strict';\r\n\r\n/*\r\n *      bignumber.js v9.0.1\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2020 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\n  var BigNumber,\r\n    isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n    mathceil = Math.ceil,\r\n    mathfloor = Math.floor,\r\n\r\n    bignumberError = '[BigNumber Error] ',\r\n    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n    BASE = 1e14,\r\n    LOG_BASE = 14,\r\n    MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n    SQRT_BASE = 1e7,\r\n\r\n    // EDITABLE\r\n    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n    // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n    MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n  /*\r\n   * Create and return a BigNumber constructor.\r\n   */\r\n  function clone(configObject) {\r\n    var div, convertBase, parseNumeric,\r\n      P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n      ONE = new BigNumber(1),\r\n\r\n\r\n      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n      // The default values below must be integers within the inclusive ranges stated.\r\n      // The values can also be changed at run-time using BigNumber.set.\r\n\r\n      // The maximum number of decimal places for operations involving division.\r\n      DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n      // The rounding mode used when rounding to the above decimal places, and when using\r\n      // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n      // UP         0 Away from zero.\r\n      // DOWN       1 Towards zero.\r\n      // CEIL       2 Towards +Infinity.\r\n      // FLOOR      3 Towards -Infinity.\r\n      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n      // The exponent value at and beneath which toString returns exponential notation.\r\n      // Number type: -7\r\n      TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n      // The exponent value at and above which toString returns exponential notation.\r\n      // Number type: 21\r\n      TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n      // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // Number type: -324  (5e-324)\r\n      MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // Number type:  308  (1.7976931348623157e+308)\r\n      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n      MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      CRYPTO = false,                          // true or false\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN      1 The remainder has the same sign as the dividend.\r\n      //             This modulo mode is commonly known as 'truncated division' and is\r\n      //             equivalent to (a % n) in JavaScript.\r\n      // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n      //             The remainder is always positive.\r\n      //\r\n      // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n      // modes are commonly used for the modulus operation.\r\n      // Although the other rounding modes can also be used, they may not give useful results.\r\n      MODULO_MODE = 1,                         // 0 to 9\r\n\r\n      // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n      // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n      POW_PRECISION = 0,                    // 0 to MAX\r\n\r\n      // The format specification used by the BigNumber.prototype.toFormat method.\r\n      FORMAT = {\r\n        prefix: '',\r\n        groupSize: 3,\r\n        secondaryGroupSize: 0,\r\n        groupSeparator: ',',\r\n        decimalSeparator: '.',\r\n        fractionGroupSize: 0,\r\n        fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n        suffix: ''\r\n      },\r\n\r\n      // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n      // '-', '.', whitespace, or repeated character.\r\n      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz';\r\n\r\n\r\n    //------------------------------------------------------------------------------------------\r\n\r\n\r\n    // CONSTRUCTOR\r\n\r\n\r\n    /*\r\n     * The BigNumber constructor and exported function.\r\n     * Create and return a new instance of a BigNumber object.\r\n     *\r\n     * v {number|string|BigNumber} A numeric value.\r\n     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n     */\r\n    function BigNumber(v, b) {\r\n      var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n        x = this;\r\n\r\n      // Enable constructor call without `new`.\r\n      if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n      if (b == null) {\r\n\r\n        if (v && v._isBigNumber === true) {\r\n          x.s = v.s;\r\n\r\n          if (!v.c || v.e > MAX_EXP) {\r\n            x.c = x.e = null;\r\n          } else if (v.e < MIN_EXP) {\r\n            x.c = [x.e = 0];\r\n          } else {\r\n            x.e = v.e;\r\n            x.c = v.c.slice();\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n          // Use `1 / n` to handle minus zero also.\r\n          x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n          // Fast path for integers, where n < 2147483648 (2**31).\r\n          if (v === ~~v) {\r\n            for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n            if (e > MAX_EXP) {\r\n              x.c = x.e = null;\r\n            } else {\r\n              x.e = e;\r\n              x.c = [v];\r\n            }\r\n\r\n            return;\r\n          }\r\n\r\n          str = String(v);\r\n        } else {\r\n\r\n          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n        // Exponential form?\r\n        if ((i = str.search(/e/i)) > 0) {\r\n\r\n          // Determine exponent.\r\n          if (e < 0) e = i;\r\n          e += +str.slice(i + 1);\r\n          str = str.substring(0, i);\r\n        } else if (e < 0) {\r\n\r\n          // Integer.\r\n          e = str.length;\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n        // Allow exponential notation to be used with base 10 argument, while\r\n        // also rounding to DECIMAL_PLACES as with other bases.\r\n        if (b == 10) {\r\n          x = new BigNumber(v);\r\n          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n        }\r\n\r\n        str = String(v);\r\n\r\n        if (isNum = typeof v == 'number') {\r\n\r\n          // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n          if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n            throw Error\r\n             (tooManyDigits + v);\r\n          }\r\n        } else {\r\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        alphabet = ALPHABET.slice(0, b);\r\n        e = i = 0;\r\n\r\n        // Check that str is a valid base b number.\r\n        // Don't use RegExp, so alphabet can contain special characters.\r\n        for (len = str.length; i < len; i++) {\r\n          if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n            if (c == '.') {\r\n\r\n              // If '.' is not the first character and it has not be found before.\r\n              if (i > e) {\r\n                e = len;\r\n                continue;\r\n              }\r\n            } else if (!caseChanged) {\r\n\r\n              // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n              if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                  str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n                caseChanged = true;\r\n                i = -1;\r\n                e = 0;\r\n                continue;\r\n              }\r\n            }\r\n\r\n            return parseNumeric(x, String(v), isNum, b);\r\n          }\r\n        }\r\n\r\n        // Prevent later check for length on converted number.\r\n        isNum = false;\r\n        str = convertBase(str, b, 10, x.s);\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n        else e = str.length;\r\n      }\r\n\r\n      // Determine leading zeros.\r\n      for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n      // Determine trailing zeros.\r\n      for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n      if (str = str.slice(i, ++len)) {\r\n        len -= i;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (isNum && BigNumber.DEBUG &&\r\n          len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n            throw Error\r\n             (tooManyDigits + (x.s * v));\r\n        }\r\n\r\n         // Overflow?\r\n        if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n          // Infinity.\r\n          x.c = x.e = null;\r\n\r\n        // Underflow?\r\n        } else if (e < MIN_EXP) {\r\n\r\n          // Zero.\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = e;\r\n          x.c = [];\r\n\r\n          // Transform base\r\n\r\n          // e is the base 10 exponent.\r\n          // i is where to slice str to get the first element of the coefficient array.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n          if (i < len) {\r\n            if (i) x.c.push(+str.slice(0, i));\r\n\r\n            for (len -= LOG_BASE; i < len;) {\r\n              x.c.push(+str.slice(i, i += LOG_BASE));\r\n            }\r\n\r\n            i = LOG_BASE - (str = str.slice(i)).length;\r\n          } else {\r\n            i -= len;\r\n          }\r\n\r\n          for (; i--; str += '0');\r\n          x.c.push(+str);\r\n        }\r\n      } else {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n\r\n    // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n    BigNumber.clone = clone;\r\n\r\n    BigNumber.ROUND_UP = 0;\r\n    BigNumber.ROUND_DOWN = 1;\r\n    BigNumber.ROUND_CEIL = 2;\r\n    BigNumber.ROUND_FLOOR = 3;\r\n    BigNumber.ROUND_HALF_UP = 4;\r\n    BigNumber.ROUND_HALF_DOWN = 5;\r\n    BigNumber.ROUND_HALF_EVEN = 6;\r\n    BigNumber.ROUND_HALF_CEIL = 7;\r\n    BigNumber.ROUND_HALF_FLOOR = 8;\r\n    BigNumber.EUCLID = 9;\r\n\r\n\r\n    /*\r\n     * Configure infrequently-changing library-wide settings.\r\n     *\r\n     * Accept an object with the following optional properties (if the value of a property is\r\n     * a number, it must be an integer within the inclusive range stated):\r\n     *\r\n     *   DECIMAL_PLACES   {number}           0 to MAX\r\n     *   ROUNDING_MODE    {number}           0 to 8\r\n     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n     *   CRYPTO           {boolean}          true or false\r\n     *   MODULO_MODE      {number}           0 to 9\r\n     *   POW_PRECISION       {number}           0 to MAX\r\n     *   ALPHABET         {string}           A string of two or more unique characters which does\r\n     *                                       not contain '.'.\r\n     *   FORMAT           {object}           An object with some of the following properties:\r\n     *     prefix                 {string}\r\n     *     groupSize              {number}\r\n     *     secondaryGroupSize     {number}\r\n     *     groupSeparator         {string}\r\n     *     decimalSeparator       {string}\r\n     *     fractionGroupSize      {number}\r\n     *     fractionGroupSeparator {string}\r\n     *     suffix                 {string}\r\n     *\r\n     * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n     *\r\n     * E.g.\r\n     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n     *\r\n     * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n     *\r\n     * Return an object with the properties current values.\r\n     */\r\n    BigNumber.config = BigNumber.set = function (obj) {\r\n      var p, v;\r\n\r\n      if (obj != null) {\r\n\r\n        if (typeof obj == 'object') {\r\n\r\n          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            DECIMAL_PLACES = v;\r\n          }\r\n\r\n          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 8, p);\r\n            ROUNDING_MODE = v;\r\n          }\r\n\r\n          // EXPONENTIAL_AT {number|number[]}\r\n          // Integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, 0, p);\r\n              intCheck(v[1], 0, MAX, p);\r\n              TO_EXP_NEG = v[0];\r\n              TO_EXP_POS = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n            }\r\n          }\r\n\r\n          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n          if (obj.hasOwnProperty(p = 'RANGE')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, -1, p);\r\n              intCheck(v[1], 1, MAX, p);\r\n              MIN_EXP = v[0];\r\n              MAX_EXP = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              if (v) {\r\n                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n              } else {\r\n                throw Error\r\n                 (bignumberError + p + ' cannot be zero: ' + v);\r\n              }\r\n            }\r\n          }\r\n\r\n          // CRYPTO {boolean} true or false.\r\n          // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n          // '[BigNumber Error] crypto unavailable'\r\n          if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n            v = obj[p];\r\n            if (v === !!v) {\r\n              if (v) {\r\n                if (typeof crypto != 'undefined' && crypto &&\r\n                 (crypto.getRandomValues || crypto.randomBytes)) {\r\n                  CRYPTO = v;\r\n                } else {\r\n                  CRYPTO = !v;\r\n                  throw Error\r\n                   (bignumberError + 'crypto unavailable');\r\n                }\r\n              } else {\r\n                CRYPTO = v;\r\n              }\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' not true or false: ' + v);\r\n            }\r\n          }\r\n\r\n          // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 9, p);\r\n            MODULO_MODE = v;\r\n          }\r\n\r\n          // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            POW_PRECISION = v;\r\n          }\r\n\r\n          // FORMAT {object}\r\n          // '[BigNumber Error] FORMAT not an object: {v}'\r\n          if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n            v = obj[p];\r\n            if (typeof v == 'object') FORMAT = v;\r\n            else throw Error\r\n             (bignumberError + p + ' not an object: ' + v);\r\n          }\r\n\r\n          // ALPHABET {string}\r\n          // '[BigNumber Error] ALPHABET invalid: {v}'\r\n          if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n            v = obj[p];\r\n\r\n            // Disallow if less than two characters,\r\n            // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n            if (typeof v == 'string' && !/^.?$|[+\\-.\\s]|(.).*\\1/.test(v)) {\r\n              ALPHABET = v;\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' invalid: ' + v);\r\n            }\r\n          }\r\n\r\n        } else {\r\n\r\n          // '[BigNumber Error] Object expected: {v}'\r\n          throw Error\r\n           (bignumberError + 'Object expected: ' + obj);\r\n        }\r\n      }\r\n\r\n      return {\r\n        DECIMAL_PLACES: DECIMAL_PLACES,\r\n        ROUNDING_MODE: ROUNDING_MODE,\r\n        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n        RANGE: [MIN_EXP, MAX_EXP],\r\n        CRYPTO: CRYPTO,\r\n        MODULO_MODE: MODULO_MODE,\r\n        POW_PRECISION: POW_PRECISION,\r\n        FORMAT: FORMAT,\r\n        ALPHABET: ALPHABET\r\n      };\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if v is a BigNumber instance, otherwise return false.\r\n     *\r\n     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n     *\r\n     * v {any}\r\n     *\r\n     * '[BigNumber Error] Invalid BigNumber: {v}'\r\n     */\r\n    BigNumber.isBigNumber = function (v) {\r\n      if (!v || v._isBigNumber !== true) return false;\r\n      if (!BigNumber.DEBUG) return true;\r\n\r\n      var i, n,\r\n        c = v.c,\r\n        e = v.e,\r\n        s = v.s;\r\n\r\n      out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n          // If the first element is zero, the BigNumber value must be zero.\r\n          if (c[0] === 0) {\r\n            if (e === 0 && c.length === 1) return true;\r\n            break out;\r\n          }\r\n\r\n          // Calculate number of digits that c[0] should have, based on the exponent.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (i < 1) i += LOG_BASE;\r\n\r\n          // Calculate number of digits of c[0].\r\n          //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n          if (String(c[0]).length == i) {\r\n\r\n            for (i = 0; i < c.length; i++) {\r\n              n = c[i];\r\n              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n            }\r\n\r\n            // Last element cannot be zero, unless it is the only element.\r\n            if (n !== 0) return true;\r\n          }\r\n        }\r\n\r\n      // Infinity/NaN\r\n      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n        return true;\r\n      }\r\n\r\n      throw Error\r\n        (bignumberError + 'Invalid BigNumber: ' + v);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the maximum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.maximum = BigNumber.max = function () {\r\n      return maxOrMin(arguments, P.lt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the minimum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.minimum = BigNumber.min = function () {\r\n      return maxOrMin(arguments, P.gt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n     * zeros are produced).\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n     * '[BigNumber Error] crypto unavailable'\r\n     */\r\n    BigNumber.random = (function () {\r\n      var pow2_53 = 0x20000000000000;\r\n\r\n      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n      // Check if Math.random() produces more than 32 bits of randomness.\r\n      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n      var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n       ? function () { return mathfloor(Math.random() * pow2_53); }\r\n       : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n         (Math.random() * 0x800000 | 0); };\r\n\r\n      return function (dp) {\r\n        var a, b, e, k, v,\r\n          i = 0,\r\n          c = [],\r\n          rand = new BigNumber(ONE);\r\n\r\n        if (dp == null) dp = DECIMAL_PLACES;\r\n        else intCheck(dp, 0, MAX);\r\n\r\n        k = mathceil(dp / LOG_BASE);\r\n\r\n        if (CRYPTO) {\r\n\r\n          // Browsers supporting crypto.getRandomValues.\r\n          if (crypto.getRandomValues) {\r\n\r\n            a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n            for (; i < k;) {\r\n\r\n              // 53 bits:\r\n              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n              //                                     11111 11111111 11111111\r\n              // 0x20000 is 2^21.\r\n              v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n              // Rejection sampling:\r\n              // 0 <= v < 9007199254740992\r\n              // Probability that v >= 9e15, is\r\n              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n              if (v >= 9e15) {\r\n                b = crypto.getRandomValues(new Uint32Array(2));\r\n                a[i] = b[0];\r\n                a[i + 1] = b[1];\r\n              } else {\r\n\r\n                // 0 <= v <= 8999999999999999\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 2;\r\n              }\r\n            }\r\n            i = k / 2;\r\n\r\n          // Node.js supporting crypto.randomBytes.\r\n          } else if (crypto.randomBytes) {\r\n\r\n            // buffer\r\n            a = crypto.randomBytes(k *= 7);\r\n\r\n            for (; i < k;) {\r\n\r\n              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n              // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n              // 0 <= v < 9007199254740992\r\n              v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n                 (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n                 (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n              if (v >= 9e15) {\r\n                crypto.randomBytes(7).copy(a, i);\r\n              } else {\r\n\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 7;\r\n              }\r\n            }\r\n            i = k / 7;\r\n          } else {\r\n            CRYPTO = false;\r\n            throw Error\r\n             (bignumberError + 'crypto unavailable');\r\n          }\r\n        }\r\n\r\n        // Use Math.random.\r\n        if (!CRYPTO) {\r\n\r\n          for (; i < k;) {\r\n            v = random53bitInt();\r\n            if (v < 9e15) c[i++] = v % 1e14;\r\n          }\r\n        }\r\n\r\n        k = c[--i];\r\n        dp %= LOG_BASE;\r\n\r\n        // Convert trailing digits to zeros according to dp.\r\n        if (k && dp) {\r\n          v = POWS_TEN[LOG_BASE - dp];\r\n          c[i] = mathfloor(k / v) * v;\r\n        }\r\n\r\n        // Remove trailing elements which are zero.\r\n        for (; c[i] === 0; c.pop(), i--);\r\n\r\n        // Zero?\r\n        if (i < 0) {\r\n          c = [e = 0];\r\n        } else {\r\n\r\n          // Remove leading elements which are zero and adjust exponent accordingly.\r\n          for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n          // Count the digits of the first element of c to determine leading zeros, and...\r\n          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n          // adjust the exponent accordingly.\r\n          if (i < LOG_BASE) e -= LOG_BASE - i;\r\n        }\r\n\r\n        rand.e = e;\r\n        rand.c = c;\r\n        return rand;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the sum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.sum = function () {\r\n      var i = 1,\r\n        args = arguments,\r\n        sum = new BigNumber(args[0]);\r\n      for (; i < args.length;) sum = sum.plus(args[i++]);\r\n      return sum;\r\n    };\r\n\r\n\r\n    // PRIVATE FUNCTIONS\r\n\r\n\r\n    // Called by BigNumber and BigNumber.prototype.toString.\r\n    convertBase = (function () {\r\n      var decimal = '0123456789';\r\n\r\n      /*\r\n       * Convert string of baseIn to an array of numbers of baseOut.\r\n       * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n       */\r\n      function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n        var j,\r\n          arr = [0],\r\n          arrL,\r\n          i = 0,\r\n          len = str.length;\r\n\r\n        for (; i < len;) {\r\n          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n          arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n          for (j = 0; j < arr.length; j++) {\r\n\r\n            if (arr[j] > baseOut - 1) {\r\n              if (arr[j + 1] == null) arr[j + 1] = 0;\r\n              arr[j + 1] += arr[j] / baseOut | 0;\r\n              arr[j] %= baseOut;\r\n            }\r\n          }\r\n        }\r\n\r\n        return arr.reverse();\r\n      }\r\n\r\n      // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n      // If the caller is toString, we are converting from base 10 to baseOut.\r\n      // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n      return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n        var alphabet, d, e, k, r, x, xc, y,\r\n          i = str.indexOf('.'),\r\n          dp = DECIMAL_PLACES,\r\n          rm = ROUNDING_MODE;\r\n\r\n        // Non-integer.\r\n        if (i >= 0) {\r\n          k = POW_PRECISION;\r\n\r\n          // Unlimited precision.\r\n          POW_PRECISION = 0;\r\n          str = str.replace('.', '');\r\n          y = new BigNumber(baseIn);\r\n          x = y.pow(str.length - i);\r\n          POW_PRECISION = k;\r\n\r\n          // Convert str as if an integer, then restore the fraction part by dividing the\r\n          // result by its base raised to a power.\r\n\r\n          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n           10, baseOut, decimal);\r\n          y.e = y.c.length;\r\n        }\r\n\r\n        // Convert the number as integer.\r\n\r\n        xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n         ? (alphabet = ALPHABET, decimal)\r\n         : (alphabet = decimal, ALPHABET));\r\n\r\n        // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n        e = k = xc.length;\r\n\r\n        // Remove trailing zeros.\r\n        for (; xc[--k] == 0; xc.pop());\r\n\r\n        // Zero?\r\n        if (!xc[0]) return alphabet.charAt(0);\r\n\r\n        // Does str represent an integer? If so, no need for the division.\r\n        if (i < 0) {\r\n          --e;\r\n        } else {\r\n          x.c = xc;\r\n          x.e = e;\r\n\r\n          // The sign is needed for correct rounding.\r\n          x.s = sign;\r\n          x = div(x, y, dp, rm, baseOut);\r\n          xc = x.c;\r\n          r = x.r;\r\n          e = x.e;\r\n        }\r\n\r\n        // xc now represents str converted to baseOut.\r\n\r\n        // THe index of the rounding digit.\r\n        d = e + dp + 1;\r\n\r\n        // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n        i = xc[d];\r\n\r\n        // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n        k = baseOut / 2;\r\n        r = r || d < 0 || xc[d + 1] != null;\r\n\r\n        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n              : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n               rm == (x.s < 0 ? 8 : 7));\r\n\r\n        // If the index of the rounding digit is not greater than zero, or xc represents\r\n        // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n        // such as 0.00001.\r\n        if (d < 1 || !xc[0]) {\r\n\r\n          // 1^-dp or 0\r\n          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n        } else {\r\n\r\n          // Truncate xc to the required number of decimal places.\r\n          xc.length = d;\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            // Rounding up may mean the previous digit has to be rounded up and so on.\r\n            for (--baseOut; ++xc[--d] > baseOut;) {\r\n              xc[d] = 0;\r\n\r\n              if (!d) {\r\n                ++e;\r\n                xc = [1].concat(xc);\r\n              }\r\n            }\r\n          }\r\n\r\n          // Determine trailing zeros.\r\n          for (k = xc.length; !xc[--k];);\r\n\r\n          // E.g. [4, 11, 15] becomes 4bf.\r\n          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n          // Add leading zeros, decimal point and trailing zeros as required.\r\n          str = toFixedPoint(str, e, alphabet.charAt(0));\r\n        }\r\n\r\n        // The caller will add the sign.\r\n        return str;\r\n      };\r\n    })();\r\n\r\n\r\n    // Perform division in the specified base. Called by div and convertBase.\r\n    div = (function () {\r\n\r\n      // Assume non-zero x and k.\r\n      function multiply(x, k, base) {\r\n        var m, temp, xlo, xhi,\r\n          carry = 0,\r\n          i = x.length,\r\n          klo = k % SQRT_BASE,\r\n          khi = k / SQRT_BASE | 0;\r\n\r\n        for (x = x.slice(); i--;) {\r\n          xlo = x[i] % SQRT_BASE;\r\n          xhi = x[i] / SQRT_BASE | 0;\r\n          m = khi * xlo + xhi * klo;\r\n          temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n          x[i] = temp % base;\r\n        }\r\n\r\n        if (carry) x = [carry].concat(x);\r\n\r\n        return x;\r\n      }\r\n\r\n      function compare(a, b, aL, bL) {\r\n        var i, cmp;\r\n\r\n        if (aL != bL) {\r\n          cmp = aL > bL ? 1 : -1;\r\n        } else {\r\n\r\n          for (i = cmp = 0; i < aL; i++) {\r\n\r\n            if (a[i] != b[i]) {\r\n              cmp = a[i] > b[i] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        return cmp;\r\n      }\r\n\r\n      function subtract(a, b, aL, base) {\r\n        var i = 0;\r\n\r\n        // Subtract b from a.\r\n        for (; aL--;) {\r\n          a[aL] -= i;\r\n          i = a[aL] < b[aL] ? 1 : 0;\r\n          a[aL] = i * base + a[aL] - b[aL];\r\n        }\r\n\r\n        // Remove leading zeros.\r\n        for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n      }\r\n\r\n      // x: dividend, y: divisor.\r\n      return function (x, y, dp, rm, base) {\r\n        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n          yL, yz,\r\n          s = x.s == y.s ? 1 : -1,\r\n          xc = x.c,\r\n          yc = y.c;\r\n\r\n        // Either NaN, Infinity or 0?\r\n        if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n          return new BigNumber(\r\n\r\n           // Return NaN if either NaN, or both Infinity or 0.\r\n           !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n            // Return \u00b10 if x is \u00b10 or y is \u00b1Infinity, or return \u00b1Infinity as y is \u00b10.\r\n            xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n         );\r\n        }\r\n\r\n        q = new BigNumber(s);\r\n        qc = q.c = [];\r\n        e = x.e - y.e;\r\n        s = dp + e + 1;\r\n\r\n        if (!base) {\r\n          base = BASE;\r\n          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n          s = s / LOG_BASE | 0;\r\n        }\r\n\r\n        // Result exponent may be one less then the current value of e.\r\n        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n        for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n        if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n        if (s < 0) {\r\n          qc.push(1);\r\n          more = true;\r\n        } else {\r\n          xL = xc.length;\r\n          yL = yc.length;\r\n          i = 0;\r\n          s += 2;\r\n\r\n          // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n          n = mathfloor(base / (yc[0] + 1));\r\n\r\n          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n          if (n > 1) {\r\n            yc = multiply(yc, n, base);\r\n            xc = multiply(xc, n, base);\r\n            yL = yc.length;\r\n            xL = xc.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xc.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL; rem[remL++] = 0);\r\n          yz = yc.slice();\r\n          yz = [0].concat(yz);\r\n          yc0 = yc[0];\r\n          if (yc[1] >= base / 2) yc0++;\r\n          // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n          do {\r\n            n = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yc, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, n.\r\n\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // n is how many times the divisor goes into the current remainder.\r\n              n = mathfloor(rem0 / yc0);\r\n\r\n              //  Algorithm:\r\n              //  product = divisor multiplied by trial digit (n).\r\n              //  Compare product and remainder.\r\n              //  If product is greater than remainder:\r\n              //    Subtract divisor from product, decrement trial digit.\r\n              //  Subtract product from remainder.\r\n              //  If product was less than remainder at the last compare:\r\n              //    Compare new remainder and divisor.\r\n              //    If remainder is greater than divisor:\r\n              //      Subtract divisor from remainder, increment trial digit.\r\n\r\n              if (n > 1) {\r\n\r\n                // n may be > base only when base is 3.\r\n                if (n >= base) n = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiply(yc, n, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                // If product > remainder then trial digit n too high.\r\n                // n is 1 too high about 5% of the time, and is not known to have\r\n                // ever been more than 1 too high.\r\n                while (compare(prod, rem, prodL, remL) == 1) {\r\n                  n--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                  prodL = prod.length;\r\n                  cmp = 1;\r\n                }\r\n              } else {\r\n\r\n                // n is 0 or 1, cmp is -1.\r\n                // If n is 0, there is no need to compare yc and rem again below,\r\n                // so change cmp to 1 to avoid it.\r\n                // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n                if (n == 0) {\r\n\r\n                  // divisor < remainder, so n must be at least 1.\r\n                  cmp = n = 1;\r\n                }\r\n\r\n                // product = divisor\r\n                prod = yc.slice();\r\n                prodL = prod.length;\r\n              }\r\n\r\n              if (prodL < remL) prod = [0].concat(prod);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n              remL = rem.length;\r\n\r\n               // If product was < remainder.\r\n              if (cmp == -1) {\r\n\r\n                // Compare divisor and new remainder.\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                // Trial digit n too low.\r\n                // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n                while (compare(yc, rem, yL, remL) < 1) {\r\n                  n++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                  remL = rem.length;\r\n                }\r\n              }\r\n            } else if (cmp === 0) {\r\n              n++;\r\n              rem = [0];\r\n            } // else cmp === 1 and n will be 0\r\n\r\n            // Add the next digit, n, to the result array.\r\n            qc[i++] = n;\r\n\r\n            // Update the remainder.\r\n            if (rem[0]) {\r\n              rem[remL++] = xc[xi] || 0;\r\n            } else {\r\n              rem = [xc[xi]];\r\n              remL = 1;\r\n            }\r\n          } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n          more = rem[0] != null;\r\n\r\n          // Leading zero?\r\n          if (!qc[0]) qc.splice(0, 1);\r\n        }\r\n\r\n        if (base == BASE) {\r\n\r\n          // To calculate q.e, first get the number of digits of qc[0].\r\n          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n        // Caller is convertBase.\r\n        } else {\r\n          q.e = e;\r\n          q.r = +more;\r\n        }\r\n\r\n        return q;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n     * notation rounded to the specified decimal places or significant digits.\r\n     *\r\n     * n: a BigNumber.\r\n     * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n     * rm: the rounding mode.\r\n     * id: 1 (toExponential) or 2 (toPrecision).\r\n     */\r\n    function format(n, i, rm, id) {\r\n      var c0, e, ne, len, str;\r\n\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      if (!n.c) return n.toString();\r\n\r\n      c0 = n.c[0];\r\n      ne = n.e;\r\n\r\n      if (i == null) {\r\n        str = coeffToString(n.c);\r\n        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n         ? toExponential(str, ne)\r\n         : toFixedPoint(str, ne, '0');\r\n      } else {\r\n        n = round(new BigNumber(n), i, rm);\r\n\r\n        // n.e may have changed if the value was rounded up.\r\n        e = n.e;\r\n\r\n        str = coeffToString(n.c);\r\n        len = str.length;\r\n\r\n        // toPrecision returns exponential notation if the number of significant digits\r\n        // specified is less than the number of digits necessary to represent the integer\r\n        // part of the value in fixed-point notation.\r\n\r\n        // Exponential notation.\r\n        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n          // Append zeros?\r\n          for (; len < i; str += '0', len++);\r\n          str = toExponential(str, e);\r\n\r\n        // Fixed-point notation.\r\n        } else {\r\n          i -= ne;\r\n          str = toFixedPoint(str, e, '0');\r\n\r\n          // Append zeros?\r\n          if (e + 1 > len) {\r\n            if (--i > 0) for (str += '.'; i--; str += '0');\r\n          } else {\r\n            i += e - len;\r\n            if (i > 0) {\r\n              if (e + 1 == len) str += '.';\r\n              for (; i--; str += '0');\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return n.s < 0 && c0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // Handle BigNumber.max and BigNumber.min.\r\n    function maxOrMin(args, method) {\r\n      var n,\r\n        i = 1,\r\n        m = new BigNumber(args[0]);\r\n\r\n      for (; i < args.length; i++) {\r\n        n = new BigNumber(args[i]);\r\n\r\n        // If any number is NaN, return NaN.\r\n        if (!n.s) {\r\n          m = n;\r\n          break;\r\n        } else if (method.call(m, n)) {\r\n          m = n;\r\n        }\r\n      }\r\n\r\n      return m;\r\n    }\r\n\r\n\r\n    /*\r\n     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n     * Called by minus, plus and times.\r\n     */\r\n    function normalise(n, c, e) {\r\n      var i = 1,\r\n        j = c.length;\r\n\r\n       // Remove trailing zeros.\r\n      for (; !c[--j]; c.pop());\r\n\r\n      // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n      for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n      // Overflow?\r\n      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        n.c = n.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        n.c = [n.e = 0];\r\n      } else {\r\n        n.e = e;\r\n        n.c = c;\r\n      }\r\n\r\n      return n;\r\n    }\r\n\r\n\r\n    // Handle values that fail the validity test in BigNumber.\r\n    parseNumeric = (function () {\r\n      var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n        dotAfter = /^([^.]+)\\.$/,\r\n        dotBefore = /^\\.([^.]+)$/,\r\n        isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n        whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n      return function (x, str, isNum, b) {\r\n        var base,\r\n          s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n        // No exception on \u00b1Infinity or NaN.\r\n        if (isInfinityOrNaN.test(s)) {\r\n          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n        } else {\r\n          if (!isNum) {\r\n\r\n            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n            s = s.replace(basePrefix, function (m, p1, p2) {\r\n              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n              return !b || b == base ? p1 : m;\r\n            });\r\n\r\n            if (b) {\r\n              base = b;\r\n\r\n              // E.g. '1.' to '1', '.1' to '0.1'\r\n              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n            }\r\n\r\n            if (str != s) return new BigNumber(s, base);\r\n          }\r\n\r\n          // '[BigNumber Error] Not a number: {n}'\r\n          // '[BigNumber Error] Not a base {b} number: {n}'\r\n          if (BigNumber.DEBUG) {\r\n            throw Error\r\n              (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n          }\r\n\r\n          // NaN\r\n          x.s = null;\r\n        }\r\n\r\n        x.c = x.e = null;\r\n      }\r\n    })();\r\n\r\n\r\n    /*\r\n     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n     * If r is truthy, it is known that there are more digits after the rounding digit.\r\n     */\r\n    function round(x, sd, rm, r) {\r\n      var d, i, j, k, n, ni, rd,\r\n        xc = x.c,\r\n        pows10 = POWS_TEN;\r\n\r\n      // if x is not Infinity or NaN...\r\n      if (xc) {\r\n\r\n        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n        // ni is the index of n within x.c.\r\n        // d is the number of digits of n.\r\n        // i is the index of rd within n including leading zeros.\r\n        // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n        out: {\r\n\r\n          // Get the number of digits of the first element of xc.\r\n          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n          i = sd - d;\r\n\r\n          // If the rounding digit is in the first element of xc...\r\n          if (i < 0) {\r\n            i += LOG_BASE;\r\n            j = sd;\r\n            n = xc[ni = 0];\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = n / pows10[d - j - 1] % 10 | 0;\r\n          } else {\r\n            ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n            if (ni >= xc.length) {\r\n\r\n              if (r) {\r\n\r\n                // Needed by sqrt.\r\n                for (; xc.length <= ni; xc.push(0));\r\n                n = rd = 0;\r\n                d = 1;\r\n                i %= LOG_BASE;\r\n                j = i - LOG_BASE + 1;\r\n              } else {\r\n                break out;\r\n              }\r\n            } else {\r\n              n = k = xc[ni];\r\n\r\n              // Get the number of digits of n.\r\n              for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n              // Get the index of rd within n.\r\n              i %= LOG_BASE;\r\n\r\n              // Get the index of rd within n, adjusted for leading zeros.\r\n              // The number of leading zeros of n is given by LOG_BASE - d.\r\n              j = i - LOG_BASE + d;\r\n\r\n              // Get the rounding digit at index j of n.\r\n              rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\r\n            }\r\n          }\r\n\r\n          r = r || sd < 0 ||\r\n\r\n          // Are there any non-zero digits after the rounding digit?\r\n          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n           xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n          r = rm < 4\r\n           ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n           : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n            // Check whether the digit to the left of the rounding digit is odd.\r\n            ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n          if (sd < 1 || !xc[0]) {\r\n            xc.length = 0;\r\n\r\n            if (r) {\r\n\r\n              // Convert sd to decimal places.\r\n              sd -= x.e + 1;\r\n\r\n              // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n              x.e = -sd || 0;\r\n            } else {\r\n\r\n              // Zero.\r\n              xc[0] = x.e = 0;\r\n            }\r\n\r\n            return x;\r\n          }\r\n\r\n          // Remove excess digits.\r\n          if (i == 0) {\r\n            xc.length = ni;\r\n            k = 1;\r\n            ni--;\r\n          } else {\r\n            xc.length = ni + 1;\r\n            k = pows10[LOG_BASE - i];\r\n\r\n            // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n            // j > 0 means i > number of leading zeros of n.\r\n            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n          }\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            for (; ;) {\r\n\r\n              // If the digit to be rounded up is in the first element of xc...\r\n              if (ni == 0) {\r\n\r\n                // i will be the length of xc[0] before k is added.\r\n                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n                j = xc[0] += k;\r\n                for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n                // if i != k the length has increased.\r\n                if (i != k) {\r\n                  x.e++;\r\n                  if (xc[0] == BASE) xc[0] = 1;\r\n                }\r\n\r\n                break;\r\n              } else {\r\n                xc[ni] += k;\r\n                if (xc[ni] != BASE) break;\r\n                xc[ni--] = 0;\r\n                k = 1;\r\n              }\r\n            }\r\n          }\r\n\r\n          // Remove trailing zeros.\r\n          for (i = xc.length; xc[--i] === 0; xc.pop());\r\n        }\r\n\r\n        // Overflow? Infinity.\r\n        if (x.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n\r\n        // Underflow? Zero.\r\n        } else if (x.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        }\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n\r\n    function valueOf(n) {\r\n      var str,\r\n        e = n.e;\r\n\r\n      if (e === null) return n.toString();\r\n\r\n      str = coeffToString(n.c);\r\n\r\n      str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n        ? toExponential(str, e)\r\n        : toFixedPoint(str, e, '0');\r\n\r\n      return n.s < 0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n     */\r\n    P.absoluteValue = P.abs = function () {\r\n      var x = new BigNumber(this);\r\n      if (x.s < 0) x.s = 1;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return\r\n     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     *   0 if they have the same value,\r\n     *   or null if the value of either is NaN.\r\n     */\r\n    P.comparedTo = function (y, b) {\r\n      return compare(this, new BigNumber(y, b));\r\n    };\r\n\r\n\r\n    /*\r\n     * If dp is undefined or null or true or false, return the number of decimal places of the\r\n     * value of this BigNumber, or null if the value of this BigNumber is \u00b1Infinity or NaN.\r\n     *\r\n     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.decimalPlaces = P.dp = function (dp, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), dp + x.e + 1, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last number.\r\n      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n      if (n < 0) n = 0;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n / 0 = I\r\n     *  n / N = N\r\n     *  n / I = 0\r\n     *  0 / n = 0\r\n     *  0 / 0 = N\r\n     *  0 / N = N\r\n     *  0 / I = 0\r\n     *  N / n = N\r\n     *  N / 0 = N\r\n     *  N / N = N\r\n     *  N / I = N\r\n     *  I / n = I\r\n     *  I / 0 = I\r\n     *  I / N = N\r\n     *  I / I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.dividedBy = P.div = function (y, b) {\r\n      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n     * BigNumber by the value of BigNumber(y, b).\r\n     */\r\n    P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n      return div(this, new BigNumber(y, b), 0, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n     *\r\n     * If m is present, return the result modulo m.\r\n     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n     *\r\n     * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n     *\r\n     * n {number|string|BigNumber} The exponent. An integer.\r\n     * [m] {number|string|BigNumber} The modulus.\r\n     *\r\n     * '[BigNumber Error] Exponent not an integer: {n}'\r\n     */\r\n    P.exponentiatedBy = P.pow = function (n, m) {\r\n      var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n        x = this;\r\n\r\n      n = new BigNumber(n);\r\n\r\n      // Allow NaN and \u00b1Infinity, but not other non-integers.\r\n      if (n.c && !n.isInteger()) {\r\n        throw Error\r\n          (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n      }\r\n\r\n      if (m != null) m = new BigNumber(m);\r\n\r\n      // Exponent of MAX_SAFE_INTEGER is 15.\r\n      nIsBig = n.e > 14;\r\n\r\n      // If x is NaN, \u00b1Infinity, \u00b10 or \u00b11, or n is \u00b1Infinity, NaN or \u00b10.\r\n      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n        // The sign of the result of pow when x is negative depends on the evenness of n.\r\n        // If +n overflows to \u00b1Infinity, the evenness of n would be not be known.\r\n        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));\r\n        return m ? y.mod(m) : y;\r\n      }\r\n\r\n      nIsNeg = n.s < 0;\r\n\r\n      if (m) {\r\n\r\n        // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n        isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n        if (isModExp) x = x.mod(m);\r\n\r\n      // Overflow to \u00b1Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n      // Underflow to \u00b10: <=0.79**1e10 or <=0.9999975**1e15.\r\n      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n        // [1, 240000000]\r\n        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n        // [80000000000000]  [99999750000000]\r\n        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n        // If x is negative and n is odd, k = -0, else k = 0.\r\n        k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n        // If x >= 1, k = \u00b1Infinity.\r\n        if (x.e > -1) k = 1 / k;\r\n\r\n        // If n is negative return \u00b10, else return \u00b1Infinity.\r\n        return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n      } else if (POW_PRECISION) {\r\n\r\n        // Truncating each coefficient array to a length of k after each multiplication\r\n        // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n        // i.e. there will be a minimum of 28 guard digits retained.\r\n        k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n      }\r\n\r\n      if (nIsBig) {\r\n        half = new BigNumber(0.5);\r\n        if (nIsNeg) n.s = 1;\r\n        nIsOdd = isOdd(n);\r\n      } else {\r\n        i = Math.abs(+valueOf(n));\r\n        nIsOdd = i % 2;\r\n      }\r\n\r\n      y = new BigNumber(ONE);\r\n\r\n      // Performs 54 loop iterations for n of 9007199254740991.\r\n      for (; ;) {\r\n\r\n        if (nIsOdd) {\r\n          y = y.times(x);\r\n          if (!y.c) break;\r\n\r\n          if (k) {\r\n            if (y.c.length > k) y.c.length = k;\r\n          } else if (isModExp) {\r\n            y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n          }\r\n        }\r\n\r\n        if (i) {\r\n          i = mathfloor(i / 2);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        } else {\r\n          n = n.times(half);\r\n          round(n, n.e + 1, 1);\r\n\r\n          if (n.e > 14) {\r\n            nIsOdd = isOdd(n);\r\n          } else {\r\n            i = +valueOf(n);\r\n            if (i === 0) break;\r\n            nIsOdd = i % 2;\r\n          }\r\n        }\r\n\r\n        x = x.times(x);\r\n\r\n        if (k) {\r\n          if (x.c && x.c.length > k) x.c.length = k;\r\n        } else if (isModExp) {\r\n          x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (isModExp) return y;\r\n      if (nIsNeg) y = ONE.div(y);\r\n\r\n      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n     */\r\n    P.integerValue = function (rm) {\r\n      var n = new BigNumber(this);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n      return round(n, n.e + 1, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isEqualTo = P.eq = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n     */\r\n    P.isFinite = function () {\r\n      return !!this.c;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isGreaterThan = P.gt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n     */\r\n    P.isInteger = function () {\r\n      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isLessThan = P.lt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n     */\r\n    P.isNaN = function () {\r\n      return !this.s;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is negative, otherwise return false.\r\n     */\r\n    P.isNegative = function () {\r\n      return this.s < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is positive, otherwise return false.\r\n     */\r\n    P.isPositive = function () {\r\n      return this.s > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n     */\r\n    P.isZero = function () {\r\n      return !!this.c && this.c[0] == 0;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n - 0 = n\r\n     *  n - N = N\r\n     *  n - I = -I\r\n     *  0 - n = -n\r\n     *  0 - 0 = 0\r\n     *  0 - N = N\r\n     *  0 - I = -I\r\n     *  N - n = N\r\n     *  N - 0 = N\r\n     *  N - N = N\r\n     *  N - I = N\r\n     *  I - n = I\r\n     *  I - 0 = I\r\n     *  I - N = N\r\n     *  I - I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.minus = function (y, b) {\r\n      var i, j, t, xLTy,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n      if (a != b) {\r\n        y.s = -b;\r\n        return x.plus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Either Infinity?\r\n        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n        // Either zero?\r\n        if (!xc[0] || !yc[0]) {\r\n\r\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n           // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n           ROUNDING_MODE == 3 ? -0 : 0);\r\n        }\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Determine which is the bigger number.\r\n      if (a = xe - ye) {\r\n\r\n        if (xLTy = a < 0) {\r\n          a = -a;\r\n          t = xc;\r\n        } else {\r\n          ye = xe;\r\n          t = yc;\r\n        }\r\n\r\n        t.reverse();\r\n\r\n        // Prepend zeros to equalise exponents.\r\n        for (b = a; b--; t.push(0));\r\n        t.reverse();\r\n      } else {\r\n\r\n        // Exponents equal. Check digit by digit.\r\n        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n        for (a = b = 0; b < j; b++) {\r\n\r\n          if (xc[b] != yc[b]) {\r\n            xLTy = xc[b] < yc[b];\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // x < y? Point xc to the array of the bigger number.\r\n      if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\r\n\r\n      b = (j = yc.length) - (i = xc.length);\r\n\r\n      // Append zeros to xc if shorter.\r\n      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n      if (b > 0) for (; b--; xc[i++] = 0);\r\n      b = BASE - 1;\r\n\r\n      // Subtract yc from xc.\r\n      for (; j > a;) {\r\n\r\n        if (xc[--j] < yc[j]) {\r\n          for (i = j; i && !xc[--i]; xc[i] = b);\r\n          --xc[i];\r\n          xc[j] += BASE;\r\n        }\r\n\r\n        xc[j] -= yc[j];\r\n      }\r\n\r\n      // Remove leading zeros and adjust exponent accordingly.\r\n      for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n      // Zero?\r\n      if (!xc[0]) {\r\n\r\n        // Following IEEE 754 (2008) 6.3,\r\n        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n        y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n        y.c = [y.e = 0];\r\n        return y;\r\n      }\r\n\r\n      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n      // for finite x and y.\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     *   n % 0 =  N\r\n     *   n % N =  N\r\n     *   n % I =  n\r\n     *   0 % n =  0\r\n     *  -0 % n = -0\r\n     *   0 % 0 =  N\r\n     *   0 % N =  N\r\n     *   0 % I =  0\r\n     *   N % n =  N\r\n     *   N % 0 =  N\r\n     *   N % N =  N\r\n     *   N % I =  N\r\n     *   I % n =  N\r\n     *   I % 0 =  N\r\n     *   I % N =  N\r\n     *   I % I =  N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n     */\r\n    P.modulo = P.mod = function (y, b) {\r\n      var q, s,\r\n        x = this;\r\n\r\n      y = new BigNumber(y, b);\r\n\r\n      // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n      if (!x.c || !y.s || y.c && !y.c[0]) {\r\n        return new BigNumber(NaN);\r\n\r\n      // Return x if y is Infinity or x is zero.\r\n      } else if (!y.c || x.c && !x.c[0]) {\r\n        return new BigNumber(x);\r\n      }\r\n\r\n      if (MODULO_MODE == 9) {\r\n\r\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n        // r = x - qy    where  0 <= r < abs(y)\r\n        s = y.s;\r\n        y.s = 1;\r\n        q = div(x, y, 0, 3);\r\n        y.s = s;\r\n        q.s *= s;\r\n      } else {\r\n        q = div(x, y, 0, MODULO_MODE);\r\n      }\r\n\r\n      y = x.minus(q.times(y));\r\n\r\n      // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n      return y;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n * 0 = 0\r\n     *  n * N = N\r\n     *  n * I = I\r\n     *  0 * n = 0\r\n     *  0 * 0 = 0\r\n     *  0 * N = N\r\n     *  0 * I = N\r\n     *  N * n = N\r\n     *  N * 0 = N\r\n     *  N * N = N\r\n     *  N * I = N\r\n     *  I * n = I\r\n     *  I * 0 = N\r\n     *  I * N = N\r\n     *  I * I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n     * of BigNumber(y, b).\r\n     */\r\n    P.multipliedBy = P.times = function (y, b) {\r\n      var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n        base, sqrtBase,\r\n        x = this,\r\n        xc = x.c,\r\n        yc = (y = new BigNumber(y, b)).c;\r\n\r\n      // Either NaN, \u00b1Infinity or \u00b10?\r\n      if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n          y.c = y.e = y.s = null;\r\n        } else {\r\n          y.s *= x.s;\r\n\r\n          // Return \u00b1Infinity if either is \u00b1Infinity.\r\n          if (!xc || !yc) {\r\n            y.c = y.e = null;\r\n\r\n          // Return \u00b10 if either is \u00b10.\r\n          } else {\r\n            y.c = [0];\r\n            y.e = 0;\r\n          }\r\n        }\r\n\r\n        return y;\r\n      }\r\n\r\n      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n      y.s *= x.s;\r\n      xcL = xc.length;\r\n      ycL = yc.length;\r\n\r\n      // Ensure xc points to longer array and xcL to its length.\r\n      if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\r\n\r\n      // Initialise the result array with zeros.\r\n      for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n      base = BASE;\r\n      sqrtBase = SQRT_BASE;\r\n\r\n      for (i = ycL; --i >= 0;) {\r\n        c = 0;\r\n        ylo = yc[i] % sqrtBase;\r\n        yhi = yc[i] / sqrtBase | 0;\r\n\r\n        for (k = xcL, j = i + k; j > i;) {\r\n          xlo = xc[--k] % sqrtBase;\r\n          xhi = xc[k] / sqrtBase | 0;\r\n          m = yhi * xlo + xhi * ylo;\r\n          xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n          zc[j--] = xlo % base;\r\n        }\r\n\r\n        zc[j] = c;\r\n      }\r\n\r\n      if (c) {\r\n        ++e;\r\n      } else {\r\n        zc.splice(0, 1);\r\n      }\r\n\r\n      return normalise(y, zc, e);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n     * i.e. multiplied by -1.\r\n     */\r\n    P.negated = function () {\r\n      var x = new BigNumber(this);\r\n      x.s = -x.s || null;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n + 0 = n\r\n     *  n + N = N\r\n     *  n + I = I\r\n     *  0 + n = n\r\n     *  0 + 0 = 0\r\n     *  0 + N = N\r\n     *  0 + I = I\r\n     *  N + n = N\r\n     *  N + 0 = N\r\n     *  N + N = N\r\n     *  N + I = N\r\n     *  I + n = I\r\n     *  I + 0 = I\r\n     *  I + N = N\r\n     *  I + I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.plus = function (y, b) {\r\n      var t,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n       if (a != b) {\r\n        y.s = -b;\r\n        return x.minus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Return \u00b1Infinity if either \u00b1Infinity.\r\n        if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n        // Either zero?\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n      if (a = xe - ye) {\r\n        if (a > 0) {\r\n          ye = xe;\r\n          t = yc;\r\n        } else {\r\n          a = -a;\r\n          t = xc;\r\n        }\r\n\r\n        t.reverse();\r\n        for (; a--; t.push(0));\r\n        t.reverse();\r\n      }\r\n\r\n      a = xc.length;\r\n      b = yc.length;\r\n\r\n      // Point xc to the longer array, and b to the shorter length.\r\n      if (a - b < 0) t = yc, yc = xc, xc = t, b = a;\r\n\r\n      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n      for (a = 0; b;) {\r\n        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n      }\r\n\r\n      if (a) {\r\n        xc = [a].concat(xc);\r\n        ++ye;\r\n      }\r\n\r\n      // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n      // ye = MAX_EXP + 1 possible\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     * If sd is undefined or null or true or false, return the number of significant digits of\r\n     * the value of this BigNumber, or null if the value of this BigNumber is \u00b1Infinity or NaN.\r\n     * If sd is true include integer-part trailing zeros in the count.\r\n     *\r\n     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n     *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.precision = P.sd = function (sd, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (sd != null && sd !== !!sd) {\r\n        intCheck(sd, 1, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), sd, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      v = c.length - 1;\r\n      n = v * LOG_BASE + 1;\r\n\r\n      if (v = c[v]) {\r\n\r\n        // Subtract the number of trailing zeros of the last element.\r\n        for (; v % 10 == 0; v /= 10, n--);\r\n\r\n        // Add the number of digits of the first element.\r\n        for (v = c[0]; v >= 10; v /= 10, n++);\r\n      }\r\n\r\n      if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n     *\r\n     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n     */\r\n    P.shiftedBy = function (k) {\r\n      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n      return this.times('1e' + k);\r\n    };\r\n\r\n\r\n    /*\r\n     *  sqrt(-n) =  N\r\n     *  sqrt(N) =  N\r\n     *  sqrt(-I) =  N\r\n     *  sqrt(I) =  I\r\n     *  sqrt(0) =  0\r\n     *  sqrt(-0) = -0\r\n     *\r\n     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.squareRoot = P.sqrt = function () {\r\n      var m, n, r, rep, t,\r\n        x = this,\r\n        c = x.c,\r\n        s = x.s,\r\n        e = x.e,\r\n        dp = DECIMAL_PLACES + 4,\r\n        half = new BigNumber('0.5');\r\n\r\n      // Negative/NaN/Infinity/zero?\r\n      if (s !== 1 || !c || !c[0]) {\r\n        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n      }\r\n\r\n      // Initial estimate.\r\n      s = Math.sqrt(+valueOf(x));\r\n\r\n      // Math.sqrt underflow/overflow?\r\n      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n      if (s == 0 || s == 1 / 0) {\r\n        n = coeffToString(c);\r\n        if ((n.length + e) % 2 == 0) n += '0';\r\n        s = Math.sqrt(+n);\r\n        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n        if (s == 1 / 0) {\r\n          n = '5e' + e;\r\n        } else {\r\n          n = s.toExponential();\r\n          n = n.slice(0, n.indexOf('e') + 1) + e;\r\n        }\r\n\r\n        r = new BigNumber(n);\r\n      } else {\r\n        r = new BigNumber(s + '');\r\n      }\r\n\r\n      // Check for zero.\r\n      // r could be zero if MIN_EXP is changed after the this value was created.\r\n      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n      // coeffToString to throw.\r\n      if (r.c[0]) {\r\n        e = r.e;\r\n        s = e + dp;\r\n        if (s < 3) s = 0;\r\n\r\n        // Newton-Raphson iteration.\r\n        for (; ;) {\r\n          t = r;\r\n          r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n            // The exponent of r may here be one less than the final result exponent,\r\n            // e.g 0.0009999 (e-4) --\u003e 0.001 (e-3), so adjust s so the rounding digits\r\n            // are indexed correctly.\r\n            if (r.e < e) --s;\r\n            n = n.slice(s - 3, s + 1);\r\n\r\n            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n            // iteration.\r\n            if (n == '9999' || !rep && n == '4999') {\r\n\r\n              // On the first iteration only, check to see if rounding up gives the\r\n              // exact result as the nines may infinitely repeat.\r\n              if (!rep) {\r\n                round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n                if (t.times(t).eq(x)) {\r\n                  r = t;\r\n                  break;\r\n                }\r\n              }\r\n\r\n              dp += 4;\r\n              s += 4;\r\n              rep = 1;\r\n            } else {\r\n\r\n              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n              // result. If not, then there are further digits and m will be truthy.\r\n              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n                // Truncate to the first rounding digit.\r\n                round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n                m = !r.times(r).eq(x);\r\n              }\r\n\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in exponential notation and\r\n     * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toExponential = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp++;\r\n      }\r\n      return format(this, dp, rm, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n     * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toFixed = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp = dp + this.e + 1;\r\n      }\r\n      return format(this, dp, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n     * of the format or FORMAT object (see BigNumber.set).\r\n     *\r\n     * The formatting object may contain some or all of the properties shown below.\r\n     *\r\n     * FORMAT = {\r\n     *   prefix: '',\r\n     *   groupSize: 3,\r\n     *   secondaryGroupSize: 0,\r\n     *   groupSeparator: ',',\r\n     *   decimalSeparator: '.',\r\n     *   fractionGroupSize: 0,\r\n     *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n     *   suffix: ''\r\n     * };\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     * [format] {object} Formatting options. See FORMAT pbject above.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     * '[BigNumber Error] Argument not an object: {format}'\r\n     */\r\n    P.toFormat = function (dp, rm, format) {\r\n      var str,\r\n        x = this;\r\n\r\n      if (format == null) {\r\n        if (dp != null && rm && typeof rm == 'object') {\r\n          format = rm;\r\n          rm = null;\r\n        } else if (dp && typeof dp == 'object') {\r\n          format = dp;\r\n          dp = rm = null;\r\n        } else {\r\n          format = FORMAT;\r\n        }\r\n      } else if (typeof format != 'object') {\r\n        throw Error\r\n          (bignumberError + 'Argument not an object: ' + format);\r\n      }\r\n\r\n      str = x.toFixed(dp, rm);\r\n\r\n      if (x.c) {\r\n        var i,\r\n          arr = str.split('.'),\r\n          g1 = +format.groupSize,\r\n          g2 = +format.secondaryGroupSize,\r\n          groupSeparator = format.groupSeparator || '',\r\n          intPart = arr[0],\r\n          fractionPart = arr[1],\r\n          isNeg = x.s < 0,\r\n          intDigits = isNeg ? intPart.slice(1) : intPart,\r\n          len = intDigits.length;\r\n\r\n        if (g2) i = g1, g1 = g2, g2 = i, len -= i;\r\n\r\n        if (g1 > 0 && len > 0) {\r\n          i = len % g1 || g1;\r\n          intPart = intDigits.substr(0, i);\r\n          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n          if (isNeg) intPart = '-' + intPart;\r\n        }\r\n\r\n        str = fractionPart\r\n         ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n          ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n           '$&' + (format.fractionGroupSeparator || ''))\r\n          : fractionPart)\r\n         : intPart;\r\n      }\r\n\r\n      return (format.prefix || '') + str + (format.suffix || '');\r\n    };\r\n\r\n\r\n    /*\r\n     * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n     * fraction with an integer numerator and an integer denominator.\r\n     * The denominator will be a positive non-zero value less than or equal to the specified\r\n     * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n     * the lowest value necessary to represent the number exactly.\r\n     *\r\n     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n     *\r\n     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n     */\r\n    P.toFraction = function (md) {\r\n      var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n        x = this,\r\n        xc = x.c;\r\n\r\n      if (md != null) {\r\n        n = new BigNumber(md);\r\n\r\n        // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n          throw Error\r\n            (bignumberError + 'Argument ' +\r\n              (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n        }\r\n      }\r\n\r\n      if (!xc) return new BigNumber(x);\r\n\r\n      d = new BigNumber(ONE);\r\n      n1 = d0 = new BigNumber(ONE);\r\n      d1 = n0 = new BigNumber(ONE);\r\n      s = coeffToString(xc);\r\n\r\n      // Determine initial denominator.\r\n      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n      e = d.e = s.length - x.e - 1;\r\n      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n      md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n      exp = MAX_EXP;\r\n      MAX_EXP = 1 / 0;\r\n      n = new BigNumber(s);\r\n\r\n      // n0 = d1 = 0\r\n      n0.c[0] = 0;\r\n\r\n      for (; ;)  {\r\n        q = div(n, d, 0, 1);\r\n        d2 = d0.plus(q.times(d1));\r\n        if (d2.comparedTo(md) == 1) break;\r\n        d0 = d1;\r\n        d1 = d2;\r\n        n1 = n0.plus(q.times(d2 = n1));\r\n        n0 = d2;\r\n        d = n.minus(q.times(d2 = d));\r\n        n = d2;\r\n      }\r\n\r\n      d2 = div(md.minus(d0), d1, 0, 1);\r\n      n0 = n0.plus(d2.times(n1));\r\n      d0 = d0.plus(d2.times(d1));\r\n      n0.s = n1.s = x.s;\r\n      e = e * 2;\r\n\r\n      // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n          div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n      MAX_EXP = exp;\r\n\r\n      return r;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return the value of this BigNumber converted to a number primitive.\r\n     */\r\n    P.toNumber = function () {\r\n      return +valueOf(this);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n     * necessary to represent the integer part of the value in fixed-point notation, then use\r\n     * exponential notation.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.toPrecision = function (sd, rm) {\r\n      if (sd != null) intCheck(sd, 1, MAX);\r\n      return format(this, sd, rm, 2);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n     * TO_EXP_NEG, return exponential notation.\r\n     *\r\n     * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n     *\r\n     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n     */\r\n    P.toString = function (b) {\r\n      var str,\r\n        n = this,\r\n        s = n.s,\r\n        e = n.e;\r\n\r\n      // Infinity or NaN?\r\n      if (e === null) {\r\n        if (s) {\r\n          str = 'Infinity';\r\n          if (s < 0) str = '-' + str;\r\n        } else {\r\n          str = 'NaN';\r\n        }\r\n      } else {\r\n        if (b == null) {\r\n          str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n           ? toExponential(coeffToString(n.c), e)\r\n           : toFixedPoint(coeffToString(n.c), e, '0');\r\n        } else if (b === 10) {\r\n          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n          str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n        } else {\r\n          intCheck(b, 2, ALPHABET.length, 'Base');\r\n          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n        }\r\n\r\n        if (s < 0 && n.c[0]) str = '-' + str;\r\n      }\r\n\r\n      return str;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return as toString, but do not accept a base argument, and include the minus sign for\r\n     * negative zero.\r\n     */\r\n    P.valueOf = P.toJSON = function () {\r\n      return valueOf(this);\r\n    };\r\n\r\n\r\n    P._isBigNumber = true;\r\n\r\n    if (configObject != null) BigNumber.set(configObject);\r\n\r\n    return BigNumber;\r\n  }\r\n\r\n\r\n  // PRIVATE HELPER FUNCTIONS\r\n\r\n  // These functions don't need access to variables,\r\n  // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\n  function bitFloor(n) {\r\n    var i = n | 0;\r\n    return n > 0 || n === i ? i : i - 1;\r\n  }\r\n\r\n\r\n  // Return a coefficient array as a string of base 10 digits.\r\n  function coeffToString(a) {\r\n    var s, z,\r\n      i = 1,\r\n      j = a.length,\r\n      r = a[0] + '';\r\n\r\n    for (; i < j;) {\r\n      s = a[i++] + '';\r\n      z = LOG_BASE - s.length;\r\n      for (; z--; s = '0' + s);\r\n      r += s;\r\n    }\r\n\r\n    // Determine trailing zeros.\r\n    for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n    return r.slice(0, j + 1 || 1);\r\n  }\r\n\r\n\r\n  // Compare the value of BigNumbers x and y.\r\n  function compare(x, y) {\r\n    var a, b,\r\n      xc = x.c,\r\n      yc = y.c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either NaN?\r\n    if (!i || !j) return null;\r\n\r\n    a = xc && !xc[0];\r\n    b = yc && !yc[0];\r\n\r\n    // Either zero?\r\n    if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    a = i < 0;\r\n    b = k == l;\r\n\r\n    // Either Infinity?\r\n    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n    // Compare exponents.\r\n    if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n   */\r\n  function intCheck(n, min, max, name) {\r\n    if (n < min || n > max || n !== mathfloor(n)) {\r\n      throw Error\r\n       (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n         ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n         : ' not a primitive number: ') + String(n));\r\n    }\r\n  }\r\n\r\n\r\n  // Assumes finite n.\r\n  function isOdd(n) {\r\n    var k = n.c.length - 1;\r\n    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n  }\r\n\r\n\r\n  function toExponential(str, e) {\r\n    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n     (e < 0 ? 'e' : 'e+') + e;\r\n  }\r\n\r\n\r\n  function toFixedPoint(str, e, z) {\r\n    var len, zs;\r\n\r\n    // Negative exponent?\r\n    if (e < 0) {\r\n\r\n      // Prepend zeros.\r\n      for (zs = z + '.'; ++e; zs += z);\r\n      str = zs + str;\r\n\r\n    // Positive exponent\r\n    } else {\r\n      len = str.length;\r\n\r\n      // Append zeros.\r\n      if (++e > len) {\r\n        for (zs = z, e -= len; --e; zs += z);\r\n        str += zs;\r\n      } else if (e < len) {\r\n        str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // EXPORT\r\n\r\n\r\n  BigNumber = clone();\r\n  BigNumber['default'] = BigNumber.BigNumber = BigNumber;\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () { return BigNumber; });\r\n\r\n  // Node.js and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    module.exports = BigNumber;\r\n\r\n  // Browser.\r\n  } else {\r\n    if (!globalObject) {\r\n      globalObject = typeof self != 'undefined' && self ? self : window;\r\n    }\r\n\r\n    globalObject.BigNumber = BigNumber;\r\n  }\r\n})(this);\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","globalObject","clone","configObject","BigNumber","v","b","c","i","isNum","len","x","_isBigNumber","s","e","MAX_EXP","MIN_EXP","slice","str","String","isNumeric","test","parseNumeric","charCodeAt","indexOf","replace","search","substring","length","intCheck","ALPHABET","round","DECIMAL_PLACES","ROUNDING_MODE","DEBUG","Error","tooManyDigits","alphabet","charAt","caseChanged","toUpperCase","toLowerCase","convertBase","MAX_SAFE_INTEGER","mathfloor","LOG_BASE","push","format","n","rm","id","toString","c0","ne","coeffToString","TO_EXP_NEG","TO_EXP_POS","toExponential","toFixedPoint","maxOrMin","args","method","m","call","normalise","j","pop","sd","r","k","ni","xc","pows10","POWS_TEN","d","rd","mathceil","BASE","valueOf","P","prototype","constructor","ONE","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","prefix","groupSize","secondaryGroupSize","groupSeparator","decimalSeparator","fractionGroupSize","fractionGroupSeparator","suffix","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","config","set","BigNumber.set","obj","p","hasOwnProperty","MAX","bignumberError","crypto","getRandomValues","randomBytes","EXPONENTIAL_AT","RANGE","isBigNumber","BigNumber.isBigNumber","maximum","max","BigNumber.max","arguments","lt","minimum","min","BigNumber.min","gt","random","random53bitInt","pow2_53","Math","dp","a","rand","Uint32Array","copy","splice","sum","BigNumber.sum","plus","toBaseOut","baseIn","baseOut","arr","arrL","reverse","sign","callerIsToString","y","pow","decimal","div","concat","multiply","base","carry","klo","SQRT_BASE","khi","xlo","xhi","temp","compare","aL","bL","cmp","subtract","remL","yc","NaN","q","qc","bitFloor","more","xL","yL","xi","rem","yz","yc0","rem0","prod","prodL","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","isNaN","p1","p2","absoluteValue","abs","P.abs","comparedTo","P.comparedTo","decimalPlaces","P.dp","dividedBy","P.div","dividedToIntegerBy","idiv","P.idiv","exponentiatedBy","P.pow","isModExp","isInteger","nIsBig","isOdd","mod","nIsNeg","half","nIsOdd","times","integerValue","P.integerValue","isEqualTo","eq","P.eq","isFinite","P.isFinite","isGreaterThan","P.gt","isGreaterThanOrEqualTo","gte","P.gte","P.isInteger","isLessThan","P.lt","isLessThanOrEqualTo","lte","P.lte","P.isNaN","isNegative","P.isNegative","isPositive","P.isPositive","isZero","P.isZero","minus","P.minus","xe","ye","xLTy","t","modulo","P.mod","multipliedBy","P.times","xcL","ycL","zc","ylo","yhi","negated","P.negated","P.plus","precision","P.sd","shiftedBy","P.shiftedBy","squareRoot","sqrt","P.sqrt","rep","P.toExponential","toFixed","P.toFixed","toFormat","P.toFormat","split","g1","g2","intPart","fractionPart","isNeg","intDigits","substr","RegExp","toFraction","P.toFraction","md","d0","exp","n0","n1","d1","d2","toNumber","P.toNumber","toPrecision","P.toPrecision","P.toString","toJSON","P.toJSON","z","l","name","zs","ceil","floor","define","amd","self","window"]
}
