shadow$provide.module$node_modules$$walletconnect$utils$dist$cjs$ethereum=function(global,require,module,exports){function toChecksumAddress(address){address=enc_utils_1.removeHexPrefix(address.toLowerCase());const hash=enc_utils_1.removeHexPrefix(js_sha3_1.keccak_256(encoding_1.convertUtf8ToBuffer(address)));let checksum="";for(let i=0;i<address.length;i++)checksum=7<parseInt(hash[i],16)?checksum+address[i].toUpperCase():checksum+address[i];return enc_utils_1.addHexPrefix(checksum)}Object.defineProperty(exports,
"__esModule",{value:!0});exports.parseTransactionData=exports.parsePersonalSign=exports.isValidAddress=exports.toChecksumAddress=void 0;const js_sha3_1=require("module$node_modules$js_sha3$src$sha3"),encoding_1=require("module$node_modules$$walletconnect$utils$dist$cjs$encoding"),misc_1=require("module$node_modules$$walletconnect$utils$dist$cjs$misc"),validators_1=require("module$node_modules$$walletconnect$utils$dist$cjs$validators"),enc_utils_1=require("module$node_modules$enc_utils$dist$cjs$index");
exports.toChecksumAddress=toChecksumAddress;exports.isValidAddress=address=>address?"0x"!==address.toLowerCase().substring(0,2)?!1:/^(0x)?[0-9a-f]{40}$/i.test(address)?/^(0x)?[0-9a-f]{40}$/.test(address)||/^(0x)?[0-9A-F]{40}$/.test(address)?!0:address===toChecksumAddress(address):!1:!1;exports.parsePersonalSign=function(params){validators_1.isEmptyArray(params)||validators_1.isHexString(params[0])||(params[0]=encoding_1.convertUtf8ToHex(params[0]));return params};exports.parseTransactionData=function(txData){function parseHexValues(value){let result=
value;if("number"===typeof value||"string"===typeof value&&!validators_1.isEmptyString(value))validators_1.isHexString(value)?"string"===typeof value&&(result=misc_1.sanitizeHex(value)):result=encoding_1.convertNumberToHex(value);"string"===typeof result&&(result=misc_1.removeHexLeadingZeros(result));return result}if("undefined"===typeof txData.from||!exports.isValidAddress(txData.from))throw Error("Transaction object must include a valid 'from' value.");const txDataRPC={from:misc_1.sanitizeHex(txData.from),
to:"undefined"===typeof txData.to?"":misc_1.sanitizeHex(txData.to),gasPrice:"undefined"===typeof txData.gasPrice?"":parseHexValues(txData.gasPrice),gas:"undefined"===typeof txData.gas?"undefined"===typeof txData.gasLimit?"":parseHexValues(txData.gasLimit):parseHexValues(txData.gas),value:"undefined"===typeof txData.value?"":parseHexValues(txData.value),nonce:"undefined"===typeof txData.nonce?"":parseHexValues(txData.nonce),data:"undefined"===typeof txData.data?"":misc_1.sanitizeHex(txData.data)||
"0x"},prunable=["gasPrice","gas","value","nonce"];Object.keys(txDataRPC).forEach(key=>{!txDataRPC[key].trim().length&&prunable.includes(key)&&delete txDataRPC[key]});return txDataRPC}}
//# sourceMappingURL=module$node_modules$$walletconnect$utils$dist$cjs$ethereum.js.map
