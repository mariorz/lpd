{
"version":3,
"file":"module$node_modules$eth_sig_util$index.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/eth-sig-util/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$eth_sig_util$index\"] = function(global,require,module,exports) {\nconst ethUtil = require('ethereumjs-util')\nconst ethAbi = require('ethereumjs-abi')\n\nmodule.exports = {\n\n  concatSig: function (v, r, s) {\n    const rSig = ethUtil.fromSigned(r)\n    const sSig = ethUtil.fromSigned(s)\n    const vSig = ethUtil.bufferToInt(v)\n    const rStr = padWithZeroes(ethUtil.toUnsigned(rSig).toString('hex'), 64)\n    const sStr = padWithZeroes(ethUtil.toUnsigned(sSig).toString('hex'), 64)\n    const vStr = ethUtil.stripHexPrefix(ethUtil.intToHex(vSig))\n    return ethUtil.addHexPrefix(rStr.concat(sStr, vStr)).toString('hex')\n  },\n\n  normalize: function (input) {\n    if (!input) return\n\n    if (typeof input === 'number') {\n      const buffer = ethUtil.toBuffer(input)\n      input = ethUtil.bufferToHex(buffer)\n    }\n\n    if (typeof input !== 'string') {\n      var msg = 'eth-sig-util.normalize() requires hex string or integer input.'\n      msg += ' received ' + (typeof input) + ': ' + input\n      throw new Error(msg)\n    }\n\n    return ethUtil.addHexPrefix(input.toLowerCase())\n  },\n\n  personalSign: function (privateKey, msgParams) {\n    var message = ethUtil.toBuffer(msgParams.data)\n    var msgHash = ethUtil.hashPersonalMessage(message)\n    var sig = ethUtil.ecsign(msgHash, privateKey)\n    var serialized = ethUtil.bufferToHex(this.concatSig(sig.v, sig.r, sig.s))\n    return serialized\n  },\n\n  recoverPersonalSignature: function (msgParams) {\n    const publicKey = getPublicKeyFor(msgParams)\n    const sender = ethUtil.publicToAddress(publicKey)\n    const senderHex = ethUtil.bufferToHex(sender)\n    return senderHex\n  },\n\n  extractPublicKey: function (msgParams) {\n    const publicKey = getPublicKeyFor(msgParams)\n    return '0x' + publicKey.toString('hex')\n  },\n\n  typedSignatureHash: function (typedData) {\n    const hashBuffer = typedSignatureHash(typedData)\n    return ethUtil.bufferToHex(hashBuffer)\n  },\n\n  signTypedData: function (privateKey, msgParams) {\n    const msgHash = typedSignatureHash(msgParams.data)\n    const sig = ethUtil.ecsign(msgHash, privateKey)\n    return ethUtil.bufferToHex(this.concatSig(sig.v, sig.r, sig.s))\n  },\n\n  recoverTypedSignature: function (msgParams) {\n    const msgHash = typedSignatureHash(msgParams.data)\n    const publicKey = recoverPublicKey(msgHash, msgParams.sig)\n    const sender = ethUtil.publicToAddress(publicKey)\n    return ethUtil.bufferToHex(sender)\n  }\n\n}\n\n/**\n * @param typedData - Array of data along with types, as per EIP712.\n * @returns Buffer\n */\nfunction typedSignatureHash(typedData) {\n  const error = new Error('Expect argument to be non-empty array')\n  if (typeof typedData !== 'object' || !typedData.length) throw error\n\n  const data = typedData.map(function (e) {\n    return e.type === 'bytes' ? ethUtil.toBuffer(e.value) : e.value\n  })\n  const types = typedData.map(function (e) { return e.type })\n  const schema = typedData.map(function (e) {\n    if (!e.name) throw error\n    return e.type + ' ' + e.name\n  })\n\n  return ethAbi.soliditySHA3(\n    ['bytes32', 'bytes32'],\n    [\n      ethAbi.soliditySHA3(new Array(typedData.length).fill('string'), schema),\n      ethAbi.soliditySHA3(types, data)\n    ]\n  )\n}\n\nfunction recoverPublicKey(hash, sig) {\n  const signature = ethUtil.toBuffer(sig)\n  const sigParams = ethUtil.fromRpcSig(signature)\n  return ethUtil.ecrecover(hash, sigParams.v, sigParams.r, sigParams.s)\n}\n\nfunction getPublicKeyFor (msgParams) {\n  const message = ethUtil.toBuffer(msgParams.data)\n  const msgHash = ethUtil.hashPersonalMessage(message)\n  return recoverPublicKey(msgHash, msgParams.sig)\n}\n\n\nfunction padWithZeroes (number, length) {\n  var myString = '' + number\n  while (myString.length < length) {\n    myString = '0' + myString\n  }\n  return myString\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","typedSignatureHash","typedData","error","Error","length","data","map","e","type","ethUtil","toBuffer","value","types","schema","name","ethAbi","soliditySHA3","Array","fill","recoverPublicKey","hash","sig","signature","sigParams","fromRpcSig","ecrecover","v","r","s","getPublicKeyFor","msgParams","message","msgHash","hashPersonalMessage","padWithZeroes","number","myString","concatSig","rSig","fromSigned","sSig","vSig","bufferToInt","rStr","toUnsigned","toString","sStr","vStr","stripHexPrefix","intToHex","addHexPrefix","concat","normalize","input","buffer","bufferToHex","msg","toLowerCase","personalSign","privateKey","ecsign","serialized","recoverPersonalSignature","publicKey","sender","publicToAddress","senderHex","extractPublicKey","hashBuffer","signTypedData","recoverTypedSignature"]
}
