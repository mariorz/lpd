shadow$provide.module$node_modules$$walletconnect$core$dist$cjs$index=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});const tslib_1=require("module$node_modules$tslib$tslib"),utils_1=require("module$node_modules$$walletconnect$utils$dist$cjs$index"),socket_transport_1=tslib_1.__importDefault(require("module$node_modules$$walletconnect$socket_transport$dist$cjs$index")),errors_1=require("module$node_modules$$walletconnect$core$dist$cjs$errors"),events_1=
tslib_1.__importDefault(require("module$node_modules$$walletconnect$core$dist$cjs$events")),storage_1=tslib_1.__importDefault(require("module$node_modules$$walletconnect$core$dist$cjs$storage"));class Connector{constructor(opts){this.protocol="wc";this.version=1;this._bridge="";this._key=null;this._clientId="";this._clientMeta=null;this._peerId="";this._peerMeta=null;this._handshakeId=0;this._handshakeTopic="";this._connected=!1;this._accounts=[];this._networkId=this._chainId=0;this._rpcUrl="";this._eventManager=
new events_1.default;this._clientMeta=utils_1.getClientMeta()||opts.connectorOpts.clientMeta||null;this._cryptoLib=opts.cryptoLib;this._sessionStorage=opts.sessionStorage||new storage_1.default;this._qrcodeModal=opts.connectorOpts.qrcodeModal;this._qrcodeModalOptions=opts.connectorOpts.qrcodeModalOptions;if(!opts.connectorOpts.bridge&&!opts.connectorOpts.uri&&!opts.connectorOpts.session)throw Error(errors_1.ERROR_MISSING_REQUIRED);opts.connectorOpts.bridge&&(this.bridge=opts.connectorOpts.bridge);
opts.connectorOpts.uri&&(this.uri=opts.connectorOpts.uri);const session=opts.connectorOpts.session||this._getStorageSession();session&&(this.session=session);this.handshakeId&&this._subscribeToSessionResponse(this.handshakeId,"Session request rejected");this._transport=opts.transport||new socket_transport_1.default({protocol:this.protocol,version:this.version,url:this.bridge,subscriptions:[this.clientId]});this._subscribeToInternalEvents();this._initTransport();opts.connectorOpts.uri&&this._subscribeToSessionRequest();
opts.pushServerOpts&&this._registerPushServer(opts.pushServerOpts)}set bridge(value){value&&(this._bridge=value)}get bridge(){return this._bridge}set key(value){value&&(this._key=utils_1.convertHexToArrayBuffer(value))}get key(){return this._key?utils_1.convertArrayBufferToHex(this._key,!0):""}set clientId(value){value&&(this._clientId=value)}get clientId(){this._clientId||(this._clientId=utils_1.uuid());return this._clientId}set peerId(value){value&&(this._peerId=value)}get peerId(){return this._peerId}set clientMeta(value){}get clientMeta(){let clientMeta=
this._clientMeta;clientMeta||(clientMeta=this._clientMeta=utils_1.getClientMeta());return clientMeta}set peerMeta(value){this._peerMeta=value}get peerMeta(){return this._peerMeta}set handshakeTopic(value){value&&(this._handshakeTopic=value)}get handshakeTopic(){return this._handshakeTopic}set handshakeId(value){value&&(this._handshakeId=value)}get handshakeId(){return this._handshakeId}get uri(){return this._formatUri()}set uri(value){if(value){var {handshakeTopic,bridge,key}=this._parseUri(value);
this.handshakeTopic=handshakeTopic;this.bridge=bridge;this.key=key}}set chainId(value){this._chainId=value}get chainId(){return this._chainId}set networkId(value){this._networkId=value}get networkId(){return this._networkId}set accounts(value){this._accounts=value}get accounts(){return this._accounts}set rpcUrl(value){this._rpcUrl=value}get rpcUrl(){return this._rpcUrl}set connected(value){}get connected(){return this._connected}set pending(value){}get pending(){return!!this._handshakeTopic}get session(){return{connected:this.connected,
accounts:this.accounts,chainId:this.chainId,bridge:this.bridge,key:this.key,clientId:this.clientId,clientMeta:this.clientMeta,peerId:this.peerId,peerMeta:this.peerMeta,handshakeId:this.handshakeId,handshakeTopic:this.handshakeTopic}}set session(value){value&&(this._connected=value.connected,this.accounts=value.accounts,this.chainId=value.chainId,this.bridge=value.bridge,this.key=value.key,this.clientId=value.clientId,this.clientMeta=value.clientMeta,this.peerId=value.peerId,this.peerMeta=value.peerMeta,
this.handshakeId=value.handshakeId,this.handshakeTopic=value.handshakeTopic)}on(event,callback){this._eventManager.subscribe({event,callback})}createInstantRequest(instantRequest){return tslib_1.__awaiter(this,void 0,void 0,function*(){this._key=yield this._generateKey();const request=this._formatRequest({method:"wc_instantRequest",params:[{peerId:this.clientId,peerMeta:this.clientMeta,request:this._formatRequest(instantRequest)}]});this.handshakeId=request.id;this.handshakeTopic=utils_1.uuid();this._eventManager.trigger({event:"display_uri",
params:[this.uri]});this.on("modal_closed",()=>{throw Error(errors_1.ERROR_QRCODE_MODAL_USER_CLOSED);});const endInstantRequest=()=>{this.killSession()};try{const result=yield this._sendCallRequest(request);result&&endInstantRequest();return result}catch(error){throw endInstantRequest(),error;}})}connect(opts){return tslib_1.__awaiter(this,void 0,void 0,function*(){if(!this._qrcodeModal)throw Error(errors_1.ERROR_QRCODE_MODAL_NOT_PROVIDED);if(this.connected)return{chainId:this.chainId,accounts:this.accounts};
yield this.createSession(opts);return new Promise((resolve,reject)=>tslib_1.__awaiter(this,void 0,void 0,function*(){this.on("modal_closed",()=>reject(Error(errors_1.ERROR_QRCODE_MODAL_USER_CLOSED)));this.on("connect",(error,payload)=>{if(error)return reject(error);resolve(payload.params[0])})}))})}createSession(opts){return tslib_1.__awaiter(this,void 0,void 0,function*(){if(this._connected)throw Error(errors_1.ERROR_SESSION_CONNECTED);if(!this.pending){this._key=yield this._generateKey();var request=
this._formatRequest({method:"wc_sessionRequest",params:[{peerId:this.clientId,peerMeta:this.clientMeta,chainId:opts&&opts.chainId?opts.chainId:null}]});this.handshakeId=request.id;this.handshakeTopic=utils_1.uuid();this._sendSessionRequest(request,"Session update rejected",{topic:this.handshakeTopic});this._eventManager.trigger({event:"display_uri",params:[this.uri]})}})}approveSession(sessionStatus){if(this._connected)throw Error(errors_1.ERROR_SESSION_CONNECTED);this.chainId=sessionStatus.chainId;
this.accounts=sessionStatus.accounts;this.networkId=sessionStatus.networkId||0;this.rpcUrl=sessionStatus.rpcUrl||"";this._sendResponse({id:this.handshakeId,jsonrpc:"2.0",result:{approved:!0,chainId:this.chainId,networkId:this.networkId,accounts:this.accounts,rpcUrl:this.rpcUrl,peerId:this.clientId,peerMeta:this.clientMeta}});this._connected=!0;this._setStorageSession();this._eventManager.trigger({event:"connect",params:[{peerId:this.peerId,peerMeta:this.peerMeta,chainId:this.chainId,accounts:this.accounts}]})}rejectSession(sessionError){if(this._connected)throw Error(errors_1.ERROR_SESSION_CONNECTED);
sessionError=sessionError&&sessionError.message?sessionError.message:errors_1.ERROR_SESSION_REJECTED;const response=this._formatResponse({id:this.handshakeId,error:{message:sessionError}});this._sendResponse(response);this._connected=!1;this._eventManager.trigger({event:"disconnect",params:[{message:sessionError}]});this._removeStorageSession()}updateSession(sessionStatus){if(!this._connected)throw Error(errors_1.ERROR_SESSION_DISCONNECTED);this.chainId=sessionStatus.chainId;this.accounts=sessionStatus.accounts;
this.networkId=sessionStatus.networkId||0;this.rpcUrl=sessionStatus.rpcUrl||"";sessionStatus=this._formatRequest({method:"wc_sessionUpdate",params:[{approved:!0,chainId:this.chainId,networkId:this.networkId,accounts:this.accounts,rpcUrl:this.rpcUrl}]});this._sendSessionRequest(sessionStatus,"Session update rejected");this._eventManager.trigger({event:"session_update",params:[{chainId:this.chainId,accounts:this.accounts}]});this._manageStorageSession()}killSession(sessionError){return tslib_1.__awaiter(this,
void 0,void 0,function*(){const message=sessionError?sessionError.message:"Session Disconnected",request=this._formatRequest({method:"wc_sessionUpdate",params:[{approved:!1,chainId:null,networkId:null,accounts:null}]});yield this._sendRequest(request);this._handleSessionDisconnect(message)})}sendTransaction(tx){return tslib_1.__awaiter(this,void 0,void 0,function*(){if(!this._connected)throw Error(errors_1.ERROR_SESSION_DISCONNECTED);var parsedTx=utils_1.parseTransactionData(tx);parsedTx=this._formatRequest({method:"eth_sendTransaction",
params:[parsedTx]});return yield this._sendCallRequest(parsedTx)})}signTransaction(tx){return tslib_1.__awaiter(this,void 0,void 0,function*(){if(!this._connected)throw Error(errors_1.ERROR_SESSION_DISCONNECTED);var parsedTx=utils_1.parseTransactionData(tx);parsedTx=this._formatRequest({method:"eth_signTransaction",params:[parsedTx]});return yield this._sendCallRequest(parsedTx)})}signMessage(params){return tslib_1.__awaiter(this,void 0,void 0,function*(){if(!this._connected)throw Error(errors_1.ERROR_SESSION_DISCONNECTED);
const request=this._formatRequest({method:"eth_sign",params});return yield this._sendCallRequest(request)})}signPersonalMessage(params){return tslib_1.__awaiter(this,void 0,void 0,function*(){if(!this._connected)throw Error(errors_1.ERROR_SESSION_DISCONNECTED);params=utils_1.parsePersonalSign(params);const request=this._formatRequest({method:"personal_sign",params});return yield this._sendCallRequest(request)})}signTypedData(params){return tslib_1.__awaiter(this,void 0,void 0,function*(){if(!this._connected)throw Error(errors_1.ERROR_SESSION_DISCONNECTED);
const request=this._formatRequest({method:"eth_signTypedData",params});return yield this._sendCallRequest(request)})}updateChain(chainParams){return tslib_1.__awaiter(this,void 0,void 0,function*(){if(!this._connected)throw Error("Session currently disconnected");const request=this._formatRequest({method:"wallet_updateChain",params:[chainParams]});return yield this._sendCallRequest(request)})}unsafeSend(request,options){this._sendRequest(request,options);return new Promise((resolve,reject)=>{this._subscribeToResponse(request.id,
(error,payload)=>{if(error)reject(error);else{if(!payload)throw Error(errors_1.ERROR_MISSING_JSON_RPC);resolve(payload)}})})}sendCustomRequest(request,options){return tslib_1.__awaiter(this,void 0,void 0,function*(){if(!this._connected)throw Error(errors_1.ERROR_SESSION_DISCONNECTED);switch(request.method){case "eth_accounts":return this.accounts;case "eth_chainId":return utils_1.convertNumberToHex(this.chainId);case "eth_sendTransaction":case "eth_signTransaction":request.params&&(request.params[0]=
utils_1.parseTransactionData(request.params[0]));break;case "personal_sign":request.params&&(request.params=utils_1.parsePersonalSign(request.params))}const formattedRequest=this._formatRequest(request);return yield this._sendCallRequest(formattedRequest,options)})}approveRequest(response){if(utils_1.isJsonRpcResponseSuccess(response))response=this._formatResponse(response),this._sendResponse(response);else throw Error(errors_1.ERROR_MISSING_RESULT);}rejectRequest(response){if(utils_1.isJsonRpcResponseError(response))response=
this._formatResponse(response),this._sendResponse(response);else throw Error(errors_1.ERROR_MISSING_ERROR);}_sendRequest(request,options){return tslib_1.__awaiter(this,void 0,void 0,function*(){var callRequest=this._formatRequest(request),encryptionPayload=yield this._encrypt(callRequest);const topic="undefined"!==typeof(null===options||void 0===options?void 0:options.topic)?options.topic:this.peerId;encryptionPayload=JSON.stringify(encryptionPayload);callRequest="undefined"!==typeof(null===options||
void 0===options?void 0:options.forcePushNotification)?!options.forcePushNotification:utils_1.isSilentPayload(callRequest);this._transport.send(encryptionPayload,topic,callRequest)})}_sendResponse(response){return tslib_1.__awaiter(this,void 0,void 0,function*(){var encryptionPayload=yield this._encrypt(response);const topic=this.peerId;encryptionPayload=JSON.stringify(encryptionPayload);this._transport.send(encryptionPayload,topic,!0)})}_sendSessionRequest(request,errorMsg,options){return tslib_1.__awaiter(this,
void 0,void 0,function*(){this._sendRequest(request,options);this._subscribeToSessionResponse(request.id,errorMsg)})}_sendCallRequest(request,options){this._sendRequest(request,options);this._eventManager.trigger({event:"call_request_sent",params:[{request,options}]});utils_1.isMobile()&&utils_1.signingMethods.includes(request.method)&&(options=utils_1.getLocal(utils_1.mobileLinkChoiceKey))&&(window.location.href=options.href);return this._subscribeToCallResponse(request.id)}_formatRequest(request){if("undefined"===
typeof request.method)throw Error(errors_1.ERROR_MISSING_METHOD);return{id:"undefined"===typeof request.id?utils_1.payloadId():request.id,jsonrpc:"2.0",method:request.method,params:"undefined"===typeof request.params?[]:request.params}}_formatResponse(response){if("undefined"===typeof response.id)throw Error(errors_1.ERROR_MISSING_ID);const baseResponse={id:response.id,jsonrpc:"2.0"};if(utils_1.isJsonRpcResponseError(response)){const error=utils_1.formatRpcError(response.error);return Object.assign(Object.assign(Object.assign({},
baseResponse),response),{error})}if(utils_1.isJsonRpcResponseSuccess(response))return Object.assign(Object.assign({},baseResponse),response);throw Error(errors_1.ERROR_INVALID_RESPONSE);}_handleSessionDisconnect(errorMsg){errorMsg=errorMsg||"Session Disconnected";this._connected||(this._qrcodeModal&&this._qrcodeModal.close(),utils_1.removeLocal(utils_1.mobileLinkChoiceKey));this._connected&&(this._connected=!1);this._handshakeId&&(this._handshakeId=0);this._handshakeTopic&&(this._handshakeTopic="");
this._eventManager.trigger({event:"disconnect",params:[{message:errorMsg}]});this._removeStorageSession();this._transport.close()}_handleSessionResponse(errorMsg,sessionParams){sessionParams?sessionParams.approved?(this._connected?(sessionParams.chainId&&(this.chainId=sessionParams.chainId),sessionParams.accounts&&(this.accounts=sessionParams.accounts),this._eventManager.trigger({event:"session_update",params:[{chainId:this.chainId,accounts:this.accounts}]})):(this._connected=!0,sessionParams.chainId&&
(this.chainId=sessionParams.chainId),sessionParams.accounts&&(this.accounts=sessionParams.accounts),sessionParams.peerId&&!this.peerId&&(this.peerId=sessionParams.peerId),sessionParams.peerMeta&&!this.peerMeta&&(this.peerMeta=sessionParams.peerMeta),this._eventManager.trigger({event:"connect",params:[{peerId:this.peerId,peerMeta:this.peerMeta,chainId:this.chainId,accounts:this.accounts}]})),this._manageStorageSession()):this._handleSessionDisconnect(errorMsg):this._handleSessionDisconnect(errorMsg)}_handleIncomingMessages(socketMessage){return tslib_1.__awaiter(this,
void 0,void 0,function*(){if([this.clientId,this.handshakeTopic].includes(socketMessage.topic)){try{var encryptionPayload=JSON.parse(socketMessage.payload)}catch(error){return}(encryptionPayload=yield this._decrypt(encryptionPayload))&&this._eventManager.trigger(encryptionPayload)}})}_subscribeToSessionRequest(){this._transport.subscribe(this.handshakeTopic)}_subscribeToResponse(id,callback){this.on(`response:${id}`,callback)}_subscribeToSessionResponse(id,errorMsg){this._subscribeToResponse(id,(error,
payload)=>{error?this._handleSessionResponse(error.message):payload.result?this._handleSessionResponse(errorMsg,payload.result):payload.error&&payload.error.message?this._handleSessionResponse(payload.error.message):this._handleSessionResponse(errorMsg)})}_subscribeToCallResponse(id){return new Promise((resolve,reject)=>{this._subscribeToResponse(id,(error,payload)=>{error?reject(error):payload.result?resolve(payload.result):payload.error&&payload.error.message?reject(Error(payload.error.message)):
reject(Error(errors_1.ERROR_INVALID_RESPONSE))})})}_subscribeToInternalEvents(){this.on("display_uri",()=>{this._qrcodeModal&&this._qrcodeModal.open(this.uri,()=>{this._eventManager.trigger({event:"modal_closed",params:[]})},this._qrcodeModalOptions)});this.on("connect",()=>{this._qrcodeModal&&this._qrcodeModal.close()});this.on("wc_sessionRequest",(error,payload)=>{error&&this._eventManager.trigger({event:"error",params:[{code:"SESSION_REQUEST_ERROR",message:error.toString()}]});this.handshakeId=
payload.id;this.peerId=payload.params[0].peerId;this.peerMeta=payload.params[0].peerMeta;error=Object.assign(Object.assign({},payload),{method:"session_request"});this._eventManager.trigger(error)});this.on("wc_sessionUpdate",(error,payload)=>{error&&this._handleSessionResponse(error.message);this._handleSessionResponse("Session disconnected",payload.params[0])})}_initTransport(){this._transport.on("message",socketMessage=>this._handleIncomingMessages(socketMessage));this._transport.on("open",()=>
this._eventManager.trigger({event:"transport_open",params:[]}));this._transport.on("close",()=>this._eventManager.trigger({event:"transport_close",params:[]}));this._transport.on("error",()=>this._eventManager.trigger({event:"transport_error",params:["Websocket connection failed"]}));this._transport.open()}_formatUri(){const protocol=this.protocol,handshakeTopic=this.handshakeTopic,version=this.version,bridge=encodeURIComponent(this.bridge);return`${protocol}:${handshakeTopic}@${version}?bridge=${bridge}&key=${this.key}`}_parseUri(uri){uri=
utils_1.parseWalletConnectUri(uri);if(uri.protocol===this.protocol){if(!uri.handshakeTopic)throw Error("Invalid or missing handshakeTopic parameter value");const handshakeTopic=uri.handshakeTopic;if(!uri.bridge)throw Error("Invalid or missing bridge url parameter value");const bridge=decodeURIComponent(uri.bridge);if(!uri.key)throw Error("Invalid or missing key parameter value");return{handshakeTopic,bridge,key:uri.key}}throw Error(errors_1.ERROR_INVALID_URI);}_generateKey(){return tslib_1.__awaiter(this,
void 0,void 0,function*(){return this._cryptoLib?yield this._cryptoLib.generateKey():null})}_encrypt(data){return tslib_1.__awaiter(this,void 0,void 0,function*(){const key=this._key;return this._cryptoLib&&key?yield this._cryptoLib.encrypt(data,key):null})}_decrypt(payload){return tslib_1.__awaiter(this,void 0,void 0,function*(){const key=this._key;return this._cryptoLib&&key?yield this._cryptoLib.decrypt(payload,key):null})}_getStorageSession(){let result=null;this._sessionStorage&&(result=this._sessionStorage.getSession());
return result}_setStorageSession(){this._sessionStorage&&this._sessionStorage.setSession(this.session)}_removeStorageSession(){this._sessionStorage&&this._sessionStorage.removeSession()}_manageStorageSession(){this._connected?this._setStorageSession():this._removeStorageSession()}_registerPushServer(pushServerOpts){if(!pushServerOpts.url||"string"!==typeof pushServerOpts.url)throw Error("Invalid or missing pushServerOpts.url parameter value");if(!pushServerOpts.type||"string"!==typeof pushServerOpts.type)throw Error("Invalid or missing pushServerOpts.type parameter value");
if(!pushServerOpts.token||"string"!==typeof pushServerOpts.token)throw Error("Invalid or missing pushServerOpts.token parameter value");const pushSubscription={bridge:this.bridge,topic:this.clientId,type:pushServerOpts.type,token:pushServerOpts.token,peerName:"",language:pushServerOpts.language||""};this.on("connect",(error$jscomp$0,payload)=>tslib_1.__awaiter(this,void 0,void 0,function*(){if(error$jscomp$0)throw error$jscomp$0;pushServerOpts.peerMeta&&(pushSubscription.peerName=payload.params[0].peerMeta.name);
try{if(!(yield(yield fetch(`${pushServerOpts.url}/new`,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify(pushSubscription)})).json()).success)throw Error("Failed to register in Push Server");}catch(error){throw Error("Failed to register in Push Server");}}))}}exports.default=Connector}
//# sourceMappingURL=module$node_modules$$walletconnect$core$dist$cjs$index.js.map
