{
"version":3,
"file":"module$node_modules$dijkstrajs$dijkstra.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/dijkstrajs/dijkstra.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$dijkstrajs$dijkstra\"] = function(global,require,module,exports) {\n'use strict';\n\n/******************************************************************************\n * Created 2008-08-19.\n *\n * Dijkstra path-finding functions. Adapted from the Dijkstar Python project.\n *\n * Copyright (C) 2008\n *   Wyatt Baldwin <self@wyattbaldwin.com>\n *   All rights reserved\n *\n * Licensed under the MIT license.\n *\n *   http://www.opensource.org/licenses/mit-license.php\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n *****************************************************************************/\nvar dijkstra = {\n  single_source_shortest_paths: function(graph, s, d) {\n    // Predecessor map for each node that has been encountered.\n    // node ID => predecessor node ID\n    var predecessors = {};\n\n    // Costs of shortest paths from s to all nodes encountered.\n    // node ID => cost\n    var costs = {};\n    costs[s] = 0;\n\n    // Costs of shortest paths from s to all nodes encountered; differs from\n    // `costs` in that it provides easy access to the node that currently has\n    // the known shortest path from s.\n    // XXX: Do we actually need both `costs` and `open`?\n    var open = dijkstra.PriorityQueue.make();\n    open.push(s, 0);\n\n    var closest,\n        u, v,\n        cost_of_s_to_u,\n        adjacent_nodes,\n        cost_of_e,\n        cost_of_s_to_u_plus_cost_of_e,\n        cost_of_s_to_v,\n        first_visit;\n    while (!open.empty()) {\n      // In the nodes remaining in graph that have a known cost from s,\n      // find the node, u, that currently has the shortest path from s.\n      closest = open.pop();\n      u = closest.value;\n      cost_of_s_to_u = closest.cost;\n\n      // Get nodes adjacent to u...\n      adjacent_nodes = graph[u] || {};\n\n      // ...and explore the edges that connect u to those nodes, updating\n      // the cost of the shortest paths to any or all of those nodes as\n      // necessary. v is the node across the current edge from u.\n      for (v in adjacent_nodes) {\n        if (adjacent_nodes.hasOwnProperty(v)) {\n          // Get the cost of the edge running from u to v.\n          cost_of_e = adjacent_nodes[v];\n\n          // Cost of s to u plus the cost of u to v across e--this is *a*\n          // cost from s to v that may or may not be less than the current\n          // known cost to v.\n          cost_of_s_to_u_plus_cost_of_e = cost_of_s_to_u + cost_of_e;\n\n          // If we haven't visited v yet OR if the current known cost from s to\n          // v is greater than the new cost we just found (cost of s to u plus\n          // cost of u to v across e), update v's cost in the cost list and\n          // update v's predecessor in the predecessor list (it's now u).\n          cost_of_s_to_v = costs[v];\n          first_visit = (typeof costs[v] === 'undefined');\n          if (first_visit || cost_of_s_to_v > cost_of_s_to_u_plus_cost_of_e) {\n            costs[v] = cost_of_s_to_u_plus_cost_of_e;\n            open.push(v, cost_of_s_to_u_plus_cost_of_e);\n            predecessors[v] = u;\n          }\n        }\n      }\n    }\n\n    if (typeof d !== 'undefined' && typeof costs[d] === 'undefined') {\n      var msg = ['Could not find a path from ', s, ' to ', d, '.'].join('');\n      throw new Error(msg);\n    }\n\n    return predecessors;\n  },\n\n  extract_shortest_path_from_predecessor_list: function(predecessors, d) {\n    var nodes = [];\n    var u = d;\n    var predecessor;\n    while (u) {\n      nodes.push(u);\n      predecessor = predecessors[u];\n      u = predecessors[u];\n    }\n    nodes.reverse();\n    return nodes;\n  },\n\n  find_path: function(graph, s, d) {\n    var predecessors = dijkstra.single_source_shortest_paths(graph, s, d);\n    return dijkstra.extract_shortest_path_from_predecessor_list(\n      predecessors, d);\n  },\n\n  /**\n   * A very naive priority queue implementation.\n   */\n  PriorityQueue: {\n    make: function (opts) {\n      var T = dijkstra.PriorityQueue,\n          t = {},\n          key;\n      opts = opts || {};\n      for (key in T) {\n        if (T.hasOwnProperty(key)) {\n          t[key] = T[key];\n        }\n      }\n      t.queue = [];\n      t.sorter = opts.sorter || T.default_sorter;\n      return t;\n    },\n\n    default_sorter: function (a, b) {\n      return a.cost - b.cost;\n    },\n\n    /**\n     * Add a new item to the queue and ensure the highest priority element\n     * is at the front of the queue.\n     */\n    push: function (value, cost) {\n      var item = {value: value, cost: cost};\n      this.queue.push(item);\n      this.queue.sort(this.sorter);\n    },\n\n    /**\n     * Return the highest priority element in the queue.\n     */\n    pop: function () {\n      return this.queue.shift();\n    },\n\n    empty: function () {\n      return this.queue.length === 0;\n    }\n  }\n};\n\n\n// node.js module exports\nif (typeof module !== 'undefined') {\n  module.exports = dijkstra;\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","dijkstra","single_source_shortest_paths","graph","s","d","predecessors","costs","open","PriorityQueue","make","push","closest","u","v","adjacent_nodes","cost_of_e","cost_of_s_to_v","first_visit","empty","pop","value","cost_of_s_to_u","cost","hasOwnProperty","cost_of_s_to_u_plus_cost_of_e","msg","join","Error","extract_shortest_path_from_predecessor_list","nodes","reverse","find_path","opts","T","t","key","queue","sorter","default_sorter","a","b","item","sort","shift","length"]
}
