{
"version":3,
"file":"module$node_modules$json_rpc_engine$src$index.js",
"lineCount":12,
"mappings":"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",
"sources":["node_modules/json-rpc-engine/src/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$json_rpc_engine$src$index\"] = function(global,require,module,exports) {\n'use strict'\n\nconst SafeEventEmitter = require('safe-event-emitter')\nconst {\n  serializeError,\n  EthereumRpcError,\n  ERROR_CODES,\n} = require('eth-rpc-errors')\n\nmodule.exports = class RpcEngine extends SafeEventEmitter {\n  constructor () {\n    super()\n    this._middleware = []\n  }\n\n  //\n  // Public\n  //\n\n  push (middleware) {\n    this._middleware.push(middleware)\n  }\n\n  handle (req, cb) {\n\n    if (Array.isArray(req)) {\n      if (cb) {\n        this._handleBatch(req)\n          .then((res) => cb(null, res))\n          .catch((err) => cb(err)) // fatal error\n        return undefined\n      }\n      return this._handleBatch(req)\n    }\n\n    if (!cb) {\n      return this._promiseHandle(req)\n    }\n    return this._handle(req, cb)\n  }\n\n  //\n  // Private\n  //\n\n  async _handleBatch (reqs) {\n    // The order here is important\n    // 3. Return batch response, or reject on some kind of fatal error\n    return await Promise.all( // 2. Wait for all requests to finish\n      // 1. Begin executing each request in the order received\n      reqs.map(this._promiseHandle.bind(this)),\n    )\n  }\n\n  _promiseHandle (req) {\n    return new Promise((resolve) => {\n      this._handle(req, (_err, res) => {\n        // there will always be a response, and it will always have any error\n        // that is caught and propagated\n        resolve(res)\n      })\n    })\n  }\n\n  _handle (callerReq, cb) {\n\n    const req = Object.assign({}, callerReq)\n    const res = {\n      id: req.id,\n      jsonrpc: req.jsonrpc,\n    }\n\n    let processingError\n\n    this._processRequest(req, res)\n      .catch((error) => {\n        // either from return handlers or something unexpected\n        processingError = error\n      })\n      .finally(() => {\n\n        // preserve unserialized error, if any, for use in callback\n        const responseError = res._originalError\n        delete res._originalError\n\n        const error = responseError || processingError || null\n\n        if (error) {\n          // ensure no result is present on an errored response\n          delete res.result\n          if (!res.error) {\n            res.error = serializeError(error)\n          }\n        }\n\n        cb(error, res)\n      })\n  }\n\n  async _processRequest (req, res) {\n    const { isComplete, returnHandlers } = await this._runAllMiddleware(req, res)\n    this._checkForCompletion(req, res, isComplete)\n    await this._runReturnHandlers(returnHandlers)\n  }\n\n  async _runReturnHandlers (handlers) {\n    for (const handler of handlers) {\n      await new Promise((resolve, reject) => {\n        handler((err) => (err ? reject(err) : resolve()))\n      })\n    }\n  }\n\n  _checkForCompletion (req, res, isComplete) {\n    if (!('result' in res) && !('error' in res)) {\n      const requestBody = JSON.stringify(req, null, 2)\n      const message = `JsonRpcEngine: Response has no error or result for request:\\n${requestBody}`\n      throw new EthereumRpcError(ERROR_CODES.rpc.internal, message, req)\n    }\n    if (!isComplete) {\n      const requestBody = JSON.stringify(req, null, 2)\n      const message = `JsonRpcEngine: Nothing ended request:\\n${requestBody}`\n      throw new EthereumRpcError(ERROR_CODES.rpc.internal, message, req)\n    }\n  }\n\n  // walks down stack of middleware\n  async _runAllMiddleware (req, res) {\n\n    const returnHandlers = []\n    // flag for early return\n    let isComplete = false\n\n    // go down stack of middleware, call and collect optional returnHandlers\n    for (const middleware of this._middleware) {\n      isComplete = await RpcEngine._runMiddleware(\n        req, res, middleware, returnHandlers,\n      )\n      if (isComplete) {\n        break\n      }\n    }\n    return { isComplete, returnHandlers: returnHandlers.reverse() }\n  }\n\n  // runs an individual middleware\n  static _runMiddleware (req, res, middleware, returnHandlers) {\n    return new Promise((resolve) => {\n\n      const end = (err) => {\n        const error = err || (res && res.error)\n        if (error) {\n          res.error = serializeError(error)\n          res._originalError = error\n        }\n        resolve(true) // true indicates the request should end\n      }\n\n      const next = (returnHandler) => {\n        if (res.error) {\n          end(res.error)\n        } else {\n          if (returnHandler) {\n            returnHandlers.push(returnHandler)\n          }\n          resolve(false) // false indicates the request should not end\n        }\n      }\n\n      try {\n        middleware(req, res, next, end)\n      } catch (error) {\n        end(error)\n      }\n    })\n  }\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","SafeEventEmitter","serializeError","EthereumRpcError","ERROR_CODES","constructor","_middleware","push","middleware","handle","req","cb","Array","isArray","_handleBatch","then","res","catch","err","_handle","_promiseHandle","reqs","Promise","all","map","bind","resolve","_err","callerReq","Object","assign","id","jsonrpc","processingError","_processRequest","error","finally","responseError","_originalError","result","isComplete","returnHandlers","_runAllMiddleware","_checkForCompletion","_runReturnHandlers","handlers","handler","reject","requestBody","JSON","stringify","rpc","internal","RpcEngine","_runMiddleware","reverse","end","next","returnHandler"]
}
