shadow$provide.module$node_modules$$walletconnect$web3_provider$dist$cjs$index=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});const tslib_1=require("module$node_modules$tslib$tslib"),client_1=tslib_1.__importDefault(require("module$node_modules$$walletconnect$client$dist$cjs$index")),qrcode_modal_1=tslib_1.__importDefault(require("module$node_modules$$walletconnect$qrcode_modal$dist$cjs$index")),http_connection_1=tslib_1.__importDefault(require("module$node_modules$$walletconnect$http_connection$dist$cjs$index")),
utils_1=require("module$node_modules$$walletconnect$utils$dist$cjs$index");global=require("module$node_modules$web3_provider_engine$index");const CacheSubprovider=require("module$node_modules$web3_provider_engine$subproviders$cache"),FixtureSubprovider=require("module$node_modules$web3_provider_engine$subproviders$fixture"),FilterSubprovider=require("module$node_modules$web3_provider_engine$subproviders$filters"),HookedWalletSubprovider=require("module$node_modules$web3_provider_engine$subproviders$hooked_wallet"),
NonceSubprovider=require("module$node_modules$web3_provider_engine$subproviders$nonce_tracker"),SubscriptionsSubprovider=require("module$node_modules$web3_provider_engine$subproviders$subscriptions");class WalletConnectProvider extends global{constructor(opts){super({pollingInterval:opts.pollingInterval||8E3});this.bridge="https://bridge.walletconnect.org";this.qrcode=!0;this.qrcodeModal=qrcode_modal_1.default;this.qrcodeModalOptions=void 0;this.rpc=null;this.infuraId="";this.http=null;this.connected=
this.isConnecting=!1;this.connectCallbacks=[];this.accounts=[];this.networkId=this.chainId=1;this.rpcUrl="";this.enable=()=>tslib_1.__awaiter(this,void 0,void 0,function*(){const wc=yield this.getWalletConnector();if(wc)return this.start(),this.subscribeWalletConnector(),wc.accounts;throw Error("Failed to connect to WalleConnect");});this.request=payload=>tslib_1.__awaiter(this,void 0,void 0,function*(){return this.send(payload)});this.send=(payload,callback)=>tslib_1.__awaiter(this,void 0,void 0,
function*(){if("string"===typeof payload){const method=payload;let params=callback;"personal_sign"===method&&(params=utils_1.parsePersonalSign(params));return this.sendAsyncPromise(method,params)}payload=Object.assign({id:utils_1.payloadId(),jsonrpc:"2.0"},payload);"personal_sign"===payload.method&&(payload.params=utils_1.parsePersonalSign(payload.params));if(callback)this.sendAsync(payload,callback);else return this.sendAsyncPromise(payload.method,payload.params)});this.onConnect=callback=>{this.connectCallbacks.push(callback)};
this.triggerConnect=result=>{this.connectCallbacks&&this.connectCallbacks.length&&this.connectCallbacks.forEach(callback=>callback(result))};this.bridge=opts.connector?opts.connector.bridge:opts.bridge||"https://bridge.walletconnect.org";this.qrcode="undefined"===typeof opts.qrcode||!1!==opts.qrcode;this.qrcodeModal=opts.qrcodeModal||this.qrcodeModal;this.qrcodeModalOptions=opts.qrcodeModalOptions;this.wc=opts.connector||new client_1.default({bridge:this.bridge,qrcodeModal:this.qrcode?this.qrcodeModal:
void 0,qrcodeModalOptions:this.qrcodeModalOptions,clientMeta:null===opts||void 0===opts?void 0:opts.clientMeta});this.rpc=opts.rpc||null;if(!(this.rpc||opts.infuraId&&"string"===typeof opts.infuraId&&opts.infuraId.trim()))throw Error("Missing one of the required parameters: rpc or infuraId");this.infuraId=opts.infuraId||"";this.networkId=this.chainId="undefined"!==typeof opts.chainId?opts.chainId:1;this.initialize()}get isWalletConnect(){return!0}get connector(){return this.wc}get walletMeta(){return this.wc.peerMeta}disconnect(){return tslib_1.__awaiter(this,
void 0,void 0,function*(){this.close()})}close(){return tslib_1.__awaiter(this,void 0,void 0,function*(){yield(yield this.getWalletConnector({disableSessionCreation:!0})).killSession();yield this.onDisconnect()})}handleRequest(payload){return tslib_1.__awaiter(this,void 0,void 0,function*(){try{let response,result=null;const wc=yield this.getWalletConnector();switch(payload.method){case "wc_killSession":yield this.close();result=null;break;case "eth_accounts":result=wc.accounts;break;case "eth_coinbase":result=
wc.accounts[0];break;case "eth_chainId":result=wc.chainId;break;case "net_version":result=wc.networkId||wc.chainId;break;case "eth_uninstallFilter":this.sendAsync(payload,_=>_);result=!0;break;default:response=yield this.handleOtherRequests(payload)}return response?response:this.formatResponse(payload,result)}catch(error){throw this.emit("error",error),error;}})}handleOtherRequests(payload){return tslib_1.__awaiter(this,void 0,void 0,function*(){if(!utils_1.signingMethods.includes(payload.method)&&
payload.method.startsWith("eth_"))return this.handleReadRequests(payload);const result=yield(yield this.getWalletConnector()).sendCustomRequest(payload);return this.formatResponse(payload,result)})}handleReadRequests(payload){return tslib_1.__awaiter(this,void 0,void 0,function*(){if(!this.http){const error=Error("HTTP Connection not available");this.emit("error",error);throw error;}return this.http.send(payload)})}formatResponse(payload,result){return{id:payload.id,jsonrpc:payload.jsonrpc,result}}getWalletConnector(opts=
{}){const {disableSessionCreation=!1}=opts;return new Promise((resolve,reject)=>{const wc=this.wc;if(this.isConnecting)this.onConnect(x=>resolve(x));else if(wc.connected||disableSessionCreation)this.connected||(this.connected=!0,this.updateState(wc.session)),resolve(wc);else{this.isConnecting=!0;const sessionRequestOpions=this.chainId?{chainId:this.chainId}:void 0;wc.on("modal_closed",()=>{reject(Error("User closed modal"))});wc.createSession(sessionRequestOpions).then(()=>{wc.on("connect",(error,
payload)=>{if(error)return this.isConnecting=!1,reject(error);this.isConnecting=!1;this.connected=!0;payload&&this.updateState(payload.params[0]);this.emit("connect");this.triggerConnect(wc);resolve(wc)})}).catch(error=>{this.isConnecting=!1;reject(error)})}})}subscribeWalletConnector(){return tslib_1.__awaiter(this,void 0,void 0,function*(){const wc=yield this.getWalletConnector();wc.on("disconnect",error=>{if(error)this.emit("error",error);else this.onDisconnect()});wc.on("session_update",(error,
payload)=>{error?this.emit("error",error):this.updateState(payload.params[0])})})}onDisconnect(){return tslib_1.__awaiter(this,void 0,void 0,function*(){yield this.stop();this.emit("close",1E3,"Connection closed");this.emit("disconnect",1E3,"Connection disconnected")})}updateState(sessionParams){return tslib_1.__awaiter(this,void 0,void 0,function*(){const {accounts,chainId,networkId,rpcUrl}=sessionParams;if(!this.accounts||accounts&&this.accounts!==accounts)this.accounts=accounts,this.emit("accountsChanged",
accounts);if(!this.chainId||chainId&&this.chainId!==chainId)this.chainId=chainId,this.emit("chainChanged",chainId);if(!this.networkId||networkId&&this.networkId!==networkId)this.networkId=networkId,this.emit("networkChanged",networkId);this.updateRpcUrl(this.chainId,rpcUrl||"")})}updateRpcUrl(chainId,rpcUrl=""){const network={1:"mainnet",3:"ropsten",4:"rinkeby",5:"goerli",42:"kovan"}[chainId];rpcUrl||(this.rpc&&this.rpc[chainId]?rpcUrl=this.rpc[chainId]:network&&(rpcUrl=`https://${network}.infura.io/v3/${this.infuraId}`));
rpcUrl?(this.rpcUrl=rpcUrl,this.updateHttpConnection()):this.emit("error",Error(`No RPC Url available for chainId: ${chainId}`))}updateHttpConnection(){this.rpcUrl&&(this.http=new http_connection_1.default(this.rpcUrl),this.http.on("payload",payload=>this.emit("payload",payload)),this.http.on("error",error=>this.emit("error",error)))}sendAsyncPromise(method,params){return new Promise((resolve,reject)=>{this.sendAsync({id:utils_1.payloadId(),jsonrpc:"2.0",method,params:params||[]},(error,response)=>
{error?reject(error):resolve(response.result)})})}initialize(){this.updateRpcUrl(this.chainId);this.addProvider(new FixtureSubprovider({eth_hashrate:"0x00",eth_mining:!1,eth_syncing:!0,net_listening:!0,web3_clientVersion:"WalletConnect/v1.x.x/javascript"}));this.addProvider(new CacheSubprovider);this.addProvider(new SubscriptionsSubprovider);this.addProvider(new FilterSubprovider);this.addProvider(new NonceSubprovider);this.addProvider(new HookedWalletSubprovider(this.configWallet()));this.addProvider({handleRequest:(payload,
next,end)=>tslib_1.__awaiter(this,void 0,void 0,function*(){try{const {result}=yield this.handleRequest(payload);end(null,result)}catch(error){end(error)}}),setEngine:_=>_})}configWallet(){return{getAccounts:cb=>tslib_1.__awaiter(this,void 0,void 0,function*(){try{const accounts=(yield this.getWalletConnector()).accounts;accounts&&accounts.length?cb(null,accounts):cb(Error("Failed to get accounts"))}catch(error){cb(error)}}),processMessage:(msgParams,cb)=>tslib_1.__awaiter(this,void 0,void 0,function*(){try{const result=
yield(yield this.getWalletConnector()).signMessage([msgParams.from,msgParams.data]);cb(null,result)}catch(error){cb(error)}}),processPersonalMessage:(msgParams,cb)=>tslib_1.__awaiter(this,void 0,void 0,function*(){try{const result=yield(yield this.getWalletConnector()).signPersonalMessage([msgParams.data,msgParams.from]);cb(null,result)}catch(error){cb(error)}}),processSignTransaction:(txParams,cb)=>tslib_1.__awaiter(this,void 0,void 0,function*(){try{const result=yield(yield this.getWalletConnector()).signTransaction(txParams);
cb(null,result)}catch(error){cb(error)}}),processTransaction:(txParams,cb)=>tslib_1.__awaiter(this,void 0,void 0,function*(){try{const result=yield(yield this.getWalletConnector()).sendTransaction(txParams);cb(null,result)}catch(error){cb(error)}}),processTypedMessage:(msgParams,cb)=>tslib_1.__awaiter(this,void 0,void 0,function*(){try{const result=yield(yield this.getWalletConnector()).signTypedData([msgParams.from,msgParams.data]);cb(null,result)}catch(error){cb(error)}})}}}exports.default=WalletConnectProvider}
//# sourceMappingURL=module$node_modules$$walletconnect$web3_provider$dist$cjs$index.js.map
