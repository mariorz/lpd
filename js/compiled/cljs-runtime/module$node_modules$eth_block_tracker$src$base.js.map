{
"version":3,
"file":"module$node_modules$eth_block_tracker$src$base.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/eth-block-tracker/src/base.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$eth_block_tracker$src$base\"] = function(global,require,module,exports) {\nconst EthQuery = require('eth-query')\nconst pify = require('pify')\nconst SafeEventEmitter = require('safe-event-emitter')\n\nconst sec = 1000\n\nconst calculateSum = (accumulator, currentValue) => accumulator + currentValue\nconst blockTrackerEvents = ['sync', 'latest']\n\nclass BaseBlockTracker extends SafeEventEmitter {\n\n  //\n  // public\n  //\n\n  constructor (opts = {}) {\n    super()\n    // config\n    this._blockResetDuration = opts.blockResetDuration || 20 * sec\n    // state\n    this._blockResetTimeout\n    this._currentBlock = null\n    this._isRunning = false\n    // bind functions for internal use\n    this._onNewListener = this._onNewListener.bind(this)\n    this._onRemoveListener = this._onRemoveListener.bind(this)\n    this._resetCurrentBlock = this._resetCurrentBlock.bind(this)\n    // listen for handler changes\n    this._setupInternalEvents()\n  }\n\n  isRunning () {\n    return this._isRunning\n  }\n\n  getCurrentBlock () {\n    return this._currentBlock\n  }\n\n  async getLatestBlock () {\n    // return if available\n    if (this._currentBlock) return this._currentBlock\n    // wait for a new latest block\n    const latestBlock = await new Promise(resolve => this.once('latest', resolve))\n    // return newly set current block\n    return latestBlock\n  }\n\n  // dont allow module consumer to remove our internal event listeners\n  removeAllListeners (eventName) {\n    // perform default behavior, preserve fn arity\n    if (eventName) {\n      super.removeAllListeners(eventName)\n    } else {\n      super.removeAllListeners()\n    }\n    // re-add internal events\n    this._setupInternalEvents()\n    // trigger stop check just in case\n    this._onRemoveListener()\n  }\n\n  //\n  // to be implemented in subclass\n  //\n\n  _start () {\n    // default behavior is noop\n  }\n\n  _end () {\n    // default behavior is noop\n  }\n\n  //\n  // private\n  //\n\n  _setupInternalEvents () {\n    // first remove listeners for idempotence\n    this.removeListener('newListener', this._onNewListener)\n    this.removeListener('removeListener', this._onRemoveListener)\n    // then add them\n    this.on('newListener', this._onNewListener)\n    this.on('removeListener', this._onRemoveListener)\n  }\n\n  _onNewListener (eventName, handler) {\n    // `newListener` is called *before* the listener is added\n    if (!blockTrackerEvents.includes(eventName)) return\n    this._maybeStart()\n  }\n\n  _onRemoveListener (eventName, handler) {\n    // `removeListener` is called *after* the listener is removed\n    if (this._getBlockTrackerEventCount() > 0) return\n    this._maybeEnd()\n  }\n\n  _maybeStart () {\n    if (this._isRunning) return\n    this._isRunning = true\n    // cancel setting latest block to stale\n    this._cancelBlockResetTimeout()\n    this._start()\n  }\n\n  _maybeEnd () {\n    if (!this._isRunning) return\n    this._isRunning = false\n    this._setupBlockResetTimeout()\n    this._end()\n  }\n\n  _getBlockTrackerEventCount () {\n    return blockTrackerEvents\n      .map(eventName => this.listenerCount(eventName))\n      .reduce(calculateSum)\n  }\n\n  _newPotentialLatest (newBlock) {\n    const currentBlock = this._currentBlock\n    // only update if blok number is higher\n    if (currentBlock && (hexToInt(newBlock) <= hexToInt(currentBlock))) return\n    this._setCurrentBlock(newBlock)\n  }\n\n  _setCurrentBlock (newBlock) {\n    const oldBlock = this._currentBlock\n    this._currentBlock = newBlock\n    this.emit('latest', newBlock)\n    this.emit('sync', { oldBlock, newBlock })\n  }\n\n  _setupBlockResetTimeout () {\n    // clear any existing timeout\n    this._cancelBlockResetTimeout()\n    // clear latest block when stale\n    this._blockResetTimeout = setTimeout(this._resetCurrentBlock, this._blockResetDuration)\n    // nodejs - dont hold process open\n    if (this._blockResetTimeout.unref) {\n      this._blockResetTimeout.unref()\n    }\n  }\n\n  _cancelBlockResetTimeout () {\n    clearTimeout(this._blockResetTimeout)\n  }\n\n  _resetCurrentBlock () {\n    this._currentBlock = null\n  }\n\n}\n\nmodule.exports = BaseBlockTracker\n\nfunction hexToInt(hexInt) {\n  return Number.parseInt(hexInt, 16)\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","SafeEventEmitter","calculateSum","accumulator","currentValue","blockTrackerEvents","BaseBlockTracker","constructor","opts","_blockResetDuration","blockResetDuration","_blockResetTimeout","_currentBlock","_isRunning","_onNewListener","bind","_onRemoveListener","_resetCurrentBlock","_setupInternalEvents","isRunning","getCurrentBlock","getLatestBlock","latestBlock","Promise","resolve","once","removeAllListeners","eventName","_start","_end","removeListener","on","handler","includes","_maybeStart","_getBlockTrackerEventCount","_maybeEnd","_cancelBlockResetTimeout","_setupBlockResetTimeout","map","listenerCount","reduce","_newPotentialLatest","newBlock","currentBlock","Number","parseInt","_setCurrentBlock","oldBlock","emit","setTimeout","unref","clearTimeout"]
}
