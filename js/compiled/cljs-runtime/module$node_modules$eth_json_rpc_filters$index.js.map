{
"version":3,
"file":"module$node_modules$eth_json_rpc_filters$index.js",
"lineCount":9,
"mappings":"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",
"sources":["node_modules/eth-json-rpc-filters/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$eth_json_rpc_filters$index\"] = function(global,require,module,exports) {\nconst Mutex = require('await-semaphore').Mutex\nconst createAsyncMiddleware = require('json-rpc-engine/src/createAsyncMiddleware')\nconst createJsonRpcMiddleware = require('eth-json-rpc-middleware/scaffold')\nconst LogFilter = require('./log-filter.js')\nconst BlockFilter = require('./block-filter.js')\nconst TxFilter = require('./tx-filter.js')\nconst { intToHex, hexToInt } = require('./hexUtils')\n\nmodule.exports = createEthFilterMiddleware\n\nfunction createEthFilterMiddleware({ blockTracker, provider }) {\n\n  // create filter collection\n  let filterIndex = 0\n  let filters = {}\n  // create update mutex\n  const mutex = new Mutex()\n  const waitForFree = mutexMiddlewareWrapper({ mutex })\n\n  const middleware = createJsonRpcMiddleware({\n    // install filters\n    eth_newFilter:                   waitForFree(toFilterCreationMiddleware(newLogFilter)),\n    eth_newBlockFilter:              waitForFree(toFilterCreationMiddleware(newBlockFilter)),\n    eth_newPendingTransactionFilter: waitForFree(toFilterCreationMiddleware(newPendingTransactionFilter)),\n    // uninstall filters\n    eth_uninstallFilter:             waitForFree(toAsyncRpcMiddleware(uninstallFilterHandler)),\n    // checking filter changes\n    eth_getFilterChanges:            waitForFree(toAsyncRpcMiddleware(getFilterChanges)),\n    eth_getFilterLogs:               waitForFree(toAsyncRpcMiddleware(getFilterLogs)),\n  })\n\n  // setup filter updating and destroy handler\n  const filterUpdater = async ({ oldBlock, newBlock }) => {\n    if (filters.length === 0) return\n    // lock update reads\n    const releaseLock = await mutex.acquire()\n    try {\n      // process all filters in parallel\n      await Promise.all(objValues(filters).map(async (filter) => {\n        try {\n         await filter.update({ oldBlock, newBlock })\n        } catch (err) {\n          // handle each error individually so filter update errors don't affect other filters\n          console.error(err)\n        }\n      }))\n    } catch (err) {\n      // log error so we don't skip the releaseLock\n      console.error(err)\n    }\n    // unlock update reads\n    releaseLock()\n  }\n\n  // expose filter methods directly\n  middleware.newLogFilter = newLogFilter\n  middleware.newBlockFilter = newBlockFilter\n  middleware.newPendingTransactionFilter = newPendingTransactionFilter\n  middleware.uninstallFilter = uninstallFilterHandler\n  middleware.getFilterChanges = getFilterChanges\n  middleware.getFilterLogs = getFilterLogs\n\n  // expose destroy method for cleanup\n  middleware.destroy = () => {\n    uninstallAllFilters()\n  }\n\n  return middleware\n\n  //\n  // new filters\n  //\n\n  async function newLogFilter(params) {\n    const filter = new LogFilter({ provider, params })\n    const filterIndex = await installFilter(filter)\n    return filter\n  }\n\n  async function newBlockFilter() {\n    const filter = new BlockFilter({ provider })\n    const filterIndex = await installFilter(filter)\n    return filter\n  }\n\n  async function newPendingTransactionFilter() {\n    const filter = new TxFilter({ provider })\n    const filterIndex = await installFilter(filter)\n    return filter\n  }\n\n  //\n  // get filter changes\n  //\n\n  async function getFilterChanges(filterIndexHex) {\n    const filterIndex = hexToInt(filterIndexHex)\n    const filter = filters[filterIndex]\n    if (!filter) {\n      throw new Error(`No filter for index \"${filterIndex}\"`)\n    }\n    const results = filter.getChangesAndClear()\n    return results\n  }\n\n  async function getFilterLogs(filterIndexHex) {\n    const filterIndex = hexToInt(filterIndexHex)\n    const filter = filters[filterIndex]\n    if (!filter) {\n      throw new Error(`No filter for index \"${filterIndex}\"`)\n    }\n    // only return results for log filters\n    if (filter.type === 'log') {\n      results = filter.getAllResults()\n    } else {\n      results = []\n    }\n    return results\n  }\n\n\n  //\n  // remove filters\n  //\n\n\n  async function uninstallFilterHandler(filterIndexHex) {\n    // check filter exists\n    const filterIndex = hexToInt(filterIndexHex)\n    const filter = filters[filterIndex]\n    const result = Boolean(filter)\n    // uninstall filter\n    if (result) {\n      await uninstallFilter(filterIndex)\n    }\n    return result\n  }\n\n  //\n  // utils\n  //\n\n  async function installFilter(filter) {\n    const prevFilterCount = objValues(filters).length\n    // install filter\n    const currentBlock = await blockTracker.getLatestBlock()\n    await filter.initialize({ currentBlock })\n    filterIndex++\n    filters[filterIndex] = filter\n    filter.id = filterIndex\n    filter.idHex = intToHex(filterIndex)\n    // update block tracker subs\n    const newFilterCount = objValues(filters).length\n    updateBlockTrackerSubs({ prevFilterCount, newFilterCount })\n    return filterIndex\n  }\n\n  async function uninstallFilter(filterIndex) {\n    const prevFilterCount = objValues(filters).length\n    delete filters[filterIndex]\n    // update block tracker subs\n    const newFilterCount = objValues(filters).length\n    updateBlockTrackerSubs({ prevFilterCount, newFilterCount })\n  }\n\n  async function uninstallAllFilters() {\n    const prevFilterCount = objValues(filters).length\n    filters = {}\n    // update block tracker subs\n    updateBlockTrackerSubs({ prevFilterCount, newFilterCount: 0 })\n  }\n\n  function updateBlockTrackerSubs({ prevFilterCount, newFilterCount }) {\n    // subscribe\n    if (prevFilterCount === 0 && newFilterCount > 0) {\n      blockTracker.on('sync', filterUpdater)\n      return\n    }\n    // unsubscribe\n    if (prevFilterCount > 0 && newFilterCount === 0) {\n      blockTracker.removeListener('sync', filterUpdater)\n      return\n    }\n  }\n\n}\n\n// helper for turning filter constructors into rpc middleware\nfunction toFilterCreationMiddleware(createFilterFn) {\n  return toAsyncRpcMiddleware(async (...args) => {\n    const filter = await createFilterFn(...args)\n    const result = intToHex(filter.id)\n    return result\n  })\n}\n\n// helper for pulling out req.params and setting res.result\nfunction toAsyncRpcMiddleware(asyncFn) {\n  return createAsyncMiddleware(async (req, res) => {\n    const result = await asyncFn.apply(null, req.params)\n    res.result = result\n  })\n}\n\nfunction mutexMiddlewareWrapper({ mutex }) {\n  return (middleware) => {\n    return async (req, res, next, end) => {\n      // wait for mutex available\n      // we can release immediately because\n      // we just need to make sure updates aren't active\n      const releaseLock = await mutex.acquire()\n      releaseLock()\n      middleware(req, res, next, end)\n    }\n  }\n}\n\nfunction objValues(obj, fn){\n  const values = []\n  for (let key in obj) {\n    values.push(obj[key])\n  }\n  return values\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","toFilterCreationMiddleware","createFilterFn","toAsyncRpcMiddleware","args","filter","intToHex","result","id","asyncFn","createAsyncMiddleware","req","res","apply","params","mutexMiddlewareWrapper","mutex","middleware","next","end","releaseLock","acquire","objValues","obj","fn","values","key","push","Mutex","createJsonRpcMiddleware","LogFilter","BlockFilter","TxFilter","hexToInt","createEthFilterMiddleware","blockTracker","provider","newLogFilter","installFilter","newBlockFilter","newPendingTransactionFilter","getFilterChanges","filterIndexHex","filterIndex","filters","Error","results","getChangesAndClear","getFilterLogs","type","getAllResults","uninstallFilterHandler","uninstallFilter","prevFilterCount","length","currentBlock","getLatestBlock","initialize","idHex","newFilterCount","updateBlockTrackerSubs","uninstallAllFilters","on","filterUpdater","removeListener","waitForFree","eth_newFilter","eth_newBlockFilter","eth_newPendingTransactionFilter","eth_uninstallFilter","eth_getFilterChanges","eth_getFilterLogs","oldBlock","newBlock","Promise","all","map","update","err","console","error","destroy","middleware.destroy"]
}
