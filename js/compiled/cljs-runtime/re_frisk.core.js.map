{"version":3,"sources":["re_frisk/core.cljs"],"mappings":"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","names":["js/re-frisk","js/re-frisk.core","js/re-frisk.core.initialized","re-frisk.core/initialized","cljs.core.atom","js/re-frisk.core.prev-event","re-frisk.core/prev-event","js/re-frisk.core.re-frame-data","re-frisk.core/re-frame-data","reagent.core.atom","re-frisk.core/update-db-and-subs","cljs.core/reset!","re-frisk.utils/get-subs","cljs.core/deref","re-frame.db/app-db","re-frisk.core/trace-cb","traces","re-frisk.db/tool-state","ignore-events","cljs.core.get_in","normalized","re-frisk.trace/normalize-traces","first-event","or__4126__auto__","cljs.core/first","cljs.core.swap_BANG_","cljs.core/concat","cljs.core.map","re-frisk.trace/normalize-durations","re-frisk.subs-graph/update-subs","cljs.core.filter","re-frisk.utils/call-and-chill","re-frisk.core/post-event-callback","value","queue","app-db","indx","cljs.core/count","diff","re-frisk.diff.diff/diff","cljs.core/not","cljs.core.get","cljs.core/conj","re-frisk.utils/truncate-name","re-frisk.core/find-error-trace","re-frisk.core/register-exception-handler","gOldOnError","js/window.onerror","error-msg","url","line-number","cljs.core.merge","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","re-frisk.core/enable-re-frisk!","p__63974","vec__63977","cljs.core.nth","seq63963","self__4724__auto__","cljs.core/seq","opts","cljs.core/assoc","re-frame.trace/is-trace-enabled?","re-frame.trace/register-trace-cb","cljs.core._EQ_","re_frame.core.add_post_event_callback","re-frisk.subs-graph/set-root-node","re-frame.interop/reagent-id","js/setTimeout","re-frisk.ui/mount-internal","re-frisk.core/enable","p__63998","vec__63999","seq63988","re_frisk.core.enable_re_frisk_BANG_"],"sourcesContent":["(ns re-frisk.core\n  (:require [re-frame.core :as re-frame]\n            [re-frame.db :as db]\n            [re-frisk.db :as data]\n            [re-frisk.ui :as ui]\n            [re-frisk.diff.diff :as diff]\n            [reagent.core :as reagent]\n            [re-frisk.utils :as utils]\n            [re-frame.trace]\n            [re-frisk.trace :as trace]\n            [re-frisk.subs-graph :as subs-graph]\n            [re-frame.interop :as interop]))\n\n(defonce initialized (atom false))\n(defonce prev-event (atom {}))\n\n(defonce re-frame-data\n         {:app-db (reagent/atom \"not connected\")\n          :events (reagent/atom [])\n          :subs   (reagent/atom \"not connected\")})\n\n(defn update-db-and-subs []\n  ;;we need to deref all subscriptions, overwise they won't be deactivated\n  (reset! (:subs re-frame-data) (utils/get-subs))\n  (reset! (:app-db re-frame-data) @db/app-db))\n\n(defn trace-cb [traces]\n  (when-not (:paused? @data/tool-state)\n    (let [ignore-events (get-in @data/tool-state [:opts :ignore-events])\n          normalized  (trace/normalize-traces traces ignore-events)\n          first-event (or (first @(:events re-frame-data)) (first normalized))]\n      (swap! (:events re-frame-data)\n             concat\n             (map (trace/normalize-durations first-event)\n                  normalized))\n      (subs-graph/update-subs (filter :subs? normalized))\n      (utils/call-and-chill update-db-and-subs 500))))\n\n(defn- post-event-callback [value queue]\n  (when-not (:paused? @data/tool-state)\n    (let [ignore-events (get-in @data/tool-state [:opts :ignore-events])\n          app-db @db/app-db\n          indx   (count @(:events re-frame-data))\n          ;;This diff may be expensive\n          diff   (diff/diff (:app-db @prev-event) app-db)]\n      (reset! prev-event {:app-db app-db})\n      (when (or (not ignore-events) (not (get ignore-events (first value))))\n        (swap! (:events re-frame-data) conj {:event          value\n                                             :app-db-diff    diff\n                                             :indx           indx\n                                             :queue          queue\n                                             :truncated-name (utils/truncate-name (str (first value)))}))\n      (utils/call-and-chill update-db-and-subs 500))))\n\n(defn find-error-trace []\n  #_(select-keys\n     (:trace\n      (reduce (fn [acc {:keys [operation] :as trace}]\n                (cond-> (assoc acc :prev trace)\n                        (and (vector? operation) (= (last operation) :exception))\n                        (assoc :trace (:prev acc))))\n              {}\n              @re-frame.trace/traces))\n     [:operation :op-type]))\n\n(defn register-exception-handler []\n  (let [gOldOnError js/window.onerror]\n    (set! js/window.onerror\n          (fn [error-msg url line-number]\n            (swap! (:events re-frame-data)\n                   concat\n                   [{:event          [:exception]\n                     :truncated-name :exception\n                     :error?         true\n                     :indx           (count @(:events re-frame-data))\n                     :error          (merge\n                                      (find-error-trace)\n                                      {:msg  error-msg\n                                       :url  url\n                                       :line line-number})}])\n            (if gOldOnError\n              (gOldOnError error-msg url line-number)\n              false)))))\n\n(defn enable-re-frisk! [& [opts]]\n  (when-not @initialized\n    (reset! initialized true)\n    (swap! data/tool-state assoc :opts opts)\n    #_(register-exception-handler)\n    (if (re-frame.trace/is-trace-enabled?)\n      (do\n        #_(patch-reagent!)\n        (re-frame.trace/register-trace-cb :re-frisk-trace trace-cb))\n      (when-not (= (:events? opts) false)\n        (reset! prev-event {:app-db @db/app-db})\n        (re-frame/add-post-event-callback post-event-callback)))\n    (subs-graph/set-root-node (interop/reagent-id db/app-db))\n    (js/setTimeout ui/mount-internal 100 re-frame-data)))\n\n(defn enable [& [opts]]\n  (enable-re-frisk! opts))"]}