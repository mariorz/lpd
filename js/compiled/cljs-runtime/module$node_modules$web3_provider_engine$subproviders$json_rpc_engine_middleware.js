shadow$provide.module$node_modules$web3_provider_engine$subproviders$json_rpc_engine_middleware=function(global,require,module,exports){global=require("module$node_modules$web3_provider_engine$subproviders$subprovider");class JsonRpcEngineMiddlewareSubprovider extends global{constructor(constructorFn){super();if(!constructorFn)throw Error("JsonRpcEngineMiddlewareSubprovider - no constructorFn specified");this._constructorFn=constructorFn}setEngine(engine){if(this.middleware)throw Error("JsonRpcEngineMiddlewareSubprovider - subprovider added to engine twice");
engine=this._constructorFn({engine,provider:engine,blockTracker:engine._blockTracker});if(!engine)throw Error("JsonRpcEngineMiddlewareSubprovider - _constructorFn did not return middleware");if("function"!==typeof engine)throw Error("JsonRpcEngineMiddlewareSubprovider - specified middleware is not a function");this.middleware=engine}handleRequest(req,provEngNext,provEngEnd){const res={id:req.id};this.middleware(req,res,function(handler){provEngNext((err,result,cb)=>{err?(delete res.result,res.error=
{message:err.message||err}):res.result=result;handler?handler(cb):cb()})},function(err){if(err)return provEngEnd(err);provEngEnd(null,res.result)})}}module.exports=JsonRpcEngineMiddlewareSubprovider}
//# sourceMappingURL=module$node_modules$web3_provider_engine$subproviders$json_rpc_engine_middleware.js.map
