shadow$provide.module$node_modules$qrcode$lib$core$polynomial=function(global,require,module,exports){var BufferUtil=require("module$node_modules$qrcode$lib$utils$typedarray_buffer"),GF=require("module$node_modules$qrcode$lib$core$galois_field");exports.mul=function(p1,p2){for(var coeff=BufferUtil.alloc(p1.length+p2.length-1),i=0;i<p1.length;i++)for(var j=0;j<p2.length;j++)coeff[i+j]^=GF.mul(p1[i],p2[j]);return coeff};exports.mod=function(divident,divisor){for(divident=BufferUtil.from(divident);0<=
divident.length-divisor.length;){for(var coeff=divident[0],i=0;i<divisor.length;i++)divident[i]^=GF.mul(divisor[i],coeff);for(coeff=0;coeff<divident.length&&0===divident[coeff];)coeff++;divident=divident.slice(coeff)}return divident};exports.generateECPolynomial=function(degree){for(var poly=BufferUtil.from([1]),i=0;i<degree;i++)poly=exports.mul(poly,[1,GF.exp(i)]);return poly}}
//# sourceMappingURL=module$node_modules$qrcode$lib$core$polynomial.js.map
